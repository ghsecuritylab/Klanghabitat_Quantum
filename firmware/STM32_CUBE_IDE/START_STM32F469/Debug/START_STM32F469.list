
START_STM32F469.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec24  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d38  0800edd8  0800edd8  0001edd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b10  08010b10  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010b10  08010b10  00020b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b18  08010b18  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b18  08010b18  00020b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b1c  08010b1c  00020b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010b20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002560  200001fc  08010d1c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000275c  08010d1c  0003275c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034dca  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000640d  00000000  00000000  00064ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002828  00000000  00000000  0006b408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002558  00000000  00000000  0006dc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000341bb  00000000  00000000  00070188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026448  00000000  00000000  000a4343  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011593b  00000000  00000000  000ca78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e00c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab20  00000000  00000000  001e0144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	200001fc 	.word	0x200001fc
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800edc0 	.word	0x0800edc0

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000200 	.word	0x20000200
 80001f0:	0800edc0 	.word	0x0800edc0

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80004fe:	49be      	ldr	r1, [pc, #760]	; (80007f8 <OTM8009A_Init+0x304>)
 8000500:	2000      	movs	r0, #0
 8000502:	f000 fc3b 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000506:	49bd      	ldr	r1, [pc, #756]	; (80007fc <OTM8009A_Init+0x308>)
 8000508:	2003      	movs	r0, #3
 800050a:	f000 fc37 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800050e:	49bc      	ldr	r1, [pc, #752]	; (8000800 <OTM8009A_Init+0x30c>)
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fc33 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000516:	49bb      	ldr	r1, [pc, #748]	; (8000804 <OTM8009A_Init+0x310>)
 8000518:	2002      	movs	r0, #2
 800051a:	f000 fc2f 	bl	8000d7c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800051e:	49b8      	ldr	r1, [pc, #736]	; (8000800 <OTM8009A_Init+0x30c>)
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fc2b 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000526:	49b8      	ldr	r1, [pc, #736]	; (8000808 <OTM8009A_Init+0x314>)
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fc27 	bl	8000d7c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800052e:	200a      	movs	r0, #10
 8000530:	f000 fa36 	bl	80009a0 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000534:	49b5      	ldr	r1, [pc, #724]	; (800080c <OTM8009A_Init+0x318>)
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fc20 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 800053c:	49b4      	ldr	r1, [pc, #720]	; (8000810 <OTM8009A_Init+0x31c>)
 800053e:	2000      	movs	r0, #0
 8000540:	f000 fc1c 	bl	8000d7c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000544:	200a      	movs	r0, #10
 8000546:	f000 fa2b 	bl	80009a0 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800054a:	49b2      	ldr	r1, [pc, #712]	; (8000814 <OTM8009A_Init+0x320>)
 800054c:	2000      	movs	r0, #0
 800054e:	f000 fc15 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000552:	49b1      	ldr	r1, [pc, #708]	; (8000818 <OTM8009A_Init+0x324>)
 8000554:	2000      	movs	r0, #0
 8000556:	f000 fc11 	bl	8000d7c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800055a:	49b0      	ldr	r1, [pc, #704]	; (800081c <OTM8009A_Init+0x328>)
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fc0d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000562:	49af      	ldr	r1, [pc, #700]	; (8000820 <OTM8009A_Init+0x32c>)
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fc09 	bl	8000d7c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800056a:	49ae      	ldr	r1, [pc, #696]	; (8000824 <OTM8009A_Init+0x330>)
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fc05 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000572:	49ad      	ldr	r1, [pc, #692]	; (8000828 <OTM8009A_Init+0x334>)
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fc01 	bl	8000d7c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800057a:	499f      	ldr	r1, [pc, #636]	; (80007f8 <OTM8009A_Init+0x304>)
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fbfd 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000582:	49aa      	ldr	r1, [pc, #680]	; (800082c <OTM8009A_Init+0x338>)
 8000584:	2000      	movs	r0, #0
 8000586:	f000 fbf9 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800058a:	49a9      	ldr	r1, [pc, #676]	; (8000830 <OTM8009A_Init+0x33c>)
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fbf5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000592:	49a8      	ldr	r1, [pc, #672]	; (8000834 <OTM8009A_Init+0x340>)
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fbf1 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800059a:	49a7      	ldr	r1, [pc, #668]	; (8000838 <OTM8009A_Init+0x344>)
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fbed 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80005a2:	49a6      	ldr	r1, [pc, #664]	; (800083c <OTM8009A_Init+0x348>)
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 fbe9 	bl	8000d7c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80005aa:	49a5      	ldr	r1, [pc, #660]	; (8000840 <OTM8009A_Init+0x34c>)
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fbe5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80005b2:	49a4      	ldr	r1, [pc, #656]	; (8000844 <OTM8009A_Init+0x350>)
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fbe1 	bl	8000d7c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80005ba:	49a3      	ldr	r1, [pc, #652]	; (8000848 <OTM8009A_Init+0x354>)
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fbdd 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80005c2:	4997      	ldr	r1, [pc, #604]	; (8000820 <OTM8009A_Init+0x32c>)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fbd9 	bl	8000d7c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80005ca:	498b      	ldr	r1, [pc, #556]	; (80007f8 <OTM8009A_Init+0x304>)
 80005cc:	2000      	movs	r0, #0
 80005ce:	f000 fbd5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80005d2:	499e      	ldr	r1, [pc, #632]	; (800084c <OTM8009A_Init+0x358>)
 80005d4:	2002      	movs	r0, #2
 80005d6:	f000 fbd1 	bl	8000d7c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80005da:	499d      	ldr	r1, [pc, #628]	; (8000850 <OTM8009A_Init+0x35c>)
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fbcd 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80005e2:	499c      	ldr	r1, [pc, #624]	; (8000854 <OTM8009A_Init+0x360>)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fbc9 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80005ea:	499b      	ldr	r1, [pc, #620]	; (8000858 <OTM8009A_Init+0x364>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fbc5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80005f2:	499a      	ldr	r1, [pc, #616]	; (800085c <OTM8009A_Init+0x368>)
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fbc1 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80005fa:	4999      	ldr	r1, [pc, #612]	; (8000860 <OTM8009A_Init+0x36c>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fbbd 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000602:	4998      	ldr	r1, [pc, #608]	; (8000864 <OTM8009A_Init+0x370>)
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fbb9 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800060a:	4989      	ldr	r1, [pc, #548]	; (8000830 <OTM8009A_Init+0x33c>)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fbb5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000612:	4995      	ldr	r1, [pc, #596]	; (8000868 <OTM8009A_Init+0x374>)
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fbb1 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800061a:	4987      	ldr	r1, [pc, #540]	; (8000838 <OTM8009A_Init+0x344>)
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fbad 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000622:	4992      	ldr	r1, [pc, #584]	; (800086c <OTM8009A_Init+0x378>)
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fba9 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800062a:	4991      	ldr	r1, [pc, #580]	; (8000870 <OTM8009A_Init+0x37c>)
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fba5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8000632:	4990      	ldr	r1, [pc, #576]	; (8000874 <OTM8009A_Init+0x380>)
 8000634:	2002      	movs	r0, #2
 8000636:	f000 fba1 	bl	8000d7c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800063a:	4971      	ldr	r1, [pc, #452]	; (8000800 <OTM8009A_Init+0x30c>)
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fb9d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8000642:	498d      	ldr	r1, [pc, #564]	; (8000878 <OTM8009A_Init+0x384>)
 8000644:	2006      	movs	r0, #6
 8000646:	f000 fb99 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800064a:	498c      	ldr	r1, [pc, #560]	; (800087c <OTM8009A_Init+0x388>)
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fb95 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000652:	498b      	ldr	r1, [pc, #556]	; (8000880 <OTM8009A_Init+0x38c>)
 8000654:	200e      	movs	r0, #14
 8000656:	f000 fb91 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800065a:	498a      	ldr	r1, [pc, #552]	; (8000884 <OTM8009A_Init+0x390>)
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fb8d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000662:	4989      	ldr	r1, [pc, #548]	; (8000888 <OTM8009A_Init+0x394>)
 8000664:	200e      	movs	r0, #14
 8000666:	f000 fb89 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800066a:	4988      	ldr	r1, [pc, #544]	; (800088c <OTM8009A_Init+0x398>)
 800066c:	2000      	movs	r0, #0
 800066e:	f000 fb85 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000672:	4987      	ldr	r1, [pc, #540]	; (8000890 <OTM8009A_Init+0x39c>)
 8000674:	200a      	movs	r0, #10
 8000676:	f000 fb81 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800067a:	4986      	ldr	r1, [pc, #536]	; (8000894 <OTM8009A_Init+0x3a0>)
 800067c:	2000      	movs	r0, #0
 800067e:	f000 fb7d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000682:	4985      	ldr	r1, [pc, #532]	; (8000898 <OTM8009A_Init+0x3a4>)
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fb79 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800068a:	495d      	ldr	r1, [pc, #372]	; (8000800 <OTM8009A_Init+0x30c>)
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fb75 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000692:	4982      	ldr	r1, [pc, #520]	; (800089c <OTM8009A_Init+0x3a8>)
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fb71 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800069a:	4981      	ldr	r1, [pc, #516]	; (80008a0 <OTM8009A_Init+0x3ac>)
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fb6d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80006a2:	4980      	ldr	r1, [pc, #512]	; (80008a4 <OTM8009A_Init+0x3b0>)
 80006a4:	200f      	movs	r0, #15
 80006a6:	f000 fb69 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80006aa:	4974      	ldr	r1, [pc, #464]	; (800087c <OTM8009A_Init+0x388>)
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fb65 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80006b2:	497d      	ldr	r1, [pc, #500]	; (80008a8 <OTM8009A_Init+0x3b4>)
 80006b4:	200f      	movs	r0, #15
 80006b6:	f000 fb61 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80006ba:	4972      	ldr	r1, [pc, #456]	; (8000884 <OTM8009A_Init+0x390>)
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fb5d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80006c2:	497a      	ldr	r1, [pc, #488]	; (80008ac <OTM8009A_Init+0x3b8>)
 80006c4:	200a      	movs	r0, #10
 80006c6:	f000 fb59 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80006ca:	4970      	ldr	r1, [pc, #448]	; (800088c <OTM8009A_Init+0x398>)
 80006cc:	2000      	movs	r0, #0
 80006ce:	f000 fb55 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80006d2:	4977      	ldr	r1, [pc, #476]	; (80008b0 <OTM8009A_Init+0x3bc>)
 80006d4:	200f      	movs	r0, #15
 80006d6:	f000 fb51 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80006da:	496e      	ldr	r1, [pc, #440]	; (8000894 <OTM8009A_Init+0x3a0>)
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fb4d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80006e2:	4974      	ldr	r1, [pc, #464]	; (80008b4 <OTM8009A_Init+0x3c0>)
 80006e4:	200f      	movs	r0, #15
 80006e6:	f000 fb49 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80006ea:	4973      	ldr	r1, [pc, #460]	; (80008b8 <OTM8009A_Init+0x3c4>)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 fb45 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80006f2:	4972      	ldr	r1, [pc, #456]	; (80008bc <OTM8009A_Init+0x3c8>)
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 fb41 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80006fa:	4971      	ldr	r1, [pc, #452]	; (80008c0 <OTM8009A_Init+0x3cc>)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fb3d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000702:	4970      	ldr	r1, [pc, #448]	; (80008c4 <OTM8009A_Init+0x3d0>)
 8000704:	200a      	movs	r0, #10
 8000706:	f000 fb39 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800070a:	493d      	ldr	r1, [pc, #244]	; (8000800 <OTM8009A_Init+0x30c>)
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fb35 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000712:	496d      	ldr	r1, [pc, #436]	; (80008c8 <OTM8009A_Init+0x3d4>)
 8000714:	200a      	movs	r0, #10
 8000716:	f000 fb31 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800071a:	4961      	ldr	r1, [pc, #388]	; (80008a0 <OTM8009A_Init+0x3ac>)
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fb2d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000722:	496a      	ldr	r1, [pc, #424]	; (80008cc <OTM8009A_Init+0x3d8>)
 8000724:	200f      	movs	r0, #15
 8000726:	f000 fb29 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800072a:	4954      	ldr	r1, [pc, #336]	; (800087c <OTM8009A_Init+0x388>)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fb25 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000732:	4967      	ldr	r1, [pc, #412]	; (80008d0 <OTM8009A_Init+0x3dc>)
 8000734:	200f      	movs	r0, #15
 8000736:	f000 fb21 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800073a:	4952      	ldr	r1, [pc, #328]	; (8000884 <OTM8009A_Init+0x390>)
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fb1d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000742:	4964      	ldr	r1, [pc, #400]	; (80008d4 <OTM8009A_Init+0x3e0>)
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fb19 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800074a:	4950      	ldr	r1, [pc, #320]	; (800088c <OTM8009A_Init+0x398>)
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fb15 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000752:	4961      	ldr	r1, [pc, #388]	; (80008d8 <OTM8009A_Init+0x3e4>)
 8000754:	200f      	movs	r0, #15
 8000756:	f000 fb11 	bl	8000d7c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800075a:	494e      	ldr	r1, [pc, #312]	; (8000894 <OTM8009A_Init+0x3a0>)
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fb0d 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000762:	495e      	ldr	r1, [pc, #376]	; (80008dc <OTM8009A_Init+0x3e8>)
 8000764:	200f      	movs	r0, #15
 8000766:	f000 fb09 	bl	8000d7c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800076a:	4931      	ldr	r1, [pc, #196]	; (8000830 <OTM8009A_Init+0x33c>)
 800076c:	2000      	movs	r0, #0
 800076e:	f000 fb05 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000772:	495b      	ldr	r1, [pc, #364]	; (80008e0 <OTM8009A_Init+0x3ec>)
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fb01 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800077a:	495a      	ldr	r1, [pc, #360]	; (80008e4 <OTM8009A_Init+0x3f0>)
 800077c:	2000      	movs	r0, #0
 800077e:	f000 fafd 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000782:	4959      	ldr	r1, [pc, #356]	; (80008e8 <OTM8009A_Init+0x3f4>)
 8000784:	2000      	movs	r0, #0
 8000786:	f000 faf9 	bl	8000d7c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800078a:	4958      	ldr	r1, [pc, #352]	; (80008ec <OTM8009A_Init+0x3f8>)
 800078c:	2000      	movs	r0, #0
 800078e:	f000 faf5 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000792:	4957      	ldr	r1, [pc, #348]	; (80008f0 <OTM8009A_Init+0x3fc>)
 8000794:	2000      	movs	r0, #0
 8000796:	f000 faf1 	bl	8000d7c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800079a:	4917      	ldr	r1, [pc, #92]	; (80007f8 <OTM8009A_Init+0x304>)
 800079c:	2000      	movs	r0, #0
 800079e:	f000 faed 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80007a2:	4954      	ldr	r1, [pc, #336]	; (80008f4 <OTM8009A_Init+0x400>)
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 fae9 	bl	8000d7c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007aa:	4913      	ldr	r1, [pc, #76]	; (80007f8 <OTM8009A_Init+0x304>)
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fae5 	bl	8000d7c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007b2:	4911      	ldr	r1, [pc, #68]	; (80007f8 <OTM8009A_Init+0x304>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fae1 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80007ba:	494f      	ldr	r1, [pc, #316]	; (80008f8 <OTM8009A_Init+0x404>)
 80007bc:	2010      	movs	r0, #16
 80007be:	f000 fadd 	bl	8000d7c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007c2:	490d      	ldr	r1, [pc, #52]	; (80007f8 <OTM8009A_Init+0x304>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f000 fad9 	bl	8000d7c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80007ca:	494c      	ldr	r1, [pc, #304]	; (80008fc <OTM8009A_Init+0x408>)
 80007cc:	2010      	movs	r0, #16
 80007ce:	f000 fad5 	bl	8000d7c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80007d2:	494b      	ldr	r1, [pc, #300]	; (8000900 <OTM8009A_Init+0x40c>)
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fad1 	bl	8000d7c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80007da:	2078      	movs	r0, #120	; 0x78
 80007dc:	f000 f8e0 	bl	80009a0 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 8090 	beq.w	8000908 <OTM8009A_Init+0x414>
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d000      	beq.n	80007ee <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 80007ec:	e091      	b.n	8000912 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80007ee:	4945      	ldr	r1, [pc, #276]	; (8000904 <OTM8009A_Init+0x410>)
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fac3 	bl	8000d7c <DSI_IO_WriteCmd>
    break;
 80007f6:	e08c      	b.n	8000912 <OTM8009A_Init+0x41e>
 80007f8:	0800ef58 	.word	0x0800ef58
 80007fc:	0800ee10 	.word	0x0800ee10
 8000800:	0800ef5c 	.word	0x0800ef5c
 8000804:	0800ee14 	.word	0x0800ee14
 8000808:	0800ef60 	.word	0x0800ef60
 800080c:	0800ef64 	.word	0x0800ef64
 8000810:	0800ef68 	.word	0x0800ef68
 8000814:	0800ef6c 	.word	0x0800ef6c
 8000818:	0800ef70 	.word	0x0800ef70
 800081c:	0800ef74 	.word	0x0800ef74
 8000820:	0800ef78 	.word	0x0800ef78
 8000824:	0800ef7c 	.word	0x0800ef7c
 8000828:	0800ef80 	.word	0x0800ef80
 800082c:	0800ef84 	.word	0x0800ef84
 8000830:	0800ef88 	.word	0x0800ef88
 8000834:	0800ef8c 	.word	0x0800ef8c
 8000838:	0800ef90 	.word	0x0800ef90
 800083c:	0800ef94 	.word	0x0800ef94
 8000840:	0800ef98 	.word	0x0800ef98
 8000844:	0800ef9c 	.word	0x0800ef9c
 8000848:	0800efa0 	.word	0x0800efa0
 800084c:	0800ee40 	.word	0x0800ee40
 8000850:	0800efa4 	.word	0x0800efa4
 8000854:	0800efa8 	.word	0x0800efa8
 8000858:	0800efac 	.word	0x0800efac
 800085c:	0800efb0 	.word	0x0800efb0
 8000860:	0800efb4 	.word	0x0800efb4
 8000864:	0800efb8 	.word	0x0800efb8
 8000868:	0800efbc 	.word	0x0800efbc
 800086c:	0800efc0 	.word	0x0800efc0
 8000870:	0800efc4 	.word	0x0800efc4
 8000874:	0800ee44 	.word	0x0800ee44
 8000878:	0800ee48 	.word	0x0800ee48
 800087c:	0800efc8 	.word	0x0800efc8
 8000880:	0800ee50 	.word	0x0800ee50
 8000884:	0800efcc 	.word	0x0800efcc
 8000888:	0800ee60 	.word	0x0800ee60
 800088c:	0800efd0 	.word	0x0800efd0
 8000890:	0800ee70 	.word	0x0800ee70
 8000894:	0800efd4 	.word	0x0800efd4
 8000898:	0800f00c 	.word	0x0800f00c
 800089c:	0800ee7c 	.word	0x0800ee7c
 80008a0:	0800efd8 	.word	0x0800efd8
 80008a4:	0800ee88 	.word	0x0800ee88
 80008a8:	0800ee98 	.word	0x0800ee98
 80008ac:	0800eea8 	.word	0x0800eea8
 80008b0:	0800eeb4 	.word	0x0800eeb4
 80008b4:	0800eec4 	.word	0x0800eec4
 80008b8:	0800efdc 	.word	0x0800efdc
 80008bc:	0800eed4 	.word	0x0800eed4
 80008c0:	0800efe0 	.word	0x0800efe0
 80008c4:	0800eee0 	.word	0x0800eee0
 80008c8:	0800eeec 	.word	0x0800eeec
 80008cc:	0800eef8 	.word	0x0800eef8
 80008d0:	0800ef08 	.word	0x0800ef08
 80008d4:	0800ef18 	.word	0x0800ef18
 80008d8:	0800ef24 	.word	0x0800ef24
 80008dc:	0800ef34 	.word	0x0800ef34
 80008e0:	0800f010 	.word	0x0800f010
 80008e4:	0800f014 	.word	0x0800f014
 80008e8:	0800f018 	.word	0x0800f018
 80008ec:	0800f01c 	.word	0x0800f01c
 80008f0:	0800f020 	.word	0x0800f020
 80008f4:	0800ef44 	.word	0x0800ef44
 80008f8:	0800ee18 	.word	0x0800ee18
 80008fc:	0800ee2c 	.word	0x0800ee2c
 8000900:	0800efe4 	.word	0x0800efe4
 8000904:	0800efe8 	.word	0x0800efe8
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000908:	491a      	ldr	r1, [pc, #104]	; (8000974 <OTM8009A_Init+0x480>)
 800090a:	2000      	movs	r0, #0
 800090c:	f000 fa36 	bl	8000d7c <DSI_IO_WriteCmd>
    break;
 8000910:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10b      	bne.n	8000930 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000918:	4917      	ldr	r1, [pc, #92]	; (8000978 <OTM8009A_Init+0x484>)
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fa2e 	bl	8000d7c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000920:	4916      	ldr	r1, [pc, #88]	; (800097c <OTM8009A_Init+0x488>)
 8000922:	2004      	movs	r0, #4
 8000924:	f000 fa2a 	bl	8000d7c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000928:	4915      	ldr	r1, [pc, #84]	; (8000980 <OTM8009A_Init+0x48c>)
 800092a:	2004      	movs	r0, #4
 800092c:	f000 fa26 	bl	8000d7c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000930:	4914      	ldr	r1, [pc, #80]	; (8000984 <OTM8009A_Init+0x490>)
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fa22 	bl	8000d7c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000938:	4913      	ldr	r1, [pc, #76]	; (8000988 <OTM8009A_Init+0x494>)
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fa1e 	bl	8000d7c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000940:	4912      	ldr	r1, [pc, #72]	; (800098c <OTM8009A_Init+0x498>)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fa1a 	bl	8000d7c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000948:	4911      	ldr	r1, [pc, #68]	; (8000990 <OTM8009A_Init+0x49c>)
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fa16 	bl	8000d7c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000950:	4910      	ldr	r1, [pc, #64]	; (8000994 <OTM8009A_Init+0x4a0>)
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fa12 	bl	8000d7c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000958:	490f      	ldr	r1, [pc, #60]	; (8000998 <OTM8009A_Init+0x4a4>)
 800095a:	2000      	movs	r0, #0
 800095c:	f000 fa0e 	bl	8000d7c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000960:	490e      	ldr	r1, [pc, #56]	; (800099c <OTM8009A_Init+0x4a8>)
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fa0a 	bl	8000d7c <DSI_IO_WriteCmd>

  return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	0800efec 	.word	0x0800efec
 8000978:	0800eff0 	.word	0x0800eff0
 800097c:	0800ef48 	.word	0x0800ef48
 8000980:	0800ef50 	.word	0x0800ef50
 8000984:	0800eff4 	.word	0x0800eff4
 8000988:	0800eff8 	.word	0x0800eff8
 800098c:	0800effc 	.word	0x0800effc
 8000990:	0800f000 	.word	0x0800f000
 8000994:	0800f004 	.word	0x0800f004
 8000998:	0800ef58 	.word	0x0800ef58
 800099c:	0800f008 	.word	0x0800f008

080009a0 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 feb5 	bl	8001718 <HAL_Delay>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 f804 	bl	80009c8 <BSP_LCD_InitEx>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b096      	sub	sp, #88	; 0x58
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80009d2:	f646 3325 	movw	r3, #27429	; 0x6b25
 80009d6:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80009dc:	f000 f93e 	bl	8000c5c <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80009e0:	f000 f9f6 	bl	8000dd0 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 80009e4:	4b93      	ldr	r3, [pc, #588]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 80009e6:	4a94      	ldr	r2, [pc, #592]	; (8000c38 <BSP_LCD_InitEx+0x270>)
 80009e8:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 80009ea:	4892      	ldr	r0, [pc, #584]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 80009ec:	f001 fea2 	bl	8002734 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 80009f0:	237d      	movs	r3, #125	; 0x7d
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80009fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a02:	4b8c      	ldr	r3, [pc, #560]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a0a:	089b      	lsrs	r3, r3, #2
 8000a0c:	4a8b      	ldr	r2, [pc, #556]	; (8000c3c <BSP_LCD_InitEx+0x274>)
 8000a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a12:	0a9b      	lsrs	r3, r3, #10
 8000a14:	4a87      	ldr	r2, [pc, #540]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 8000a16:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4885      	ldr	r0, [pc, #532]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 8000a20:	f001 fd6e 	bl	8002500 <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d108      	bne.n	8000a3c <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000a2a:	4b85      	ldr	r3, [pc, #532]	; (8000c40 <BSP_LCD_InitEx+0x278>)
 8000a2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a30:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000a32:	4b84      	ldr	r3, [pc, #528]	; (8000c44 <BSP_LCD_InitEx+0x27c>)
 8000a34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e007      	b.n	8000a4c <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000a3c:	4b80      	ldr	r3, [pc, #512]	; (8000c40 <BSP_LCD_InitEx+0x278>)
 8000a3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000a42:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8000a44:	4b7f      	ldr	r3, [pc, #508]	; (8000c44 <BSP_LCD_InitEx+0x27c>)
 8000a46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a4a:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8000a4c:	4b7c      	ldr	r3, [pc, #496]	; (8000c40 <BSP_LCD_InitEx+0x278>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 8000a52:	4b7c      	ldr	r3, [pc, #496]	; (8000c44 <BSP_LCD_InitEx+0x27c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 8000a60:	2310      	movs	r3, #16
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 8000a64:	2302      	movs	r3, #2
 8000a66:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 8000a68:	2322      	movs	r3, #34	; 0x22
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 8000a6c:	2322      	movs	r3, #34	; 0x22
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8000a70:	4b75      	ldr	r3, [pc, #468]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000a76:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a78:	2205      	movs	r2, #5
 8000a7a:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000a7c:	4b72      	ldr	r3, [pc, #456]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8000a82:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000a88:	4b6f      	ldr	r3, [pc, #444]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000a8e:	4b6e      	ldr	r3, [pc, #440]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8000a94:	4b6c      	ldr	r3, [pc, #432]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a96:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a9a:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000aa2:	4a69      	ldr	r2, [pc, #420]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000aa6:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8000aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000aac:	fb02 f203 	mul.w	r2, r2, r3
 8000ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4a64      	ldr	r2, [pc, #400]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000ab8:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8000aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000abe:	fb02 f203 	mul.w	r2, r2, r3
 8000ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac8:	4a5f      	ldr	r2, [pc, #380]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000aca:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad0:	441a      	add	r2, r3
 8000ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad4:	441a      	add	r2, r3
 8000ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad8:	4413      	add	r3, r2
 8000ada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000adc:	fb02 f203 	mul.w	r2, r2, r3
 8000ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4a58      	ldr	r2, [pc, #352]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000aea:	4a57      	ldr	r2, [pc, #348]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aee:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000af0:	4a55      	ldr	r2, [pc, #340]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af4:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000af6:	4a54      	ldr	r2, [pc, #336]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000afa:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000afc:	4a52      	ldr	r2, [pc, #328]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000b02:	4b51      	ldr	r3, [pc, #324]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b08:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000b0a:	4b4f      	ldr	r3, [pc, #316]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b0c:	2210      	movs	r2, #16
 8000b0e:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000b10:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000b16:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1c:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2c:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000b2e:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b34:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000b36:	4b44      	ldr	r3, [pc, #272]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b44:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8000b46:	4940      	ldr	r1, [pc, #256]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 8000b4a:	f002 f833 	bl	8002bb4 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8000b4e:	2323      	movs	r3, #35	; 0x23
 8000b50:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8000b52:	2323      	movs	r3, #35	; 0x23
 8000b54:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 8000b56:	2323      	movs	r3, #35	; 0x23
 8000b58:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8000b5a:	2323      	movs	r3, #35	; 0x23
 8000b5c:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 8000b62:	230a      	movs	r3, #10
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4831      	ldr	r0, [pc, #196]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 8000b6e:	f002 fb87 	bl	8003280 <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8000b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b74:	3b01      	subs	r3, #1
 8000b76:	4a35      	ldr	r2, [pc, #212]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000b78:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7e:	4413      	add	r3, r2
 8000b80:	3b01      	subs	r3, #1
 8000b82:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000b84:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <BSP_LCD_InitEx+0x278>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b8c:	441a      	add	r2, r3
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	4413      	add	r3, r2
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000b96:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <BSP_LCD_InitEx+0x278>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b9e:	441a      	add	r2, r3
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba2:	441a      	add	r2, r3
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000bac:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <BSP_LCD_InitEx+0x278>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000bb4:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <BSP_LCD_InitEx+0x27c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a24      	ldr	r2, [pc, #144]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000bbc:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <BSP_LCD_InitEx+0x288>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <BSP_LCD_InitEx+0x288>)
 8000bc6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000bca:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <BSP_LCD_InitEx+0x288>)
 8000bce:	2207      	movs	r2, #7
 8000bd0:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <BSP_LCD_InitEx+0x288>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <BSP_LCD_InitEx+0x288>)
 8000bda:	f005 fa81 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <BSP_LCD_InitEx+0x28c>)
 8000c00:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8000c02:	4911      	ldr	r1, [pc, #68]	; (8000c48 <BSP_LCD_InitEx+0x280>)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000c06:	f003 fd04 	bl	8004612 <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <BSP_LCD_InitEx+0x284>)
 8000c0c:	f003 f99a 	bl	8003f44 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <BSP_LCD_InitEx+0x26c>)
 8000c12:	f002 fc65 	bl	80034e0 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000c16:	f000 fb59 	bl	80012cc <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000c1a:	480f      	ldr	r0, [pc, #60]	; (8000c58 <BSP_LCD_InitEx+0x290>)
 8000c1c:	f000 f86c 	bl	8000cf8 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4619      	mov	r1, r3
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fc65 	bl	80004f4 <OTM8009A_Init>
  
/***********************End OTM8009A Initialization****************************/ 
  
  return LCD_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000528 	.word	0x20000528
 8000c38:	40016c00 	.word	0x40016c00
 8000c3c:	43215e57 	.word	0x43215e57
 8000c40:	20000008 	.word	0x20000008
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000218 	.word	0x20000218
 8000c4c:	20000480 	.word	0x20000480
 8000c50:	200002a0 	.word	0x200002a0
 8000c54:	40016800 	.word	0x40016800
 8000c58:	20000000 	.word	0x20000000

08000c5c <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
/* EVAL Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <BSP_LCD_Reset+0x64>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <BSP_LCD_Reset+0x64>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <BSP_LCD_Reset+0x64>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8000c82:	2311      	movs	r3, #17
 8000c84:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <BSP_LCD_Reset+0x68>)
 8000c94:	f002 fd48 	bl	8003728 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <BSP_LCD_Reset+0x68>)
 8000c9e:	f003 f80f 	bl	8003cc0 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000ca2:	2014      	movs	r0, #20
 8000ca4:	f000 fd38 	bl	8001718 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <BSP_LCD_Reset+0x68>)
 8000cae:	f003 f807 	bl	8003cc0 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);    
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f000 fd30 	bl	8001718 <HAL_Delay>
#else
  
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40021c00 	.word	0x40021c00

08000cc8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <BSP_LCD_GetXSize+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <BSP_LCD_GetYSize+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000000c 	.word	0x2000000c

08000cf8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <BSP_LCD_SetFont+0x2c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4908      	ldr	r1, [pc, #32]	; (8000d28 <BSP_LCD_SetFont+0x30>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	3308      	adds	r3, #8
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000284 	.word	0x20000284
 8000d28:	20000288 	.word	0x20000288

08000d2c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <BSP_LCD_Clear+0x48>)
 8000d36:	681c      	ldr	r4, [r3, #0]
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <BSP_LCD_Clear+0x48>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <BSP_LCD_Clear+0x4c>)
 8000d3e:	2134      	movs	r1, #52	; 0x34
 8000d40:	fb01 f303 	mul.w	r3, r1, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	335c      	adds	r3, #92	; 0x5c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	f7ff ffbc 	bl	8000cc8 <BSP_LCD_GetXSize>
 8000d50:	4606      	mov	r6, r0
 8000d52:	f7ff ffc5 	bl	8000ce0 <BSP_LCD_GetYSize>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4613      	mov	r3, r2
 8000d62:	4632      	mov	r2, r6
 8000d64:	4629      	mov	r1, r5
 8000d66:	4620      	mov	r0, r4
 8000d68:	f000 f8a2 	bl	8000eb0 <LL_FillBuffer>
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d74:	20000284 	.word	0x20000284
 8000d78:	20000480 	.word	0x20000480

08000d7c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d80d      	bhi.n	8000da8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	2215      	movs	r2, #21
 8000d9e:	2100      	movs	r1, #0
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <DSI_IO_WriteCmd+0x50>)
 8000da2:	f002 fbd9 	bl	8003558 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8000da6:	e00d      	b.n	8000dc4 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2239      	movs	r2, #57	; 0x39
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <DSI_IO_WriteCmd+0x50>)
 8000dc0:	f002 fbec 	bl	800359c <HAL_DSI_LongWrite>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000528 	.word	0x20000528

08000dd0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b34      	ldr	r3, [pc, #208]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a33      	ldr	r2, [pc, #204]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	4a2d      	ldr	r2, [pc, #180]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000df8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dfc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e08:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	4a20      	ldr	r2, [pc, #128]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e30:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e3c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e64:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <BSP_LCD_MspInit+0xdc>)
 8000e6c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000e70:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2103      	movs	r1, #3
 8000e76:	2058      	movs	r0, #88	; 0x58
 8000e78:	f000 fd4a 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000e7c:	2058      	movs	r0, #88	; 0x58
 8000e7e:	f000 fd63 	bl	8001948 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2103      	movs	r1, #3
 8000e86:	205a      	movs	r0, #90	; 0x5a
 8000e88:	f000 fd42 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e8c:	205a      	movs	r0, #90	; 0x5a
 8000e8e:	f000 fd5b 	bl	8001948 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2103      	movs	r1, #3
 8000e96:	205c      	movs	r0, #92	; 0x5c
 8000e98:	f000 fd3a 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000e9c:	205c      	movs	r0, #92	; 0x5c
 8000e9e:	f000 fd53 	bl	8001948 <HAL_NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <LL_FillBuffer+0x68>)
 8000ec0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ec4:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <LL_FillBuffer+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <LL_FillBuffer+0x68>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <LL_FillBuffer+0x68>)
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <LL_FillBuffer+0x6c>)
 8000ed6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000ed8:	480f      	ldr	r0, [pc, #60]	; (8000f18 <LL_FillBuffer+0x68>)
 8000eda:	f000 ff2d 	bl	8001d38 <HAL_DMA2D_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d115      	bne.n	8000f10 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LL_FillBuffer+0x68>)
 8000ee8:	f001 f994 	bl	8002214 <HAL_DMA2D_ConfigLayer>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69f9      	ldr	r1, [r7, #28]
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <LL_FillBuffer+0x68>)
 8000efe:	f000 ff64 	bl	8001dca <HAL_DMA2D_Start>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d103      	bne.n	8000f10 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000f08:	210a      	movs	r1, #10
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <LL_FillBuffer+0x68>)
 8000f0c:	f000 ff88 	bl	8001e20 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000544 	.word	0x20000544
 8000f1c:	4002b000 	.word	0x4002b000

08000f20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]

  /* PLLSAI is dedicated to LCD periph. Do not use it to get 48MHz*/

  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <BSP_SD_Init+0x94>)
 8000f2e:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4e:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]

  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8000f56:	2100      	movs	r1, #0
 8000f58:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f5a:	f000 f96f 	bl	800123c <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8000f5e:	f000 f82b 	bl	8000fb8 <BSP_SD_IsDetected>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d001      	beq.n	8000f6c <BSP_SD_Init+0x4c>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e01c      	b.n	8000fa6 <BSP_SD_Init+0x86>
  }

  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f70:	f000 f870 	bl	8001054 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8000f74:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f76:	f005 ff53 	bl	8006e20 <HAL_SD_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <BSP_SD_Init+0x64>
  {
    sd_state = MSD_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <BSP_SD_Init+0x84>
  {
    /* Enable wide operation */
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000f8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <BSP_SD_Init+0x90>)
 8000f90:	f006 fd20 	bl	80079d4 <HAL_SD_ConfigWideBusOperation>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <BSP_SD_Init+0x80>
    {
      sd_state = MSD_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	e001      	b.n	8000fa4 <BSP_SD_Init+0x84>
    }
    else
    {
      sd_state = MSD_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return  sd_state;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000584 	.word	0x20000584
 8000fb4:	40012c00 	.word	0x40012c00

08000fb8 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  __IO uint8_t  status = SD_PRESENT;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]

  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <BSP_SD_IsDetected+0x28>)
 8000fc6:	f002 fe63 	bl	8003c90 <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  }

    return status;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b2db      	uxtb	r3, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021800 	.word	0x40021800

08000fe4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	4806      	ldr	r0, [pc, #24]	; (8001018 <BSP_SD_ReadBlocks+0x34>)
 8000ffe:	f005 ff97 	bl	8006f30 <HAL_SD_ReadBlocks>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <BSP_SD_ReadBlocks+0x28>
  {
    return MSD_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <BSP_SD_ReadBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 800100c:	2300      	movs	r3, #0
  }
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000584 	.word	0x20000584

0800101c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <BSP_SD_WriteBlocks+0x34>)
 8001036:	f006 f911 	bl	800725c <HAL_SD_WriteBlocks>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <BSP_SD_WriteBlocks+0x28>
  {
    return MSD_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <BSP_SD_WriteBlocks+0x2a>
  }
  else
  {
    return MSD_OK;
 8001044:	2300      	movs	r3, #0
  }
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000584 	.word	0x20000584

08001054 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	4b6f      	ldr	r3, [pc, #444]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a6e      	ldr	r2, [pc, #440]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 8001068:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	69bb      	ldr	r3, [r7, #24]

  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	4b68      	ldr	r3, [pc, #416]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a67      	ldr	r2, [pc, #412]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b61      	ldr	r3, [pc, #388]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a60      	ldr	r2, [pc, #384]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b5a      	ldr	r3, [pc, #360]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a59      	ldr	r2, [pc, #356]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <BSP_SD_MspInit+0x1cc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 80010da:	230c      	movs	r3, #12
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80010de:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010e2:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	484e      	ldr	r0, [pc, #312]	; (8001224 <BSP_SD_MspInit+0x1d0>)
 80010ec:	f002 fb1c 	bl	8003728 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 80010f0:	2304      	movs	r3, #4
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	484b      	ldr	r0, [pc, #300]	; (8001228 <BSP_SD_MspInit+0x1d4>)
 80010fc:	f002 fb14 	bl	8003728 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	210e      	movs	r1, #14
 8001104:	2031      	movs	r0, #49	; 0x31
 8001106:	f000 fc03 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800110a:	2031      	movs	r0, #49	; 0x31
 800110c:	f000 fc1c 	bl	8001948 <HAL_NVIC_EnableIRQ>

  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8001110:	4b46      	ldr	r3, [pc, #280]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <BSP_SD_MspInit+0x1d8>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112a:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <BSP_SD_MspInit+0x1d8>)
 800112e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001132:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113a:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <BSP_SD_MspInit+0x1d8>)
 800113e:	2220      	movs	r2, #32
 8001140:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001142:	4b3a      	ldr	r3, [pc, #232]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001144:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001148:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <BSP_SD_MspInit+0x1d8>)
 800114c:	2204      	movs	r2, #4
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001152:	2203      	movs	r2, #3
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001158:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001160:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001164:	631a      	str	r2, [r3, #48]	; 0x30

  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001168:	4a31      	ldr	r2, [pc, #196]	; (8001230 <BSP_SD_MspInit+0x1dc>)
 800116a:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a2f      	ldr	r2, [pc, #188]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001170:	63da      	str	r2, [r3, #60]	; 0x3c
 8001172:	4a2e      	ldr	r2, [pc, #184]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	; 0x38

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <BSP_SD_MspInit+0x1d8>)
 800117a:	f000 fccf 	bl	8001b1c <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <BSP_SD_MspInit+0x1d8>)
 8001180:	f000 fc1e 	bl	80019c0 <HAL_DMA_Init>

  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 8001186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118a:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 800119a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119e:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a6:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011b2:	2220      	movs	r2, #32
 80011b4:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011bc:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011c6:	2203      	movs	r2, #3
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30

  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011dc:	4a16      	ldr	r2, [pc, #88]	; (8001238 <BSP_SD_MspInit+0x1e4>)
 80011de:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6393      	str	r3, [r2, #56]	; 0x38

  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011ee:	f000 fc95 	bl	8001b1c <HAL_DMA_DeInit>

  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle);
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <BSP_SD_MspInit+0x1e0>)
 80011f4:	f000 fbe4 	bl	80019c0 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	210f      	movs	r1, #15
 80011fc:	203b      	movs	r0, #59	; 0x3b
 80011fe:	f000 fb87 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8001202:	203b      	movs	r0, #59	; 0x3b
 8001204:	f000 fba0 	bl	8001948 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	210f      	movs	r1, #15
 800120c:	2045      	movs	r0, #69	; 0x45
 800120e:	f000 fb7f 	bl	8001910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8001212:	2045      	movs	r0, #69	; 0x45
 8001214:	f000 fb98 	bl	8001948 <HAL_NVIC_EnableIRQ>
}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	200002dc 	.word	0x200002dc
 8001230:	40026458 	.word	0x40026458
 8001234:	2000033c 	.word	0x2000033c
 8001238:	400264a0 	.word	0x400264a0

0800123c <BSP_SD_Detect_MspInit>:
  * @brief  Initializes the SD Detect pin MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <BSP_SD_Detect_MspInit+0x4c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <BSP_SD_Detect_MspInit+0x4c>)
 8001250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <BSP_SD_Detect_MspInit+0x4c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8001262:	2304      	movs	r3, #4
 8001264:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800126a:	2301      	movs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <BSP_SD_Detect_MspInit+0x50>)
 800127a:	f002 fa55 	bl	8003728 <HAL_GPIO_Init>
}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40021800 	.word	0x40021800

08001290 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <BSP_SD_GetCardState+0x1c>)
 8001296:	f006 fc19 	bl	8007acc <HAL_SD_GetCardState>
 800129a:	4603      	mov	r3, r0
 800129c:	2b04      	cmp	r3, #4
 800129e:	bf14      	ite	ne
 80012a0:	2301      	movne	r3, #1
 80012a2:	2300      	moveq	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000584 	.word	0x20000584

080012b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4803      	ldr	r0, [pc, #12]	; (80012c8 <BSP_SD_GetCardInfo+0x18>)
 80012bc:	f006 fb5e 	bl	800797c <HAL_SD_GetCardInfo>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000584 	.word	0x20000584

080012cc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <BSP_SDRAM_Init+0xac>)
 80012d2:	4a2a      	ldr	r2, [pc, #168]	; (800137c <BSP_SDRAM_Init+0xb0>)
 80012d4:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012d8:	2202      	movs	r2, #2
 80012da:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012de:	2207      	movs	r2, #7
 80012e0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012ea:	2207      	movs	r2, #7
 80012ec:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012f6:	2202      	movs	r2, #2
 80012f8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <BSP_SDRAM_Init+0xac>)
 800130e:	2204      	movs	r2, #4
 8001310:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001314:	2220      	movs	r2, #32
 8001316:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <BSP_SDRAM_Init+0xac>)
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001320:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001324:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <BSP_SDRAM_Init+0xac>)
 800132e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001332:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <BSP_SDRAM_Init+0xac>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8001342:	2100      	movs	r1, #0
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <BSP_SDRAM_Init+0xac>)
 8001346:	f000 f87f 	bl	8001448 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800134a:	490d      	ldr	r1, [pc, #52]	; (8001380 <BSP_SDRAM_Init+0xb4>)
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <BSP_SDRAM_Init+0xac>)
 800134e:	f006 fee0 	bl	8008112 <HAL_SDRAM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <BSP_SDRAM_Init+0xb8>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e002      	b.n	8001366 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <BSP_SDRAM_Init+0xb8>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001366:	f240 5069 	movw	r0, #1385	; 0x569
 800136a:	f000 f80d 	bl	8001388 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <BSP_SDRAM_Init+0xb8>)
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000039c 	.word	0x2000039c
 800137c:	a0000140 	.word	0xa0000140
 8001380:	200003d0 	.word	0x200003d0
 8001384:	20000010 	.word	0x20000010

08001388 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800139c:	2210      	movs	r2, #16
 800139e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80013a0:	4b27      	ldr	r3, [pc, #156]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b0:	4923      	ldr	r1, [pc, #140]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013b2:	4824      	ldr	r0, [pc, #144]	; (8001444 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80013b4:	f006 fee1 	bl	800817a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f000 f9ad 	bl	8001718 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013c6:	2210      	movs	r2, #16
 80013c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	4919      	ldr	r1, [pc, #100]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013dc:	4819      	ldr	r0, [pc, #100]	; (8001444 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80013de:	f006 fecc 	bl	800817a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013ea:	2210      	movs	r2, #16
 80013ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4910      	ldr	r1, [pc, #64]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001402:	f006 feba 	bl	800817a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001406:	f44f 730c 	mov.w	r3, #560	; 0x230
 800140a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800140e:	2204      	movs	r2, #4
 8001410:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001414:	2210      	movs	r2, #16
 8001416:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800141a:	2201      	movs	r2, #1
 800141c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001422:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001428:	4905      	ldr	r1, [pc, #20]	; (8001440 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800142c:	f006 fea5 	bl	800817a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001434:	f006 fecc 	bl	80081d0 <HAL_SDRAM_ProgramRefreshRate>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003ec 	.word	0x200003ec
 8001444:	2000039c 	.word	0x2000039c

08001448 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b090      	sub	sp, #64	; 0x40
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8104 	beq.w	8001662 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
 800145e:	4b83      	ldr	r3, [pc, #524]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a82      	ldr	r2, [pc, #520]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6393      	str	r3, [r2, #56]	; 0x38
 800146a:	4b80      	ldr	r3, [pc, #512]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	4b7c      	ldr	r3, [pc, #496]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a7b      	ldr	r2, [pc, #492]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001480:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b79      	ldr	r3, [pc, #484]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	4b75      	ldr	r3, [pc, #468]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a74      	ldr	r2, [pc, #464]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	4b6e      	ldr	r3, [pc, #440]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a6d      	ldr	r2, [pc, #436]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b6b      	ldr	r3, [pc, #428]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a66      	ldr	r2, [pc, #408]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a5f      	ldr	r2, [pc, #380]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014f0:	f043 0320 	orr.w	r3, r3, #32
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b59      	ldr	r3, [pc, #356]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a58      	ldr	r2, [pc, #352]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a51      	ldr	r2, [pc, #324]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a4a      	ldr	r2, [pc, #296]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b48      	ldr	r3, [pc, #288]	; (800166c <BSP_SDRAM_MspInit+0x224>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800155a:	2301      	movs	r3, #1
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800155e:	2302      	movs	r3, #2
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001562:	230c      	movs	r3, #12
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8001566:	2301      	movs	r3, #1
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800156a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156e:	4619      	mov	r1, r3
 8001570:	483f      	ldr	r0, [pc, #252]	; (8001670 <BSP_SDRAM_MspInit+0x228>)
 8001572:	f002 f8d9 	bl	8003728 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001576:	f24c 7303 	movw	r3, #50947	; 0xc703
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800157c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001580:	4619      	mov	r1, r3
 8001582:	483c      	ldr	r0, [pc, #240]	; (8001674 <BSP_SDRAM_MspInit+0x22c>)
 8001584:	f002 f8d0 	bl	8003728 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001588:	f64f 7383 	movw	r3, #65411	; 0xff83
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800158e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001592:	4619      	mov	r1, r3
 8001594:	4838      	ldr	r0, [pc, #224]	; (8001678 <BSP_SDRAM_MspInit+0x230>)
 8001596:	f002 f8c7 	bl	8003728 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800159a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80015a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a4:	4619      	mov	r1, r3
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <BSP_SDRAM_MspInit+0x234>)
 80015a8:	f002 f8be 	bl	8003728 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80015ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80015b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b6:	4619      	mov	r1, r3
 80015b8:	4831      	ldr	r0, [pc, #196]	; (8001680 <BSP_SDRAM_MspInit+0x238>)
 80015ba:	f002 f8b5 	bl	8003728 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80015be:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80015c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c8:	4619      	mov	r1, r3
 80015ca:	482e      	ldr	r0, [pc, #184]	; (8001684 <BSP_SDRAM_MspInit+0x23c>)
 80015cc:	f002 f8ac 	bl	8003728 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80015d0:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80015d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	482a      	ldr	r0, [pc, #168]	; (8001688 <BSP_SDRAM_MspInit+0x240>)
 80015de:	f002 f8a3 	bl	8003728 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 80015f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fc:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fe:	4b23      	ldr	r3, [pc, #140]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001604:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001608:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160c:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001616:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800161a:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001624:	2203      	movs	r2, #3
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 800162a:	2200      	movs	r2, #0
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001636:	4a16      	ldr	r2, [pc, #88]	; (8001690 <BSP_SDRAM_MspInit+0x248>)
 8001638:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
 8001640:	4a12      	ldr	r2, [pc, #72]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 8001648:	f000 fa68 	bl	8001b1c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <BSP_SDRAM_MspInit+0x244>)
 800164e:	f000 f9b7 	bl	80019c0 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2105      	movs	r1, #5
 8001656:	2038      	movs	r0, #56	; 0x38
 8001658:	f000 f95a 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800165c:	2038      	movs	r0, #56	; 0x38
 800165e:	f000 f973 	bl	8001948 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001662:	bf00      	nop
 8001664:	3740      	adds	r7, #64	; 0x40
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40021400 	.word	0x40021400
 8001680:	40021800 	.word	0x40021800
 8001684:	40021c00 	.word	0x40021c00
 8001688:	40022000 	.word	0x40022000
 800168c:	200003fc 	.word	0x200003fc
 8001690:	40026410 	.word	0x40026410

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_Init+0x40>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_Init+0x40>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x40>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f91c 	bl	80018fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f00c fc06 	bl	800ded4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f00b ffe8 	bl	800d69c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000011 	.word	0x20000011
 80016fc:	20000608 	.word	0x20000608

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000608 	.word	0x20000608

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_Delay+0x40>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000011 	.word	0x20000011

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db10      	blt.n	8001830 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4909      	ldr	r1, [pc, #36]	; (800183c <__NVIC_DisableIRQ+0x40>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	3320      	adds	r3, #32
 8001824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800182c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff2a 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001922:	f7ff ff3f 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff ffb1 	bl	8001894 <NVIC_EncodePriority>
 8001932:	4602      	mov	r2, r0
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff80 	bl	8001840 <__NVIC_SetPriority>
}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff32 	bl	80017c0 <__NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff42 	bl	80017fc <__NVIC_DisableIRQ>
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e011      	b.n	80019b6 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f00b fea2 	bl	800d6ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fe98 	bl	8001700 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e099      	b.n	8001b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fc:	e00f      	b.n	8001a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019fe:	f7ff fe7f 	bl	8001700 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d908      	bls.n	8001a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e078      	b.n	8001b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e8      	bne.n	80019fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_DMA_Init+0x158>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4313      	orrs	r3, r2
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f023 0307 	bic.w	r3, r3, #7
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d117      	bne.n	8001ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00e      	beq.n	8001ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8bd 	bl	8001c44 <DMA_CheckFifoParam>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f874 	bl	8001bd8 <DMA_CalcBaseAndBitshift>
 8001af0:	4603      	mov	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	223f      	movs	r2, #63	; 0x3f
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	f010803f 	.word	0xf010803f

08001b1c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e050      	b.n	8001bd0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e048      	b.n	8001bd0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2221      	movs	r2, #33	; 0x21
 8001b7c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f82a 	bl	8001bd8 <DMA_CalcBaseAndBitshift>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	223f      	movs	r2, #63	; 0x3f
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3b10      	subs	r3, #16
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <DMA_CalcBaseAndBitshift+0x64>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <DMA_CalcBaseAndBitshift+0x68>)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d909      	bls.n	8001c1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	1d1a      	adds	r2, r3, #4
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
 8001c18:	e007      	b.n	8001c2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	aaaaaaab 	.word	0xaaaaaaab
 8001c40:	08010adc 	.word	0x08010adc

08001c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d11f      	bne.n	8001c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d855      	bhi.n	8001d10 <DMA_CheckFifoParam+0xcc>
 8001c64:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <DMA_CheckFifoParam+0x28>)
 8001c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6a:	bf00      	nop
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001c8f 	.word	0x08001c8f
 8001c74:	08001c7d 	.word	0x08001c7d
 8001c78:	08001d11 	.word	0x08001d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d045      	beq.n	8001d14 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8c:	e042      	b.n	8001d14 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c96:	d13f      	bne.n	8001d18 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c9c:	e03c      	b.n	8001d18 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca6:	d121      	bne.n	8001cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d836      	bhi.n	8001d1c <DMA_CheckFifoParam+0xd8>
 8001cae:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <DMA_CheckFifoParam+0x70>)
 8001cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb4:	08001cc5 	.word	0x08001cc5
 8001cb8:	08001ccb 	.word	0x08001ccb
 8001cbc:	08001cc5 	.word	0x08001cc5
 8001cc0:	08001cdd 	.word	0x08001cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc8:	e02f      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cda:	e021      	b.n	8001d20 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce4:	d11e      	bne.n	8001d24 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cea:	e01b      	b.n	8001d24 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d902      	bls.n	8001cf8 <DMA_CheckFifoParam+0xb4>
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d003      	beq.n	8001cfe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cf6:	e018      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cfc:	e015      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00e      	beq.n	8001d28 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0e:	e00b      	b.n	8001d28 <DMA_CheckFifoParam+0xe4>
      break;
 8001d10:	bf00      	nop
 8001d12:	e00a      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      break;
 8001d14:	bf00      	nop
 8001d16:	e008      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      break;
 8001d18:	bf00      	nop
 8001d1a:	e006      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      break;
 8001d1c:	bf00      	nop
 8001d1e:	e004      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      break;
 8001d20:	bf00      	nop
 8001d22:	e002      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      break;   
 8001d24:	bf00      	nop
 8001d26:	e000      	b.n	8001d2a <DMA_CheckFifoParam+0xe6>
      break;
 8001d28:	bf00      	nop
    }
  } 
  
  return status; 
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e03b      	b.n	8001dc2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f00b fce6 	bl	800d730 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	f023 0107 	bic.w	r1, r3, #7
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001da2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68d1      	ldr	r1, [r2, #12]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	430b      	orrs	r3, r1
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af02      	add	r7, sp, #8
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA2D_Start+0x1c>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e018      	b.n	8001e18 <HAL_DMA2D_Start+0x4e>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2202      	movs	r2, #2
 8001df2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fa99 	bl	8002338 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d056      	beq.n	8001eea <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001e3c:	f7ff fc60 	bl	8001700 <HAL_GetTick>
 8001e40:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001e42:	e04b      	b.n	8001edc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d023      	beq.n	8001e9e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f043 0202 	orr.w	r2, r3, #2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2221      	movs	r2, #33	; 0x21
 8001e88:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0a5      	b.n	8001fea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea4:	d01a      	beq.n	8001edc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001ea6:	f7ff fc2b 	bl	8001700 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <HAL_DMA2D_PollForTransfer+0x9c>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e086      	b.n	8001fea <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ac      	beq.n	8001e44 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d061      	beq.n	8001fd0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7ff fbf8 	bl	8001700 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001f12:	e056      	b.n	8001fc2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d02e      	beq.n	8001f84 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	f043 0202 	orr.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2229      	movs	r2, #41	; 0x29
 8001f6e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2204      	movs	r2, #4
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e032      	b.n	8001fea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8a:	d01a      	beq.n	8001fc2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001f8c:	f7ff fbb8 	bl	8001700 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d302      	bcc.n	8001fa2 <HAL_DMA2D_PollForTransfer+0x182>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e013      	b.n	8001fea <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0a1      	beq.n	8001f14 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2212      	movs	r2, #18
 8001fd6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d026      	beq.n	8002062 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d021      	beq.n	8002062 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d026      	beq.n	80020ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d021      	beq.n	80020ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002084:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2220      	movs	r2, #32
 800208c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2204      	movs	r2, #4
 800209e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d026      	beq.n	8002112 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d021      	beq.n	8002112 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2208      	movs	r2, #8
 80020e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	f043 0204 	orr.w	r2, r3, #4
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00e      	beq.n	8002144 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002134:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2204      	movs	r2, #4
 800213c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f853 	bl	80021ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d024      	beq.n	8002198 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01f      	beq.n	8002198 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002166:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2202      	movs	r2, #2
 800216e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01f      	beq.n	80021e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01a      	beq.n	80021e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2210      	movs	r2, #16
 80021c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f80e 	bl	80021fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_DMA2D_ConfigLayer+0x20>
 8002230:	2302      	movs	r3, #2
 8002232:	e079      	b.n	8002328 <HAL_DMA2D_ConfigLayer+0x114>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	3318      	adds	r3, #24
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_DMA2D_ConfigLayer+0x120>)
 8002260:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b0a      	cmp	r3, #10
 8002268:	d003      	beq.n	8002272 <HAL_DMA2D_ConfigLayer+0x5e>
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b09      	cmp	r3, #9
 8002270:	d107      	bne.n	8002282 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e005      	b.n	800228e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	061b      	lsls	r3, r3, #24
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d120      	bne.n	80022d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43db      	mvns	r3, r3
 800229e:	ea02 0103 	and.w	r1, r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b0a      	cmp	r3, #10
 80022bc:	d003      	beq.n	80022c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	d127      	bne.n	8002316 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
 80022d4:	e01f      	b.n	8002316 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	43db      	mvns	r3, r3
 80022e0:	ea02 0103 	and.w	r1, r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	d003      	beq.n	8002308 <HAL_DMA2D_ConfigLayer+0xf4>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b09      	cmp	r3, #9
 8002306:	d106      	bne.n	8002316 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002314:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	ff03000f 	.word	0xff03000f

08002338 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002338:	b480      	push	{r7}
 800233a:	b08b      	sub	sp, #44	; 0x2c
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002370:	d174      	bne.n	800245c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002378:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002380:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002388:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d108      	bne.n	80023aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	431a      	orrs	r2, r3
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	e053      	b.n	8002452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d106      	bne.n	80023c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	e048      	b.n	8002452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d111      	bne.n	80023ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	0cdb      	lsrs	r3, r3, #19
 80023cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	0a9b      	lsrs	r3, r3, #10
 80023d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	02db      	lsls	r3, r3, #11
 80023e2:	4313      	orrs	r3, r2
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	e032      	b.n	8002452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d117      	bne.n	8002424 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	0fdb      	lsrs	r3, r3, #31
 80023f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	0cdb      	lsrs	r3, r3, #19
 80023fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	0adb      	lsrs	r3, r3, #11
 8002404:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	431a      	orrs	r2, r3
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	03db      	lsls	r3, r3, #15
 800241a:	4313      	orrs	r3, r2
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	e016      	b.n	8002452 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	0f1b      	lsrs	r3, r3, #28
 8002428:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	0d1b      	lsrs	r3, r3, #20
 800242e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	0b1b      	lsrs	r3, r3, #12
 8002434:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	011a      	lsls	r2, r3, #4
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	431a      	orrs	r2, r3
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	031b      	lsls	r3, r3, #12
 800244a:	4313      	orrs	r3, r2
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800245a:	e003      	b.n	8002464 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	60da      	str	r2, [r3, #12]
}
 8002464:	bf00      	nop
 8002466:	372c      	adds	r7, #44	; 0x2c
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	019a      	lsls	r2, r3, #6
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	431a      	orrs	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	431a      	orrs	r2, r3
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b0:	f7ff f926 	bl	8001700 <HAL_GetTick>
 80024b4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80024b6:	e009      	b.n	80024cc <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80024b8:	f7ff f922 	bl	8001700 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c6:	d901      	bls.n	80024cc <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e015      	b.n	80024f8 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	019a      	lsls	r2, r3, #6
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	ea42 0103 	orr.w	r1, r2, r3
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e108      	b.n	8002726 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7c5b      	ldrb	r3, [r3, #17]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f00b f92e 	bl	800d780 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2203      	movs	r2, #3
 8002528:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800253e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800254a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002552:	f7ff f8d5 	bl	8001700 <HAL_GetTick>
 8002556:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002558:	e009      	b.n	800256e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800255a:	f7ff f8d1 	bl	8001700 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002568:	d901      	bls.n	800256e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0db      	b.n	8002726 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ed      	beq.n	800255a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800258e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002592:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	009a      	lsls	r2, r3, #2
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	02db      	lsls	r3, r3, #11
 80025aa:	431a      	orrs	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e6:	f7ff f88b 	bl	8001700 <HAL_GetTick>
 80025ea:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80025ec:	e009      	b.n	8002602 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80025ee:	f7ff f887 	bl	8001700 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fc:	d901      	bls.n	8002602 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e091      	b.n	8002726 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ed      	beq.n	80025ee <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0206 	orr.w	r2, r2, #6
 8002622:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0203 	bic.w	r2, r2, #3
 8002636:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0203 	bic.w	r2, r2, #3
 8002664:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800268c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_DSI_Init+0x1ae>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	e000      	b.n	80026b0 <HAL_DSI_Init+0x1b0>
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <HAL_DSI_Init+0x230>)
 80026b6:	fb02 f203 	mul.w	r2, r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	409a      	lsls	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026e6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	003d0900 	.word	0x003d0900

08002734 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e066      	b.n	8002814 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2203      	movs	r2, #3
 800274a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0208 	bic.w	r2, r2, #8
 8002760:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0206 	bic.w	r2, r2, #6
 80027a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80027e6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80027f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f00b f810 	bl	800d820 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7c1b      	ldrb	r3, [r3, #16]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_DSI_ConfigErrorMonitor+0x16>
 800282e:	2302      	movs	r3, #2
 8002830:	e0ab      	b.n	800298a <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800286c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002870:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800288e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0202 	orr.w	r2, r2, #2
 80028ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 020c 	orr.w	r2, r2, #12
 80028e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0210 	orr.w	r2, r2, #16
 8002906:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002942:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002960:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800297e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00f      	beq.n	80029ce <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8ad 	bl	8002b28 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00f      	beq.n	80029fe <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f89f 	bl	8002b3c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 808c 	beq.w	8002b20 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002a10:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a28:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f043 0208 	orr.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f043 0210 	orr.w	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f818 	bl	8002b50 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7c1b      	ldrb	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_DSI_SetGenericVCID+0x16>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e016      	b.n	8002ba8 <HAL_DSI_SetGenericVCID+0x44>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0203 	bic.w	r2, r2, #3
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7c1b      	ldrb	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_DSI_ConfigVideoMode+0x16>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e1f6      	b.n	8002fb8 <HAL_DSI_ConfigVideoMode+0x404>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0203 	bic.w	r2, r2, #3
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c28:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c4a:	f023 031f 	bic.w	r3, r3, #31
 8002c4e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c70:	f023 031f 	bic.w	r3, r3, #31
 8002c74:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0203 	bic.w	r2, r2, #3
 8002c96:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0207 	bic.w	r2, r2, #7
 8002cb8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6959      	ldr	r1, [r3, #20]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 020f 	bic.w	r2, r2, #15
 8002ce6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6919      	ldr	r1, [r3, #16]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 020e 	bic.w	r2, r2, #14
 8002d0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	005a      	lsls	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d110      	bne.n	8002d50 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6919      	ldr	r1, [r3, #16]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d5e:	f023 030f 	bic.w	r3, r3, #15
 8002d62:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d84:	f023 030f 	bic.w	r3, r3, #15
 8002d88:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002daa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dae:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd0:	f023 0303 	bic.w	r3, r3, #3
 8002dd4:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002df6:	f023 0303 	bic.w	r3, r3, #3
 8002dfa:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e1c:	f023 0303 	bic.w	r3, r3, #3
 8002e20:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e46:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002e8a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e96:	041a      	lsls	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eae:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7c1b      	ldrb	r3, [r3, #16]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e0c5      	b.n	8003166 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0203 	bic.w	r2, r2, #3
 8003026:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0207 	bic.w	r2, r2, #7
 8003048:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6959      	ldr	r1, [r3, #20]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	431a      	orrs	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020f 	bic.w	r2, r2, #15
 8003076:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6919      	ldr	r1, [r3, #16]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020e 	bic.w	r2, r2, #14
 800309a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	005a      	lsls	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0202 	orr.w	r2, r2, #2
 800315a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7c1b      	ldrb	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_DSI_ConfigCommand+0x16>
 8003186:	2302      	movs	r3, #2
 8003188:	e049      	b.n	800321e <HAL_DSI_ConfigCommand+0xaa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_DSI_ConfigCommand+0xb8>)
 800319c:	400b      	ands	r3, r1
 800319e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80031ae:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80031b4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80031ba:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80031c0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80031c6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80031cc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80031d2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80031d8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80031de:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80031e4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80031ea:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0202 	bic.w	r2, r2, #2
 8003202:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	fef080ff 	.word	0xfef080ff

08003230 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7c1b      	ldrb	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_DSI_ConfigFlowControl+0x16>
 8003242:	2302      	movs	r3, #2
 8003244:	e016      	b.n	8003274 <HAL_DSI_ConfigFlowControl+0x44>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 021f 	bic.w	r2, r2, #31
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7c1b      	ldrb	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_DSI_ConfigPhyTimer+0x16>
 8003292:	2302      	movs	r3, #2
 8003294:	e058      	b.n	8003348 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf38      	it	cc
 80032a8:	4613      	movcc	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80032bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	041a      	lsls	r2, r3, #16
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80032ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	021a      	lsls	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7c1b      	ldrb	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_DSI_ConfigHostTimeouts+0x16>
 8003366:	2302      	movs	r3, #2
 8003368:	e0b4      	b.n	80034d4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800337e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6899      	ldr	r1, [r3, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	021a      	lsls	r2, r3, #8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b292      	uxth	r2, r2
 80033a0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800345e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	0c1b      	lsrs	r3, r3, #16
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7c1b      	ldrb	r3, [r3, #16]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_DSI_Start+0x14>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e02b      	b.n	800354c <HAL_DSI_Start+0x6c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0208 	orr.w	r2, r2, #8
 8003530:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	7c1b      	ldrb	r3, [r3, #16]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_DSI_ShortWrite+0x1a>
 800356e:	2302      	movs	r3, #2
 8003570:	e010      	b.n	8003594 <HAL_DSI_ShortWrite+0x3c>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7fe ff8d 	bl	80024a2 <DSI_ShortWrite>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	741a      	strb	r2, [r3, #16]

  return status;
 8003592:	7dfb      	ldrb	r3, [r7, #23]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	7c1b      	ldrb	r3, [r3, #16]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_DSI_LongWrite+0x1e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e084      	b.n	80036c4 <HAL_DSI_LongWrite+0x128>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c0:	f7fe f89e 	bl	8001700 <HAL_GetTick>
 80035c4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80035c6:	e00c      	b.n	80035e2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80035c8:	f7fe f89a 	bl	8001700 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d6:	d904      	bls.n	80035e2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e070      	b.n	80036c4 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0eb      	beq.n	80035c8 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	bf28      	it	cs
 80035fa:	2303      	movcs	r3, #3
 80035fc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	e00f      	b.n	8003624 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	3301      	adds	r3, #1
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	4313      	orrs	r3, r2
 800361c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	3301      	adds	r3, #1
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3eb      	bcc.n	8003604 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003644:	e028      	b.n	8003698 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b04      	cmp	r3, #4
 800364a:	bf28      	it	cs
 800364c:	2304      	movcs	r3, #4
 800364e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003654:	2300      	movs	r3, #0
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	e00e      	b.n	8003678 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	4413      	add	r3, r2
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4313      	orrs	r3, r2
 8003670:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	3301      	adds	r3, #1
 8003676:	623b      	str	r3, [r7, #32]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d3ec      	bcc.n	800365a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1d3      	bne.n	8003646 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80036a6:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	f7fe feda 	bl	8002470 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3728      	adds	r7, #40	; 0x28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	7c1b      	ldrb	r3, [r3, #16]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80036de:	2302      	movs	r3, #2
 80036e0:	e01b      	b.n	800371a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80036f8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	065a      	lsls	r2, r3, #25
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e177      	b.n	8003a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	429a      	cmp	r2, r3
 800375e:	f040 8166 	bne.w	8003a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x4a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b12      	cmp	r3, #18
 8003770:	d123      	bne.n	80037ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	220f      	movs	r2, #15
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	69b9      	ldr	r1, [r7, #24]
 80037b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	2203      	movs	r2, #3
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0203 	and.w	r2, r3, #3
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d00b      	beq.n	800380e <HAL_GPIO_Init+0xe6>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d007      	beq.n	800380e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003802:	2b11      	cmp	r3, #17
 8003804:	d003      	beq.n	800380e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b12      	cmp	r3, #18
 800380c:	d130      	bne.n	8003870 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	2203      	movs	r2, #3
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003844:	2201      	movs	r2, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 0201 	and.w	r2, r3, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80c0 	beq.w	8003a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_GPIO_Init+0x320>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	4a64      	ldr	r2, [pc, #400]	; (8003a48 <HAL_GPIO_Init+0x320>)
 80038b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038bc:	6453      	str	r3, [r2, #68]	; 0x44
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <HAL_GPIO_Init+0x320>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ca:	4a60      	ldr	r2, [pc, #384]	; (8003a4c <HAL_GPIO_Init+0x324>)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	3302      	adds	r3, #2
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	220f      	movs	r2, #15
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a57      	ldr	r2, [pc, #348]	; (8003a50 <HAL_GPIO_Init+0x328>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d037      	beq.n	8003966 <HAL_GPIO_Init+0x23e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a56      	ldr	r2, [pc, #344]	; (8003a54 <HAL_GPIO_Init+0x32c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_GPIO_Init+0x23a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a55      	ldr	r2, [pc, #340]	; (8003a58 <HAL_GPIO_Init+0x330>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02b      	beq.n	800395e <HAL_GPIO_Init+0x236>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a54      	ldr	r2, [pc, #336]	; (8003a5c <HAL_GPIO_Init+0x334>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d025      	beq.n	800395a <HAL_GPIO_Init+0x232>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a53      	ldr	r2, [pc, #332]	; (8003a60 <HAL_GPIO_Init+0x338>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <HAL_GPIO_Init+0x22e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_GPIO_Init+0x33c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d019      	beq.n	8003952 <HAL_GPIO_Init+0x22a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_GPIO_Init+0x340>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <HAL_GPIO_Init+0x226>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a50      	ldr	r2, [pc, #320]	; (8003a6c <HAL_GPIO_Init+0x344>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00d      	beq.n	800394a <HAL_GPIO_Init+0x222>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4f      	ldr	r2, [pc, #316]	; (8003a70 <HAL_GPIO_Init+0x348>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <HAL_GPIO_Init+0x21e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4e      	ldr	r2, [pc, #312]	; (8003a74 <HAL_GPIO_Init+0x34c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_GPIO_Init+0x21a>
 800393e:	2309      	movs	r3, #9
 8003940:	e012      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003942:	230a      	movs	r3, #10
 8003944:	e010      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003946:	2308      	movs	r3, #8
 8003948:	e00e      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800394a:	2307      	movs	r3, #7
 800394c:	e00c      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800394e:	2306      	movs	r3, #6
 8003950:	e00a      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003952:	2305      	movs	r3, #5
 8003954:	e008      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003956:	2304      	movs	r3, #4
 8003958:	e006      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800395a:	2303      	movs	r3, #3
 800395c:	e004      	b.n	8003968 <HAL_GPIO_Init+0x240>
 800395e:	2302      	movs	r3, #2
 8003960:	e002      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_GPIO_Init+0x240>
 8003966:	2300      	movs	r3, #0
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f002 0203 	and.w	r2, r2, #3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4093      	lsls	r3, r2
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003978:	4934      	ldr	r1, [pc, #208]	; (8003a4c <HAL_GPIO_Init+0x324>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	3302      	adds	r3, #2
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003986:	4b3c      	ldr	r3, [pc, #240]	; (8003a78 <HAL_GPIO_Init+0x350>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039aa:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <HAL_GPIO_Init+0x350>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039b0:	4b31      	ldr	r3, [pc, #196]	; (8003a78 <HAL_GPIO_Init+0x350>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <HAL_GPIO_Init+0x350>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039da:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_GPIO_Init+0x350>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fe:	4a1e      	ldr	r2, [pc, #120]	; (8003a78 <HAL_GPIO_Init+0x350>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_GPIO_Init+0x350>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_GPIO_Init+0x350>)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3301      	adds	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	f67f ae84 	bls.w	8003744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3724      	adds	r7, #36	; 0x24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40013800 	.word	0x40013800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40021400 	.word	0x40021400
 8003a68:	40021800 	.word	0x40021800
 8003a6c:	40021c00 	.word	0x40021c00
 8003a70:	40022000 	.word	0x40022000
 8003a74:	40022400 	.word	0x40022400
 8003a78:	40013c00 	.word	0x40013c00

08003a7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e0d9      	b.n	8003c4c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f040 80c9 	bne.w	8003c46 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ab4:	4a6a      	ldr	r2, [pc, #424]	; (8003c60 <HAL_GPIO_DeInit+0x1e4>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	3302      	adds	r3, #2
 8003abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	220f      	movs	r2, #15
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a62      	ldr	r2, [pc, #392]	; (8003c64 <HAL_GPIO_DeInit+0x1e8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d037      	beq.n	8003b4e <HAL_GPIO_DeInit+0xd2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a61      	ldr	r2, [pc, #388]	; (8003c68 <HAL_GPIO_DeInit+0x1ec>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_GPIO_DeInit+0xce>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a60      	ldr	r2, [pc, #384]	; (8003c6c <HAL_GPIO_DeInit+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02b      	beq.n	8003b46 <HAL_GPIO_DeInit+0xca>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a5f      	ldr	r2, [pc, #380]	; (8003c70 <HAL_GPIO_DeInit+0x1f4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d025      	beq.n	8003b42 <HAL_GPIO_DeInit+0xc6>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a5e      	ldr	r2, [pc, #376]	; (8003c74 <HAL_GPIO_DeInit+0x1f8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <HAL_GPIO_DeInit+0xc2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a5d      	ldr	r2, [pc, #372]	; (8003c78 <HAL_GPIO_DeInit+0x1fc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_DeInit+0xbe>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a5c      	ldr	r2, [pc, #368]	; (8003c7c <HAL_GPIO_DeInit+0x200>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_DeInit+0xba>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a5b      	ldr	r2, [pc, #364]	; (8003c80 <HAL_GPIO_DeInit+0x204>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_DeInit+0xb6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a5a      	ldr	r2, [pc, #360]	; (8003c84 <HAL_GPIO_DeInit+0x208>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_DeInit+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a59      	ldr	r2, [pc, #356]	; (8003c88 <HAL_GPIO_DeInit+0x20c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_DeInit+0xae>
 8003b26:	2309      	movs	r3, #9
 8003b28:	e012      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	e010      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	e00e      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b32:	2307      	movs	r3, #7
 8003b34:	e00c      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b36:	2306      	movs	r3, #6
 8003b38:	e00a      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	e008      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	e006      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b42:	2303      	movs	r3, #3
 8003b44:	e004      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e002      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_GPIO_DeInit+0xd4>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	f002 0203 	and.w	r2, r2, #3
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	4093      	lsls	r3, r2
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d132      	bne.n	8003bc6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b70:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <HAL_GPIO_DeInit+0x1e4>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	4837      	ldr	r0, [pc, #220]	; (8003c60 <HAL_GPIO_DeInit+0x1e4>)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	400a      	ands	r2, r1
 8003b88:	3302      	adds	r3, #2
 8003b8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	493d      	ldr	r1, [pc, #244]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	4939      	ldr	r1, [pc, #228]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	4936      	ldr	r1, [pc, #216]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bb8:	4b34      	ldr	r3, [pc, #208]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	4932      	ldr	r1, [pc, #200]	; (8003c8c <HAL_GPIO_DeInit+0x210>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2103      	movs	r1, #3
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	08d2      	lsrs	r2, r2, #3
 8003bfc:	4019      	ands	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2103      	movs	r1, #3
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	401a      	ands	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	2101      	movs	r1, #1
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2103      	movs	r1, #3
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	401a      	ands	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	f67f af22 	bls.w	8003a98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40013800 	.word	0x40013800
 8003c64:	40020000 	.word	0x40020000
 8003c68:	40020400 	.word	0x40020400
 8003c6c:	40020800 	.word	0x40020800
 8003c70:	40020c00 	.word	0x40020c00
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40021400 	.word	0x40021400
 8003c7c:	40021800 	.word	0x40021800
 8003c80:	40021c00 	.word	0x40021c00
 8003c84:	40022000 	.word	0x40022000
 8003c88:	40022400 	.word	0x40022400
 8003c8c:	40013c00 	.word	0x40013c00

08003c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	887b      	ldrh	r3, [r7, #2]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	e001      	b.n	8003cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd0:	787b      	ldrb	r3, [r7, #1]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cd6:	887a      	ldrh	r2, [r7, #2]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cdc:	e003      	b.n	8003ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	041a      	lsls	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	619a      	str	r2, [r3, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e10f      	b.n	8003f26 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f009 fda0 	bl	800d860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	; 0x24
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d38:	f002 f978 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8003d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a7b      	ldr	r2, [pc, #492]	; (8003f30 <HAL_I2C_Init+0x23c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d807      	bhi.n	8003d58 <HAL_I2C_Init+0x64>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a7a      	ldr	r2, [pc, #488]	; (8003f34 <HAL_I2C_Init+0x240>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e006      	b.n	8003d66 <HAL_I2C_Init+0x72>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a77      	ldr	r2, [pc, #476]	; (8003f38 <HAL_I2C_Init+0x244>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	bf94      	ite	ls
 8003d60:	2301      	movls	r3, #1
 8003d62:	2300      	movhi	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0db      	b.n	8003f26 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4a72      	ldr	r2, [pc, #456]	; (8003f3c <HAL_I2C_Init+0x248>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0c9b      	lsrs	r3, r3, #18
 8003d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a64      	ldr	r2, [pc, #400]	; (8003f30 <HAL_I2C_Init+0x23c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d802      	bhi.n	8003da8 <HAL_I2C_Init+0xb4>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3301      	adds	r3, #1
 8003da6:	e009      	b.n	8003dbc <HAL_I2C_Init+0xc8>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	4a63      	ldr	r2, [pc, #396]	; (8003f40 <HAL_I2C_Init+0x24c>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	3301      	adds	r3, #1
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4956      	ldr	r1, [pc, #344]	; (8003f30 <HAL_I2C_Init+0x23c>)
 8003dd8:	428b      	cmp	r3, r1
 8003dda:	d80d      	bhi.n	8003df8 <HAL_I2C_Init+0x104>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e59      	subs	r1, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	bf38      	it	cc
 8003df4:	2304      	movcc	r3, #4
 8003df6:	e04f      	b.n	8003e98 <HAL_I2C_Init+0x1a4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d111      	bne.n	8003e24 <HAL_I2C_Init+0x130>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e58      	subs	r0, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	440b      	add	r3, r1
 8003e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e12:	3301      	adds	r3, #1
 8003e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e012      	b.n	8003e4a <HAL_I2C_Init+0x156>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	0099      	lsls	r1, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Init+0x15e>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e022      	b.n	8003e98 <HAL_I2C_Init+0x1a4>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10e      	bne.n	8003e78 <HAL_I2C_Init+0x184>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e58      	subs	r0, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	440b      	add	r3, r1
 8003e68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Init+0x1a4>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1e58      	subs	r0, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	0099      	lsls	r1, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	6809      	ldr	r1, [r1, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ec6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6911      	ldr	r1, [r2, #16]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68d2      	ldr	r2, [r2, #12]
 8003ed2:	4311      	orrs	r1, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	000186a0 	.word	0x000186a0
 8003f34:	001e847f 	.word	0x001e847f
 8003f38:	003d08ff 	.word	0x003d08ff
 8003f3c:	431bde83 	.word	0x431bde83
 8003f40:	10624dd3 	.word	0x10624dd3

08003f44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0bf      	b.n	80040d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f009 fcf6 	bl	800d95c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6999      	ldr	r1, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f9c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_LTDC_Init+0x19c>)
 8003fb8:	400b      	ands	r3, r1
 8003fba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6899      	ldr	r1, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68d9      	ldr	r1, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_LTDC_Init+0x19c>)
 8003fe6:	400b      	ands	r3, r1
 8003fe8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68d9      	ldr	r1, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6919      	ldr	r1, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_LTDC_Init+0x19c>)
 8004014:	400b      	ands	r3, r1
 8004016:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6919      	ldr	r1, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_LTDC_Init+0x19c>)
 8004042:	400b      	ands	r3, r1
 8004044:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0206 	orr.w	r2, r2, #6
 80040b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	f000f800 	.word	0xf000f800

080040e4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d023      	beq.n	800414e <HAL_LTDC_IRQHandler+0x6a>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01e      	beq.n	800414e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2204      	movs	r2, #4
 8004126:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2204      	movs	r2, #4
 800413c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f86f 	bl	800422c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <HAL_LTDC_IRQHandler+0xbc>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01e      	beq.n	80041a0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0202 	bic.w	r2, r2, #2
 8004170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2202      	movs	r2, #2
 8004178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004180:	f043 0202 	orr.w	r2, r3, #2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f846 	bl	800422c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01b      	beq.n	80041e2 <HAL_LTDC_IRQHandler+0xfe>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d016      	beq.n	80041e2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f82f 	bl	8004240 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01b      	beq.n	8004224 <HAL_LTDC_IRQHandler+0x140>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2208      	movs	r2, #8
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f818 	bl	8004254 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_LTDC_ConfigLayer+0x1a>
 800427e:	2302      	movs	r3, #2
 8004280:	e02c      	b.n	80042dc <HAL_LTDC_ConfigLayer+0x74>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2134      	movs	r1, #52	; 0x34
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4614      	mov	r4, r2
 80042a6:	461d      	mov	r5, r3
 80042a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f811 	bl	80042e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2201      	movs	r2, #1
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bdb0      	pop	{r4, r5, r7, pc}

080042e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	4413      	add	r3, r2
 8004302:	041b      	lsls	r3, r3, #16
 8004304:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	01db      	lsls	r3, r3, #7
 8004310:	4413      	add	r3, r2
 8004312:	3384      	adds	r3, #132	; 0x84
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	4611      	mov	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	01d2      	lsls	r2, r2, #7
 8004320:	440a      	add	r2, r1
 8004322:	3284      	adds	r2, #132	; 0x84
 8004324:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004328:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433a:	4413      	add	r3, r2
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	440b      	add	r3, r1
 800434a:	3384      	adds	r3, #132	; 0x84
 800434c:	4619      	mov	r1, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004362:	4413      	add	r3, r2
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	01db      	lsls	r3, r3, #7
 8004372:	4413      	add	r3, r2
 8004374:	3384      	adds	r3, #132	; 0x84
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	4611      	mov	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	01d2      	lsls	r2, r2, #7
 8004382:	440a      	add	r2, r1
 8004384:	3284      	adds	r2, #132	; 0x84
 8004386:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800438a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800439a:	4413      	add	r3, r2
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	01db      	lsls	r3, r3, #7
 80043a8:	440b      	add	r3, r1
 80043aa:	3384      	adds	r3, #132	; 0x84
 80043ac:	4619      	mov	r1, r3
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	01db      	lsls	r3, r3, #7
 80043be:	4413      	add	r3, r2
 80043c0:	3384      	adds	r3, #132	; 0x84
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	4611      	mov	r1, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	01d2      	lsls	r2, r2, #7
 80043ce:	440a      	add	r2, r1
 80043d0:	3284      	adds	r2, #132	; 0x84
 80043d2:	f023 0307 	bic.w	r3, r3, #7
 80043d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	01db      	lsls	r3, r3, #7
 80043e2:	4413      	add	r3, r2
 80043e4:	3384      	adds	r3, #132	; 0x84
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	01db      	lsls	r3, r3, #7
 8004414:	4413      	add	r3, r2
 8004416:	3384      	adds	r3, #132	; 0x84
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	01db      	lsls	r3, r3, #7
 8004424:	4413      	add	r3, r2
 8004426:	3384      	adds	r3, #132	; 0x84
 8004428:	461a      	mov	r2, r3
 800442a:	2300      	movs	r3, #0
 800442c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004434:	461a      	mov	r2, r3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	431a      	orrs	r2, r3
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	440b      	add	r3, r1
 800444a:	3384      	adds	r3, #132	; 0x84
 800444c:	4619      	mov	r1, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	01db      	lsls	r3, r3, #7
 800445e:	4413      	add	r3, r2
 8004460:	3384      	adds	r3, #132	; 0x84
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4611      	mov	r1, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	01d2      	lsls	r2, r2, #7
 800446e:	440a      	add	r2, r1
 8004470:	3284      	adds	r2, #132	; 0x84
 8004472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004476:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	01db      	lsls	r3, r3, #7
 8004482:	4413      	add	r3, r2
 8004484:	3384      	adds	r3, #132	; 0x84
 8004486:	461a      	mov	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	01db      	lsls	r3, r3, #7
 8004498:	4413      	add	r3, r2
 800449a:	3384      	adds	r3, #132	; 0x84
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	4611      	mov	r1, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	01d2      	lsls	r2, r2, #7
 80044a8:	440a      	add	r2, r1
 80044aa:	3284      	adds	r2, #132	; 0x84
 80044ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044b0:	f023 0307 	bic.w	r3, r3, #7
 80044b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6809      	ldr	r1, [r1, #0]
 80044c2:	4608      	mov	r0, r1
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	01c9      	lsls	r1, r1, #7
 80044c8:	4401      	add	r1, r0
 80044ca:	3184      	adds	r1, #132	; 0x84
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	01db      	lsls	r3, r3, #7
 80044da:	4413      	add	r3, r2
 80044dc:	3384      	adds	r3, #132	; 0x84
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	01db      	lsls	r3, r3, #7
 80044ea:	4413      	add	r3, r2
 80044ec:	3384      	adds	r3, #132	; 0x84
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	4413      	add	r3, r2
 8004500:	3384      	adds	r3, #132	; 0x84
 8004502:	461a      	mov	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004512:	2304      	movs	r3, #4
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e01b      	b.n	8004550 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d102      	bne.n	8004526 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004520:	2303      	movs	r3, #3
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e014      	b.n	8004550 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b04      	cmp	r3, #4
 800452c:	d00b      	beq.n	8004546 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004532:	2b02      	cmp	r3, #2
 8004534:	d007      	beq.n	8004546 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800453a:	2b03      	cmp	r3, #3
 800453c:	d003      	beq.n	8004546 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004542:	2b07      	cmp	r3, #7
 8004544:	d102      	bne.n	800454c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004546:	2302      	movs	r3, #2
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	e001      	b.n	8004550 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800454c:	2301      	movs	r3, #1
 800454e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	01db      	lsls	r3, r3, #7
 800455a:	4413      	add	r3, r2
 800455c:	3384      	adds	r3, #132	; 0x84
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	4611      	mov	r1, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	01d2      	lsls	r2, r2, #7
 800456a:	440a      	add	r2, r1
 800456c:	3284      	adds	r2, #132	; 0x84
 800456e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004572:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	041a      	lsls	r2, r3, #16
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	1acb      	subs	r3, r1, r3
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	3303      	adds	r3, #3
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	6809      	ldr	r1, [r1, #0]
 8004596:	4608      	mov	r0, r1
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	01c9      	lsls	r1, r1, #7
 800459c:	4401      	add	r1, r0
 800459e:	3184      	adds	r1, #132	; 0x84
 80045a0:	4313      	orrs	r3, r2
 80045a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	01db      	lsls	r3, r3, #7
 80045ae:	4413      	add	r3, r2
 80045b0:	3384      	adds	r3, #132	; 0x84
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	4611      	mov	r1, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	01d2      	lsls	r2, r2, #7
 80045be:	440a      	add	r2, r1
 80045c0:	3284      	adds	r2, #132	; 0x84
 80045c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	01db      	lsls	r3, r3, #7
 80045d6:	4413      	add	r3, r2
 80045d8:	3384      	adds	r3, #132	; 0x84
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	01db      	lsls	r3, r3, #7
 80045ec:	4413      	add	r3, r2
 80045ee:	3384      	adds	r3, #132	; 0x84
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4611      	mov	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	01d2      	lsls	r2, r2, #7
 80045fc:	440a      	add	r2, r1
 80045fe:	3284      	adds	r2, #132	; 0x84
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6013      	str	r3, [r2, #0]
}
 8004606:	bf00      	nop
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8004624:	2200      	movs	r2, #0
 8004626:	e001      	b.n	800462c <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004628:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800463c:	e000      	b.n	8004640 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800463e:	2200      	movs	r2, #0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800464c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004650:	e000      	b.n	8004654 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004652:	2200      	movs	r2, #0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	1e5a      	subs	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	4413      	add	r3, r2
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	441a      	add	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	4413      	add	r3, r2
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	441a      	add	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	441a      	add	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	4413      	add	r3, r2
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b4:	b08f      	sub	sp, #60	; 0x3c
 80046b6:	af0a      	add	r7, sp, #40	; 0x28
 80046b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e116      	b.n	80048f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f009 fdcc 	bl	800e27c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2203      	movs	r2, #3
 80046e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f005 fb59 	bl	8009dba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	687e      	ldr	r6, [r7, #4]
 8004710:	466d      	mov	r5, sp
 8004712:	f106 0410 	add.w	r4, r6, #16
 8004716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800471c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800471e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004722:	e885 0003 	stmia.w	r5, {r0, r1}
 8004726:	1d33      	adds	r3, r6, #4
 8004728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800472a:	6838      	ldr	r0, [r7, #0]
 800472c:	f005 fa30 	bl	8009b90 <USB_CoreInit>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0d7      	b.n	80048f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f005 fb47 	bl	8009ddc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	e04a      	b.n	80047ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	333d      	adds	r3, #61	; 0x3d
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	333c      	adds	r3, #60	; 0x3c
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	b298      	uxth	r0, r3
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	3342      	adds	r3, #66	; 0x42
 8004790:	4602      	mov	r2, r0
 8004792:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	333f      	adds	r3, #63	; 0x3f
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3344      	adds	r3, #68	; 0x44
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	3348      	adds	r3, #72	; 0x48
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	3350      	adds	r3, #80	; 0x50
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	3301      	adds	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3af      	bcc.n	8004754 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e044      	b.n	8004884 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004826:	7bfa      	ldrb	r2, [r7, #15]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004868:	7bfa      	ldrb	r2, [r7, #15]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	3301      	adds	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	429a      	cmp	r2, r3
 800488c:	d3b5      	bcc.n	80047fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	687e      	ldr	r6, [r7, #4]
 8004896:	466d      	mov	r5, sp
 8004898:	f106 0410 	add.w	r4, r6, #16
 800489c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800489e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80048ac:	1d33      	adds	r3, r6, #4
 80048ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b0:	6838      	ldr	r0, [r7, #0]
 80048b2:	f005 fabd 	bl	8009e30 <USB_DevInit>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e014      	b.n	80048f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d102      	bne.n	80048e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 f899 	bl	8005a18 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f006 faa5 	bl	800ae3a <USB_DevDisconnect>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_PCD_Start+0x1c>
 8004912:	2302      	movs	r3, #2
 8004914:	e020      	b.n	8004958 <HAL_PCD_Start+0x5e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	2b01      	cmp	r3, #1
 8004924:	d109      	bne.n	800493a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800492a:	2b01      	cmp	r3, #1
 800492c:	d005      	beq.n	800493a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f006 fa63 	bl	800ae0a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f005 fa25 	bl	8009d98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b08d      	sub	sp, #52	; 0x34
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f006 fb0a 	bl	800af90 <USB_GetMode>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 83bb 	bne.w	80050fa <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4618      	mov	r0, r3
 800498a:	f006 fa6e 	bl	800ae6a <USB_ReadInterrupts>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 83b1 	beq.w	80050f8 <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f006 fa65 	bl	800ae6a <USB_ReadInterrupts>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d107      	bne.n	80049ba <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695a      	ldr	r2, [r3, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f002 0202 	and.w	r2, r2, #2
 80049b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f006 fa53 	bl	800ae6a <USB_ReadInterrupts>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049ce:	d17b      	bne.n	8004ac8 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f006 fa59 	bl	800ae90 <USB_ReadDevAllOutEpInterrupt>
 80049de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049e0:	e06f      	b.n	8004ac2 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d064      	beq.n	8004ab6 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f006 fa7e 	bl	800aef8 <USB_ReadDevOutEPInterrupt>
 80049fc:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a14:	461a      	mov	r2, r3
 8004a16:	2301      	movs	r3, #1
 8004a18:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fe3b 	bl	8005698 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 ff3a 	bl	80058a8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	461a      	mov	r2, r3
 8004a42:	2308      	movs	r3, #8
 8004a44:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2310      	movs	r3, #16
 8004a60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d015      	beq.n	8004a98 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d108      	bne.n	8004a86 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2101      	movs	r1, #1
 8004a82:	f006 fac9 	bl	800b018 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	2320      	movs	r3, #32
 8004a96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	3301      	adds	r3, #1
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d18c      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f006 f9cc 	bl	800ae6a <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004adc:	f040 80c4 	bne.w	8004c68 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f006 f9ed 	bl	800aec4 <USB_ReadDevAllInEpInterrupt>
 8004aea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004af0:	e0b6      	b.n	8004c60 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80ab 	beq.w	8004c54 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f006 fa13 	bl	800af34 <USB_ReadDevInEPInterrupt>
 8004b0e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d05b      	beq.n	8004bd2 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2201      	movs	r2, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d11b      	bne.n	8004b90 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3348      	adds	r3, #72	; 0x48
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4403      	add	r3, r0
 8004b78:	3344      	adds	r3, #68	; 0x44
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4419      	add	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4403      	add	r3, r0
 8004b8c:	3348      	adds	r3, #72	; 0x48
 8004b8e:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f009 fbff 	bl	800e39a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d116      	bne.n	8004bd2 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d113      	bne.n	8004bd2 <HAL_PCD_IRQHandler+0x272>
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bae:	4613      	mov	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3350      	adds	r3, #80	; 0x50
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d108      	bne.n	8004bd2 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2101      	movs	r1, #1
 8004bce:	f006 fa23 	bl	800b018 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	461a      	mov	r2, r3
 8004bea:	2308      	movs	r3, #8
 8004bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	2310      	movs	r3, #16
 8004c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2340      	movs	r3, #64	; 0x40
 8004c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2302      	movs	r3, #2
 8004c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fc94 	bl	800557c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	3301      	adds	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	085b      	lsrs	r3, r3, #1
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f47f af45 	bne.w	8004af2 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f006 f8fc 	bl	800ae6a <USB_ReadInterrupts>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c7c:	d122      	bne.n	8004cc4 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d108      	bne.n	8004cae <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f009 fdca 	bl	800e840 <HAL_PCDEx_LPM_Callback>
 8004cac:	e002      	b.n	8004cb4 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f009 fbea 	bl	800e488 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f006 f8ce 	bl	800ae6a <USB_ReadInterrupts>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d112      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d102      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f009 fba6 	bl	800e43c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cfe:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f006 f8b0 	bl	800ae6a <USB_ReadInterrupts>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d14:	d121      	bne.n	8004d5a <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004d24:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d111      	bne.n	8004d54 <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f009 fd77 	bl	800e840 <HAL_PCDEx_LPM_Callback>
 8004d52:	e002      	b.n	8004d5a <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f009 fb71 	bl	800e43c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f006 f883 	bl	800ae6a <USB_ReadInterrupts>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6e:	f040 80a7 	bne.w	8004ec0 <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f005 f9bb 	bl	800a108 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d96:	e036      	b.n	8004e06 <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	461a      	mov	r2, r3
 8004da6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004daa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dde:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dfe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	3301      	adds	r3, #1
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3c3      	bcc.n	8004d98 <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004e22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d016      	beq.n	8004e5a <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e3c:	f043 030b 	orr.w	r3, r3, #11
 8004e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e52:	f043 030b 	orr.w	r3, r3, #11
 8004e56:	6453      	str	r3, [r2, #68]	; 0x44
 8004e58:	e015      	b.n	8004e86 <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e6c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e80:	f043 030b 	orr.w	r3, r3, #11
 8004e84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f006 f8b4 	bl	800b018 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 ffd0 	bl	800ae6a <USB_ReadInterrupts>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	d124      	bne.n	8004f20 <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f006 f866 	bl	800afac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f005 f970 	bl	800a1ca <USB_GetDevSpeed>
 8004eea:	4603      	mov	r3, r0
 8004eec:	461a      	mov	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681c      	ldr	r4, [r3, #0]
 8004ef6:	f001 f88d 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8004efa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	4620      	mov	r0, r4
 8004f06:	f004 fea5 	bl	8009c54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f009 fa6d 	bl	800e3ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f005 ffa0 	bl	800ae6a <USB_ReadInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d161      	bne.n	8004ff8 <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0210 	bic.w	r2, r2, #16
 8004f42:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f003 020f 	and.w	r2, r3, #15
 8004f50:	4613      	mov	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4413      	add	r3, r2
 8004f60:	3304      	adds	r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	0c5b      	lsrs	r3, r3, #17
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d124      	bne.n	8004fba <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d035      	beq.n	8004fe8 <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6a38      	ldr	r0, [r7, #32]
 8004f90:	f005 fe18 	bl	800abc4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fb2:	441a      	add	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	619a      	str	r2, [r3, #24]
 8004fb8:	e016      	b.n	8004fe8 <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	0c5b      	lsrs	r3, r3, #17
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d110      	bne.n	8004fe8 <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fcc:	2208      	movs	r2, #8
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6a38      	ldr	r0, [r7, #32]
 8004fd2:	f005 fdf7 	bl	800abc4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0210 	orr.w	r2, r2, #16
 8004ff6:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f005 ff34 	bl	800ae6a <USB_ReadInterrupts>
 8005002:	4603      	mov	r3, r0
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10a      	bne.n	8005022 <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f009 f9de 	bl	800e3ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f002 0208 	and.w	r2, r2, #8
 8005020:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f005 ff1f 	bl	800ae6a <USB_ReadInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005036:	d10f      	bne.n	8005058 <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	b2db      	uxtb	r3, r3
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f009 fa40 	bl	800e4c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f005 ff04 	bl	800ae6a <USB_ReadInterrupts>
 8005062:	4603      	mov	r3, r0
 8005064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506c:	d10f      	bne.n	800508e <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	b2db      	uxtb	r3, r3
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f009 fa13 	bl	800e4a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800508c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f005 fee9 	bl	800ae6a <USB_ReadInterrupts>
 8005098:	4603      	mov	r3, r0
 800509a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d10a      	bne.n	80050ba <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f009 fa21 	bl	800e4ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f005 fed3 	bl	800ae6a <USB_ReadInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d115      	bne.n	80050fa <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f009 fa11 	bl	800e508 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e000      	b.n	80050fa <HAL_PCD_IRQHandler+0x79a>
      return;
 80050f8:	bf00      	nop
    }
  }
}
 80050fa:	3734      	adds	r7, #52	; 0x34
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd90      	pop	{r4, r7, pc}

08005100 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_PCD_SetAddress+0x1a>
 8005116:	2302      	movs	r3, #2
 8005118:	e013      	b.n	8005142 <HAL_PCD_SetAddress+0x42>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f005 fe43 	bl	800adbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	461a      	mov	r2, r3
 8005158:	4603      	mov	r3, r0
 800515a:	70fb      	strb	r3, [r7, #3]
 800515c:	460b      	mov	r3, r1
 800515e:	803b      	strh	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da0f      	bge.n	8005190 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	3338      	adds	r3, #56	; 0x38
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4413      	add	r3, r2
 8005184:	3304      	adds	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	705a      	strb	r2, [r3, #1]
 800518e:	e00f      	b.n	80051b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	f003 020f 	and.w	r2, r3, #15
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	3304      	adds	r3, #4
 80051a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051bc:	883a      	ldrh	r2, [r7, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	78ba      	ldrb	r2, [r7, #2]
 80051c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051da:	78bb      	ldrb	r3, [r7, #2]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d102      	bne.n	80051e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_PCD_EP_Open+0xaa>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e00e      	b.n	8005212 <HAL_PCD_EP_Open+0xc8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	4618      	mov	r0, r3
 8005204:	f005 f806 	bl	800a214 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005210:	7afb      	ldrb	r3, [r7, #11]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800522a:	2b00      	cmp	r3, #0
 800522c:	da0f      	bge.n	800524e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	f003 020f 	and.w	r2, r3, #15
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	3338      	adds	r3, #56	; 0x38
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	3304      	adds	r3, #4
 8005244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	705a      	strb	r2, [r3, #1]
 800524c:	e00f      	b.n	800526e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4413      	add	r3, r2
 8005264:	3304      	adds	r3, #4
 8005266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_PCD_EP_Close+0x6e>
 8005284:	2302      	movs	r3, #2
 8005286:	e00e      	b.n	80052a6 <HAL_PCD_EP_Close+0x8c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68f9      	ldr	r1, [r7, #12]
 8005296:	4618      	mov	r0, r3
 8005298:	f005 f844 	bl	800a324 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	460b      	mov	r3, r1
 80052bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052be:	7afb      	ldrb	r3, [r7, #11]
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	3304      	adds	r3, #4
 80052d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2200      	movs	r2, #0
 80052e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2200      	movs	r2, #0
 80052ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f0:	7afb      	ldrb	r3, [r7, #11]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800530a:	7afb      	ldrb	r3, [r7, #11]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6979      	ldr	r1, [r7, #20]
 8005322:	f005 fac7 	bl	800a8b4 <USB_EP0StartXfer>
 8005326:	e008      	b.n	800533a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	f005 f879 	bl	800a42c <USB_EPStartXfer>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005366:	681b      	ldr	r3, [r3, #0]
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	460b      	mov	r3, r1
 8005382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005384:	7afb      	ldrb	r3, [r7, #11]
 8005386:	f003 020f 	and.w	r2, r3, #15
 800538a:	4613      	mov	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	3338      	adds	r3, #56	; 0x38
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	3304      	adds	r3, #4
 800539a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2200      	movs	r2, #0
 80053ac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2201      	movs	r2, #1
 80053b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d102      	bne.n	80053ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	6979      	ldr	r1, [r7, #20]
 80053e6:	f005 fa65 	bl	800a8b4 <USB_EP0StartXfer>
 80053ea:	e008      	b.n	80053fe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	f005 f817 	bl	800a42c <USB_EPStartXfer>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d901      	bls.n	8005426 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e050      	b.n	80054c8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800542a:	2b00      	cmp	r3, #0
 800542c:	da0f      	bge.n	800544e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	3338      	adds	r3, #56	; 0x38
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	3304      	adds	r3, #4
 8005444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	705a      	strb	r2, [r3, #1]
 800544c:	e00d      	b.n	800546a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	4413      	add	r3, r2
 8005460:	3304      	adds	r3, #4
 8005462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	b2da      	uxtb	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_PCD_EP_SetStall+0x82>
 8005486:	2302      	movs	r3, #2
 8005488:	e01e      	b.n	80054c8 <HAL_PCD_EP_SetStall+0xc0>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	4618      	mov	r0, r3
 800549a:	f005 fbbc 	bl	800ac16 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	b2d9      	uxtb	r1, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054b8:	461a      	mov	r2, r3
 80054ba:	f005 fdad 	bl	800b018 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d901      	bls.n	80054ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e042      	b.n	8005574 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da0f      	bge.n	8005516 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	f003 020f 	and.w	r2, r3, #15
 80054fc:	4613      	mov	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	3338      	adds	r3, #56	; 0x38
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	3304      	adds	r3, #4
 800550c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	705a      	strb	r2, [r3, #1]
 8005514:	e00f      	b.n	8005536 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	f003 020f 	and.w	r2, r3, #15
 800551c:	4613      	mov	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4413      	add	r3, r2
 800552c:	3304      	adds	r3, #4
 800552e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	b2da      	uxtb	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_PCD_EP_ClrStall+0x86>
 8005552:	2302      	movs	r3, #2
 8005554:	e00e      	b.n	8005574 <HAL_PCD_EP_ClrStall+0xa4>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	4618      	mov	r0, r3
 8005566:	f005 fbc4 	bl	800acf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	; 0x28
 8005580:	af02      	add	r7, sp, #8
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	3338      	adds	r3, #56	; 0x38
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4413      	add	r3, r2
 80055a0:	3304      	adds	r3, #4
 80055a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d901      	bls.n	80055b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e06c      	b.n	800568e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	695a      	ldr	r2, [r3, #20]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d902      	bls.n	80055d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3303      	adds	r3, #3
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055d8:	e02b      	b.n	8005632 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	695a      	ldr	r2, [r3, #20]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d902      	bls.n	80055f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3303      	adds	r3, #3
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68d9      	ldr	r1, [r3, #12]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800560e:	b2db      	uxtb	r3, r3
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4603      	mov	r3, r0
 8005614:	6978      	ldr	r0, [r7, #20]
 8005616:	f005 faa0 	bl	800ab5a <USB_WritePacket>

    ep->xfer_buff  += len;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	441a      	add	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	441a      	add	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	b29b      	uxth	r3, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	429a      	cmp	r2, r3
 8005646:	d809      	bhi.n	800565c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005650:	429a      	cmp	r2, r3
 8005652:	d203      	bcs.n	800565c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1be      	bne.n	80055da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	695a      	ldr	r2, [r3, #20]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	429a      	cmp	r2, r3
 8005666:	d811      	bhi.n	800568c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	2201      	movs	r2, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	43db      	mvns	r3, r3
 8005682:	6939      	ldr	r1, [r7, #16]
 8005684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005688:	4013      	ands	r3, r2
 800568a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	333c      	adds	r3, #60	; 0x3c
 80056b0:	3304      	adds	r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f040 80b3 	bne.w	8005836 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d028      	beq.n	800572c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a70      	ldr	r2, [pc, #448]	; (80058a0 <PCD_EP_OutXfrComplete_int+0x208>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d90e      	bls.n	8005700 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d009      	beq.n	8005700 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	461a      	mov	r2, r3
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f008 fe1d 	bl	800e340 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005710:	461a      	mov	r2, r3
 8005712:	2101      	movs	r1, #1
 8005714:	f005 fc80 	bl	800b018 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	461a      	mov	r2, r3
 8005726:	2308      	movs	r3, #8
 8005728:	6093      	str	r3, [r2, #8]
 800572a:	e0b3      	b.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	461a      	mov	r2, r3
 8005744:	2320      	movs	r3, #32
 8005746:	6093      	str	r3, [r2, #8]
 8005748:	e0a4      	b.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 809f 	bne.w	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a51      	ldr	r2, [pc, #324]	; (80058a0 <PCD_EP_OutXfrComplete_int+0x208>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d90f      	bls.n	800577e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577a:	6093      	str	r3, [r2, #8]
 800577c:	e08a      	b.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005790:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	0159      	lsls	r1, r3, #5
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	440b      	add	r3, r1
 800579a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80057a4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4403      	add	r3, r0
 80057b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80057b8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4403      	add	r3, r0
 80057dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4419      	add	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4403      	add	r3, r0
 80057f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80057f6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f008 fdb0 	bl	800e364 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d144      	bne.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d138      	bne.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800582c:	461a      	mov	r2, r3
 800582e:	2101      	movs	r1, #1
 8005830:	f005 fbf2 	bl	800b018 <USB_EP0_OutStart>
 8005834:	e02e      	b.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <PCD_EP_OutXfrComplete_int+0x20c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d124      	bne.n	8005888 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800585a:	6093      	str	r3, [r2, #8]
 800585c:	e01a      	b.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2320      	movs	r3, #32
 8005878:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f008 fd6f 	bl	800e364 <HAL_PCD_DataOutStageCallback>
 8005886:	e005      	b.n	8005894 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f008 fd68 	bl	800e364 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	4f54300a 	.word	0x4f54300a
 80058a4:	4f54310a 	.word	0x4f54310a

080058a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	333c      	adds	r3, #60	; 0x3c
 80058c0:	3304      	adds	r3, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d113      	bne.n	8005906 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <PCD_EP_OutSetupPacket_int+0xb8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d922      	bls.n	800592c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01d      	beq.n	800592c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fc:	461a      	mov	r2, r3
 80058fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005902:	6093      	str	r3, [r2, #8]
 8005904:	e012      	b.n	800592c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a16      	ldr	r2, [pc, #88]	; (8005964 <PCD_EP_OutSetupPacket_int+0xbc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10e      	bne.n	800592c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f008 fd07 	bl	800e340 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d90c      	bls.n	8005954 <PCD_EP_OutSetupPacket_int+0xac>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d108      	bne.n	8005954 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800594c:	461a      	mov	r2, r3
 800594e:	2101      	movs	r1, #1
 8005950:	f005 fb62 	bl	800b018 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	4f54300a 	.word	0x4f54300a
 8005964:	4f54310a 	.word	0x4f54310a

08005968 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
 8005974:	4613      	mov	r3, r2
 8005976:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d107      	bne.n	8005996 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005986:	883b      	ldrh	r3, [r7, #0]
 8005988:	0419      	lsls	r1, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	430a      	orrs	r2, r1
 8005992:	629a      	str	r2, [r3, #40]	; 0x28
 8005994:	e028      	b.n	80059e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4413      	add	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e00d      	b.n	80059c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	3340      	adds	r3, #64	; 0x40
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	3301      	adds	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	7bfa      	ldrb	r2, [r7, #15]
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d3ec      	bcc.n	80059aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059d0:	883b      	ldrh	r3, [r7, #0]
 80059d2:	0418      	lsls	r0, r3, #16
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6819      	ldr	r1, [r3, #0]
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	3b01      	subs	r3, #1
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	4302      	orrs	r2, r0
 80059e0:	3340      	adds	r3, #64	; 0x40
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	887a      	ldrh	r2, [r7, #2]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	f043 0303 	orr.w	r3, r3, #3
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6413      	str	r3, [r2, #64]	; 0x40
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a86:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a8c:	f7fb fe38 	bl	8001700 <HAL_GetTick>
 8005a90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a92:	e009      	b.n	8005aa8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a94:	f7fb fe34 	bl	8001700 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa2:	d901      	bls.n	8005aa8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e01f      	b.n	8005ae8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab4:	d1ee      	bne.n	8005a94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005abc:	f7fb fe20 	bl	8001700 <HAL_GetTick>
 8005ac0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ac2:	e009      	b.n	8005ad8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ac4:	f7fb fe1c 	bl	8001700 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad2:	d901      	bls.n	8005ad8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e007      	b.n	8005ae8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ad8:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae4:	d1ee      	bne.n	8005ac4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40023800 	.word	0x40023800
 8005af4:	420e0040 	.word	0x420e0040
 8005af8:	40007000 	.word	0x40007000
 8005afc:	420e0044 	.word	0x420e0044

08005b00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005b0c:	f7fb fdf8 	bl	8001700 <HAL_GetTick>
 8005b10:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e075      	b.n	8005c08 <HAL_QSPI_Init+0x108>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_QSPI_Init+0x2c>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e06d      	b.n	8005c08 <HAL_QSPI_Init+0x108>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10b      	bne.n	8005b58 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f007 ff2f 	bl	800d9ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005b4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f85e 	bl	8005c14 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	021a      	lsls	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f856 	bl	8005c30 <QSPI_WaitFlagStateUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d137      	bne.n	8005bfe <HAL_QSPI_Init+0xfe>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b98:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6852      	ldr	r2, [r2, #4]
 8005ba0:	0611      	lsls	r1, r2, #24
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	4311      	orrs	r1, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	69d2      	ldr	r2, [r2, #28]
 8005bac:	4311      	orrs	r1, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6a12      	ldr	r2, [r2, #32]
 8005bb2:	4311      	orrs	r1, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <HAL_QSPI_Init+0x110>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6912      	ldr	r2, [r2, #16]
 8005bca:	0411      	lsls	r1, r2, #16
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6952      	ldr	r2, [r2, #20]
 8005bd0:	4311      	orrs	r1, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6992      	ldr	r2, [r2, #24]
 8005bd6:	4311      	orrs	r1, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16U) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	ffe0f8fe 	.word	0xffe0f8fe

08005c14 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c40:	e01a      	b.n	8005c78 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c48:	d016      	beq.n	8005c78 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d007      	beq.n	8005c60 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005c50:	f7fb fd56 	bl	8001700 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d20b      	bcs.n	8005c78 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2204      	movs	r2, #4
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	f043 0201 	orr.w	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e00e      	b.n	8005c96 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bf14      	ite	ne
 8005c86:	2301      	movne	r3, #1
 8005c88:	2300      	moveq	r3, #0
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1d6      	bne.n	8005c42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0ca      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b67      	ldr	r3, [pc, #412]	; (8005e54 <HAL_RCC_ClockConfig+0x1b4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90c      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b64      	ldr	r3, [pc, #400]	; (8005e54 <HAL_RCC_ClockConfig+0x1b4>)
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b62      	ldr	r3, [pc, #392]	; (8005e54 <HAL_RCC_ClockConfig+0x1b4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0b6      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf4:	4b58      	ldr	r3, [pc, #352]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a57      	ldr	r2, [pc, #348]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d0c:	4b52      	ldr	r3, [pc, #328]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a51      	ldr	r2, [pc, #324]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b4f      	ldr	r3, [pc, #316]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	494c      	ldr	r1, [pc, #304]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b46      	ldr	r3, [pc, #280]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d119      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07d      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d003      	beq.n	8005d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06d      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e065      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4933      	ldr	r1, [pc, #204]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fb fcb6 	bl	8001700 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fb fcb2 	bl	8001700 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04d      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2a      	ldr	r3, [pc, #168]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_RCC_ClockConfig+0x1b4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20c      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b21      	ldr	r3, [pc, #132]	; (8005e54 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	; (8005e54 <HAL_RCC_ClockConfig+0x1b4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e030      	b.n	8005e4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df4:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4915      	ldr	r1, [pc, #84]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490d      	ldr	r1, [pc, #52]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f81d 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	5cd3      	ldrb	r3, [r2, r3]
 8005e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e42:	2000      	movs	r0, #0
 8005e44:	f008 f846 	bl	800ded4 <HAL_InitTick>

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40023c00 	.word	0x40023c00
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	08010af8 	.word	0x08010af8
 8005e60:	20000124 	.word	0x20000124

08005e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	2300      	movs	r3, #0
 8005e74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e7a:	4b63      	ldr	r3, [pc, #396]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d007      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x32>
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d008      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x38>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f040 80b4 	bne.w	8005ff8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e90:	4b5e      	ldr	r3, [pc, #376]	; (800600c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e92:	60bb      	str	r3, [r7, #8]
       break;
 8005e94:	e0b3      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e96:	4b5e      	ldr	r3, [pc, #376]	; (8006010 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e98:	60bb      	str	r3, [r7, #8]
      break;
 8005e9a:	e0b0      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e9c:	4b5a      	ldr	r3, [pc, #360]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ea6:	4b58      	ldr	r3, [pc, #352]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d04a      	beq.n	8005f48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb2:	4b55      	ldr	r3, [pc, #340]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	f04f 0400 	mov.w	r4, #0
 8005ebc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	ea03 0501 	and.w	r5, r3, r1
 8005ec8:	ea04 0602 	and.w	r6, r4, r2
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4632      	mov	r2, r6
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	f04f 0400 	mov.w	r4, #0
 8005ed8:	0154      	lsls	r4, r2, #5
 8005eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ede:	014b      	lsls	r3, r1, #5
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	1b49      	subs	r1, r1, r5
 8005ee6:	eb62 0206 	sbc.w	r2, r2, r6
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	f04f 0400 	mov.w	r4, #0
 8005ef2:	0194      	lsls	r4, r2, #6
 8005ef4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ef8:	018b      	lsls	r3, r1, #6
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	eb64 0402 	sbc.w	r4, r4, r2
 8005f00:	f04f 0100 	mov.w	r1, #0
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	00e2      	lsls	r2, r4, #3
 8005f0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f0e:	00d9      	lsls	r1, r3, #3
 8005f10:	460b      	mov	r3, r1
 8005f12:	4614      	mov	r4, r2
 8005f14:	195b      	adds	r3, r3, r5
 8005f16:	eb44 0406 	adc.w	r4, r4, r6
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	0262      	lsls	r2, r4, #9
 8005f24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005f28:	0259      	lsls	r1, r3, #9
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	4621      	mov	r1, r4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f04f 0400 	mov.w	r4, #0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	f7fa f95a 	bl	80001f4 <__aeabi_uldivmod>
 8005f40:	4603      	mov	r3, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	e049      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f48:	4b2f      	ldr	r3, [pc, #188]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	099b      	lsrs	r3, r3, #6
 8005f4e:	f04f 0400 	mov.w	r4, #0
 8005f52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	ea03 0501 	and.w	r5, r3, r1
 8005f5e:	ea04 0602 	and.w	r6, r4, r2
 8005f62:	4629      	mov	r1, r5
 8005f64:	4632      	mov	r2, r6
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	f04f 0400 	mov.w	r4, #0
 8005f6e:	0154      	lsls	r4, r2, #5
 8005f70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f74:	014b      	lsls	r3, r1, #5
 8005f76:	4619      	mov	r1, r3
 8005f78:	4622      	mov	r2, r4
 8005f7a:	1b49      	subs	r1, r1, r5
 8005f7c:	eb62 0206 	sbc.w	r2, r2, r6
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	f04f 0400 	mov.w	r4, #0
 8005f88:	0194      	lsls	r4, r2, #6
 8005f8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f8e:	018b      	lsls	r3, r1, #6
 8005f90:	1a5b      	subs	r3, r3, r1
 8005f92:	eb64 0402 	sbc.w	r4, r4, r2
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	00e2      	lsls	r2, r4, #3
 8005fa0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fa4:	00d9      	lsls	r1, r3, #3
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4614      	mov	r4, r2
 8005faa:	195b      	adds	r3, r3, r5
 8005fac:	eb44 0406 	adc.w	r4, r4, r6
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	02a2      	lsls	r2, r4, #10
 8005fba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fbe:	0299      	lsls	r1, r3, #10
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4614      	mov	r4, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f04f 0400 	mov.w	r4, #0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	f7fa f90f 	bl	80001f4 <__aeabi_uldivmod>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	60bb      	str	r3, [r7, #8]
      break;
 8005ff6:	e002      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ffa:	60bb      	str	r3, [r7, #8]
      break;
 8005ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006008:	40023800 	.word	0x40023800
 800600c:	00f42400 	.word	0x00f42400
 8006010:	007a1200 	.word	0x007a1200

08006014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCC_GetHCLKFreq+0x14>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000124 	.word	0x20000124

0800602c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006030:	f7ff fff0 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8006034:	4601      	mov	r1, r0
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	0a9b      	lsrs	r3, r3, #10
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4a03      	ldr	r2, [pc, #12]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006042:	5cd3      	ldrb	r3, [r2, r3]
 8006044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40023800 	.word	0x40023800
 8006050:	08010b08 	.word	0x08010b08

08006054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006058:	f7ff ffdc 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 800605c:	4601      	mov	r1, r0
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	0b5b      	lsrs	r3, r3, #13
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40023800 	.word	0x40023800
 8006078:	08010b08 	.word	0x08010b08

0800607c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	220f      	movs	r2, #15
 800608a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0203 	and.w	r2, r3, #3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006098:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80060a4:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80060b0:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <HAL_RCC_GetClockConfig+0x5c>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <HAL_RCC_GetClockConfig+0x60>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40023800 	.word	0x40023800
 80060dc:	40023c00 	.word	0x40023c00

080060e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006108:	4b66      	ldr	r3, [pc, #408]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800610a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800610e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006116:	4963      	ldr	r1, [pc, #396]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800612a:	4b5e      	ldr	r3, [pc, #376]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800612c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006130:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	495a      	ldr	r1, [pc, #360]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006160:	2b00      	cmp	r3, #0
 8006162:	d075      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006164:	4b50      	ldr	r3, [pc, #320]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800616a:	f7fb fac9 	bl	8001700 <HAL_GetTick>
 800616e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006172:	f7fb fac5 	bl	8001700 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e1dc      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006184:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f0      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	019a      	lsls	r2, r3, #6
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	071b      	lsls	r3, r3, #28
 80061a8:	493e      	ldr	r1, [pc, #248]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01f      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061bc:	4b39      	ldr	r3, [pc, #228]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c2:	0f1b      	lsrs	r3, r3, #28
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	019a      	lsls	r2, r3, #6
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	061b      	lsls	r3, r3, #24
 80061d6:	431a      	orrs	r2, r3
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	071b      	lsls	r3, r3, #28
 80061dc:	4931      	ldr	r1, [pc, #196]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061e4:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ea:	f023 021f 	bic.w	r2, r3, #31
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	492b      	ldr	r1, [pc, #172]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	019a      	lsls	r2, r3, #6
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	071b      	lsls	r3, r3, #28
 800621c:	4921      	ldr	r1, [pc, #132]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006224:	4b20      	ldr	r3, [pc, #128]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006226:	2201      	movs	r2, #1
 8006228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800622a:	f7fb fa69 	bl	8001700 <HAL_GetTick>
 800622e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006230:	e008      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006232:	f7fb fa65 	bl	8001700 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e17c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006244:	4b17      	ldr	r3, [pc, #92]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0f0      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d112      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10c      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80ce 	beq.w	8006412 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800627a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800627e:	f040 80c8 	bne.w	8006412 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006288:	f7fb fa3a 	bl	8001700 <HAL_GetTick>
 800628c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800628e:	e00f      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006290:	f7fb fa36 	bl	8001700 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d908      	bls.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e14d      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	42470068 	.word	0x42470068
 80062ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062b0:	4ba5      	ldr	r3, [pc, #660]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062bc:	d0e8      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d02e      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80062ca:	4b9f      	ldr	r3, [pc, #636]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	3301      	adds	r3, #1
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062dc:	4b9a      	ldr	r3, [pc, #616]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	0f1b      	lsrs	r3, r3, #28
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	019a      	lsls	r2, r3, #6
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	3b01      	subs	r3, #1
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	061b      	lsls	r3, r3, #24
 8006300:	431a      	orrs	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	071b      	lsls	r3, r3, #28
 8006306:	4990      	ldr	r1, [pc, #576]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800630e:	4b8e      	ldr	r3, [pc, #568]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006314:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	3b01      	subs	r3, #1
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	4989      	ldr	r1, [pc, #548]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d02c      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006334:	4b84      	ldr	r3, [pc, #528]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	3301      	adds	r3, #1
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006346:	4b80      	ldr	r3, [pc, #512]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	0e1b      	lsrs	r3, r3, #24
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	019a      	lsls	r2, r3, #6
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	3b01      	subs	r3, #1
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	431a      	orrs	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	061b      	lsls	r3, r3, #24
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	071b      	lsls	r3, r3, #28
 8006370:	4975      	ldr	r1, [pc, #468]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006378:	4b73      	ldr	r3, [pc, #460]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800637a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800637e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	4970      	ldr	r1, [pc, #448]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006396:	2b00      	cmp	r3, #0
 8006398:	d024      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800639e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a2:	d11f      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063a4:	4b68      	ldr	r3, [pc, #416]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	0e1b      	lsrs	r3, r3, #24
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063b2:	4b65      	ldr	r3, [pc, #404]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b8:	0f1b      	lsrs	r3, r3, #28
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	019a      	lsls	r2, r3, #6
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	3b01      	subs	r3, #1
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	431a      	orrs	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	071b      	lsls	r3, r3, #28
 80063dc:	495a      	ldr	r1, [pc, #360]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063e4:	4b59      	ldr	r3, [pc, #356]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063ea:	f7fb f989 	bl	8001700 <HAL_GetTick>
 80063ee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063f0:	e008      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063f2:	f7fb f985 	bl	8001700 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e09c      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006410:	d1ef      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8083 	beq.w	8006526 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006420:	2300      	movs	r3, #0
 8006422:	60bb      	str	r3, [r7, #8]
 8006424:	4b48      	ldr	r3, [pc, #288]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	4a47      	ldr	r2, [pc, #284]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800642a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800642e:	6413      	str	r3, [r2, #64]	; 0x40
 8006430:	4b45      	ldr	r3, [pc, #276]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800643c:	4b44      	ldr	r3, [pc, #272]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a43      	ldr	r2, [pc, #268]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006446:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006448:	f7fb f95a 	bl	8001700 <HAL_GetTick>
 800644c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006450:	f7fb f956 	bl	8001700 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e06d      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006462:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800646e:	4b36      	ldr	r3, [pc, #216]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006476:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d02f      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	429a      	cmp	r2, r3
 800648a:	d028      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800648c:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006496:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064a2:	4a29      	ldr	r2, [pc, #164]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064a8:	4b27      	ldr	r3, [pc, #156]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d114      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064b4:	f7fb f924 	bl	8001700 <HAL_GetTick>
 80064b8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ba:	e00a      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064bc:	f7fb f920 	bl	8001700 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e035      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0ee      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ea:	d10d      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80064ec:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006500:	4911      	ldr	r1, [pc, #68]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006502:	4313      	orrs	r3, r2
 8006504:	608b      	str	r3, [r1, #8]
 8006506:	e005      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a0e      	ldr	r2, [pc, #56]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800650e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006512:	6093      	str	r3, [r2, #8]
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006520:	4909      	ldr	r1, [pc, #36]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006522:	4313      	orrs	r3, r2
 8006524:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800653a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
 800654c:	42470070 	.word	0x42470070
 8006550:	40007000 	.word	0x40007000
 8006554:	42470e40 	.word	0x42470e40
 8006558:	424711e0 	.word	0x424711e0

0800655c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d075      	beq.n	8006660 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006574:	4ba2      	ldr	r3, [pc, #648]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 030c 	and.w	r3, r3, #12
 800657c:	2b04      	cmp	r3, #4
 800657e:	d00c      	beq.n	800659a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006580:	4b9f      	ldr	r3, [pc, #636]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006588:	2b08      	cmp	r3, #8
 800658a:	d112      	bne.n	80065b2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800658c:	4b9c      	ldr	r3, [pc, #624]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006598:	d10b      	bne.n	80065b2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659a:	4b99      	ldr	r3, [pc, #612]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d05b      	beq.n	800665e <HAL_RCC_OscConfig+0x102>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d157      	bne.n	800665e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e20b      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x6e>
 80065bc:	4b90      	ldr	r3, [pc, #576]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a8f      	ldr	r2, [pc, #572]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	e01d      	b.n	8006606 <HAL_RCC_OscConfig+0xaa>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065d2:	d10c      	bne.n	80065ee <HAL_RCC_OscConfig+0x92>
 80065d4:	4b8a      	ldr	r3, [pc, #552]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a89      	ldr	r2, [pc, #548]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b87      	ldr	r3, [pc, #540]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a86      	ldr	r2, [pc, #536]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e00b      	b.n	8006606 <HAL_RCC_OscConfig+0xaa>
 80065ee:	4b84      	ldr	r3, [pc, #528]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a83      	ldr	r2, [pc, #524]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b81      	ldr	r3, [pc, #516]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a80      	ldr	r2, [pc, #512]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006604:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d013      	beq.n	8006636 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fb f877 	bl	8001700 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006616:	f7fb f873 	bl	8001700 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b64      	cmp	r3, #100	; 0x64
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e1d0      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006628:	4b75      	ldr	r3, [pc, #468]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0xba>
 8006634:	e014      	b.n	8006660 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fb f863 	bl	8001700 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800663e:	f7fb f85f 	bl	8001700 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b64      	cmp	r3, #100	; 0x64
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e1bc      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006650:	4b6b      	ldr	r3, [pc, #428]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <HAL_RCC_OscConfig+0xe2>
 800665c:	e000      	b.n	8006660 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800665e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d063      	beq.n	8006734 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800666c:	4b64      	ldr	r3, [pc, #400]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006678:	4b61      	ldr	r3, [pc, #388]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006680:	2b08      	cmp	r3, #8
 8006682:	d11c      	bne.n	80066be <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006684:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d116      	bne.n	80066be <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006690:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_OscConfig+0x14c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e190      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a8:	4b55      	ldr	r3, [pc, #340]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4952      	ldr	r1, [pc, #328]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066bc:	e03a      	b.n	8006734 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066c6:	4b4f      	ldr	r3, [pc, #316]	; (8006804 <HAL_RCC_OscConfig+0x2a8>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fb f818 	bl	8001700 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d4:	f7fb f814 	bl	8001700 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e171      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e6:	4b46      	ldr	r3, [pc, #280]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066f2:	4b43      	ldr	r3, [pc, #268]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	493f      	ldr	r1, [pc, #252]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]
 8006706:	e015      	b.n	8006734 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006708:	4b3e      	ldr	r3, [pc, #248]	; (8006804 <HAL_RCC_OscConfig+0x2a8>)
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fa fff7 	bl	8001700 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006716:	f7fa fff3 	bl	8001700 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e150      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006728:	4b35      	ldr	r3, [pc, #212]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f0      	bne.n	8006716 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d030      	beq.n	80067a2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d016      	beq.n	8006776 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006748:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800674e:	f7fa ffd7 	bl	8001700 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006756:	f7fa ffd3 	bl	8001700 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e130      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 800676a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCC_OscConfig+0x1fa>
 8006774:	e015      	b.n	80067a2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fa ffc0 	bl	8001700 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006784:	f7fa ffbc 	bl	8001700 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e119      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f0      	bne.n	8006784 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 809f 	beq.w	80068ee <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067b0:	2300      	movs	r3, #0
 80067b2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10f      	bne.n	80067e0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	4a0d      	ldr	r2, [pc, #52]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ce:	6413      	str	r3, [r2, #64]	; 0x40
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_OscConfig+0x2a4>)
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_RCC_OscConfig+0x2b0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d120      	bne.n	800682e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <HAL_RCC_OscConfig+0x2b0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a06      	ldr	r2, [pc, #24]	; (800680c <HAL_RCC_OscConfig+0x2b0>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f8:	f7fa ff82 	bl	8001700 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fe:	e010      	b.n	8006822 <HAL_RCC_OscConfig+0x2c6>
 8006800:	40023800 	.word	0x40023800
 8006804:	42470000 	.word	0x42470000
 8006808:	42470e80 	.word	0x42470e80
 800680c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006810:	f7fa ff76 	bl	8001700 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e0d3      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006822:	4b6c      	ldr	r3, [pc, #432]	; (80069d4 <HAL_RCC_OscConfig+0x478>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x2e8>
 8006836:	4b68      	ldr	r3, [pc, #416]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4a67      	ldr	r2, [pc, #412]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	6713      	str	r3, [r2, #112]	; 0x70
 8006842:	e01c      	b.n	800687e <HAL_RCC_OscConfig+0x322>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b05      	cmp	r3, #5
 800684a:	d10c      	bne.n	8006866 <HAL_RCC_OscConfig+0x30a>
 800684c:	4b62      	ldr	r3, [pc, #392]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	4a61      	ldr	r2, [pc, #388]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	6713      	str	r3, [r2, #112]	; 0x70
 8006858:	4b5f      	ldr	r3, [pc, #380]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	4a5e      	ldr	r2, [pc, #376]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6713      	str	r3, [r2, #112]	; 0x70
 8006864:	e00b      	b.n	800687e <HAL_RCC_OscConfig+0x322>
 8006866:	4b5c      	ldr	r3, [pc, #368]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
 8006872:	4b59      	ldr	r3, [pc, #356]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4a58      	ldr	r2, [pc, #352]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 8006878:	f023 0304 	bic.w	r3, r3, #4
 800687c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d015      	beq.n	80068b2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006886:	f7fa ff3b 	bl	8001700 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688c:	e00a      	b.n	80068a4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800688e:	f7fa ff37 	bl	8001700 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f241 3288 	movw	r2, #5000	; 0x1388
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e092      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a4:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0ee      	beq.n	800688e <HAL_RCC_OscConfig+0x332>
 80068b0:	e014      	b.n	80068dc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b2:	f7fa ff25 	bl	8001700 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068b8:	e00a      	b.n	80068d0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ba:	f7fa ff21 	bl	8001700 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e07c      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d0:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1ee      	bne.n	80068ba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d105      	bne.n	80068ee <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e2:	4b3d      	ldr	r3, [pc, #244]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	4a3c      	ldr	r2, [pc, #240]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 80068e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d068      	beq.n	80069c8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068f6:	4b38      	ldr	r3, [pc, #224]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d060      	beq.n	80069c4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d145      	bne.n	8006996 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690a:	4b34      	ldr	r3, [pc, #208]	; (80069dc <HAL_RCC_OscConfig+0x480>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006910:	f7fa fef6 	bl	8001700 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006918:	f7fa fef2 	bl	8001700 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e04f      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692a:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69da      	ldr	r2, [r3, #28]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	019b      	lsls	r3, r3, #6
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	3b01      	subs	r3, #1
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	061b      	lsls	r3, r3, #24
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	071b      	lsls	r3, r3, #28
 8006962:	491d      	ldr	r1, [pc, #116]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006968:	4b1c      	ldr	r3, [pc, #112]	; (80069dc <HAL_RCC_OscConfig+0x480>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fa fec7 	bl	8001700 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006976:	f7fa fec3 	bl	8001700 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e020      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006988:	4b13      	ldr	r3, [pc, #76]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x41a>
 8006994:	e018      	b.n	80069c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006996:	4b11      	ldr	r3, [pc, #68]	; (80069dc <HAL_RCC_OscConfig+0x480>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fa feb0 	bl	8001700 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fa feac 	bl	8001700 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e009      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <HAL_RCC_OscConfig+0x47c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x448>
 80069c2:	e001      	b.n	80069c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40007000 	.word	0x40007000
 80069d8:	40023800 	.word	0x40023800
 80069dc:	42470060 	.word	0x42470060

080069e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e107      	b.n	8006c12 <HAL_SAI_Init+0x232>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f007 f9fc 	bl	800de14 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8ff 	bl	8006c28 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f932 	bl	8006c94 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d027      	beq.n	8006a88 <HAL_SAI_Init+0xa8>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f94f 	bl	8006cdc <SAI_GetInputClock>
 8006a3e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	025b      	lsls	r3, r3, #9
 8006a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a56:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a70      	ldr	r2, [pc, #448]	; (8006c1c <HAL_SAI_Init+0x23c>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	08da      	lsrs	r2, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if((tmpregisterGCR % 10U) > 8U)
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	4b6c      	ldr	r3, [pc, #432]	; (8006c1c <HAL_SAI_Init+0x23c>)
 8006a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a6e:	08da      	lsrs	r2, r3, #3
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	1aca      	subs	r2, r1, r3
 8006a7a:	2a08      	cmp	r2, #8
 8006a7c:	d904      	bls.n	8006a88 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv+= 1U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_SAI_Init+0xb8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d109      	bne.n	8006aac <HAL_SAI_Init+0xcc>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_SAI_Init+0xc4>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e001      	b.n	8006aa8 <HAL_SAI_Init+0xc8>
 8006aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	e008      	b.n	8006abe <HAL_SAI_Init+0xde>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d102      	bne.n	8006aba <HAL_SAI_Init+0xda>
 8006ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab8:	e000      	b.n	8006abc <HAL_SAI_Init+0xdc>
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch(hsai->Init.Synchro)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d815      	bhi.n	8006af2 <HAL_SAI_Init+0x112>
 8006ac6:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_SAI_Init+0xec>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006ae3 	.word	0x08006ae3
 8006ad4:	08006aeb 	.word	0x08006aeb
 8006ad8:	08006aeb 	.word	0x08006aeb
  {
  case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
    }
    break;
 8006ae0:	e008      	b.n	8006af4 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae6:	613b      	str	r3, [r7, #16]
    }
    break;
 8006ae8:	e004      	b.n	8006af4 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS_EXT_SAI1 :
  case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006aee:	613b      	str	r3, [r7, #16]
    }
    break;
 8006af0:	e000      	b.n	8006af4 <HAL_SAI_Init+0x114>
  default:
    break;
 8006af2:	bf00      	nop
  }
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <HAL_SAI_Init+0x240>)
 8006b00:	400b      	ands	r3, r1
 8006b02:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b12:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b18:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006b2c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006b38:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	051b      	lsls	r3, r3, #20
 8006b40:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006b58:	f023 030f 	bic.w	r3, r3, #15
 8006b5c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6859      	ldr	r1, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6899      	ldr	r1, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <HAL_SAI_Init+0x244>)
 8006b88:	400b      	ands	r3, r1
 8006b8a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6899      	ldr	r1, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b96:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset     |
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8006b9c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSOffset     |
 8006ba2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                          hsai->FrameInit.FSDefinition |
 8006ba8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006bb2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68d9      	ldr	r1, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006bca:	400b      	ands	r3, r1
 8006bcc:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN );

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68d9      	ldr	r1, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bdc:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006be4:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bea:	3b01      	subs	r3, #1
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	cccccccd 	.word	0xcccccccd
 8006c20:	ff05c010 	.word	0xff05c010
 8006c24:	fff88000 	.word	0xfff88000

08006c28 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006c28:	b490      	push	{r4, r7}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7U/1000U);
 8006c30:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <SAI_Disable+0x64>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a16      	ldr	r2, [pc, #88]	; (8006c90 <SAI_Disable+0x68>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	0b1b      	lsrs	r3, r3, #12
 8006c3c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c50:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8006c52:	4623      	mov	r3, r4
 8006c54:	1e5c      	subs	r4, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6e:	e006      	b.n	8006c7e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e9      	bne.n	8006c52 <SAI_Disable+0x2a>

  return status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc90      	pop	{r4, r7}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000124 	.word	0x20000124
 8006c90:	95cbec1b 	.word	0x95cbec1b

08006c94 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d007      	beq.n	8006cb4 <SAI_BlockSynchroConfig+0x20>
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d302      	bcc.n	8006cae <SAI_BlockSynchroConfig+0x1a>
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d006      	beq.n	8006cba <SAI_BlockSynchroConfig+0x26>
 8006cac:	e008      	b.n	8006cc0 <SAI_BlockSynchroConfig+0x2c>
  {
  case SAI_SYNCEXT_DISABLE :
    tmpregisterGCR = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
    break;
 8006cb2:	e008      	b.n	8006cc6 <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	60fb      	str	r3, [r7, #12]
    break;
 8006cb8:	e005      	b.n	8006cc6 <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006cba:	2320      	movs	r3, #32
 8006cbc:	60fb      	str	r3, [r7, #12]
    break;
 8006cbe:	e002      	b.n	8006cc6 <SAI_BlockSynchroConfig+0x32>
  default:
    tmpregisterGCR = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
    break;
 8006cc4:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <SAI_BlockSynchroConfig+0x44>)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */ 
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40015800 	.word	0x40015800

08006cdc <SAI_GetInputClock>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)   
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2); 
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));
 
  /* SAI Block clock source selection */
  if(hsai->Instance == SAI1_Block_A)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a44      	ldr	r2, [pc, #272]	; (8006e08 <SAI_GetInputClock+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10b      	bne.n	8006d12 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8006cfa:	4b44      	ldr	r3, [pc, #272]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	4940      	ldr	r1, [pc, #256]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8006d10:	e00b      	b.n	8006d2a <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8006d12:	4b3e      	ldr	r3, [pc, #248]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	493a      	ldr	r1, [pc, #232]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /* VCO Input Clock value calculation */
  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d2a:	4b38      	ldr	r3, [pc, #224]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d108      	bne.n	8006d48 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d36:	4b35      	ldr	r3, [pc, #212]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d3e:	4a34      	ldr	r2, [pc, #208]	; (8006e10 <SAI_GetInputClock+0x134>)
 8006d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e007      	b.n	8006d58 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d48:	4b30      	ldr	r3, [pc, #192]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d50:	4a30      	ldr	r2, [pc, #192]	; (8006e14 <SAI_GetInputClock+0x138>)
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d121      	bne.n	8006da4 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8006d60:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d66:	0e1b      	lsrs	r3, r3, #24
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg);
 8006d6e:	4b27      	ldr	r3, [pc, #156]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d74:	099b      	lsrs	r3, r3, #6
 8006d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	fb02 f203 	mul.w	r2, r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8006d88:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d8e:	0a1b      	lsrs	r3, r3, #8
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource/(tmpreg); 
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e02a      	b.n	8006dfa <SAI_GetInputClock+0x11e>

  }
  else if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dac:	d120      	bne.n	8006df0 <SAI_GetInputClock+0x114>
  {        
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8006dae:	4b17      	ldr	r3, [pc, #92]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db4:	0e1b      	lsrs	r3, r3, #24
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg);
 8006dbc:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc2:	099b      	lsrs	r3, r3, #6
 8006dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	fb02 f203 	mul.w	r2, r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	617b      	str	r3, [r7, #20]
    
    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U); 
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <SAI_GetInputClock+0x130>)
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource/(tmpreg);
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	e004      	b.n	8006dfa <SAI_GetInputClock+0x11e>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <SAI_GetInputClock+0x13c>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
    
    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8006df6:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <SAI_GetInputClock+0x140>)
 8006df8:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */  
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
       /* the return result is the value of SAI clock */
  return saiclocksource;
 8006dfa:	697b      	ldr	r3, [r7, #20]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40015804 	.word	0x40015804
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	00f42400 	.word	0x00f42400
 8006e14:	007a1200 	.word	0x007a1200
 8006e18:	4247015c 	.word	0x4247015c
 8006e1c:	00bb8000 	.word	0x00bb8000

08006e20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e01d      	b.n	8006e6e <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d105      	bne.n	8006e4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f006 fe2b 	bl	800daa0 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f810 	bl	8006e78 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e78:	b5b0      	push	{r4, r5, r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af04      	add	r7, sp, #16
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006e90:	2300      	movs	r3, #0
 8006e92:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006e98:	2376      	movs	r3, #118	; 0x76
 8006e9a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681d      	ldr	r5, [r3, #0]
 8006ea0:	466c      	mov	r4, sp
 8006ea2:	f107 0318 	add.w	r3, r7, #24
 8006ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006eae:	f107 030c 	add.w	r3, r7, #12
 8006eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f002 f90c 	bl	80090d2 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8006eba:	4b1c      	ldr	r3, [pc, #112]	; (8006f2c <HAL_SD_InitCard+0xb4>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 f94d 	bl	8009164 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <HAL_SD_InitCard+0xb4>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8006ed0:	2002      	movs	r0, #2
 8006ed2:	f7fa fc21 	bl	8001718 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fee6 	bl	8007ca8 <SD_PowerON>
 8006edc:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e013      	b.n	8006f24 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fe0a 	bl	8007b16 <SD_InitCard>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3728      	adds	r7, #40	; 0x28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f2c:	422580a0 	.word	0x422580a0

08006f30 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006f30:	b590      	push	{r4, r7, lr}
 8006f32:	b08f      	sub	sp, #60	; 0x3c
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8006f42:	f7fa fbdd 	bl	8001700 <HAL_GetTick>
 8006f46:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d107      	bne.n	8006f66 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e176      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	f040 8169 	bne.w	8007246 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	441a      	add	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d907      	bls.n	8006f98 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e15d      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d002      	beq.n	8006fb6 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	025b      	lsls	r3, r3, #9
 8006fb4:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 f964 	bl	800928c <SDMMC_CmdBlockLength>
 8006fc4:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d010      	beq.n	8006fee <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e132      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ff2:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	025b      	lsls	r3, r3, #9
 8006ff8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006ffa:	2390      	movs	r3, #144	; 0x90
 8006ffc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006ffe:	2302      	movs	r3, #2
 8007000:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007002:	2300      	movs	r3, #0
 8007004:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007006:	2301      	movs	r3, #1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f107 0210 	add.w	r2, r7, #16
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f002 f90d 	bl	8009234 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d90a      	bls.n	8007036 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2202      	movs	r2, #2
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4618      	mov	r0, r3
 800702e:	f002 f975 	bl	800931c <SDMMC_CmdReadMultiBlock>
 8007032:	6378      	str	r0, [r7, #52]	; 0x34
 8007034:	e009      	b.n	800704a <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4618      	mov	r0, r3
 8007044:	f002 f946 	bl	80092d4 <SDMMC_CmdReadSingleBlock>
 8007048:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800704a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704c:	2b00      	cmp	r3, #0
 800704e:	d04a      	beq.n	80070e6 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	431a      	orrs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e0f0      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d016      	beq.n	80070ae <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007080:	2300      	movs	r3, #0
 8007082:	633b      	str	r3, [r7, #48]	; 0x30
 8007084:	e00d      	b.n	80070a2 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6819      	ldr	r1, [r3, #0]
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007090:	18d4      	adds	r4, r2, r3
 8007092:	4608      	mov	r0, r1
 8007094:	f002 f848 	bl	8009128 <SDIO_ReadFIFO>
 8007098:	4603      	mov	r3, r0
 800709a:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	3301      	adds	r3, #1
 80070a0:	633b      	str	r3, [r7, #48]	; 0x30
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2b07      	cmp	r3, #7
 80070a6:	d9ee      	bls.n	8007086 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	3320      	adds	r3, #32
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80070ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <HAL_SD_ReadBlocks+0x194>
 80070b4:	f7fa fb24 	bl	8001700 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d810      	bhi.n	80070e6 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e0b6      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0be      	beq.n	8007072 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_SD_ReadBlocks+0x214>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d91d      	bls.n	8007144 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	2b03      	cmp	r3, #3
 800710e:	d019      	beq.n	8007144 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f002 f96d 	bl	80093f4 <SDMMC_CmdStopTransfer>
 800711a:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	d010      	beq.n	8007144 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	431a      	orrs	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e087      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007160:	f043 0208 	orr.w	r2, r3, #8
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e06f      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	f043 0202 	orr.w	r2, r3, #2
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e057      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d037      	beq.n	8007222 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	f043 0220 	orr.w	r2, r3, #32
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e03f      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 ffa5 	bl	8009128 <SDIO_ReadFIFO>
 80071de:	4602      	mov	r2, r0
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	3304      	adds	r3, #4
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d007      	beq.n	8007200 <HAL_SD_ReadBlocks+0x2d0>
 80071f0:	f7fa fa86 	bl	8001700 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d810      	bhi.n	8007222 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e018      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1d1      	bne.n	80071d4 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	e006      	b.n	8007254 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
  }
}
 8007254:	4618      	mov	r0, r3
 8007256:	373c      	adds	r7, #60	; 0x3c
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800726a:	2300      	movs	r3, #0
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800726e:	f7fa fa47 	bl	8001700 <HAL_GetTick>
 8007272:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e147      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b01      	cmp	r3, #1
 800729c:	f040 813a 	bne.w	8007514 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	441a      	add	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d907      	bls.n	80072c4 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e12e      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d002      	beq.n	80072e2 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	025b      	lsls	r3, r3, #9
 80072e0:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 ffce 	bl	800928c <SDMMC_CmdBlockLength>
 80072f0:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d010      	beq.n	800731a <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007308:	431a      	orrs	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e103      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d90a      	bls.n	8007336 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4618      	mov	r0, r3
 800732e:	f002 f83d 	bl	80093ac <SDMMC_CmdWriteMultiBlock>
 8007332:	6378      	str	r0, [r7, #52]	; 0x34
 8007334:	e009      	b.n	800734a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2210      	movs	r2, #16
 800733a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4618      	mov	r0, r3
 8007344:	f002 f80e 	bl	8009364 <SDMMC_CmdWriteSingleBlock>
 8007348:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800734a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734c:	2b00      	cmp	r3, #0
 800734e:	d010      	beq.n	8007372 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007358:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007360:	431a      	orrs	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e0d7      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007376:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	025b      	lsls	r3, r3, #9
 800737c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800737e:	2390      	movs	r3, #144	; 0x90
 8007380:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007386:	2300      	movs	r3, #0
 8007388:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800738a:	2301      	movs	r3, #1
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f107 0210 	add.w	r2, r7, #16
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f001 ff4b 	bl	8009234 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800739e:	e037      	b.n	8007410 <HAL_SD_WriteBlocks+0x1b4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d014      	beq.n	80073d8 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	633b      	str	r3, [r7, #48]	; 0x30
 80073b2:	e00b      	b.n	80073cc <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073be:	4413      	add	r3, r2
 80073c0:	4619      	mov	r1, r3
 80073c2:	f001 febe 	bl	8009142 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	3301      	adds	r3, #1
 80073ca:	633b      	str	r3, [r7, #48]	; 0x30
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	2b07      	cmp	r3, #7
 80073d0:	d9f0      	bls.n	80073b4 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	3320      	adds	r3, #32
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80073d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_SD_WriteBlocks+0x192>
 80073de:	f7fa f98f 	bl	8001700 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d810      	bhi.n	8007410 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	431a      	orrs	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e088      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0c0      	beq.n	80073a0 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007428:	2b00      	cmp	r3, #0
 800742a:	d020      	beq.n	800746e <HAL_SD_WriteBlocks+0x212>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d91d      	bls.n	800746e <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	2b03      	cmp	r3, #3
 8007438:	d019      	beq.n	800746e <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f001 ffd8 	bl	80093f4 <SDMMC_CmdStopTransfer>
 8007444:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	431a      	orrs	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e059      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d010      	beq.n	800749e <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	f043 0208 	orr.w	r2, r3, #8
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e041      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d010      	beq.n	80074ce <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	f043 0202 	orr.w	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e029      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d010      	beq.n	80074fe <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	f043 0210 	orr.w	r2, r3, #16
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e011      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007506:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e006      	b.n	8007522 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3738      	adds	r7, #56	; 0x38
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800753c:	0e1b      	lsrs	r3, r3, #24
 800753e:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	099b      	lsrs	r3, r3, #6
 8007544:	b2db      	uxtb	r3, r3
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	b2da      	uxtb	r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	089b      	lsrs	r3, r3, #2
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0303 	and.w	r3, r3, #3
 8007568:	b2da      	uxtb	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	b2db      	uxtb	r3, r3
 8007576:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007584:	0a1b      	lsrs	r3, r3, #8
 8007586:	b2db      	uxtb	r3, r3
 8007588:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	b2da      	uxtb	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007596:	b2db      	uxtb	r3, r3
 8007598:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	b2da      	uxtb	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a6:	0e1b      	lsrs	r3, r3, #24
 80075a8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	88db      	ldrh	r3, [r3, #6]
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	091b      	lsrs	r3, r3, #4
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	09db      	lsrs	r3, r3, #7
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	099b      	lsrs	r3, r3, #6
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	b2da      	uxtb	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	b2da      	uxtb	r2, r3
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	091b      	lsrs	r3, r3, #4
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	b2da      	uxtb	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2200      	movs	r2, #0
 8007636:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8087 	bne.w	8007750 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	029b      	lsls	r3, r3, #10
 8007646:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007652:	b2db      	uxtb	r3, r3
 8007654:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	691a      	ldr	r2, [r3, #16]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	431a      	orrs	r2, r3
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	b2db      	uxtb	r3, r3
 800766c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	099b      	lsrs	r3, r3, #6
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	431a      	orrs	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	b2db      	uxtb	r3, r3
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	b2da      	uxtb	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 0307 	and.w	r3, r3, #7
 8007698:	b2da      	uxtb	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	089b      	lsrs	r3, r3, #2
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 0306 	and.w	r3, r3, #6
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	7e1b      	ldrb	r3, [r3, #24]
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	09db      	lsrs	r3, r3, #7
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4313      	orrs	r3, r2
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	7e1b      	ldrb	r3, [r3, #24]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	3302      	adds	r3, #2
 8007710:	2201      	movs	r2, #1
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800771a:	fb02 f203 	mul.w	r2, r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	7a1b      	ldrb	r3, [r3, #8]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	2301      	movs	r3, #1
 800772c:	fa03 f202 	lsl.w	r2, r3, r2
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800773c:	0a52      	lsrs	r2, r2, #9
 800773e:	fb02 f203 	mul.w	r2, r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800774c:	661a      	str	r2, [r3, #96]	; 0x60
 800774e:	e04d      	b.n	80077ec <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007754:	2b01      	cmp	r3, #1
 8007756:	d138      	bne.n	80077ca <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775c:	b2db      	uxtb	r3, r3
 800775e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	041b      	lsls	r3, r3, #16
 8007764:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007770:	0e1b      	lsrs	r3, r3, #24
 8007772:	b2db      	uxtb	r3, r3
 8007774:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	431a      	orrs	r2, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007788:	0c1b      	lsrs	r3, r3, #16
 800778a:	b2db      	uxtb	r3, r3
 800778c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	691a      	ldr	r2, [r3, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	431a      	orrs	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	3301      	adds	r3, #1
 80077aa:	029a      	lsls	r2, r3, #10
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077be:	659a      	str	r2, [r3, #88]	; 0x58
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	661a      	str	r2, [r3, #96]	; 0x60
 80077c8:	e010      	b.n	80077ec <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0c1      	b.n	8007970 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	099b      	lsrs	r3, r3, #6
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007808:	b2da      	uxtb	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007812:	b2db      	uxtb	r3, r3
 8007814:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	7e9b      	ldrb	r3, [r3, #26]
 800781a:	b2da      	uxtb	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	09db      	lsrs	r3, r3, #7
 8007820:	b2db      	uxtb	r3, r3
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	b2db      	uxtb	r3, r3
 8007828:	4313      	orrs	r3, r2
 800782a:	b2da      	uxtb	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007838:	b2da      	uxtb	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007842:	0e1b      	lsrs	r3, r3, #24
 8007844:	b2db      	uxtb	r3, r3
 8007846:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	09db      	lsrs	r3, r3, #7
 800784c:	b2db      	uxtb	r3, r3
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	b2da      	uxtb	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	b2da      	uxtb	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	089b      	lsrs	r3, r3, #2
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	b2da      	uxtb	r2, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 030c 	and.w	r3, r3, #12
 8007884:	b2da      	uxtb	r2, r3
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	b2db      	uxtb	r3, r3
 8007892:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	7fdb      	ldrb	r3, [r3, #31]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	099b      	lsrs	r3, r3, #6
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	095b      	lsrs	r3, r3, #5
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078dc:	0a1b      	lsrs	r3, r3, #8
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	09db      	lsrs	r3, r3, #7
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	099b      	lsrs	r3, r3, #6
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	091b      	lsrs	r3, r3, #4
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	b2da      	uxtb	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	089b      	lsrs	r3, r3, #2
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	b2da      	uxtb	r2, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	b2da      	uxtb	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	b2db      	uxtb	r3, r3
 8007952:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80079d4:	b5b0      	push	{r4, r5, r7, lr}
 80079d6:	b08e      	sub	sp, #56	; 0x38
 80079d8:	af04      	add	r7, sp, #16
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80079de:	2300      	movs	r3, #0
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2203      	movs	r2, #3
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d02e      	beq.n	8007a50 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f8:	d106      	bne.n	8007a08 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
 8007a06:	e029      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0e:	d10a      	bne.n	8007a26 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa1b 	bl	8007e4c <SD_WideBus_Enable>
 8007a16:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
 8007a24:	e01a      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa5a 	bl	8007ee6 <SD_WideBus_Disable>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8007a40:	e00c      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a4e:	e005      	b.n	8007a5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e024      	b.n	8007ac4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681d      	ldr	r5, [r3, #0]
 8007aa0:	466c      	mov	r4, sp
 8007aa2:	f107 0318 	add.w	r3, r7, #24
 8007aa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007aaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007aae:	f107 030c 	add.w	r3, r7, #12
 8007ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f001 fb0c 	bl	80090d2 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3728      	adds	r7, #40	; 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bdb0      	pop	{r4, r5, r7, pc}

08007acc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f986 	bl	8007df8 <SD_SendStatus>
 8007aec:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	0a5b      	lsrs	r3, r3, #9
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b16:	b5b0      	push	{r4, r5, r7, lr}
 8007b18:	b094      	sub	sp, #80	; 0x50
 8007b1a:	af04      	add	r7, sp, #16
 8007b1c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8007b22:	2301      	movs	r3, #1
 8007b24:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 fb28 	bl	8009180 <SDIO_GetPowerState>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b3a:	e0b1      	b.n	8007ca0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d02f      	beq.n	8007ba4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 fd6d 	bl	8009628 <SDMMC_CmdSendCID>
 8007b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <SD_InitCard+0x44>
    {
      return errorstate;
 8007b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b58:	e0a2      	b.n	8007ca0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fb52 	bl	800920a <SDIO_GetResponse>
 8007b66:	4602      	mov	r2, r0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2104      	movs	r1, #4
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fb49 	bl	800920a <SDIO_GetResponse>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2108      	movs	r1, #8
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 fb40 	bl	800920a <SDIO_GetResponse>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	210c      	movs	r1, #12
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fb37 	bl	800920a <SDIO_GetResponse>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d00d      	beq.n	8007bc8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f107 020e 	add.w	r2, r7, #14
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 fd77 	bl	80096aa <SDMMC_CmdSetRelAdd>
 8007bbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SD_InitCard+0xb2>
    {
      return errorstate;
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	e06b      	b.n	8007ca0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d036      	beq.n	8007c3e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007bd0:	89fb      	ldrh	r3, [r7, #14]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be0:	041b      	lsls	r3, r3, #16
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f001 fd3f 	bl	8009668 <SDMMC_CmdSendCSD>
 8007bea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <SD_InitCard+0xe0>
    {
      return errorstate;
 8007bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf4:	e054      	b.n	8007ca0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 fb04 	bl	800920a <SDIO_GetResponse>
 8007c02:	4602      	mov	r2, r0
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 fafb 	bl	800920a <SDIO_GetResponse>
 8007c14:	4602      	mov	r2, r0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2108      	movs	r1, #8
 8007c20:	4618      	mov	r0, r3
 8007c22:	f001 faf2 	bl	800920a <SDIO_GetResponse>
 8007c26:	4602      	mov	r2, r0
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	210c      	movs	r1, #12
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fae9 	bl	800920a <SDIO_GetResponse>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2104      	movs	r1, #4
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fae0 	bl	800920a <SDIO_GetResponse>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	0d1a      	lsrs	r2, r3, #20
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8007c52:	f107 0310 	add.w	r3, r7, #16
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fc66 	bl	800752a <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6819      	ldr	r1, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	f04f 0400 	mov.w	r4, #0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4623      	mov	r3, r4
 8007c70:	4608      	mov	r0, r1
 8007c72:	f001 fbe3 	bl	800943c <SDMMC_CmdSelDesel>
 8007c76:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <SD_InitCard+0x16c>
  {
    return errorstate;
 8007c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c80:	e00e      	b.n	8007ca0 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681d      	ldr	r5, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	466c      	mov	r4, sp
 8007c8a:	f103 0210 	add.w	r2, r3, #16
 8007c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c94:	3304      	adds	r3, #4
 8007c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f001 fa1a 	bl	80090d2 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3740      	adds	r7, #64	; 0x40
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bdb0      	pop	{r4, r5, r7, pc}

08007ca8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 fbde 	bl	8009486 <SDMMC_CmdGoIdleState>
 8007cca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <SD_PowerON+0x2e>
  {
    return errorstate;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	e08c      	b.n	8007df0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fbf3 	bl	80094c6 <SDMMC_CmdOperCond>
 8007ce0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d03d      	beq.n	8007d64 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8007cee:	e032      	b.n	8007d56 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	60ba      	str	r2, [r7, #8]
 8007cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d102      	bne.n	8007d04 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d02:	e075      	b.n	8007df0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f001 fbfc 	bl	8009508 <SDMMC_CmdAppCommand>
 8007d10:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d1c:	e068      	b.n	8007df0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 fc13 	bl	8009550 <SDMMC_CmdAppOperCommand>
 8007d2a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d36:	e05b      	b.n	8007df0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fa63 	bl	800920a <SDIO_GetResponse>
 8007d44:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	0fdb      	lsrs	r3, r3, #31
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d101      	bne.n	8007d52 <SD_PowerON+0xaa>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <SD_PowerON+0xac>
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0c9      	beq.n	8007cf0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	645a      	str	r2, [r3, #68]	; 0x44
 8007d62:	e044      	b.n	8007dee <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8007d6a:	e031      	b.n	8007dd0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	60ba      	str	r2, [r7, #8]
 8007d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d102      	bne.n	8007d80 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d7e:	e037      	b.n	8007df0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fbbe 	bl	8009508 <SDMMC_CmdAppCommand>
 8007d8c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <SD_PowerON+0xf0>
      {
        return errorstate;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	e02b      	b.n	8007df0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fbd5 	bl	8009550 <SDMMC_CmdAppOperCommand>
 8007da6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <SD_PowerON+0x10a>
      {
        return errorstate;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	e01e      	b.n	8007df0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2100      	movs	r1, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 fa26 	bl	800920a <SDIO_GetResponse>
 8007dbe:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	0fdb      	lsrs	r3, r3, #31
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <SD_PowerON+0x124>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <SD_PowerON+0x126>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0ca      	beq.n	8007d6c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
 8007de6:	e002      	b.n	8007dee <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8007e0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e10:	e018      	b.n	8007e44 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	f001 fc66 	bl	80096f0 <SDMMC_CmdSendStatus>
 8007e24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <SD_SendStatus+0x38>
  {
    return errorstate;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	e009      	b.n	8007e44 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 f9e7 	bl	800920a <SDIO_GetResponse>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2100      	movs	r1, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f001 f9cf 	bl	800920a <SDIO_GetResponse>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e76:	d102      	bne.n	8007e7e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e7c:	e02f      	b.n	8007ede <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e7e:	f107 030c 	add.w	r3, r7, #12
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f87b 	bl	8007f80 <SD_FindSCR>
 8007e8a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	e023      	b.n	8007ede <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01c      	beq.n	8007eda <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea8:	041b      	lsls	r3, r3, #16
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f001 fb2b 	bl	8009508 <SDMMC_CmdAppCommand>
 8007eb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	e00f      	b.n	8007ede <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 fb68 	bl	800959a <SDMMC_CmdBusWidth>
 8007eca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	e003      	b.n	8007ede <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e001      	b.n	8007ede <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007eda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f982 	bl	800920a <SDIO_GetResponse>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f10:	d102      	bne.n	8007f18 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f16:	e02f      	b.n	8007f78 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f82e 	bl	8007f80 <SD_FindSCR>
 8007f24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	e023      	b.n	8007f78 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01c      	beq.n	8007f74 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f001 fade 	bl	8009508 <SDMMC_CmdAppCommand>
 8007f4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	e00f      	b.n	8007f78 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fb1b 	bl	800959a <SDMMC_CmdBusWidth>
 8007f64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	e003      	b.n	8007f78 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e001      	b.n	8007f78 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b08f      	sub	sp, #60	; 0x3c
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8007f8e:	f7f9 fbb7 	bl	8001700 <HAL_GetTick>
 8007f92:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2108      	movs	r1, #8
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 f970 	bl	800928c <SDMMC_CmdBlockLength>
 8007fac:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	e0a8      	b.n	800810a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f001 fa9f 	bl	8009508 <SDMMC_CmdAppCommand>
 8007fca:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	e099      	b.n	800810a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fda:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8007fdc:	2308      	movs	r3, #8
 8007fde:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007fe0:	2330      	movs	r3, #48	; 0x30
 8007fe2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f107 0214 	add.w	r2, r7, #20
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 f91a 	bl	8009234 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f001 faec 	bl	80095e2 <SDMMC_CmdSendSCR>
 800800a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	2b00      	cmp	r3, #0
 8008010:	d022      	beq.n	8008058 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	e079      	b.n	800810a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00e      	beq.n	8008042 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6819      	ldr	r1, [r3, #0]
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	f107 020c 	add.w	r2, r7, #12
 8008030:	18d4      	adds	r4, r2, r3
 8008032:	4608      	mov	r0, r1
 8008034:	f001 f878 	bl	8009128 <SDIO_ReadFIFO>
 8008038:	4603      	mov	r3, r0
 800803a:	6023      	str	r3, [r4, #0]
      index++;
 800803c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803e:	3301      	adds	r3, #1
 8008040:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008042:	f7f9 fb5d 	bl	8001700 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008050:	d102      	bne.n	8008058 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008052:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008056:	e058      	b.n	800810a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008062:	4013      	ands	r3, r2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0d6      	beq.n	8008016 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2208      	movs	r2, #8
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800807e:	2308      	movs	r3, #8
 8008080:	e043      	b.n	800810a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2202      	movs	r2, #2
 8008096:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008098:	2302      	movs	r3, #2
 800809a:	e036      	b.n	800810a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2220      	movs	r2, #32
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80080b2:	2320      	movs	r3, #32
 80080b4:	e029      	b.n	800810a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080be:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	061a      	lsls	r2, r3, #24
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080cc:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	0a1b      	lsrs	r3, r3, #8
 80080d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80080d6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80080e2:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80080e4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	061a      	lsls	r2, r3, #24
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	021b      	lsls	r3, r3, #8
 80080ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080f2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80080fc:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	0e1b      	lsrs	r3, r3, #24
 8008102:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	373c      	adds	r7, #60	; 0x3c
 800810e:	46bd      	mov	sp, r7
 8008110:	bd90      	pop	{r4, r7, pc}

08008112 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e025      	b.n	8008172 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f005 fe60 	bl	800de00 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f000 fe7c 	bl	8008e50 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	461a      	mov	r2, r3
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	f000 fee7 	bl	8008f36 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d101      	bne.n	8008196 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
 8008194:	e018      	b.n	80081c8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2202      	movs	r2, #2
 800819a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 ff44 	bl	8009034 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d104      	bne.n	80081be <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2205      	movs	r2, #5
 80081b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80081bc:	e003      	b.n	80081c6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d101      	bne.n	80081ea <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80081e6:	2302      	movs	r3, #2
 80081e8:	e00e      	b.n	8008208 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 ff57 	bl	80090ac <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e01d      	b.n	800825e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f005 fc9a 	bl	800db70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f000 fa14 	bl	800867c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0201 	orr.w	r2, r2, #1
 800827c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0307 	and.w	r3, r3, #7
 8008288:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b06      	cmp	r3, #6
 800828e:	d007      	beq.n	80082a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d122      	bne.n	800830a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d11b      	bne.n	800830a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f06f 0202 	mvn.w	r2, #2
 80082da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9a5 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 80082f6:	e005      	b.n	8008304 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f997 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9a8 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d122      	bne.n	800835e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b04      	cmp	r3, #4
 8008324:	d11b      	bne.n	800835e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f06f 0204 	mvn.w	r2, #4
 800832e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f97b 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 800834a:	e005      	b.n	8008358 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f96d 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f97e 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	f003 0308 	and.w	r3, r3, #8
 8008368:	2b08      	cmp	r3, #8
 800836a:	d122      	bne.n	80083b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b08      	cmp	r3, #8
 8008378:	d11b      	bne.n	80083b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f06f 0208 	mvn.w	r2, #8
 8008382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2204      	movs	r2, #4
 8008388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f951 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 800839e:	e005      	b.n	80083ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f943 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f954 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d122      	bne.n	8008406 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d11b      	bne.n	8008406 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f06f 0210 	mvn.w	r2, #16
 80083d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2208      	movs	r2, #8
 80083dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f927 	bl	8008640 <HAL_TIM_IC_CaptureCallback>
 80083f2:	e005      	b.n	8008400 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f919 	bl	800862c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f92a 	bl	8008654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	d10e      	bne.n	8008432 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b01      	cmp	r3, #1
 8008420:	d107      	bne.n	8008432 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f06f 0201 	mvn.w	r2, #1
 800842a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f005 f837 	bl	800d4a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843c:	2b80      	cmp	r3, #128	; 0x80
 800843e:	d10e      	bne.n	800845e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d107      	bne.n	800845e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa98 	bl	800898e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008468:	2b40      	cmp	r3, #64	; 0x40
 800846a:	d10e      	bne.n	800848a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d107      	bne.n	800848a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f8ef 	bl	8008668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f003 0320 	and.w	r3, r3, #32
 8008494:	2b20      	cmp	r3, #32
 8008496:	d10e      	bne.n	80084b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d107      	bne.n	80084b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f06f 0220 	mvn.w	r2, #32
 80084ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fa62 	bl	800897a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <HAL_TIM_ConfigClockSource+0x18>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e0a6      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x166>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	d067      	beq.n	80085de <HAL_TIM_ConfigClockSource+0x120>
 800850e:	2b40      	cmp	r3, #64	; 0x40
 8008510:	d80b      	bhi.n	800852a <HAL_TIM_ConfigClockSource+0x6c>
 8008512:	2b10      	cmp	r3, #16
 8008514:	d073      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x140>
 8008516:	2b10      	cmp	r3, #16
 8008518:	d802      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x62>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d06f      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800851e:	e078      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008520:	2b20      	cmp	r3, #32
 8008522:	d06c      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x140>
 8008524:	2b30      	cmp	r3, #48	; 0x30
 8008526:	d06a      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008528:	e073      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800852a:	2b70      	cmp	r3, #112	; 0x70
 800852c:	d00d      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x8c>
 800852e:	2b70      	cmp	r3, #112	; 0x70
 8008530:	d804      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x7e>
 8008532:	2b50      	cmp	r3, #80	; 0x50
 8008534:	d033      	beq.n	800859e <HAL_TIM_ConfigClockSource+0xe0>
 8008536:	2b60      	cmp	r3, #96	; 0x60
 8008538:	d041      	beq.n	80085be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800853a:	e06a      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800853c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008540:	d066      	beq.n	8008610 <HAL_TIM_ConfigClockSource+0x152>
 8008542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008546:	d017      	beq.n	8008578 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008548:	e063      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6899      	ldr	r1, [r3, #8]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f000 f9a9 	bl	80088b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800856c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	609a      	str	r2, [r3, #8]
      break;
 8008576:	e04c      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	6899      	ldr	r1, [r3, #8]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f000 f992 	bl	80088b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800859a:	609a      	str	r2, [r3, #8]
      break;
 800859c:	e039      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6859      	ldr	r1, [r3, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	461a      	mov	r2, r3
 80085ac:	f000 f906 	bl	80087bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2150      	movs	r1, #80	; 0x50
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f95f 	bl	800887a <TIM_ITRx_SetConfig>
      break;
 80085bc:	e029      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6859      	ldr	r1, [r3, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f000 f925 	bl	800881a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2160      	movs	r1, #96	; 0x60
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f94f 	bl	800887a <TIM_ITRx_SetConfig>
      break;
 80085dc:	e019      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6859      	ldr	r1, [r3, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f000 f8e6 	bl	80087bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2140      	movs	r1, #64	; 0x40
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f93f 	bl	800887a <TIM_ITRx_SetConfig>
      break;
 80085fc:	e009      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f000 f936 	bl	800887a <TIM_ITRx_SetConfig>
      break;
 800860e:	e000      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008610:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a40      	ldr	r2, [pc, #256]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d013      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d00f      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a3d      	ldr	r2, [pc, #244]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00b      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a3c      	ldr	r2, [pc, #240]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d007      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a3b      	ldr	r2, [pc, #236]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0x40>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a3a      	ldr	r2, [pc, #232]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d108      	bne.n	80086ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a2f      	ldr	r2, [pc, #188]	; (8008790 <TIM_Base_SetConfig+0x114>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d02b      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086dc:	d027      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a2c      	ldr	r2, [pc, #176]	; (8008794 <TIM_Base_SetConfig+0x118>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d023      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a2b      	ldr	r2, [pc, #172]	; (8008798 <TIM_Base_SetConfig+0x11c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d01f      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a2a      	ldr	r2, [pc, #168]	; (800879c <TIM_Base_SetConfig+0x120>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01b      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a29      	ldr	r2, [pc, #164]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d017      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a28      	ldr	r2, [pc, #160]	; (80087a4 <TIM_Base_SetConfig+0x128>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d013      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <TIM_Base_SetConfig+0x12c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00f      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a26      	ldr	r2, [pc, #152]	; (80087ac <TIM_Base_SetConfig+0x130>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00b      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <TIM_Base_SetConfig+0x134>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d007      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a24      	ldr	r2, [pc, #144]	; (80087b4 <TIM_Base_SetConfig+0x138>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d003      	beq.n	800872e <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a23      	ldr	r2, [pc, #140]	; (80087b8 <TIM_Base_SetConfig+0x13c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d108      	bne.n	8008740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a0a      	ldr	r2, [pc, #40]	; (8008790 <TIM_Base_SetConfig+0x114>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0xf8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a0c      	ldr	r2, [pc, #48]	; (80087a0 <TIM_Base_SetConfig+0x124>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d103      	bne.n	800877c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	615a      	str	r2, [r3, #20]
}
 8008782:	bf00      	nop
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	40010000 	.word	0x40010000
 8008794:	40000400 	.word	0x40000400
 8008798:	40000800 	.word	0x40000800
 800879c:	40000c00 	.word	0x40000c00
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800
 80087b0:	40001800 	.word	0x40001800
 80087b4:	40001c00 	.word	0x40001c00
 80087b8:	40002000 	.word	0x40002000

080087bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	f023 0201 	bic.w	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f023 030a 	bic.w	r3, r3, #10
 80087f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4313      	orrs	r3, r2
 8008800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	621a      	str	r2, [r3, #32]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800881a:	b480      	push	{r7}
 800881c:	b087      	sub	sp, #28
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f023 0210 	bic.w	r2, r3, #16
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	031b      	lsls	r3, r3, #12
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008856:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	621a      	str	r2, [r3, #32]
}
 800886e:	bf00      	nop
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	f043 0307 	orr.w	r3, r3, #7
 800889c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	609a      	str	r2, [r3, #8]
}
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	021a      	lsls	r2, r3, #8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	431a      	orrs	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	609a      	str	r2, [r3, #8]
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008904:	2302      	movs	r3, #2
 8008906:	e032      	b.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008940:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	4313      	orrs	r3, r2
 800894a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e03f      	b.n	8008a34 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d106      	bne.n	80089ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f005 f8f3 	bl	800dbb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2224      	movs	r2, #36	; 0x24
 80089d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f828 	bl	8008a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691a      	ldr	r2, [r3, #16]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008a7c:	f023 030c 	bic.w	r3, r3, #12
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	68f9      	ldr	r1, [r7, #12]
 8008a86:	430b      	orrs	r3, r1
 8008a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699a      	ldr	r2, [r3, #24]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa8:	f040 80e4 	bne.w	8008c74 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4aab      	ldr	r2, [pc, #684]	; (8008d60 <UART_SetConfig+0x324>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d004      	beq.n	8008ac0 <UART_SetConfig+0x84>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4aaa      	ldr	r2, [pc, #680]	; (8008d64 <UART_SetConfig+0x328>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d16c      	bne.n	8008b9a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008ac0:	f7fd fac8 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009a      	lsls	r2, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ada:	4aa3      	ldr	r2, [pc, #652]	; (8008d68 <UART_SetConfig+0x32c>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	011c      	lsls	r4, r3, #4
 8008ae4:	f7fd fab6 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009a      	lsls	r2, r3, #2
 8008af2:	441a      	add	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	fbb2 f5f3 	udiv	r5, r2, r3
 8008afe:	f7fd faa9 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	009a      	lsls	r2, r3, #2
 8008b0c:	441a      	add	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b18:	4a93      	ldr	r2, [pc, #588]	; (8008d68 <UART_SetConfig+0x32c>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	095b      	lsrs	r3, r3, #5
 8008b20:	2264      	movs	r2, #100	; 0x64
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	1aeb      	subs	r3, r5, r3
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	3332      	adds	r3, #50	; 0x32
 8008b2c:	4a8e      	ldr	r2, [pc, #568]	; (8008d68 <UART_SetConfig+0x32c>)
 8008b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b3a:	441c      	add	r4, r3
 8008b3c:	f7fd fa8a 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008b40:	4602      	mov	r2, r0
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009a      	lsls	r2, r3, #2
 8008b4a:	441a      	add	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	fbb2 f5f3 	udiv	r5, r2, r3
 8008b56:	f7fd fa7d 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009a      	lsls	r2, r3, #2
 8008b64:	441a      	add	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	4a7d      	ldr	r2, [pc, #500]	; (8008d68 <UART_SetConfig+0x32c>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	2264      	movs	r2, #100	; 0x64
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
 8008b7e:	1aeb      	subs	r3, r5, r3
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	3332      	adds	r3, #50	; 0x32
 8008b84:	4a78      	ldr	r2, [pc, #480]	; (8008d68 <UART_SetConfig+0x32c>)
 8008b86:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	f003 0207 	and.w	r2, r3, #7
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4422      	add	r2, r4
 8008b96:	609a      	str	r2, [r3, #8]
 8008b98:	e154      	b.n	8008e44 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008b9a:	f7fd fa47 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009a      	lsls	r2, r3, #2
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	4a6c      	ldr	r2, [pc, #432]	; (8008d68 <UART_SetConfig+0x32c>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	095b      	lsrs	r3, r3, #5
 8008bbc:	011c      	lsls	r4, r3, #4
 8008bbe:	f7fd fa35 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009a      	lsls	r2, r3, #2
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	fbb2 f5f3 	udiv	r5, r2, r3
 8008bd8:	f7fd fa28 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009a      	lsls	r2, r3, #2
 8008be6:	441a      	add	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	4a5d      	ldr	r2, [pc, #372]	; (8008d68 <UART_SetConfig+0x32c>)
 8008bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf8:	095b      	lsrs	r3, r3, #5
 8008bfa:	2264      	movs	r2, #100	; 0x64
 8008bfc:	fb02 f303 	mul.w	r3, r2, r3
 8008c00:	1aeb      	subs	r3, r5, r3
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	3332      	adds	r3, #50	; 0x32
 8008c06:	4a58      	ldr	r2, [pc, #352]	; (8008d68 <UART_SetConfig+0x32c>)
 8008c08:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0c:	095b      	lsrs	r3, r3, #5
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c14:	441c      	add	r4, r3
 8008c16:	f7fd fa09 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009a      	lsls	r2, r3, #2
 8008c24:	441a      	add	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008c30:	f7fd f9fc 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008c34:	4602      	mov	r2, r0
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009a      	lsls	r2, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4a:	4a47      	ldr	r2, [pc, #284]	; (8008d68 <UART_SetConfig+0x32c>)
 8008c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	2264      	movs	r2, #100	; 0x64
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
 8008c58:	1aeb      	subs	r3, r5, r3
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	3332      	adds	r3, #50	; 0x32
 8008c5e:	4a42      	ldr	r2, [pc, #264]	; (8008d68 <UART_SetConfig+0x32c>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	f003 0207 	and.w	r2, r3, #7
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4422      	add	r2, r4
 8008c70:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8008c72:	e0e7      	b.n	8008e44 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a39      	ldr	r2, [pc, #228]	; (8008d60 <UART_SetConfig+0x324>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <UART_SetConfig+0x24c>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a38      	ldr	r2, [pc, #224]	; (8008d64 <UART_SetConfig+0x328>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d171      	bne.n	8008d6c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008c88:	f7fd f9e4 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009a      	lsls	r2, r3, #2
 8008c96:	441a      	add	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	4a31      	ldr	r2, [pc, #196]	; (8008d68 <UART_SetConfig+0x32c>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	011c      	lsls	r4, r3, #4
 8008cac:	f7fd f9d2 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009a      	lsls	r2, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8008cc6:	f7fd f9c5 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009a      	lsls	r2, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce0:	4a21      	ldr	r2, [pc, #132]	; (8008d68 <UART_SetConfig+0x32c>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	2264      	movs	r2, #100	; 0x64
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
 8008cee:	1aeb      	subs	r3, r5, r3
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	3332      	adds	r3, #50	; 0x32
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <UART_SetConfig+0x32c>)
 8008cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfa:	095b      	lsrs	r3, r3, #5
 8008cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d00:	441c      	add	r4, r3
 8008d02:	f7fd f9a7 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008d06:	4602      	mov	r2, r0
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009a      	lsls	r2, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	fbb2 f5f3 	udiv	r5, r2, r3
 8008d1c:	f7fd f99a 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 8008d20:	4602      	mov	r2, r0
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009a      	lsls	r2, r3, #2
 8008d2a:	441a      	add	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <UART_SetConfig+0x32c>)
 8008d38:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	2264      	movs	r2, #100	; 0x64
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	1aeb      	subs	r3, r5, r3
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	3332      	adds	r3, #50	; 0x32
 8008d4a:	4a07      	ldr	r2, [pc, #28]	; (8008d68 <UART_SetConfig+0x32c>)
 8008d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	f003 020f 	and.w	r2, r3, #15
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4422      	add	r2, r4
 8008d5c:	609a      	str	r2, [r3, #8]
 8008d5e:	e071      	b.n	8008e44 <UART_SetConfig+0x408>
 8008d60:	40011000 	.word	0x40011000
 8008d64:	40011400 	.word	0x40011400
 8008d68:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008d6c:	f7fd f95e 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008d70:	4602      	mov	r2, r0
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009a      	lsls	r2, r3, #2
 8008d7a:	441a      	add	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d86:	4a31      	ldr	r2, [pc, #196]	; (8008e4c <UART_SetConfig+0x410>)
 8008d88:	fba2 2303 	umull	r2, r3, r2, r3
 8008d8c:	095b      	lsrs	r3, r3, #5
 8008d8e:	011c      	lsls	r4, r3, #4
 8008d90:	f7fd f94c 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008d94:	4602      	mov	r2, r0
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009a      	lsls	r2, r3, #2
 8008d9e:	441a      	add	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	fbb2 f5f3 	udiv	r5, r2, r3
 8008daa:	f7fd f93f 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4613      	mov	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	009a      	lsls	r2, r3, #2
 8008db8:	441a      	add	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc4:	4a21      	ldr	r2, [pc, #132]	; (8008e4c <UART_SetConfig+0x410>)
 8008dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dca:	095b      	lsrs	r3, r3, #5
 8008dcc:	2264      	movs	r2, #100	; 0x64
 8008dce:	fb02 f303 	mul.w	r3, r2, r3
 8008dd2:	1aeb      	subs	r3, r5, r3
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	3332      	adds	r3, #50	; 0x32
 8008dd8:	4a1c      	ldr	r2, [pc, #112]	; (8008e4c <UART_SetConfig+0x410>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	095b      	lsrs	r3, r3, #5
 8008de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008de4:	441c      	add	r4, r3
 8008de6:	f7fd f921 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008dea:	4602      	mov	r2, r0
 8008dec:	4613      	mov	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	009a      	lsls	r2, r3, #2
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	fbb2 f5f3 	udiv	r5, r2, r3
 8008e00:	f7fd f914 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8008e04:	4602      	mov	r2, r0
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009a      	lsls	r2, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <UART_SetConfig+0x410>)
 8008e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e20:	095b      	lsrs	r3, r3, #5
 8008e22:	2264      	movs	r2, #100	; 0x64
 8008e24:	fb02 f303 	mul.w	r3, r2, r3
 8008e28:	1aeb      	subs	r3, r5, r3
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	3332      	adds	r3, #50	; 0x32
 8008e2e:	4a07      	ldr	r2, [pc, #28]	; (8008e4c <UART_SetConfig+0x410>)
 8008e30:	fba2 2303 	umull	r2, r3, r2, r3
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	f003 020f 	and.w	r2, r3, #15
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4422      	add	r2, r4
 8008e40:	609a      	str	r2, [r3, #8]
}
 8008e42:	e7ff      	b.n	8008e44 <UART_SetConfig+0x408>
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e4c:	51eb851f 	.word	0x51eb851f

08008e50 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d029      	beq.n	8008ebe <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008e76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e7a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e84:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008e8a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008e90:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008e96:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008e9c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008ea2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008ea8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008eae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e034      	b.n	8008f28 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ed4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008eda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008eee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ef2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008efc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008f02:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008f08:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008f0e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008f14:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b087      	sub	sp, #28
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d02e      	beq.n	8008fae <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f5c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008f6c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008f76:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008f80:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008f8a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008f94:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	609a      	str	r2, [r3, #8]
 8008fac:	e03b      	b.n	8009026 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fbe:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fe4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008ff4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008ffe:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	3b01      	subs	r3, #1
 8009006:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009008:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	3b01      	subs	r3, #1
 8009010:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009012:	4313      	orrs	r3, r2
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009050:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	3b01      	subs	r3, #1
 8009058:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800905a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009062:	4313      	orrs	r3, r2
 8009064:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800906c:	f7f8 fb48 	bl	8001700 <HAL_GetTick>
 8009070:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009072:	e010      	b.n	8009096 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800907a:	d00c      	beq.n	8009096 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <FMC_SDRAM_SendCommand+0x5e>
 8009082:	f7f8 fb3d 	bl	8001700 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	429a      	cmp	r2, r3
 8009090:	d201      	bcs.n	8009096 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e006      	b.n	80090a4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d0e8      	beq.n	8009074 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80090d2:	b084      	sub	sp, #16
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	f107 001c 	add.w	r0, r7, #28
 80090e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80090e8:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80090ea:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80090ec:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80090f0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80090f4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80090f8:	431a      	orrs	r2, r3
             Init.ClockDiv
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80090fc:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800910c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	431a      	orrs	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	b004      	add	sp, #16
 8009126:	4770      	bx	lr

08009128 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2203      	movs	r2, #3
 8009170:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0303 	and.w	r3, r3, #3
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80091c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80091c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80091d6:	f023 030f 	bic.w	r3, r3, #15
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	b2db      	uxtb	r3, r3
}
 80091fe:	4618      	mov	r0, r3
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3314      	adds	r3, #20
 800921c:	461a      	mov	r2, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	4413      	add	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
}  
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800925a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009260:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009266:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009272:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	431a      	orrs	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800927e:	2300      	movs	r3, #0

}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
 8009298:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800929e:	2310      	movs	r3, #16
 80092a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092a2:	2340      	movs	r3, #64	; 0x40
 80092a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ae:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092b0:	f107 0308 	add.w	r3, r7, #8
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff ff70 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80092bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c0:	2110      	movs	r1, #16
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa62 	bl	800978c <SDMMC_GetCmdResp1>
 80092c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ca:	69fb      	ldr	r3, [r7, #28]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80092e6:	2311      	movs	r3, #17
 80092e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092f8:	f107 0308 	add.w	r3, r7, #8
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff ff4c 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009304:	f241 3288 	movw	r2, #5000	; 0x1388
 8009308:	2111      	movs	r1, #17
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa3e 	bl	800978c <SDMMC_GetCmdResp1>
 8009310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009312:	69fb      	ldr	r3, [r7, #28]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3720      	adds	r7, #32
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
 8009328:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800932e:	2312      	movs	r3, #18
 8009330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009332:	2340      	movs	r3, #64	; 0x40
 8009334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800933a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009340:	f107 0308 	add.w	r3, r7, #8
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff ff28 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800934c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009350:	2112      	movs	r1, #18
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fa1a 	bl	800978c <SDMMC_GetCmdResp1>
 8009358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800935a:	69fb      	ldr	r3, [r7, #28]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009376:	2318      	movs	r3, #24
 8009378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800937a:	2340      	movs	r3, #64	; 0x40
 800937c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009386:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009388:	f107 0308 	add.w	r3, r7, #8
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff ff04 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009394:	f241 3288 	movw	r2, #5000	; 0x1388
 8009398:	2118      	movs	r1, #24
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f9f6 	bl	800978c <SDMMC_GetCmdResp1>
 80093a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a2:	69fb      	ldr	r3, [r7, #28]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80093be:	2319      	movs	r3, #25
 80093c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ce:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fee0 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80093dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e0:	2119      	movs	r1, #25
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9d2 	bl	800978c <SDMMC_GetCmdResp1>
 80093e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ea:	69fb      	ldr	r3, [r7, #28]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093fc:	2300      	movs	r3, #0
 80093fe:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009404:	230c      	movs	r3, #12
 8009406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009408:	2340      	movs	r3, #64	; 0x40
 800940a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009414:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff febd 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8009422:	4a05      	ldr	r2, [pc, #20]	; (8009438 <SDMMC_CmdStopTransfer+0x44>)
 8009424:	210c      	movs	r1, #12
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f9b0 	bl	800978c <SDMMC_GetCmdResp1>
 800942c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800942e:	69fb      	ldr	r3, [r7, #28]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3720      	adds	r7, #32
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	05f5e100 	.word	0x05f5e100

0800943c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08a      	sub	sp, #40	; 0x28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009448:	2300      	movs	r3, #0
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009450:	2307      	movs	r3, #7
 8009452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009454:	2340      	movs	r3, #64	; 0x40
 8009456:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009458:	2300      	movs	r3, #0
 800945a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800945c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009460:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009462:	f107 0310 	add.w	r3, r7, #16
 8009466:	4619      	mov	r1, r3
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f7ff fe97 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800946e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009472:	2107      	movs	r1, #7
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f989 	bl	800978c <SDMMC_GetCmdResp1>
 800947a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800947e:	4618      	mov	r0, r3
 8009480:	3728      	adds	r7, #40	; 0x28
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b088      	sub	sp, #32
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800948e:	2300      	movs	r3, #0
 8009490:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800949e:	2300      	movs	r3, #0
 80094a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094a8:	f107 0308 	add.w	r3, r7, #8
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff fe74 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f93f 	bl	8009738 <SDMMC_GetCmdError>
 80094ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094bc:	69fb      	ldr	r3, [r7, #28]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b088      	sub	sp, #32
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80094d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80094d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80094d8:	2308      	movs	r3, #8
 80094da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094dc:	2340      	movs	r3, #64	; 0x40
 80094de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094ea:	f107 0308 	add.w	r3, r7, #8
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fe53 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fb10 	bl	8009b1c <SDMMC_GetCmdResp7>
 80094fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094fe:	69fb      	ldr	r3, [r7, #28]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009512:	2300      	movs	r3, #0
 8009514:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800951a:	2337      	movs	r3, #55	; 0x37
 800951c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800951e:	2340      	movs	r3, #64	; 0x40
 8009520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800952c:	f107 0308 	add.w	r3, r7, #8
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff fe32 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009538:	f241 3288 	movw	r2, #5000	; 0x1388
 800953c:	2137      	movs	r1, #55	; 0x37
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f924 	bl	800978c <SDMMC_GetCmdResp1>
 8009544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009546:	69fb      	ldr	r3, [r7, #28]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800956a:	2329      	movs	r3, #41	; 0x29
 800956c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800956e:	2340      	movs	r3, #64	; 0x40
 8009570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009572:	2300      	movs	r3, #0
 8009574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800957a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800957c:	f107 0308 	add.w	r3, r7, #8
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff fe0a 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fa25 	bl	80099d8 <SDMMC_GetCmdResp3>
 800958e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009590:	69fb      	ldr	r3, [r7, #28]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b088      	sub	sp, #32
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80095ac:	2306      	movs	r3, #6
 80095ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095b4:	2300      	movs	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095bc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095be:	f107 0308 	add.w	r3, r7, #8
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff fde9 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80095ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ce:	2106      	movs	r1, #6
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f8db 	bl	800978c <SDMMC_GetCmdResp1>
 80095d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d8:	69fb      	ldr	r3, [r7, #28]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b088      	sub	sp, #32
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80095f2:	2333      	movs	r3, #51	; 0x33
 80095f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009602:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fdc6 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009610:	f241 3288 	movw	r2, #5000	; 0x1388
 8009614:	2133      	movs	r1, #51	; 0x33
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f8b8 	bl	800978c <SDMMC_GetCmdResp1>
 800961c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800961e:	69fb      	ldr	r3, [r7, #28]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009638:	2302      	movs	r3, #2
 800963a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800963c:	23c0      	movs	r3, #192	; 0xc0
 800963e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009640:	2300      	movs	r3, #0
 8009642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009648:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800964a:	f107 0308 	add.w	r3, r7, #8
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fda3 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f97e 	bl	8009958 <SDMMC_GetCmdResp2>
 800965c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800965e:	69fb      	ldr	r3, [r7, #28]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3720      	adds	r7, #32
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800967a:	2309      	movs	r3, #9
 800967c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800967e:	23c0      	movs	r3, #192	; 0xc0
 8009680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800968a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800968c:	f107 0308 	add.w	r3, r7, #8
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff fd82 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f95d 	bl	8009958 <SDMMC_GetCmdResp2>
 800969e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096a0:	69fb      	ldr	r3, [r7, #28]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b088      	sub	sp, #32
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80096bc:	2303      	movs	r3, #3
 80096be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096c0:	2340      	movs	r3, #64	; 0x40
 80096c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096c4:	2300      	movs	r3, #0
 80096c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096cc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fd61 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	2103      	movs	r1, #3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f9ae 	bl	8009a40 <SDMMC_GetCmdResp6>
 80096e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096e6:	69fb      	ldr	r3, [r7, #28]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3720      	adds	r7, #32
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009702:	230d      	movs	r3, #13
 8009704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800970e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009712:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009714:	f107 0308 	add.w	r3, r7, #8
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff fd3e 	bl	800919c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009720:	f241 3288 	movw	r2, #5000	; 0x1388
 8009724:	210d      	movs	r1, #13
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f830 	bl	800978c <SDMMC_GetCmdResp1>
 800972c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800972e:	69fb      	ldr	r3, [r7, #28]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009738:	b490      	push	{r4, r7}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009740:	4b10      	ldr	r3, [pc, #64]	; (8009784 <SDMMC_GetCmdError+0x4c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a10      	ldr	r2, [pc, #64]	; (8009788 <SDMMC_GetCmdError+0x50>)
 8009746:	fba2 2303 	umull	r2, r3, r2, r3
 800974a:	0a5b      	lsrs	r3, r3, #9
 800974c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009750:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009754:	4623      	mov	r3, r4
 8009756:	1e5c      	subs	r4, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800975c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009760:	e00a      	b.n	8009778 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0f2      	beq.n	8009754 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009774:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bc90      	pop	{r4, r7}
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20000124 	.word	0x20000124
 8009788:	10624dd3 	.word	0x10624dd3

0800978c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	460b      	mov	r3, r1
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800979a:	4b6c      	ldr	r3, [pc, #432]	; (800994c <SDMMC_GetCmdResp1+0x1c0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a6c      	ldr	r2, [pc, #432]	; (8009950 <SDMMC_GetCmdResp1+0x1c4>)
 80097a0:	fba2 2303 	umull	r2, r3, r2, r3
 80097a4:	0a5b      	lsrs	r3, r3, #9
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80097ac:	4623      	mov	r3, r4
 80097ae:	1e5c      	subs	r4, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097b8:	e0c3      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0f2      	beq.n	80097ac <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d004      	beq.n	80097dc <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2204      	movs	r2, #4
 80097d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097d8:	2304      	movs	r3, #4
 80097da:	e0b2      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e0a7      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff fcfc 	bl	80091f0 <SDIO_GetCommandResponse>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	4293      	cmp	r3, r2
 8009800:	d001      	beq.n	8009806 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009802:	2301      	movs	r3, #1
 8009804:	e09d      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800980c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800980e:	2100      	movs	r1, #0
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7ff fcfa 	bl	800920a <SDIO_GetResponse>
 8009816:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	4b4e      	ldr	r3, [pc, #312]	; (8009954 <SDMMC_GetCmdResp1+0x1c8>)
 800981c:	4013      	ands	r3, r2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009822:	2300      	movs	r3, #0
 8009824:	e08d      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2b00      	cmp	r3, #0
 800982a:	da02      	bge.n	8009832 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800982c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009830:	e087      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800983c:	2340      	movs	r3, #64	; 0x40
 800983e:	e080      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800984a:	2380      	movs	r3, #128	; 0x80
 800984c:	e079      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985c:	e071      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800986c:	e069      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800987c:	e061      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800988c:	e059      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800989c:	e051      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098ac:	e049      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80098b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098bc:	e041      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80098c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098cc:	e039      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098dc:	e031      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80098e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098ec:	e029      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80098f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098fc:	e021      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009908:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800990c:	e019      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800991c:	e011      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800992c:	e009      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009938:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800993c:	e001      	b.n	8009942 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800993e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009942:	4618      	mov	r0, r3
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	bd90      	pop	{r4, r7, pc}
 800994a:	bf00      	nop
 800994c:	20000124 	.word	0x20000124
 8009950:	10624dd3 	.word	0x10624dd3
 8009954:	fdffe008 	.word	0xfdffe008

08009958 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009958:	b490      	push	{r4, r7}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009960:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <SDMMC_GetCmdResp2+0x78>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a1b      	ldr	r2, [pc, #108]	; (80099d4 <SDMMC_GetCmdResp2+0x7c>)
 8009966:	fba2 2303 	umull	r2, r3, r2, r3
 800996a:	0a5b      	lsrs	r3, r3, #9
 800996c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009970:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009974:	4623      	mov	r3, r4
 8009976:	1e5c      	subs	r4, r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800997c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009980:	e020      	b.n	80099c4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009986:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f2      	beq.n	8009974 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2204      	movs	r2, #4
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099a0:	2304      	movs	r3, #4
 80099a2:	e00f      	b.n	80099c4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e004      	b.n	80099c4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc90      	pop	{r4, r7}
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	20000124 	.word	0x20000124
 80099d4:	10624dd3 	.word	0x10624dd3

080099d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80099d8:	b490      	push	{r4, r7}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099e0:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <SDMMC_GetCmdResp3+0x60>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <SDMMC_GetCmdResp3+0x64>)
 80099e6:	fba2 2303 	umull	r2, r3, r2, r3
 80099ea:	0a5b      	lsrs	r3, r3, #9
 80099ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80099f4:	4623      	mov	r3, r4
 80099f6:	1e5c      	subs	r4, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a00:	e015      	b.n	8009a2e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0f2      	beq.n	80099f4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d004      	beq.n	8009a24 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a20:	2304      	movs	r3, #4
 8009a22:	e004      	b.n	8009a2e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a2a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc90      	pop	{r4, r7}
 8009a36:	4770      	bx	lr
 8009a38:	20000124 	.word	0x20000124
 8009a3c:	10624dd3 	.word	0x10624dd3

08009a40 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009a40:	b590      	push	{r4, r7, lr}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a4e:	4b31      	ldr	r3, [pc, #196]	; (8009b14 <SDMMC_GetCmdResp6+0xd4>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a31      	ldr	r2, [pc, #196]	; (8009b18 <SDMMC_GetCmdResp6+0xd8>)
 8009a54:	fba2 2303 	umull	r2, r3, r2, r3
 8009a58:	0a5b      	lsrs	r3, r3, #9
 8009a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a62:	4623      	mov	r3, r4
 8009a64:	1e5c      	subs	r4, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d102      	bne.n	8009a70 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a6e:	e04c      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a74:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0f2      	beq.n	8009a62 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a8e:	2304      	movs	r3, #4
 8009a90:	e03b      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e030      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f7ff fba1 	bl	80091f0 <SDIO_GetCommandResponse>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d001      	beq.n	8009abc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e026      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ac2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f7ff fb9f 	bl	800920a <SDIO_GetResponse>
 8009acc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	0c1b      	lsrs	r3, r3, #16
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e011      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009af4:	e009      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b04:	e001      	b.n	8009b0a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd90      	pop	{r4, r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000124 	.word	0x20000124
 8009b18:	10624dd3 	.word	0x10624dd3

08009b1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009b1c:	b490      	push	{r4, r7}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b24:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <SDMMC_GetCmdResp7+0x6c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a18      	ldr	r2, [pc, #96]	; (8009b8c <SDMMC_GetCmdResp7+0x70>)
 8009b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2e:	0a5b      	lsrs	r3, r3, #9
 8009b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b38:	4623      	mov	r3, r4
 8009b3a:	1e5c      	subs	r4, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b44:	e01a      	b.n	8009b7c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0f2      	beq.n	8009b38 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2240      	movs	r2, #64	; 0x40
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b64:	2304      	movs	r3, #4
 8009b66:	e009      	b.n	8009b7c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2240      	movs	r2, #64	; 0x40
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b7a:	2300      	movs	r3, #0
  
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc90      	pop	{r4, r7}
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000124 	.word	0x20000124
 8009b8c:	10624dd3 	.word	0x10624dd3

08009b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b90:	b084      	sub	sp, #16
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	f107 001c 	add.w	r0, r7, #28
 8009b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d122      	bne.n	8009bee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d105      	bne.n	8009be2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 fa76 	bl	800b0d4 <USB_CoreReset>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	e01a      	b.n	8009c24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 fa6a 	bl	800b0d4 <USB_CoreReset>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	639a      	str	r2, [r3, #56]	; 0x38
 8009c16:	e005      	b.n	8009c24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d10b      	bne.n	8009c42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f043 0206 	orr.w	r2, r3, #6
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f043 0220 	orr.w	r2, r3, #32
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c4e:	b004      	add	sp, #16
 8009c50:	4770      	bx	lr
	...

08009c54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d165      	bne.n	8009d34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4a41      	ldr	r2, [pc, #260]	; (8009d70 <USB_SetTurnaroundTime+0x11c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d906      	bls.n	8009c7e <USB_SetTurnaroundTime+0x2a>
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4a40      	ldr	r2, [pc, #256]	; (8009d74 <USB_SetTurnaroundTime+0x120>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d802      	bhi.n	8009c7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c78:	230f      	movs	r3, #15
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	e062      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	4a3c      	ldr	r2, [pc, #240]	; (8009d74 <USB_SetTurnaroundTime+0x120>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d906      	bls.n	8009c94 <USB_SetTurnaroundTime+0x40>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4a3b      	ldr	r2, [pc, #236]	; (8009d78 <USB_SetTurnaroundTime+0x124>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d802      	bhi.n	8009c94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009c8e:	230e      	movs	r3, #14
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	e057      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4a38      	ldr	r2, [pc, #224]	; (8009d78 <USB_SetTurnaroundTime+0x124>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d906      	bls.n	8009caa <USB_SetTurnaroundTime+0x56>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <USB_SetTurnaroundTime+0x128>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d802      	bhi.n	8009caa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ca4:	230d      	movs	r3, #13
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	e04c      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	4a33      	ldr	r2, [pc, #204]	; (8009d7c <USB_SetTurnaroundTime+0x128>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d906      	bls.n	8009cc0 <USB_SetTurnaroundTime+0x6c>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4a32      	ldr	r2, [pc, #200]	; (8009d80 <USB_SetTurnaroundTime+0x12c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d802      	bhi.n	8009cc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009cba:	230c      	movs	r3, #12
 8009cbc:	617b      	str	r3, [r7, #20]
 8009cbe:	e041      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4a2f      	ldr	r2, [pc, #188]	; (8009d80 <USB_SetTurnaroundTime+0x12c>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d906      	bls.n	8009cd6 <USB_SetTurnaroundTime+0x82>
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4a2e      	ldr	r2, [pc, #184]	; (8009d84 <USB_SetTurnaroundTime+0x130>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d802      	bhi.n	8009cd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009cd0:	230b      	movs	r3, #11
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e036      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	4a2a      	ldr	r2, [pc, #168]	; (8009d84 <USB_SetTurnaroundTime+0x130>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d906      	bls.n	8009cec <USB_SetTurnaroundTime+0x98>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	4a29      	ldr	r2, [pc, #164]	; (8009d88 <USB_SetTurnaroundTime+0x134>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d802      	bhi.n	8009cec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ce6:	230a      	movs	r3, #10
 8009ce8:	617b      	str	r3, [r7, #20]
 8009cea:	e02b      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4a26      	ldr	r2, [pc, #152]	; (8009d88 <USB_SetTurnaroundTime+0x134>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d906      	bls.n	8009d02 <USB_SetTurnaroundTime+0xae>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4a25      	ldr	r2, [pc, #148]	; (8009d8c <USB_SetTurnaroundTime+0x138>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d802      	bhi.n	8009d02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009cfc:	2309      	movs	r3, #9
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e020      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	4a21      	ldr	r2, [pc, #132]	; (8009d8c <USB_SetTurnaroundTime+0x138>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d906      	bls.n	8009d18 <USB_SetTurnaroundTime+0xc4>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	4a20      	ldr	r2, [pc, #128]	; (8009d90 <USB_SetTurnaroundTime+0x13c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d802      	bhi.n	8009d18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d12:	2308      	movs	r3, #8
 8009d14:	617b      	str	r3, [r7, #20]
 8009d16:	e015      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4a1d      	ldr	r2, [pc, #116]	; (8009d90 <USB_SetTurnaroundTime+0x13c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d906      	bls.n	8009d2e <USB_SetTurnaroundTime+0xda>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <USB_SetTurnaroundTime+0x140>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d802      	bhi.n	8009d2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d28:	2307      	movs	r3, #7
 8009d2a:	617b      	str	r3, [r7, #20]
 8009d2c:	e00a      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d2e:	2306      	movs	r3, #6
 8009d30:	617b      	str	r3, [r7, #20]
 8009d32:	e007      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d102      	bne.n	8009d40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d3a:	2309      	movs	r3, #9
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	e001      	b.n	8009d44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d40:	2309      	movs	r3, #9
 8009d42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	029b      	lsls	r3, r3, #10
 8009d58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	371c      	adds	r7, #28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	00d8acbf 	.word	0x00d8acbf
 8009d74:	00e4e1bf 	.word	0x00e4e1bf
 8009d78:	00f423ff 	.word	0x00f423ff
 8009d7c:	0106737f 	.word	0x0106737f
 8009d80:	011a499f 	.word	0x011a499f
 8009d84:	01312cff 	.word	0x01312cff
 8009d88:	014ca43f 	.word	0x014ca43f
 8009d8c:	016e35ff 	.word	0x016e35ff
 8009d90:	01a6ab1f 	.word	0x01a6ab1f
 8009d94:	01e847ff 	.word	0x01e847ff

08009d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f043 0201 	orr.w	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f023 0201 	bic.w	r2, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d106      	bne.n	8009e08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60da      	str	r2, [r3, #12]
 8009e06:	e00b      	b.n	8009e20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	60da      	str	r2, [r3, #12]
 8009e1a:	e001      	b.n	8009e20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e003      	b.n	8009e28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e20:	2032      	movs	r0, #50	; 0x32
 8009e22:	f7f7 fc79 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e30:	b084      	sub	sp, #16
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	613b      	str	r3, [r7, #16]
 8009e4e:	e009      	b.n	8009e64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	3340      	adds	r3, #64	; 0x40
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	3301      	adds	r3, #1
 8009e62:	613b      	str	r3, [r7, #16]
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2b0e      	cmp	r3, #14
 8009e68:	d9f2      	bls.n	8009e50 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d112      	bne.n	8009e96 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e005      	b.n	8009ea2 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	680b      	ldr	r3, [r1, #0]
 8009ec0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d10c      	bne.n	8009ee2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d104      	bne.n	8009ed8 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ece:	2100      	movs	r1, #0
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f961 	bl	800a198 <USB_SetDevSpeed>
 8009ed6:	e008      	b.n	8009eea <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ed8:	2101      	movs	r1, #1
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f95c 	bl	800a198 <USB_SetDevSpeed>
 8009ee0:	e003      	b.n	8009eea <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ee2:	2103      	movs	r1, #3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f957 	bl	800a198 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009eea:	2110      	movs	r1, #16
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f90b 	bl	800a108 <USB_FlushTxFifo>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f929 	bl	800a154 <USB_FlushRxFifo>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f12:	461a      	mov	r2, r3
 8009f14:	2300      	movs	r3, #0
 8009f16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1e:	461a      	mov	r2, r3
 8009f20:	2300      	movs	r3, #0
 8009f22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f30:	2300      	movs	r3, #0
 8009f32:	613b      	str	r3, [r7, #16]
 8009f34:	e043      	b.n	8009fbe <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	015a      	lsls	r2, r3, #5
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f4c:	d118      	bne.n	8009f80 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f60:	461a      	mov	r2, r3
 8009f62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e013      	b.n	8009f92 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f76:	461a      	mov	r2, r3
 8009f78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	e008      	b.n	8009f92 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	613b      	str	r3, [r7, #16]
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d3b7      	bcc.n	8009f36 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	613b      	str	r3, [r7, #16]
 8009fca:	e043      	b.n	800a054 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe2:	d118      	bne.n	800a016 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	e013      	b.n	800a028 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00c:	461a      	mov	r2, r3
 800a00e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	e008      	b.n	800a028 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a022:	461a      	mov	r2, r3
 800a024:	2300      	movs	r3, #0
 800a026:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a034:	461a      	mov	r2, r3
 800a036:	2300      	movs	r3, #0
 800a038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a046:	461a      	mov	r2, r3
 800a048:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a04c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	3301      	adds	r3, #1
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d3b7      	bcc.n	8009fcc <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a06a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a072:	2b01      	cmp	r3, #1
 800a074:	d111      	bne.n	800a09a <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07c:	461a      	mov	r2, r3
 800a07e:	4b20      	ldr	r3, [pc, #128]	; (800a100 <USB_DevInit+0x2d0>)
 800a080:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a094:	f043 0303 	orr.w	r3, r3, #3
 800a098:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a0a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d105      	bne.n	800a0ba <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f043 0210 	orr.w	r2, r3, #16
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	4b11      	ldr	r3, [pc, #68]	; (800a104 <USB_DevInit+0x2d4>)
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d005      	beq.n	800a0d8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	f043 0208 	orr.w	r2, r3, #8
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d107      	bne.n	800a0ee <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0e6:	f043 0304 	orr.w	r3, r3, #4
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0fa:	b004      	add	sp, #16
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	00800100 	.word	0x00800100
 800a104:	803c3800 	.word	0x803c3800

0800a108 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	019b      	lsls	r3, r3, #6
 800a11a:	f043 0220 	orr.w	r2, r3, #32
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3301      	adds	r3, #1
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4a09      	ldr	r2, [pc, #36]	; (800a150 <USB_FlushTxFifo+0x48>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d901      	bls.n	800a134 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e006      	b.n	800a142 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	f003 0320 	and.w	r3, r3, #32
 800a13c:	2b20      	cmp	r3, #32
 800a13e:	d0f0      	beq.n	800a122 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	00030d40 	.word	0x00030d40

0800a154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2210      	movs	r2, #16
 800a164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3301      	adds	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4a09      	ldr	r2, [pc, #36]	; (800a194 <USB_FlushRxFifo+0x40>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d901      	bls.n	800a178 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e006      	b.n	800a186 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f003 0310 	and.w	r3, r3, #16
 800a180:	2b10      	cmp	r3, #16
 800a182:	d0f0      	beq.n	800a166 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	00030d40 	.word	0x00030d40

0800a198 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	68f9      	ldr	r1, [r7, #12]
 800a1b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b087      	sub	sp, #28
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0306 	and.w	r3, r3, #6
 800a1e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
 800a1ee:	e00a      	b.n	800a206 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d002      	beq.n	800a1fc <USB_GetDevSpeed+0x32>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b06      	cmp	r3, #6
 800a1fa:	d102      	bne.n	800a202 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	75fb      	strb	r3, [r7, #23]
 800a200:	e001      	b.n	800a206 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a202:	230f      	movs	r3, #15
 800a204:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d13a      	bne.n	800a2a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a236:	69da      	ldr	r2, [r3, #28]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f003 030f 	and.w	r3, r3, #15
 800a240:	2101      	movs	r1, #1
 800a242:	fa01 f303 	lsl.w	r3, r1, r3
 800a246:	b29b      	uxth	r3, r3
 800a248:	68f9      	ldr	r1, [r7, #12]
 800a24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a24e:	4313      	orrs	r3, r2
 800a250:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d155      	bne.n	800a314 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	78db      	ldrb	r3, [r3, #3]
 800a282:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a284:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	059b      	lsls	r3, r3, #22
 800a28a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a28c:	4313      	orrs	r3, r2
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	0151      	lsls	r1, r2, #5
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	440a      	add	r2, r1
 800a296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a29e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	e036      	b.n	800a314 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ac:	69da      	ldr	r2, [r3, #28]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	041b      	lsls	r3, r3, #16
 800a2be:	68f9      	ldr	r1, [r7, #12]
 800a2c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d11a      	bne.n	800a314 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	78db      	ldrb	r3, [r3, #3]
 800a2f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a30e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a312:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
	...

0800a324 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d135      	bne.n	800a3ac <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	f003 030f 	and.w	r3, r3, #15
 800a350:	2101      	movs	r1, #1
 800a352:	fa01 f303 	lsl.w	r3, r1, r3
 800a356:	b29b      	uxth	r3, r3
 800a358:	43db      	mvns	r3, r3
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a360:	4013      	ands	r3, r2
 800a362:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a36a:	69da      	ldr	r2, [r3, #28]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	2101      	movs	r1, #1
 800a376:	fa01 f303 	lsl.w	r3, r1, r3
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	43db      	mvns	r3, r3
 800a37e:	68f9      	ldr	r1, [r7, #12]
 800a380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a384:	4013      	ands	r3, r2
 800a386:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	0159      	lsls	r1, r3, #5
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	440b      	add	r3, r1
 800a39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <USB_DeactivateEndpoint+0x100>)
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	600b      	str	r3, [r1, #0]
 800a3aa:	e034      	b.n	800a416 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 030f 	and.w	r3, r3, #15
 800a3bc:	2101      	movs	r1, #1
 800a3be:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c2:	041b      	lsls	r3, r3, #16
 800a3c4:	43db      	mvns	r3, r3
 800a3c6:	68f9      	ldr	r1, [r7, #12]
 800a3c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d6:	69da      	ldr	r2, [r3, #28]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	f003 030f 	and.w	r3, r3, #15
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	43db      	mvns	r3, r3
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	0159      	lsls	r1, r3, #5
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	440b      	add	r3, r1
 800a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40e:	4619      	mov	r1, r3
 800a410:	4b05      	ldr	r3, [pc, #20]	; (800a428 <USB_DeactivateEndpoint+0x104>)
 800a412:	4013      	ands	r3, r2
 800a414:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	ec337800 	.word	0xec337800
 800a428:	eff37800 	.word	0xeff37800

0800a42c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08a      	sub	sp, #40	; 0x28
 800a430:	af02      	add	r7, sp, #8
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	4613      	mov	r3, r2
 800a438:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	f040 815c 	bne.w	800a706 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d132      	bne.n	800a4bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	69ba      	ldr	r2, [r7, #24]
 800a466:	0151      	lsls	r1, r2, #5
 800a468:	69fa      	ldr	r2, [r7, #28]
 800a46a:	440a      	add	r2, r1
 800a46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a470:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a474:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	4413      	add	r3, r2
 800a482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	69ba      	ldr	r2, [r7, #24]
 800a48a:	0151      	lsls	r1, r2, #5
 800a48c:	69fa      	ldr	r2, [r7, #28]
 800a48e:	440a      	add	r2, r1
 800a490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	015a      	lsls	r2, r3, #5
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	0151      	lsls	r1, r2, #5
 800a4ac:	69fa      	ldr	r2, [r7, #28]
 800a4ae:	440a      	add	r2, r1
 800a4b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4b4:	0cdb      	lsrs	r3, r3, #19
 800a4b6:	04db      	lsls	r3, r3, #19
 800a4b8:	6113      	str	r3, [r2, #16]
 800a4ba:	e074      	b.n	800a5a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d6:	0cdb      	lsrs	r3, r3, #19
 800a4d8:	04db      	lsls	r3, r3, #19
 800a4da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6959      	ldr	r1, [r3, #20]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	440b      	add	r3, r1
 800a518:	1e59      	subs	r1, r3, #1
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a522:	04d9      	lsls	r1, r3, #19
 800a524:	4b9d      	ldr	r3, [pc, #628]	; (800a79c <USB_EPStartXfer+0x370>)
 800a526:	400b      	ands	r3, r1
 800a528:	69b9      	ldr	r1, [r7, #24]
 800a52a:	0148      	lsls	r0, r1, #5
 800a52c:	69f9      	ldr	r1, [r7, #28]
 800a52e:	4401      	add	r1, r0
 800a530:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a534:	4313      	orrs	r3, r2
 800a536:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	691a      	ldr	r2, [r3, #16]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a54e:	69b9      	ldr	r1, [r7, #24]
 800a550:	0148      	lsls	r0, r1, #5
 800a552:	69f9      	ldr	r1, [r7, #28]
 800a554:	4401      	add	r1, r0
 800a556:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a55a:	4313      	orrs	r3, r2
 800a55c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	78db      	ldrb	r3, [r3, #3]
 800a562:	2b01      	cmp	r3, #1
 800a564:	d11f      	bne.n	800a5a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	69fa      	ldr	r2, [r7, #28]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a580:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a584:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d14b      	bne.n	800a644 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d009      	beq.n	800a5c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	78db      	ldrb	r3, [r3, #3]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d128      	bne.n	800a622 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d110      	bne.n	800a602 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	e00f      	b.n	800a622 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a61c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a620:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a63c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	e12f      	b.n	800a8a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	015a      	lsls	r2, r3, #5
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a65e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a662:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	78db      	ldrb	r3, [r3, #3]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d015      	beq.n	800a698 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8117 	beq.w	800a8a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a67c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	2101      	movs	r1, #1
 800a688:	fa01 f303 	lsl.w	r3, r1, r3
 800a68c:	69f9      	ldr	r1, [r7, #28]
 800a68e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a692:	4313      	orrs	r3, r2
 800a694:	634b      	str	r3, [r1, #52]	; 0x34
 800a696:	e105      	b.n	800a8a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d110      	bne.n	800a6ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	015a      	lsls	r2, r3, #5
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	0151      	lsls	r1, r2, #5
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	440a      	add	r2, r1
 800a6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	e00f      	b.n	800a6ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	68d9      	ldr	r1, [r3, #12]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	781a      	ldrb	r2, [r3, #0]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	b298      	uxth	r0, r3
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fa2b 	bl	800ab5a <USB_WritePacket>
 800a704:	e0ce      	b.n	800a8a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a720:	0cdb      	lsrs	r3, r3, #19
 800a722:	04db      	lsls	r3, r3, #19
 800a724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	4413      	add	r3, r2
 800a72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	0151      	lsls	r1, r2, #5
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	440a      	add	r2, r1
 800a73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a740:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a744:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a748:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d126      	bne.n	800a7a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a768:	69b9      	ldr	r1, [r7, #24]
 800a76a:	0148      	lsls	r0, r1, #5
 800a76c:	69f9      	ldr	r1, [r7, #28]
 800a76e:	4401      	add	r1, r0
 800a770:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a774:	4313      	orrs	r3, r2
 800a776:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	0151      	lsls	r1, r2, #5
 800a78a:	69fa      	ldr	r2, [r7, #28]
 800a78c:	440a      	add	r2, r1
 800a78e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a792:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a796:	6113      	str	r3, [r2, #16]
 800a798:	e036      	b.n	800a808 <USB_EPStartXfer+0x3dc>
 800a79a:	bf00      	nop
 800a79c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	695a      	ldr	r2, [r3, #20]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	1e5a      	subs	r2, r3, #1
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c2:	691a      	ldr	r2, [r3, #16]
 800a7c4:	8afb      	ldrh	r3, [r7, #22]
 800a7c6:	04d9      	lsls	r1, r3, #19
 800a7c8:	4b39      	ldr	r3, [pc, #228]	; (800a8b0 <USB_EPStartXfer+0x484>)
 800a7ca:	400b      	ands	r3, r1
 800a7cc:	69b9      	ldr	r1, [r7, #24]
 800a7ce:	0148      	lsls	r0, r1, #5
 800a7d0:	69f9      	ldr	r1, [r7, #28]
 800a7d2:	4401      	add	r1, r0
 800a7d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	8af9      	ldrh	r1, [r7, #22]
 800a7f0:	fb01 f303 	mul.w	r3, r1, r3
 800a7f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f8:	69b9      	ldr	r1, [r7, #24]
 800a7fa:	0148      	lsls	r0, r1, #5
 800a7fc:	69f9      	ldr	r1, [r7, #28]
 800a7fe:	4401      	add	r1, r0
 800a800:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a804:	4313      	orrs	r3, r2
 800a806:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d10d      	bne.n	800a82a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d009      	beq.n	800a82a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	68d9      	ldr	r1, [r3, #12]
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a826:	460a      	mov	r2, r1
 800a828:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	78db      	ldrb	r3, [r3, #3]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d128      	bne.n	800a884 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d110      	bne.n	800a864 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	69fa      	ldr	r2, [r7, #28]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	e00f      	b.n	800a884 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	0151      	lsls	r1, r2, #5
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	440a      	add	r2, r1
 800a87a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a87e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a882:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	015a      	lsls	r2, r3, #5
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	4413      	add	r3, r2
 800a88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69ba      	ldr	r2, [r7, #24]
 800a894:	0151      	lsls	r1, r2, #5
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	440a      	add	r2, r1
 800a89a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a89e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3720      	adds	r7, #32
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	1ff80000 	.word	0x1ff80000

0800a8b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	785b      	ldrb	r3, [r3, #1]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	f040 80cd 	bne.w	800aa70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d132      	bne.n	800a944 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	0151      	lsls	r1, r2, #5
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	440a      	add	r2, r1
 800a8f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	0151      	lsls	r1, r2, #5
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	440a      	add	r2, r1
 800a918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a91c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a920:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	0151      	lsls	r1, r2, #5
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	440a      	add	r2, r1
 800a938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a93c:	0cdb      	lsrs	r3, r3, #19
 800a93e:	04db      	lsls	r3, r3, #19
 800a940:	6113      	str	r3, [r2, #16]
 800a942:	e04e      	b.n	800a9e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	0151      	lsls	r1, r2, #5
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	440a      	add	r2, r1
 800a95a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95e:	0cdb      	lsrs	r3, r3, #19
 800a960:	04db      	lsls	r3, r3, #19
 800a962:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	0151      	lsls	r1, r2, #5
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	440a      	add	r2, r1
 800a97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a97e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a982:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a986:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	695a      	ldr	r2, [r3, #20]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	429a      	cmp	r2, r3
 800a992:	d903      	bls.n	800a99c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c8:	691a      	ldr	r2, [r3, #16]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9d2:	6939      	ldr	r1, [r7, #16]
 800a9d4:	0148      	lsls	r0, r1, #5
 800a9d6:	6979      	ldr	r1, [r7, #20]
 800a9d8:	4401      	add	r1, r0
 800a9da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d11e      	bne.n	800aa26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d009      	beq.n	800aa04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e092      	b.n	800ab4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	0151      	lsls	r1, r2, #5
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	440a      	add	r2, r1
 800aa3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d07e      	beq.n	800ab4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f003 030f 	and.w	r3, r3, #15
 800aa5e:	2101      	movs	r1, #1
 800aa60:	fa01 f303 	lsl.w	r3, r1, r3
 800aa64:	6979      	ldr	r1, [r7, #20]
 800aa66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	634b      	str	r3, [r1, #52]	; 0x34
 800aa6e:	e06d      	b.n	800ab4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	0151      	lsls	r1, r2, #5
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	440a      	add	r2, r1
 800aa86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa8a:	0cdb      	lsrs	r3, r3, #19
 800aa8c:	04db      	lsls	r3, r3, #19
 800aa8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aaae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aab2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d003      	beq.n	800aac4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	689a      	ldr	r2, [r3, #8]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	015a      	lsls	r2, r3, #5
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	4413      	add	r3, r2
 800aacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	0151      	lsls	r1, r2, #5
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	440a      	add	r2, r1
 800aada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aade:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aae2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf0:	691a      	ldr	r2, [r3, #16]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aafa:	6939      	ldr	r1, [r7, #16]
 800aafc:	0148      	lsls	r0, r1, #5
 800aafe:	6979      	ldr	r1, [r7, #20]
 800ab00:	4401      	add	r1, r0
 800ab02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab06:	4313      	orrs	r3, r2
 800ab08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d10d      	bne.n	800ab2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d009      	beq.n	800ab2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	68d9      	ldr	r1, [r3, #12]
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab28:	460a      	mov	r2, r1
 800ab2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b089      	sub	sp, #36	; 0x24
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	4611      	mov	r1, r2
 800ab66:	461a      	mov	r2, r3
 800ab68:	460b      	mov	r3, r1
 800ab6a:	71fb      	strb	r3, [r7, #7]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ab78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d11a      	bne.n	800abb6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab80:	88bb      	ldrh	r3, [r7, #4]
 800ab82:	3303      	adds	r3, #3
 800ab84:	089b      	lsrs	r3, r3, #2
 800ab86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	61bb      	str	r3, [r7, #24]
 800ab8c:	e00f      	b.n	800abae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
 800ab90:	031a      	lsls	r2, r3, #12
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	3304      	adds	r3, #4
 800aba6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	3301      	adds	r3, #1
 800abac:	61bb      	str	r3, [r7, #24]
 800abae:	69ba      	ldr	r2, [r7, #24]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d3eb      	bcc.n	800ab8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3724      	adds	r7, #36	; 0x24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b089      	sub	sp, #36	; 0x24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	4613      	mov	r3, r2
 800abd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800abda:	88fb      	ldrh	r3, [r7, #6]
 800abdc:	3303      	adds	r3, #3
 800abde:	089b      	lsrs	r3, r3, #2
 800abe0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800abe2:	2300      	movs	r3, #0
 800abe4:	61bb      	str	r3, [r7, #24]
 800abe6:	e00b      	b.n	800ac00 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	601a      	str	r2, [r3, #0]
    pDest++;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	3304      	adds	r3, #4
 800abf8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	3301      	adds	r3, #1
 800abfe:	61bb      	str	r3, [r7, #24]
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d3ef      	bcc.n	800abe8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ac08:	69fb      	ldr	r3, [r7, #28]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3724      	adds	r7, #36	; 0x24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b085      	sub	sp, #20
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d12c      	bne.n	800ac8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	db12      	blt.n	800ac6a <USB_EPSetStall+0x54>
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00f      	beq.n	800ac6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	0151      	lsls	r1, r2, #5
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	440a      	add	r2, r1
 800ac60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	e02b      	b.n	800ace4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	db12      	blt.n	800acc4 <USB_EPSetStall+0xae>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00f      	beq.n	800acc4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	0151      	lsls	r1, r2, #5
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	440a      	add	r2, r1
 800acba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800acc2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ace2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	785b      	ldrb	r3, [r3, #1]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d128      	bne.n	800ad60 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	78db      	ldrb	r3, [r3, #3]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d003      	beq.n	800ad3e <USB_EPClearStall+0x4c>
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	78db      	ldrb	r3, [r3, #3]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d138      	bne.n	800adb0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	0151      	lsls	r1, r2, #5
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	440a      	add	r2, r1
 800ad54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad5c:	6013      	str	r3, [r2, #0]
 800ad5e:	e027      	b.n	800adb0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	78db      	ldrb	r3, [r3, #3]
 800ad84:	2b03      	cmp	r3, #3
 800ad86:	d003      	beq.n	800ad90 <USB_EPClearStall+0x9e>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	78db      	ldrb	r3, [r3, #3]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d10f      	bne.n	800adb0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	0151      	lsls	r1, r2, #5
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	440a      	add	r2, r1
 800ada6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b085      	sub	sp, #20
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800addc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ade0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	011b      	lsls	r3, r3, #4
 800adee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adf8:	4313      	orrs	r3, r2
 800adfa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae24:	f023 0302 	bic.w	r3, r3, #2
 800ae28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ae2a:	2003      	movs	r0, #3
 800ae2c:	f7f6 fc74 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae54:	f043 0302 	orr.w	r3, r3, #2
 800ae58:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ae5a:	2003      	movs	r0, #3
 800ae5c:	f7f6 fc5c 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	4013      	ands	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae82:	68fb      	ldr	r3, [r7, #12]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeac:	69db      	ldr	r3, [r3, #28]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	0c1b      	lsrs	r3, r3, #16
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	4013      	ands	r3, r2
 800aee6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	b29b      	uxth	r3, r3
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af08:	78fb      	ldrb	r3, [r7, #3]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1e:	695b      	ldr	r3, [r3, #20]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	4013      	ands	r3, r2
 800af24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af26:	68bb      	ldr	r3, [r7, #8]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af56:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	f003 030f 	and.w	r3, r3, #15
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	fa22 f303 	lsr.w	r3, r2, r3
 800af64:	01db      	lsls	r3, r3, #7
 800af66:	b2db      	uxtb	r3, r3
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	4013      	ands	r3, r2
 800af80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af82:	68bb      	ldr	r3, [r7, #8]
}
 800af84:	4618      	mov	r0, r3
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	695b      	ldr	r3, [r3, #20]
 800af9c:	f003 0301 	and.w	r3, r3, #1
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afca:	f023 0307 	bic.w	r3, r3, #7
 800afce:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 0306 	and.w	r3, r3, #6
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d109      	bne.n	800aff4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afee:	f043 0303 	orr.w	r3, r3, #3
 800aff2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b006:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	460b      	mov	r3, r1
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	333c      	adds	r3, #60	; 0x3c
 800b02e:	3304      	adds	r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	4a26      	ldr	r2, [pc, #152]	; (800b0d0 <USB_EP0_OutStart+0xb8>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d90a      	bls.n	800b052 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b04c:	d101      	bne.n	800b052 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	e037      	b.n	800b0c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b058:	461a      	mov	r2, r3
 800b05a:	2300      	movs	r3, #0
 800b05c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b06c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b080:	f043 0318 	orr.w	r3, r3, #24
 800b084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b094:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b098:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b09a:	7afb      	ldrb	r3, [r7, #11]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d10f      	bne.n	800b0c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b0be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	371c      	adds	r7, #28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	4f54300a 	.word	0x4f54300a

0800b0d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4a13      	ldr	r2, [pc, #76]	; (800b138 <USB_CoreReset+0x64>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d901      	bls.n	800b0f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e01b      	b.n	800b12a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	daf2      	bge.n	800b0e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f043 0201 	orr.w	r2, r3, #1
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4a09      	ldr	r2, [pc, #36]	; (800b138 <USB_CoreReset+0x64>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d901      	bls.n	800b11c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e006      	b.n	800b12a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b01      	cmp	r3, #1
 800b126:	d0f0      	beq.n	800b10a <USB_CoreReset+0x36>

  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	00030d40 	.word	0x00030d40

0800b13c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	7c1b      	ldrb	r3, [r3, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d115      	bne.n	800b180 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b158:	2202      	movs	r2, #2
 800b15a:	2181      	movs	r1, #129	; 0x81
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f003 fa48 	bl	800e5f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b16c:	2202      	movs	r2, #2
 800b16e:	2101      	movs	r1, #1
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f003 fa3e 	bl	800e5f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b17e:	e012      	b.n	800b1a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	2202      	movs	r2, #2
 800b184:	2181      	movs	r1, #129	; 0x81
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f003 fa33 	bl	800e5f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b192:	2340      	movs	r3, #64	; 0x40
 800b194:	2202      	movs	r2, #2
 800b196:	2101      	movs	r1, #1
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f003 fa2a 	bl	800e5f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	2182      	movs	r1, #130	; 0x82
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f003 fa20 	bl	800e5f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b1b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b1bc:	f003 fd2e 	bl	800ec1c <malloc>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	73fb      	strb	r3, [r7, #15]
 800b1d8:	e026      	b.n	800b228 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b1e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	7c1b      	ldrb	r3, [r3, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d109      	bne.n	800b218 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b20a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b20e:	2101      	movs	r1, #1
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f003 fadf 	bl	800e7d4 <USBD_LL_PrepareReceive>
 800b216:	e007      	b.n	800b228 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b21e:	2340      	movs	r3, #64	; 0x40
 800b220:	2101      	movs	r1, #1
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f003 fad6 	bl	800e7d4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b228:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b242:	2181      	movs	r1, #129	; 0x81
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f003 f9fa 	bl	800e63e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b250:	2101      	movs	r1, #1
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f003 f9f3 	bl	800e63e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b260:	2182      	movs	r1, #130	; 0x82
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f003 f9eb 	bl	800e63e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00e      	beq.n	800b296 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b288:	4618      	mov	r0, r3
 800b28a:	f003 fccf 	bl	800ec2c <free>
    pdev->pClassData = NULL;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b2b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d039      	beq.n	800b33e <USBD_CDC_Setup+0x9e>
 800b2ca:	2b20      	cmp	r3, #32
 800b2cc:	d17c      	bne.n	800b3c8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	88db      	ldrh	r3, [r3, #6]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d029      	beq.n	800b32a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	b25b      	sxtb	r3, r3
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	da11      	bge.n	800b304 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800b2ec:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	88d2      	ldrh	r2, [r2, #6]
 800b2f2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b2f4:	6939      	ldr	r1, [r7, #16]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	88db      	ldrh	r3, [r3, #6]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 f9b7 	bl	800c670 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800b302:	e068      	b.n	800b3d6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	785a      	ldrb	r2, [r3, #1]
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	88db      	ldrh	r3, [r3, #6]
 800b312:	b2da      	uxtb	r2, r3
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b31a:	6939      	ldr	r1, [r7, #16]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	88db      	ldrh	r3, [r3, #6]
 800b320:	461a      	mov	r2, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 f9d2 	bl	800c6cc <USBD_CtlPrepareRx>
    break;
 800b328:	e055      	b.n	800b3d6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	7850      	ldrb	r0, [r2, #1]
 800b336:	2200      	movs	r2, #0
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	4798      	blx	r3
    break;
 800b33c:	e04b      	b.n	800b3d6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	785b      	ldrb	r3, [r3, #1]
 800b342:	2b0a      	cmp	r3, #10
 800b344:	d017      	beq.n	800b376 <USBD_CDC_Setup+0xd6>
 800b346:	2b0b      	cmp	r3, #11
 800b348:	d029      	beq.n	800b39e <USBD_CDC_Setup+0xfe>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d133      	bne.n	800b3b6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b354:	2b03      	cmp	r3, #3
 800b356:	d107      	bne.n	800b368 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b358:	f107 030c 	add.w	r3, r7, #12
 800b35c:	2202      	movs	r2, #2
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f001 f985 	bl	800c670 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b366:	e02e      	b.n	800b3c6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 f915 	bl	800c59a <USBD_CtlError>
			  ret = USBD_FAIL;
 800b370:	2302      	movs	r3, #2
 800b372:	75fb      	strb	r3, [r7, #23]
      break;
 800b374:	e027      	b.n	800b3c6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d107      	bne.n	800b390 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b380:	f107 030f 	add.w	r3, r7, #15
 800b384:	2201      	movs	r2, #1
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f001 f971 	bl	800c670 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b38e:	e01a      	b.n	800b3c6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 f901 	bl	800c59a <USBD_CtlError>
			  ret = USBD_FAIL;
 800b398:	2302      	movs	r3, #2
 800b39a:	75fb      	strb	r3, [r7, #23]
      break;
 800b39c:	e013      	b.n	800b3c6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d00d      	beq.n	800b3c4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 f8f5 	bl	800c59a <USBD_CtlError>
			  ret = USBD_FAIL;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b3b4:	e006      	b.n	800b3c4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800b3b6:	6839      	ldr	r1, [r7, #0]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 f8ee 	bl	800c59a <USBD_CtlError>
      ret = USBD_FAIL;
 800b3be:	2302      	movs	r3, #2
 800b3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c2:	e000      	b.n	800b3c6 <USBD_CDC_Setup+0x126>
      break;
 800b3c4:	bf00      	nop
    }
    break;
 800b3c6:	e006      	b.n	800b3d6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 f8e5 	bl	800c59a <USBD_CtlError>
    ret = USBD_FAIL;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	75fb      	strb	r3, [r7, #23]
    break;
 800b3d4:	bf00      	nop
  }

  return ret;
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b3f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b3fa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b402:	2b00      	cmp	r3, #0
 800b404:	d03a      	beq.n	800b47c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	331c      	adds	r3, #28
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d029      	beq.n	800b470 <USBD_CDC_DataIn+0x90>
 800b41c:	78fa      	ldrb	r2, [r7, #3]
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	331c      	adds	r3, #28
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	78f9      	ldrb	r1, [r7, #3]
 800b430:	68b8      	ldr	r0, [r7, #8]
 800b432:	460b      	mov	r3, r1
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	1a5b      	subs	r3, r3, r1
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4403      	add	r3, r0
 800b43c:	3344      	adds	r3, #68	; 0x44
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	fbb2 f1f3 	udiv	r1, r2, r3
 800b444:	fb03 f301 	mul.w	r3, r3, r1
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d110      	bne.n	800b470 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b44e:	78fa      	ldrb	r2, [r7, #3]
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	4613      	mov	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	440b      	add	r3, r1
 800b45c:	331c      	adds	r3, #28
 800b45e:	2200      	movs	r2, #0
 800b460:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b462:	78f9      	ldrb	r1, [r7, #3]
 800b464:	2300      	movs	r3, #0
 800b466:	2200      	movs	r2, #0
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f003 f990 	bl	800e78e <USBD_LL_Transmit>
 800b46e:	e003      	b.n	800b478 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	e000      	b.n	800b47e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b47c:	2302      	movs	r3, #2
  }
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	460b      	mov	r3, r1
 800b490:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b498:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	4619      	mov	r1, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f003 f9bb 	bl	800e81a <USBD_LL_GetRxDataSize>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00d      	beq.n	800b4d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	4798      	blx	r3

    return USBD_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e000      	b.n	800b4d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b4d2:	2302      	movs	r3, #2
  }
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b4ea:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d015      	beq.n	800b522 <USBD_CDC_EP0_RxReady+0x46>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4fc:	2bff      	cmp	r3, #255	; 0xff
 800b4fe:	d010      	beq.n	800b522 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b50e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b516:	b292      	uxth	r2, r2
 800b518:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	22ff      	movs	r2, #255	; 0xff
 800b51e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2243      	movs	r2, #67	; 0x43
 800b538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b53a:	4b03      	ldr	r3, [pc, #12]	; (800b548 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	2000009c 	.word	0x2000009c

0800b54c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2243      	movs	r2, #67	; 0x43
 800b558:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b55a:	4b03      	ldr	r3, [pc, #12]	; (800b568 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	20000058 	.word	0x20000058

0800b56c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2243      	movs	r2, #67	; 0x43
 800b578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b57a:	4b03      	ldr	r3, [pc, #12]	; (800b588 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	200000e0 	.word	0x200000e0

0800b58c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	220a      	movs	r2, #10
 800b598:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b59a:	4b03      	ldr	r3, [pc, #12]	; (800b5a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	20000014 	.word	0x20000014

0800b5ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d005      	beq.n	800b5cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b087      	sub	sp, #28
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b5ee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b5f8:	88fa      	ldrh	r2, [r7, #6]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b60e:	b480      	push	{r7}
 800b610:	b085      	sub	sp, #20
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b61e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b644:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d017      	beq.n	800b680 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	7c1b      	ldrb	r3, [r3, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d109      	bne.n	800b66c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b65e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b662:	2101      	movs	r1, #1
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f003 f8b5 	bl	800e7d4 <USBD_LL_PrepareReceive>
 800b66a:	e007      	b.n	800b67c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b672:	2340      	movs	r3, #64	; 0x40
 800b674:	2101      	movs	r1, #1
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f003 f8ac 	bl	800e7d4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	e000      	b.n	800b682 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b680:	2302      	movs	r3, #2
  }
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	4613      	mov	r3, r2
 800b696:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	e01a      	b.n	800b6d8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	79fa      	ldrb	r2, [r7, #7]
 800b6ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f002 ff27 	bl	800e524 <USBD_LL_Init>

  return USBD_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d006      	beq.n	800b702 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73fb      	strb	r3, [r7, #15]
 800b700:	e001      	b.n	800b706 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b702:	2302      	movs	r3, #2
 800b704:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b706:	7bfb      	ldrb	r3, [r7, #15]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3714      	adds	r7, #20
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f002 ff4d 	bl	800e5bc <USBD_LL_Start>

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3708      	adds	r7, #8
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b74e:	2302      	movs	r3, #2
 800b750:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00c      	beq.n	800b776 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	78fa      	ldrb	r2, [r7, #3]
 800b766:	4611      	mov	r1, r2
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	4798      	blx	r3
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	78fa      	ldrb	r2, [r7, #3]
 800b796:	4611      	mov	r1, r2
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
  return USBD_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f000 feb1 	bl	800c520 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800b7da:	f003 031f 	and.w	r3, r3, #31
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d00c      	beq.n	800b7fc <USBD_LL_SetupStage+0x56>
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d302      	bcc.n	800b7ec <USBD_LL_SetupStage+0x46>
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d010      	beq.n	800b80c <USBD_LL_SetupStage+0x66>
 800b7ea:	e017      	b.n	800b81c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fa05 	bl	800bc04 <USBD_StdDevReq>
    break;
 800b7fa:	e01a      	b.n	800b832 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fa67 	bl	800bcd8 <USBD_StdItfReq>
    break;
 800b80a:	e012      	b.n	800b832 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 faa5 	bl	800bd64 <USBD_StdEPReq>
    break;
 800b81a:	e00a      	b.n	800b832 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800b822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b826:	b2db      	uxtb	r3, r3
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f002 ff26 	bl	800e67c <USBD_LL_StallEP>
    break;
 800b830:	bf00      	nop
  }

  return USBD_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	460b      	mov	r3, r1
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800b84a:	7afb      	ldrb	r3, [r7, #11]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d14b      	bne.n	800b8e8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b856:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d134      	bne.n	800b8cc <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	68da      	ldr	r2, [r3, #12]
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d919      	bls.n	800b8a2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	68da      	ldr	r2, [r3, #12]
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800b884:	429a      	cmp	r2, r3
 800b886:	d203      	bcs.n	800b890 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	e002      	b.n	800b896 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800b894:	b29b      	uxth	r3, r3
 800b896:	461a      	mov	r2, r3
 800b898:	6879      	ldr	r1, [r7, #4]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 ff34 	bl	800c708 <USBD_CtlContinueRx>
 800b8a0:	e038      	b.n	800b914 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d105      	bne.n	800b8c4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f000 ff31 	bl	800c72c <USBD_CtlSendStatus>
 800b8ca:	e023      	b.n	800b914 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	d11e      	bne.n	800b914 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800b8de:	2100      	movs	r1, #0
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f002 fecb 	bl	800e67c <USBD_LL_StallEP>
 800b8e6:	e015      	b.n	800b914 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00d      	beq.n	800b910 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d108      	bne.n	800b910 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	7afa      	ldrb	r2, [r7, #11]
 800b908:	4611      	mov	r1, r2
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	4798      	blx	r3
 800b90e:	e001      	b.n	800b914 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b910:	2302      	movs	r3, #2
 800b912:	e000      	b.n	800b916 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3718      	adds	r7, #24
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b086      	sub	sp, #24
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	460b      	mov	r3, r1
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800b92c:	7afb      	ldrb	r3, [r7, #11]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d17f      	bne.n	800ba32 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3314      	adds	r3, #20
 800b936:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d15c      	bne.n	800b9fc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d915      	bls.n	800b97a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	68da      	ldr	r2, [r3, #12]
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	1ad2      	subs	r2, r2, r3
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	b29b      	uxth	r3, r3
 800b962:	461a      	mov	r2, r3
 800b964:	6879      	ldr	r1, [r7, #4]
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 fe9e 	bl	800c6a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b96c:	2300      	movs	r3, #0
 800b96e:	2200      	movs	r2, #0
 800b970:	2100      	movs	r1, #0
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f002 ff2e 	bl	800e7d4 <USBD_LL_PrepareReceive>
 800b978:	e04e      	b.n	800ba18 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	6912      	ldr	r2, [r2, #16]
 800b982:	fbb3 f1f2 	udiv	r1, r3, r2
 800b986:	fb02 f201 	mul.w	r2, r2, r1
 800b98a:	1a9b      	subs	r3, r3, r2
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d11c      	bne.n	800b9ca <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	689a      	ldr	r2, [r3, #8]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800b998:	429a      	cmp	r2, r3
 800b99a:	d316      	bcc.n	800b9ca <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	689a      	ldr	r2, [r3, #8]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d20f      	bcs.n	800b9ca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 fe7a 	bl	800c6a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b9bc:	2300      	movs	r3, #0
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f002 ff06 	bl	800e7d4 <USBD_LL_PrepareReceive>
 800b9c8:	e026      	b.n	800ba18 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d105      	bne.n	800b9ec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b9ec:	2180      	movs	r1, #128	; 0x80
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f002 fe44 	bl	800e67c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 feac 	bl	800c752 <USBD_CtlReceiveStatus>
 800b9fa:	e00d      	b.n	800ba18 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	d004      	beq.n	800ba10 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d103      	bne.n	800ba18 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ba10:	2180      	movs	r1, #128	; 0x80
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f002 fe32 	bl	800e67c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d11d      	bne.n	800ba5e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fe82 	bl	800b72c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ba30:	e015      	b.n	800ba5e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00d      	beq.n	800ba5a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d108      	bne.n	800ba5a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba4e:	695b      	ldr	r3, [r3, #20]
 800ba50:	7afa      	ldrb	r2, [r7, #11]
 800ba52:	4611      	mov	r1, r2
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	4798      	blx	r3
 800ba58:	e001      	b.n	800ba5e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba5a:	2302      	movs	r3, #2
 800ba5c:	e000      	b.n	800ba60 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	2200      	movs	r2, #0
 800ba74:	2100      	movs	r1, #0
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f002 fdbb 	bl	800e5f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2240      	movs	r2, #64	; 0x40
 800ba88:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba8c:	2340      	movs	r3, #64	; 0x40
 800ba8e:	2200      	movs	r2, #0
 800ba90:	2180      	movs	r1, #128	; 0x80
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f002 fdad 	bl	800e5f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2240      	movs	r2, #64	; 0x40
 800baa2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d009      	beq.n	800bae0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	6852      	ldr	r2, [r2, #4]
 800bad8:	b2d2      	uxtb	r2, r2
 800bada:	4611      	mov	r1, r2
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4798      	blx	r3
  }

  return USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	460b      	mov	r3, r1
 800baf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2204      	movs	r2, #4
 800bb22:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	370c      	adds	r7, #12
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d10b      	bne.n	800bb80 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b083      	sub	sp, #12
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b083      	sub	sp, #12
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	6852      	ldr	r2, [r2, #4]
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	4798      	blx	r3

  return USBD_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d004      	beq.n	800bc28 <USBD_StdDevReq+0x24>
 800bc1e:	2b40      	cmp	r3, #64	; 0x40
 800bc20:	d002      	beq.n	800bc28 <USBD_StdDevReq+0x24>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d008      	beq.n	800bc38 <USBD_StdDevReq+0x34>
 800bc26:	e04c      	b.n	800bcc2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
    break;
 800bc36:	e049      	b.n	800bccc <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	2b09      	cmp	r3, #9
 800bc3e:	d83a      	bhi.n	800bcb6 <USBD_StdDevReq+0xb2>
 800bc40:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <USBD_StdDevReq+0x44>)
 800bc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc46:	bf00      	nop
 800bc48:	0800bc99 	.word	0x0800bc99
 800bc4c:	0800bcad 	.word	0x0800bcad
 800bc50:	0800bcb7 	.word	0x0800bcb7
 800bc54:	0800bca3 	.word	0x0800bca3
 800bc58:	0800bcb7 	.word	0x0800bcb7
 800bc5c:	0800bc7b 	.word	0x0800bc7b
 800bc60:	0800bc71 	.word	0x0800bc71
 800bc64:	0800bcb7 	.word	0x0800bcb7
 800bc68:	0800bc8f 	.word	0x0800bc8f
 800bc6c:	0800bc85 	.word	0x0800bc85
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f9d2 	bl	800c01c <USBD_GetDescriptor>
      break;
 800bc78:	e022      	b.n	800bcc0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fae3 	bl	800c248 <USBD_SetAddress>
      break;
 800bc82:	e01d      	b.n	800bcc0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fb20 	bl	800c2cc <USBD_SetConfig>
      break;
 800bc8c:	e018      	b.n	800bcc0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fba9 	bl	800c3e8 <USBD_GetConfig>
      break;
 800bc96:	e013      	b.n	800bcc0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fbd8 	bl	800c450 <USBD_GetStatus>
      break;
 800bca0:	e00e      	b.n	800bcc0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fc06 	bl	800c4b6 <USBD_SetFeature>
      break;
 800bcaa:	e009      	b.n	800bcc0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fc15 	bl	800c4de <USBD_ClrFeature>
      break;
 800bcb4:	e004      	b.n	800bcc0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800bcb6:	6839      	ldr	r1, [r7, #0]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fc6e 	bl	800c59a <USBD_CtlError>
      break;
 800bcbe:	bf00      	nop
    }
    break;
 800bcc0:	e004      	b.n	800bccc <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 fc68 	bl	800c59a <USBD_CtlError>
    break;
 800bcca:	bf00      	nop
  }

  return ret;
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop

0800bcd8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcee:	2b20      	cmp	r3, #32
 800bcf0:	d003      	beq.n	800bcfa <USBD_StdItfReq+0x22>
 800bcf2:	2b40      	cmp	r3, #64	; 0x40
 800bcf4:	d001      	beq.n	800bcfa <USBD_StdItfReq+0x22>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d12a      	bne.n	800bd50 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bd00:	3b01      	subs	r3, #1
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d81d      	bhi.n	800bd42 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	889b      	ldrh	r3, [r3, #4]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d813      	bhi.n	800bd38 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	4798      	blx	r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	88db      	ldrh	r3, [r3, #6]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d110      	bne.n	800bd4c <USBD_StdItfReq+0x74>
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10d      	bne.n	800bd4c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fcfb 	bl	800c72c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bd36:	e009      	b.n	800bd4c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fc2d 	bl	800c59a <USBD_CtlError>
      break;
 800bd40:	e004      	b.n	800bd4c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fc28 	bl	800c59a <USBD_CtlError>
      break;
 800bd4a:	e000      	b.n	800bd4e <USBD_StdItfReq+0x76>
      break;
 800bd4c:	bf00      	nop
    }
    break;
 800bd4e:	e004      	b.n	800bd5a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fc21 	bl	800c59a <USBD_CtlError>
    break;
 800bd58:	bf00      	nop
  }

  return USBD_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	889b      	ldrh	r3, [r3, #4]
 800bd76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd80:	2b20      	cmp	r3, #32
 800bd82:	d004      	beq.n	800bd8e <USBD_StdEPReq+0x2a>
 800bd84:	2b40      	cmp	r3, #64	; 0x40
 800bd86:	d002      	beq.n	800bd8e <USBD_StdEPReq+0x2a>
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d008      	beq.n	800bd9e <USBD_StdEPReq+0x3a>
 800bd8c:	e13b      	b.n	800c006 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	4798      	blx	r3
    break;
 800bd9c:	e138      	b.n	800c010 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d10a      	bne.n	800bdc0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	4798      	blx	r3
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]

      return ret;
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	e128      	b.n	800c012 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	785b      	ldrb	r3, [r3, #1]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d03e      	beq.n	800be46 <USBD_StdEPReq+0xe2>
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	d002      	beq.n	800bdd2 <USBD_StdEPReq+0x6e>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d070      	beq.n	800beb2 <USBD_StdEPReq+0x14e>
 800bdd0:	e113      	b.n	800bffa <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d002      	beq.n	800bde2 <USBD_StdEPReq+0x7e>
 800bddc:	2b03      	cmp	r3, #3
 800bdde:	d015      	beq.n	800be0c <USBD_StdEPReq+0xa8>
 800bde0:	e02b      	b.n	800be3a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00c      	beq.n	800be02 <USBD_StdEPReq+0x9e>
 800bde8:	7bbb      	ldrb	r3, [r7, #14]
 800bdea:	2b80      	cmp	r3, #128	; 0x80
 800bdec:	d009      	beq.n	800be02 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f002 fc42 	bl	800e67c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800bdf8:	2180      	movs	r1, #128	; 0x80
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f002 fc3e 	bl	800e67c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800be00:	e020      	b.n	800be44 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f000 fbc8 	bl	800c59a <USBD_CtlError>
        break;
 800be0a:	e01b      	b.n	800be44 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	885b      	ldrh	r3, [r3, #2]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10e      	bne.n	800be32 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be14:	7bbb      	ldrb	r3, [r7, #14]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00b      	beq.n	800be32 <USBD_StdEPReq+0xce>
 800be1a:	7bbb      	ldrb	r3, [r7, #14]
 800be1c:	2b80      	cmp	r3, #128	; 0x80
 800be1e:	d008      	beq.n	800be32 <USBD_StdEPReq+0xce>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	88db      	ldrh	r3, [r3, #6]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d104      	bne.n	800be32 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800be28:	7bbb      	ldrb	r3, [r7, #14]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f002 fc25 	bl	800e67c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fc7a 	bl	800c72c <USBD_CtlSendStatus>

        break;
 800be38:	e004      	b.n	800be44 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fbac 	bl	800c59a <USBD_CtlError>
        break;
 800be42:	bf00      	nop
      }
      break;
 800be44:	e0de      	b.n	800c004 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d002      	beq.n	800be56 <USBD_StdEPReq+0xf2>
 800be50:	2b03      	cmp	r3, #3
 800be52:	d015      	beq.n	800be80 <USBD_StdEPReq+0x11c>
 800be54:	e026      	b.n	800bea4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00c      	beq.n	800be76 <USBD_StdEPReq+0x112>
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	2b80      	cmp	r3, #128	; 0x80
 800be60:	d009      	beq.n	800be76 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800be62:	7bbb      	ldrb	r3, [r7, #14]
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f002 fc08 	bl	800e67c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800be6c:	2180      	movs	r1, #128	; 0x80
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f002 fc04 	bl	800e67c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800be74:	e01c      	b.n	800beb0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fb8e 	bl	800c59a <USBD_CtlError>
        break;
 800be7e:	e017      	b.n	800beb0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	885b      	ldrh	r3, [r3, #2]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d112      	bne.n	800beae <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800be88:	7bbb      	ldrb	r3, [r7, #14]
 800be8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d004      	beq.n	800be9c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f002 fc0f 	bl	800e6ba <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fc45 	bl	800c72c <USBD_CtlSendStatus>
        }
        break;
 800bea2:	e004      	b.n	800beae <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fb77 	bl	800c59a <USBD_CtlError>
        break;
 800beac:	e000      	b.n	800beb0 <USBD_StdEPReq+0x14c>
        break;
 800beae:	bf00      	nop
      }
      break;
 800beb0:	e0a8      	b.n	800c004 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d002      	beq.n	800bec2 <USBD_StdEPReq+0x15e>
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d031      	beq.n	800bf24 <USBD_StdEPReq+0x1c0>
 800bec0:	e095      	b.n	800bfee <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d007      	beq.n	800bed8 <USBD_StdEPReq+0x174>
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	2b80      	cmp	r3, #128	; 0x80
 800becc:	d004      	beq.n	800bed8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fb62 	bl	800c59a <USBD_CtlError>
          break;
 800bed6:	e08f      	b.n	800bff8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da0b      	bge.n	800bef8 <USBD_StdEPReq+0x194>
 800bee0:	7bbb      	ldrb	r3, [r7, #14]
 800bee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	3310      	adds	r3, #16
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	4413      	add	r3, r2
 800bef4:	3304      	adds	r3, #4
 800bef6:	e00a      	b.n	800bf0e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800befe:	4613      	mov	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fba7 	bl	800c670 <USBD_CtlSendData>
          break;
 800bf22:	e069      	b.n	800bff8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800bf24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	da11      	bge.n	800bf50 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	f003 020f 	and.w	r2, r3, #15
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	4613      	mov	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	3318      	adds	r3, #24
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d117      	bne.n	800bf76 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fb26 	bl	800c59a <USBD_CtlError>
            break;
 800bf4e:	e053      	b.n	800bff8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf50:	7bbb      	ldrb	r3, [r7, #14]
 800bf52:	f003 020f 	and.w	r2, r3, #15
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	440b      	add	r3, r1
 800bf62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fb13 	bl	800c59a <USBD_CtlError>
            break;
 800bf74:	e040      	b.n	800bff8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bf76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da0b      	bge.n	800bf96 <USBD_StdEPReq+0x232>
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
 800bf80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	4413      	add	r3, r2
 800bf92:	3304      	adds	r3, #4
 800bf94:	e00a      	b.n	800bfac <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	4413      	add	r3, r2
 800bfac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <USBD_StdEPReq+0x256>
 800bfb4:	7bbb      	ldrb	r3, [r7, #14]
 800bfb6:	2b80      	cmp	r3, #128	; 0x80
 800bfb8:	d103      	bne.n	800bfc2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	e00e      	b.n	800bfe0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f002 fb96 	bl	800e6f8 <USBD_LL_IsStallEP>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	e002      	b.n	800bfe0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fb42 	bl	800c670 <USBD_CtlSendData>
          break;
 800bfec:	e004      	b.n	800bff8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fad2 	bl	800c59a <USBD_CtlError>
        break;
 800bff6:	bf00      	nop
      }
      break;
 800bff8:	e004      	b.n	800c004 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 facc 	bl	800c59a <USBD_CtlError>
      break;
 800c002:	bf00      	nop
    }
    break;
 800c004:	e004      	b.n	800c010 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fac6 	bl	800c59a <USBD_CtlError>
    break;
 800c00e:	bf00      	nop
  }

  return ret;
 800c010:	7bfb      	ldrb	r3, [r7, #15]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	885b      	ldrh	r3, [r3, #2]
 800c02a:	0a1b      	lsrs	r3, r3, #8
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	3b01      	subs	r3, #1
 800c030:	2b0e      	cmp	r3, #14
 800c032:	f200 80e5 	bhi.w	800c200 <USBD_GetDescriptor+0x1e4>
 800c036:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <USBD_GetDescriptor+0x20>)
 800c038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03c:	0800c091 	.word	0x0800c091
 800c040:	0800c0a9 	.word	0x0800c0a9
 800c044:	0800c0e9 	.word	0x0800c0e9
 800c048:	0800c201 	.word	0x0800c201
 800c04c:	0800c201 	.word	0x0800c201
 800c050:	0800c1ad 	.word	0x0800c1ad
 800c054:	0800c1d3 	.word	0x0800c1d3
 800c058:	0800c201 	.word	0x0800c201
 800c05c:	0800c201 	.word	0x0800c201
 800c060:	0800c201 	.word	0x0800c201
 800c064:	0800c201 	.word	0x0800c201
 800c068:	0800c201 	.word	0x0800c201
 800c06c:	0800c201 	.word	0x0800c201
 800c070:	0800c201 	.word	0x0800c201
 800c074:	0800c079 	.word	0x0800c079
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	7c12      	ldrb	r2, [r2, #16]
 800c084:	f107 010a 	add.w	r1, r7, #10
 800c088:	4610      	mov	r0, r2
 800c08a:	4798      	blx	r3
 800c08c:	60f8      	str	r0, [r7, #12]
    break;
 800c08e:	e0bc      	b.n	800c20a <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	7c12      	ldrb	r2, [r2, #16]
 800c09c:	f107 010a 	add.w	r1, r7, #10
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	4798      	blx	r3
 800c0a4:	60f8      	str	r0, [r7, #12]
    break;
 800c0a6:	e0b0      	b.n	800c20a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	7c1b      	ldrb	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10d      	bne.n	800c0cc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b8:	f107 020a 	add.w	r2, r7, #10
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
 800c0c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c0ca:	e09e      	b.n	800c20a <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	f107 020a 	add.w	r2, r7, #10
 800c0d8:	4610      	mov	r0, r2
 800c0da:	4798      	blx	r3
 800c0dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	701a      	strb	r2, [r3, #0]
    break;
 800c0e6:	e090      	b.n	800c20a <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b05      	cmp	r3, #5
 800c0f0:	d856      	bhi.n	800c1a0 <USBD_GetDescriptor+0x184>
 800c0f2:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <USBD_GetDescriptor+0xdc>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c111 	.word	0x0800c111
 800c0fc:	0800c129 	.word	0x0800c129
 800c100:	0800c141 	.word	0x0800c141
 800c104:	0800c159 	.word	0x0800c159
 800c108:	0800c171 	.word	0x0800c171
 800c10c:	0800c189 	.word	0x0800c189
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	7c12      	ldrb	r2, [r2, #16]
 800c11c:	f107 010a 	add.w	r1, r7, #10
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
 800c124:	60f8      	str	r0, [r7, #12]
      break;
 800c126:	e040      	b.n	800c1aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	7c12      	ldrb	r2, [r2, #16]
 800c134:	f107 010a 	add.w	r1, r7, #10
 800c138:	4610      	mov	r0, r2
 800c13a:	4798      	blx	r3
 800c13c:	60f8      	str	r0, [r7, #12]
      break;
 800c13e:	e034      	b.n	800c1aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7c12      	ldrb	r2, [r2, #16]
 800c14c:	f107 010a 	add.w	r1, r7, #10
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
      break;
 800c156:	e028      	b.n	800c1aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	7c12      	ldrb	r2, [r2, #16]
 800c164:	f107 010a 	add.w	r1, r7, #10
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	60f8      	str	r0, [r7, #12]
      break;
 800c16e:	e01c      	b.n	800c1aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c176:	695b      	ldr	r3, [r3, #20]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	7c12      	ldrb	r2, [r2, #16]
 800c17c:	f107 010a 	add.w	r1, r7, #10
 800c180:	4610      	mov	r0, r2
 800c182:	4798      	blx	r3
 800c184:	60f8      	str	r0, [r7, #12]
      break;
 800c186:	e010      	b.n	800c1aa <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c18e:	699b      	ldr	r3, [r3, #24]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	7c12      	ldrb	r2, [r2, #16]
 800c194:	f107 010a 	add.w	r1, r7, #10
 800c198:	4610      	mov	r0, r2
 800c19a:	4798      	blx	r3
 800c19c:	60f8      	str	r0, [r7, #12]
      break;
 800c19e:	e004      	b.n	800c1aa <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f9f9 	bl	800c59a <USBD_CtlError>
      return;
 800c1a8:	e04b      	b.n	800c242 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800c1aa:	e02e      	b.n	800c20a <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	7c1b      	ldrb	r3, [r3, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d109      	bne.n	800c1c8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1bc:	f107 020a 	add.w	r2, r7, #10
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	4798      	blx	r3
 800c1c4:	60f8      	str	r0, [r7, #12]
      break;
 800c1c6:	e020      	b.n	800c20a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9e5 	bl	800c59a <USBD_CtlError>
      return;
 800c1d0:	e037      	b.n	800c242 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	7c1b      	ldrb	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10d      	bne.n	800c1f6 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e2:	f107 020a 	add.w	r2, r7, #10
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	4798      	blx	r3
 800c1ea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	2207      	movs	r2, #7
 800c1f2:	701a      	strb	r2, [r3, #0]
      break;
 800c1f4:	e009      	b.n	800c20a <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f9ce 	bl	800c59a <USBD_CtlError>
      return;
 800c1fe:	e020      	b.n	800c242 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f9c9 	bl	800c59a <USBD_CtlError>
    return;
 800c208:	e01b      	b.n	800c242 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 800c20a:	897b      	ldrh	r3, [r7, #10]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d011      	beq.n	800c234 <USBD_GetDescriptor+0x218>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	88db      	ldrh	r3, [r3, #6]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00d      	beq.n	800c234 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	88da      	ldrh	r2, [r3, #6]
 800c21c:	897b      	ldrh	r3, [r7, #10]
 800c21e:	4293      	cmp	r3, r2
 800c220:	bf28      	it	cs
 800c222:	4613      	movcs	r3, r2
 800c224:	b29b      	uxth	r3, r3
 800c226:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800c228:	897b      	ldrh	r3, [r7, #10]
 800c22a:	461a      	mov	r2, r3
 800c22c:	68f9      	ldr	r1, [r7, #12]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fa1e 	bl	800c670 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	88db      	ldrh	r3, [r3, #6]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d102      	bne.n	800c242 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fa75 	bl	800c72c <USBD_CtlSendStatus>
  }
}
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	889b      	ldrh	r3, [r3, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d130      	bne.n	800c2bc <USBD_SetAddress+0x74>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	88db      	ldrh	r3, [r3, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d12c      	bne.n	800c2bc <USBD_SetAddress+0x74>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	885b      	ldrh	r3, [r3, #2]
 800c266:	2b7f      	cmp	r3, #127	; 0x7f
 800c268:	d828      	bhi.n	800c2bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c274:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	d104      	bne.n	800c28a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f989 	bl	800c59a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c288:	e01c      	b.n	800c2c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7bfa      	ldrb	r2, [r7, #15]
 800c28e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f002 fa5a 	bl	800e750 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fa45 	bl	800c72c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d004      	beq.n	800c2b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b0:	e008      	b.n	800c2c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ba:	e003      	b.n	800c2c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f96b 	bl	800c59a <USBD_CtlError>
  }
}
 800c2c4:	bf00      	nop
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	4b41      	ldr	r3, [pc, #260]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c2de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c2e0:	4b40      	ldr	r3, [pc, #256]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d904      	bls.n	800c2f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f955 	bl	800c59a <USBD_CtlError>
 800c2f0:	e075      	b.n	800c3de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d002      	beq.n	800c302 <USBD_SetConfig+0x36>
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d023      	beq.n	800c348 <USBD_SetConfig+0x7c>
 800c300:	e062      	b.n	800c3c8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800c302:	4b38      	ldr	r3, [pc, #224]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d01a      	beq.n	800c340 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800c30a:	4b36      	ldr	r3, [pc, #216]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2203      	movs	r2, #3
 800c318:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c31c:	4b31      	ldr	r3, [pc, #196]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff fa0d 	bl	800b742 <USBD_SetClassConfig>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d104      	bne.n	800c338 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f932 	bl	800c59a <USBD_CtlError>
          return;
 800c336:	e052      	b.n	800c3de <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f9f7 	bl	800c72c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c33e:	e04e      	b.n	800c3de <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f9f3 	bl	800c72c <USBD_CtlSendStatus>
      break;
 800c346:	e04a      	b.n	800c3de <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c348:	4b26      	ldr	r3, [pc, #152]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d112      	bne.n	800c376 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2202      	movs	r2, #2
 800c354:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800c358:	4b22      	ldr	r3, [pc, #136]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800c362:	4b20      	ldr	r3, [pc, #128]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff fa09 	bl	800b780 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f9dc 	bl	800c72c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c374:	e033      	b.n	800c3de <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800c376:	4b1b      	ldr	r3, [pc, #108]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	429a      	cmp	r2, r3
 800c382:	d01d      	beq.n	800c3c0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff f9f7 	bl	800b780 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c392:	4b14      	ldr	r3, [pc, #80]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	461a      	mov	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c39c:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff f9cd 	bl	800b742 <USBD_SetClassConfig>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d104      	bne.n	800c3b8 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800c3ae:	6839      	ldr	r1, [r7, #0]
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f8f2 	bl	800c59a <USBD_CtlError>
          return;
 800c3b6:	e012      	b.n	800c3de <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f9b7 	bl	800c72c <USBD_CtlSendStatus>
      break;
 800c3be:	e00e      	b.n	800c3de <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f9b3 	bl	800c72c <USBD_CtlSendStatus>
      break;
 800c3c6:	e00a      	b.n	800c3de <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 f8e5 	bl	800c59a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <USBD_SetConfig+0x118>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f7ff f9d2 	bl	800b780 <USBD_ClrClassConfig>
      break;
 800c3dc:	bf00      	nop
    }
  }
}
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	2000045c 	.word	0x2000045c

0800c3e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	88db      	ldrh	r3, [r3, #6]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d004      	beq.n	800c404 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f8cc 	bl	800c59a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c402:	e021      	b.n	800c448 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	db17      	blt.n	800c43e <USBD_GetConfig+0x56>
 800c40e:	2b02      	cmp	r3, #2
 800c410:	dd02      	ble.n	800c418 <USBD_GetConfig+0x30>
 800c412:	2b03      	cmp	r3, #3
 800c414:	d00b      	beq.n	800c42e <USBD_GetConfig+0x46>
 800c416:	e012      	b.n	800c43e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3308      	adds	r3, #8
 800c422:	2201      	movs	r2, #1
 800c424:	4619      	mov	r1, r3
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f922 	bl	800c670 <USBD_CtlSendData>
      break;
 800c42c:	e00c      	b.n	800c448 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	3304      	adds	r3, #4
 800c432:	2201      	movs	r2, #1
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f91a 	bl	800c670 <USBD_CtlSendData>
      break;
 800c43c:	e004      	b.n	800c448 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 f8aa 	bl	800c59a <USBD_CtlError>
      break;
 800c446:	bf00      	nop
}
 800c448:	bf00      	nop
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c460:	3b01      	subs	r3, #1
 800c462:	2b02      	cmp	r3, #2
 800c464:	d81e      	bhi.n	800c4a4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	88db      	ldrh	r3, [r3, #6]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d004      	beq.n	800c478 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f892 	bl	800c59a <USBD_CtlError>
      break;
 800c476:	e01a      	b.n	800c4ae <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	f043 0202 	orr.w	r2, r3, #2
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	330c      	adds	r3, #12
 800c498:	2202      	movs	r2, #2
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f8e7 	bl	800c670 <USBD_CtlSendData>
    break;
 800c4a2:	e004      	b.n	800c4ae <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 f877 	bl	800c59a <USBD_CtlError>
    break;
 800c4ac:	bf00      	nop
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	885b      	ldrh	r3, [r3, #2]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d106      	bne.n	800c4d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f92b 	bl	800c72c <USBD_CtlSendStatus>
  }

}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d80b      	bhi.n	800c50c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	885b      	ldrh	r3, [r3, #2]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d10c      	bne.n	800c516 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f911 	bl	800c72c <USBD_CtlSendStatus>
    }
    break;
 800c50a:	e004      	b.n	800c516 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f843 	bl	800c59a <USBD_CtlError>
    break;
 800c514:	e000      	b.n	800c518 <USBD_ClrFeature+0x3a>
    break;
 800c516:	bf00      	nop
  }
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	781a      	ldrb	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	785a      	ldrb	r2, [r3, #1]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	3302      	adds	r3, #2
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	b29a      	uxth	r2, r3
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	3303      	adds	r3, #3
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	021b      	lsls	r3, r3, #8
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	4413      	add	r3, r2
 800c550:	b29a      	uxth	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	3304      	adds	r3, #4
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	3305      	adds	r3, #5
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	b29b      	uxth	r3, r3
 800c566:	021b      	lsls	r3, r3, #8
 800c568:	b29b      	uxth	r3, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	3306      	adds	r3, #6
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	b29a      	uxth	r2, r3
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	3307      	adds	r3, #7
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	b29b      	uxth	r3, r3
 800c582:	021b      	lsls	r3, r3, #8
 800c584:	b29b      	uxth	r3, r3
 800c586:	4413      	add	r3, r2
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	80da      	strh	r2, [r3, #6]

}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800c5a4:	2180      	movs	r1, #128	; 0x80
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f002 f868 	bl	800e67c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f002 f864 	bl	800e67c <USBD_LL_StallEP>
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d032      	beq.n	800c638 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 f834 	bl	800c640 <USBD_GetLen>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	3301      	adds	r3, #1
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	75fa      	strb	r2, [r7, #23]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	7812      	ldrb	r2, [r2, #0]
 800c5f6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c5f8:	7dfb      	ldrb	r3, [r7, #23]
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	75fa      	strb	r2, [r7, #23]
 800c5fe:	461a      	mov	r2, r3
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	4413      	add	r3, r2
 800c604:	2203      	movs	r2, #3
 800c606:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c608:	e012      	b.n	800c630 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	60fa      	str	r2, [r7, #12]
 800c610:	7dfa      	ldrb	r2, [r7, #23]
 800c612:	1c51      	adds	r1, r2, #1
 800c614:	75f9      	strb	r1, [r7, #23]
 800c616:	4611      	mov	r1, r2
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	440a      	add	r2, r1
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c620:	7dfb      	ldrb	r3, [r7, #23]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	75fa      	strb	r2, [r7, #23]
 800c626:	461a      	mov	r2, r3
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	4413      	add	r3, r2
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e8      	bne.n	800c60a <USBD_GetString+0x4e>
    }
  }
}
 800c638:	bf00      	nop
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800c648:	2300      	movs	r3, #0
 800c64a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800c64c:	e005      	b.n	800c65a <USBD_GetLen+0x1a>
    {
        len++;
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
 800c650:	3301      	adds	r3, #1
 800c652:	73fb      	strb	r3, [r7, #15]
        buf++;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3301      	adds	r3, #1
 800c658:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1f5      	bne.n	800c64e <USBD_GetLen+0xe>
    }

    return len;
 800c662:	7bfb      	ldrb	r3, [r7, #15]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2202      	movs	r2, #2
 800c682:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800c686:	88fa      	ldrh	r2, [r7, #6]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c68c:	88fa      	ldrh	r2, [r7, #6]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c692:	88fb      	ldrh	r3, [r7, #6]
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	2100      	movs	r1, #0
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f002 f878 	bl	800e78e <USBD_LL_Transmit>

  return USBD_OK;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c6b6:	88fb      	ldrh	r3, [r7, #6]
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f002 f866 	bl	800e78e <USBD_LL_Transmit>

  return USBD_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2203      	movs	r2, #3
 800c6de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800c6e2:	88fa      	ldrh	r2, [r7, #6]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800c6ea:	88fa      	ldrh	r2, [r7, #6]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800c6f2:	88fb      	ldrh	r3, [r7, #6]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f002 f86b 	bl	800e7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	4613      	mov	r3, r2
 800c714:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c716:	88fb      	ldrh	r3, [r7, #6]
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	2100      	movs	r1, #0
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f002 f859 	bl	800e7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2204      	movs	r2, #4
 800c738:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c73c:	2300      	movs	r3, #0
 800c73e:	2200      	movs	r2, #0
 800c740:	2100      	movs	r1, #0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f002 f823 	bl	800e78e <USBD_LL_Transmit>

  return USBD_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2205      	movs	r2, #5
 800c75e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c762:	2300      	movs	r3, #0
 800c764:	2200      	movs	r2, #0
 800c766:	2100      	movs	r1, #0
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f002 f833 	bl	800e7d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c778:	b480      	push	{r7}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	4613      	mov	r3, r2
 800c784:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c786:	2301      	movs	r3, #1
 800c788:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c78e:	4b1f      	ldr	r3, [pc, #124]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c790:	7a5b      	ldrb	r3, [r3, #9]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	d131      	bne.n	800c7fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c798:	4b1c      	ldr	r3, [pc, #112]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c79a:	7a5b      	ldrb	r3, [r3, #9]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c7a6:	4b19      	ldr	r3, [pc, #100]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7a8:	7a5b      	ldrb	r3, [r3, #9]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4a17      	ldr	r2, [pc, #92]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c7b6:	4b15      	ldr	r3, [pc, #84]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7b8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	4b13      	ldr	r3, [pc, #76]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7c0:	4413      	add	r3, r2
 800c7c2:	79fa      	ldrb	r2, [r7, #7]
 800c7c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c7c6:	4b11      	ldr	r3, [pc, #68]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7c8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	b2d1      	uxtb	r1, r2
 800c7d0:	4a0e      	ldr	r2, [pc, #56]	; (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7d2:	7251      	strb	r1, [r2, #9]
 800c7d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7d6:	7dbb      	ldrb	r3, [r7, #22]
 800c7d8:	3330      	adds	r3, #48	; 0x30
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	223a      	movs	r2, #58	; 0x3a
 800c7e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	222f      	movs	r2, #47	; 0x2f
 800c7ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	3303      	adds	r3, #3
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	371c      	adds	r7, #28
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	20000460 	.word	0x20000460

0800c810 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c81a:	2200      	movs	r2, #0
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff ffaa 	bl	800c778 <FATFS_LinkDriverEx>
 800c824:	4603      	mov	r3, r0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c834:	4904      	ldr	r1, [pc, #16]	; (800c848 <MX_FATFS_Init+0x18>)
 800c836:	4805      	ldr	r0, [pc, #20]	; (800c84c <MX_FATFS_Init+0x1c>)
 800c838:	f7ff ffea 	bl	800c810 <FATFS_LinkDriver>
 800c83c:	4603      	mov	r3, r0
 800c83e:	461a      	mov	r2, r3
 800c840:	4b03      	ldr	r3, [pc, #12]	; (800c850 <MX_FATFS_Init+0x20>)
 800c842:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c844:	bf00      	nop
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20000610 	.word	0x20000610
 800c84c:	08010ae4 	.word	0x08010ae4
 800c850:	2000060c 	.word	0x2000060c

0800c854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c858:	f7f4 ff1c 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c85c:	f000 f83a 	bl	800c8d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c860:	f000 fc92 	bl	800d188 <MX_GPIO_Init>
  MX_CRC_Init();
 800c864:	f000 f8d2 	bl	800ca0c <MX_CRC_Init>
  MX_DMA2D_Init();
 800c868:	f000 f8e4 	bl	800ca34 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800c86c:	f000 f914 	bl	800ca98 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800c870:	f000 fc3a 	bl	800d0e8 <MX_FMC_Init>
  MX_I2C1_Init();
 800c874:	f000 fa10 	bl	800cc98 <MX_I2C1_Init>
  MX_I2C2_Init();
 800c878:	f000 fa3c 	bl	800ccf4 <MX_I2C2_Init>
  MX_LTDC_Init();
 800c87c:	f000 fa68 	bl	800cd50 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800c880:	f000 fae4 	bl	800ce4c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800c884:	f000 fb0e 	bl	800cea4 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 800c888:	f000 fb6a 	bl	800cf60 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800c88c:	f000 fb88 	bl	800cfa0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800c890:	f000 fbd6 	bl	800d040 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800c894:	f000 fbfe 	bl	800d094 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800c898:	f7ff ffca 	bl	800c830 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800c89c:	f001 fc30 	bl	800e100 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init() ;
 800c8a0:	f7f4 f889 	bl	80009b6 <BSP_LCD_Init>
  BSP_LCD_Clear(((uint32_t) 0xFFFFFFFF));
 800c8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8a8:	f7f4 fa40 	bl	8000d2c <BSP_LCD_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(250);
 800c8ac:	20fa      	movs	r0, #250	; 0xfa
 800c8ae:	f7f4 ff33 	bl	8001718 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2140      	movs	r1, #64	; 0x40
 800c8b6:	4806      	ldr	r0, [pc, #24]	; (800c8d0 <main+0x7c>)
 800c8b8:	f7f7 fa02 	bl	8003cc0 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 800c8bc:	20fa      	movs	r0, #250	; 0xfa
 800c8be:	f7f4 ff2b 	bl	8001718 <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	2140      	movs	r1, #64	; 0x40
 800c8c6:	4802      	ldr	r0, [pc, #8]	; (800c8d0 <main+0x7c>)
 800c8c8:	f7f7 f9fa 	bl	8003cc0 <HAL_GPIO_WritePin>
	  HAL_Delay(250);
 800c8cc:	e7ee      	b.n	800c8ac <main+0x58>
 800c8ce:	bf00      	nop
 800c8d0:	40021800 	.word	0x40021800

0800c8d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b0a4      	sub	sp, #144	; 0x90
 800c8d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c8da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c8de:	2234      	movs	r2, #52	; 0x34
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f002 f9aa 	bl	800ec3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c8e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]
 800c8f0:	605a      	str	r2, [r3, #4]
 800c8f2:	609a      	str	r2, [r3, #8]
 800c8f4:	60da      	str	r2, [r3, #12]
 800c8f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c8f8:	f107 030c 	add.w	r3, r7, #12
 800c8fc:	223c      	movs	r2, #60	; 0x3c
 800c8fe:	2100      	movs	r1, #0
 800c900:	4618      	mov	r0, r3
 800c902:	f002 f99b 	bl	800ec3c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c906:	2300      	movs	r3, #0
 800c908:	60bb      	str	r3, [r7, #8]
 800c90a:	4b3e      	ldr	r3, [pc, #248]	; (800ca04 <SystemClock_Config+0x130>)
 800c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90e:	4a3d      	ldr	r2, [pc, #244]	; (800ca04 <SystemClock_Config+0x130>)
 800c910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c914:	6413      	str	r3, [r2, #64]	; 0x40
 800c916:	4b3b      	ldr	r3, [pc, #236]	; (800ca04 <SystemClock_Config+0x130>)
 800c918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c91e:	60bb      	str	r3, [r7, #8]
 800c920:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c922:	2300      	movs	r3, #0
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	4b38      	ldr	r3, [pc, #224]	; (800ca08 <SystemClock_Config+0x134>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a37      	ldr	r2, [pc, #220]	; (800ca08 <SystemClock_Config+0x134>)
 800c92c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c930:	6013      	str	r3, [r2, #0]
 800c932:	4b35      	ldr	r3, [pc, #212]	; (800ca08 <SystemClock_Config+0x134>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c93a:	607b      	str	r3, [r7, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c93e:	2301      	movs	r3, #1
 800c940:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c946:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c948:	2302      	movs	r3, #2
 800c94a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c94c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c950:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c952:	2304      	movs	r3, #4
 800c954:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800c956:	23b4      	movs	r3, #180	; 0xb4
 800c958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c95c:	2302      	movs	r3, #2
 800c95e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800c962:	2306      	movs	r3, #6
 800c964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 800c968:	2306      	movs	r3, #6
 800c96a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c96e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c972:	4618      	mov	r0, r3
 800c974:	f7f9 fdf2 	bl	800655c <HAL_RCC_OscConfig>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800c97e:	f000 fda1 	bl	800d4c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c982:	f7f9 f86d 	bl	8005a60 <HAL_PWREx_EnableOverDrive>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800c98c:	f000 fd9a 	bl	800d4c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c990:	230f      	movs	r3, #15
 800c992:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c994:	2302      	movs	r3, #2
 800c996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c998:	2300      	movs	r3, #0
 800c99a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c99c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c9a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c9a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9a6:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c9a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c9ac:	2105      	movs	r1, #5
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7f9 f976 	bl	8005ca0 <HAL_RCC_ClockConfig>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d001      	beq.n	800c9be <SystemClock_Config+0xea>
  {
    Error_Handler();
 800c9ba:	f000 fd83 	bl	800d4c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800c9be:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800c9c2:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 800c9c4:	2390      	movs	r3, #144	; 0x90
 800c9c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 800c9d0:	2306      	movs	r3, #6
 800c9d2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800c9d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c9dc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800c9de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9e2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c9e8:	f107 030c 	add.w	r3, r7, #12
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7f9 fb77 	bl	80060e0 <HAL_RCCEx_PeriphCLKConfig>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <SystemClock_Config+0x128>
  {
    Error_Handler();
 800c9f8:	f000 fd64 	bl	800d4c4 <Error_Handler>
  }
}
 800c9fc:	bf00      	nop
 800c9fe:	3790      	adds	r7, #144	; 0x90
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	40023800 	.word	0x40023800
 800ca08:	40007000 	.word	0x40007000

0800ca0c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ca10:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <MX_CRC_Init+0x20>)
 800ca12:	4a07      	ldr	r2, [pc, #28]	; (800ca30 <MX_CRC_Init+0x24>)
 800ca14:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ca16:	4805      	ldr	r0, [pc, #20]	; (800ca2c <MX_CRC_Init+0x20>)
 800ca18:	f7f4 ffb2 	bl	8001980 <HAL_CRC_Init>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800ca22:	f000 fd4f 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ca26:	bf00      	nop
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	20000b08 	.word	0x20000b08
 800ca30:	40023000 	.word	0x40023000

0800ca34 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800ca38:	4b15      	ldr	r3, [pc, #84]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca3a:	4a16      	ldr	r2, [pc, #88]	; (800ca94 <MX_DMA2D_Init+0x60>)
 800ca3c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800ca3e:	4b14      	ldr	r3, [pc, #80]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800ca44:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800ca50:	4b0f      	ldr	r3, [pc, #60]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800ca56:	4b0e      	ldr	r3, [pc, #56]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ca5c:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ca62:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ca68:	4809      	ldr	r0, [pc, #36]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca6a:	f7f5 f965 	bl	8001d38 <HAL_DMA2D_Init>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800ca74:	f000 fd26 	bl	800d4c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ca78:	2101      	movs	r1, #1
 800ca7a:	4805      	ldr	r0, [pc, #20]	; (800ca90 <MX_DMA2D_Init+0x5c>)
 800ca7c:	f7f5 fbca 	bl	8002214 <HAL_DMA2D_ConfigLayer>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800ca86:	f000 fd1d 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800ca8a:	bf00      	nop
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000d2c 	.word	0x20000d2c
 800ca94:	4002b000 	.word	0x4002b000

0800ca98 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b0aa      	sub	sp, #168	; 0xa8
 800ca9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800ca9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	605a      	str	r2, [r3, #4]
 800caa8:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800caaa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800caae:	2224      	movs	r2, #36	; 0x24
 800cab0:	2100      	movs	r1, #0
 800cab2:	4618      	mov	r0, r3
 800cab4:	f002 f8c2 	bl	800ec3c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800cab8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	609a      	str	r2, [r3, #8]
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	611a      	str	r2, [r3, #16]
 800cac8:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800caca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cace:	2234      	movs	r2, #52	; 0x34
 800cad0:	2100      	movs	r1, #0
 800cad2:	4618      	mov	r0, r3
 800cad4:	f002 f8b2 	bl	800ec3c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800cad8:	463b      	mov	r3, r7
 800cada:	222c      	movs	r2, #44	; 0x2c
 800cadc:	2100      	movs	r1, #0
 800cade:	4618      	mov	r0, r3
 800cae0:	f002 f8ac 	bl	800ec3c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800cae4:	4b6a      	ldr	r3, [pc, #424]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cae6:	4a6b      	ldr	r2, [pc, #428]	; (800cc94 <MX_DSIHOST_DSI_Init+0x1fc>)
 800cae8:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800caea:	4b69      	ldr	r3, [pc, #420]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800caec:	2200      	movs	r2, #0
 800caee:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800caf0:	4b67      	ldr	r3, [pc, #412]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800caf2:	2204      	movs	r2, #4
 800caf4:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800caf6:	4b66      	ldr	r3, [pc, #408]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 800cafc:	237d      	movs	r3, #125	; 0x7d
 800cafe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800cb02:	2302      	movs	r3, #2
 800cb04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800cb0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800cb12:	4619      	mov	r1, r3
 800cb14:	485e      	ldr	r0, [pc, #376]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cb16:	f7f5 fcf3 	bl	8002500 <HAL_DSI_Init>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800cb20:	f000 fcd0 	bl	800d4c4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800cb24:	2301      	movs	r3, #1
 800cb26:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800cb56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	484c      	ldr	r0, [pc, #304]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cb5e:	f7f6 fbf9 	bl	8003354 <HAL_DSI_ConfigHostTimeouts>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800cb68:	f000 fcac 	bl	800d4c4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800cb6c:	231c      	movs	r3, #28
 800cb6e:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800cb70:	2321      	movs	r3, #33	; 0x21
 800cb72:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800cb74:	230f      	movs	r3, #15
 800cb76:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800cb78:	2319      	movs	r3, #25
 800cb7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 800cb80:	230a      	movs	r3, #10
 800cb82:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800cb84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cb88:	4619      	mov	r1, r3
 800cb8a:	4841      	ldr	r0, [pc, #260]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cb8c:	f7f6 fb78 	bl	8003280 <HAL_DSI_ConfigPhyTimer>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800cb96:	f000 fc95 	bl	800d4c4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800cb9a:	2104      	movs	r1, #4
 800cb9c:	483c      	ldr	r0, [pc, #240]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cb9e:	f7f6 fb47 	bl	8003230 <HAL_DSI_ConfigFlowControl>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800cba8:	f000 fc8c 	bl	800d4c4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800cbac:	f242 7110 	movw	r1, #10000	; 0x2710
 800cbb0:	4837      	ldr	r0, [pc, #220]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cbb2:	f7f6 fd8b 	bl	80036cc <HAL_DSI_SetLowPowerRXFilter>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800cbbc:	f000 fc82 	bl	800d4c4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	4833      	ldr	r0, [pc, #204]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cbc4:	f7f5 fe2a 	bl	800281c <HAL_DSI_ConfigErrorMonitor>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800cbce:	f000 fc79 	bl	800d4c4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800cbd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800cbd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbdc:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800cbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbe2:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800cbe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbe8:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800cbea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800cbf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbf4:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800cbf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cbfa:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800cbfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cc00:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800cc02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cc06:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800cc08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cc0c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800cc0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cc12:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800cc14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc18:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800cc1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc22:	4619      	mov	r1, r3
 800cc24:	481a      	ldr	r0, [pc, #104]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cc26:	f7f6 faa5 	bl	8003174 <HAL_DSI_ConfigCommand>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 800cc30:	f000 fc48 	bl	800d4c4 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800cc38:	2305      	movs	r3, #5
 800cc3a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 800cc3c:	23c8      	movs	r3, #200	; 0xc8
 800cc3e:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800cc40:	2310      	movs	r3, #16
 800cc42:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800cc48:	2304      	movs	r3, #4
 800cc4a:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800cc50:	2300      	movs	r3, #0
 800cc52:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800cc54:	2300      	movs	r3, #0
 800cc56:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800cc58:	2340      	movs	r3, #64	; 0x40
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800cc60:	463b      	mov	r3, r7
 800cc62:	4619      	mov	r1, r3
 800cc64:	480a      	ldr	r0, [pc, #40]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cc66:	f7f6 f9ad 	bl	8002fc4 <HAL_DSI_ConfigAdaptedCommandMode>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 800cc70:	f000 fc28 	bl	800d4c4 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800cc74:	2100      	movs	r1, #0
 800cc76:	4806      	ldr	r0, [pc, #24]	; (800cc90 <MX_DSIHOST_DSI_Init+0x1f8>)
 800cc78:	f7f5 ff74 	bl	8002b64 <HAL_DSI_SetGenericVCID>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800cc82:	f000 fc1f 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800cc86:	bf00      	nop
 800cc88:	37a8      	adds	r7, #168	; 0xa8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20000b64 	.word	0x20000b64
 800cc94:	40016c00 	.word	0x40016c00

0800cc98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800cc9c:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <MX_I2C1_Init+0x50>)
 800cc9e:	4a13      	ldr	r2, [pc, #76]	; (800ccec <MX_I2C1_Init+0x54>)
 800cca0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800cca2:	4b11      	ldr	r3, [pc, #68]	; (800cce8 <MX_I2C1_Init+0x50>)
 800cca4:	4a12      	ldr	r2, [pc, #72]	; (800ccf0 <MX_I2C1_Init+0x58>)
 800cca6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cca8:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800ccae:	4b0e      	ldr	r3, [pc, #56]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ccb4:	4b0c      	ldr	r3, [pc, #48]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ccba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ccbc:	4b0a      	ldr	r3, [pc, #40]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800ccc2:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ccc8:	4b07      	ldr	r3, [pc, #28]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ccce:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ccd4:	4804      	ldr	r0, [pc, #16]	; (800cce8 <MX_I2C1_Init+0x50>)
 800ccd6:	f7f7 f80d 	bl	8003cf4 <HAL_I2C_Init>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800cce0:	f000 fbf0 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cce4:	bf00      	nop
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20000ab4 	.word	0x20000ab4
 800ccec:	40005400 	.word	0x40005400
 800ccf0:	000186a0 	.word	0x000186a0

0800ccf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <MX_I2C2_Init+0x50>)
 800ccfa:	4a13      	ldr	r2, [pc, #76]	; (800cd48 <MX_I2C2_Init+0x54>)
 800ccfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800ccfe:	4b11      	ldr	r3, [pc, #68]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd00:	4a12      	ldr	r2, [pc, #72]	; (800cd4c <MX_I2C2_Init+0x58>)
 800cd02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800cd04:	4b0f      	ldr	r3, [pc, #60]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800cd0a:	4b0e      	ldr	r3, [pc, #56]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800cd10:	4b0c      	ldr	r3, [pc, #48]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cd16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cd18:	4b0a      	ldr	r3, [pc, #40]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800cd1e:	4b09      	ldr	r3, [pc, #36]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800cd24:	4b07      	ldr	r3, [pc, #28]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800cd2a:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800cd30:	4804      	ldr	r0, [pc, #16]	; (800cd44 <MX_I2C2_Init+0x50>)
 800cd32:	f7f6 ffdf 	bl	8003cf4 <HAL_I2C_Init>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800cd3c:	f000 fbc2 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800cd40:	bf00      	nop
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20000b10 	.word	0x20000b10
 800cd48:	40005800 	.word	0x40005800
 800cd4c:	000186a0 	.word	0x000186a0

0800cd50 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08e      	sub	sp, #56	; 0x38
 800cd54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800cd56:	1d3b      	adds	r3, r7, #4
 800cd58:	2234      	movs	r2, #52	; 0x34
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f001 ff6d 	bl	800ec3c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800cd62:	4b38      	ldr	r3, [pc, #224]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd64:	4a38      	ldr	r2, [pc, #224]	; (800ce48 <MX_LTDC_Init+0xf8>)
 800cd66:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800cd68:	4b36      	ldr	r3, [pc, #216]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800cd6e:	4b35      	ldr	r3, [pc, #212]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800cd74:	4b33      	ldr	r3, [pc, #204]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800cd7a:	4b32      	ldr	r3, [pc, #200]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 800cd80:	4b30      	ldr	r3, [pc, #192]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800cd86:	4b2f      	ldr	r3, [pc, #188]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 800cd8c:	4b2d      	ldr	r3, [pc, #180]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800cd92:	4b2c      	ldr	r3, [pc, #176]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 800cd98:	4b2a      	ldr	r3, [pc, #168]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cd9a:	22c9      	movs	r2, #201	; 0xc9
 800cd9c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 800cd9e:	4b29      	ldr	r3, [pc, #164]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cda0:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cda4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 800cda6:	4b27      	ldr	r3, [pc, #156]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cda8:	22ca      	movs	r2, #202	; 0xca
 800cdaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 800cdac:	4b25      	ldr	r3, [pc, #148]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cdae:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800cdb2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800cdb4:	4b23      	ldr	r3, [pc, #140]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800cdbc:	4b21      	ldr	r3, [pc, #132]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800cdc4:	4b1f      	ldr	r3, [pc, #124]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800cdcc:	481d      	ldr	r0, [pc, #116]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800cdce:	f7f7 f8b9 	bl	8003f44 <HAL_LTDC_Init>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 800cdd8:	f000 fb74 	bl	800d4c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 800cde0:	23c8      	movs	r3, #200	; 0xc8
 800cde2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800cde8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800cdec:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800cdee:	2302      	movs	r3, #2
 800cdf0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800cdf2:	23ff      	movs	r3, #255	; 0xff
 800cdf4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800cdfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cdfe:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800ce00:	2307      	movs	r3, #7
 800ce02:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800ce04:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800ce08:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 800ce0a:	23c8      	movs	r3, #200	; 0xc8
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800ce0e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800ce12:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800ce26:	1d3b      	adds	r3, r7, #4
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4805      	ldr	r0, [pc, #20]	; (800ce44 <MX_LTDC_Init+0xf4>)
 800ce2e:	f7f7 fa1b 	bl	8004268 <HAL_LTDC_ConfigLayer>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800ce38:	f000 fb44 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800ce3c:	bf00      	nop
 800ce3e:	3738      	adds	r7, #56	; 0x38
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	20000b80 	.word	0x20000b80
 800ce48:	40016800 	.word	0x40016800

0800ce4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800ce50:	4b12      	ldr	r3, [pc, #72]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce52:	4a13      	ldr	r2, [pc, #76]	; (800cea0 <MX_QUADSPI_Init+0x54>)
 800ce54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800ce56:	4b11      	ldr	r3, [pc, #68]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce58:	22ff      	movs	r2, #255	; 0xff
 800ce5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800ce5c:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800ce62:	4b0e      	ldr	r3, [pc, #56]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800ce68:	4b0c      	ldr	r3, [pc, #48]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800ce6e:	4b0b      	ldr	r3, [pc, #44]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800ce74:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800ce7a:	4b08      	ldr	r3, [pc, #32]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800ce80:	4b06      	ldr	r3, [pc, #24]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800ce86:	4805      	ldr	r0, [pc, #20]	; (800ce9c <MX_QUADSPI_Init+0x50>)
 800ce88:	f7f8 fe3a 	bl	8005b00 <HAL_QSPI_Init>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800ce92:	f000 fb17 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800ce96:	bf00      	nop
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20000e28 	.word	0x20000e28
 800cea0:	a0001000 	.word	0xa0001000

0800cea4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800cea8:	4b2a      	ldr	r3, [pc, #168]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800ceaa:	4a2b      	ldr	r2, [pc, #172]	; (800cf58 <MX_SAI1_Init+0xb4>)
 800ceac:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800ceae:	4b29      	ldr	r3, [pc, #164]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800ceb4:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800ceba:	4b26      	ldr	r3, [pc, #152]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cebc:	2240      	movs	r2, #64	; 0x40
 800cebe:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800cec0:	4b24      	ldr	r3, [pc, #144]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cec6:	4b23      	ldr	r3, [pc, #140]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800cecc:	4b21      	ldr	r3, [pc, #132]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cece:	2200      	movs	r2, #0
 800ced0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800ced2:	4b20      	ldr	r3, [pc, #128]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800ced4:	2200      	movs	r2, #0
 800ced6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800ced8:	4b1e      	ldr	r3, [pc, #120]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800cede:	4b1d      	ldr	r3, [pc, #116]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cee0:	2200      	movs	r2, #0
 800cee2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 800cee4:	4b1b      	ldr	r3, [pc, #108]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800ceea:	4b1a      	ldr	r3, [pc, #104]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800ceec:	4a1b      	ldr	r2, [pc, #108]	; (800cf5c <MX_SAI1_Init+0xb8>)
 800ceee:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800cef0:	4b18      	ldr	r3, [pc, #96]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800cef6:	4b17      	ldr	r3, [pc, #92]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800cefc:	4b15      	ldr	r3, [pc, #84]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800cf02:	4b14      	ldr	r3, [pc, #80]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800cf08:	4b12      	ldr	r3, [pc, #72]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800cf0e:	4b11      	ldr	r3, [pc, #68]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf10:	2201      	movs	r2, #1
 800cf12:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800cf14:	4b0f      	ldr	r3, [pc, #60]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cf1a:	4b0e      	ldr	r3, [pc, #56]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800cf20:	4b0c      	ldr	r3, [pc, #48]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800cf26:	4b0b      	ldr	r3, [pc, #44]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800cf2c:	4b09      	ldr	r3, [pc, #36]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800cf32:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf34:	2201      	movs	r2, #1
 800cf36:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800cf38:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800cf3e:	4805      	ldr	r0, [pc, #20]	; (800cf54 <MX_SAI1_Init+0xb0>)
 800cf40:	f7f9 fd4e 	bl	80069e0 <HAL_SAI_Init>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800cf4a:	f000 fabb 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800cf4e:	bf00      	nop
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	20000d6c 	.word	0x20000d6c
 800cf58:	40015804 	.word	0x40015804
 800cf5c:	0002ee00 	.word	0x0002ee00

0800cf60 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800cf60:	b480      	push	{r7}
 800cf62:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800cf64:	4b0c      	ldr	r3, [pc, #48]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf66:	4a0d      	ldr	r2, [pc, #52]	; (800cf9c <MX_SDIO_SD_Init+0x3c>)
 800cf68:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800cf6a:	4b0b      	ldr	r3, [pc, #44]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800cf70:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cf76:	4b08      	ldr	r3, [pc, #32]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800cf7c:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf82:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800cf88:	4b03      	ldr	r3, [pc, #12]	; (800cf98 <MX_SDIO_SD_Init+0x38>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800cf8e:	bf00      	nop
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	20000c68 	.word	0x20000c68
 800cf9c:	40012c00 	.word	0x40012c00

0800cfa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cfa6:	f107 0308 	add.w	r3, r7, #8
 800cfaa:	2200      	movs	r2, #0
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	605a      	str	r2, [r3, #4]
 800cfb0:	609a      	str	r2, [r3, #8]
 800cfb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cfb4:	463b      	mov	r3, r7
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800cfbc:	4b1e      	ldr	r3, [pc, #120]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfbe:	4a1f      	ldr	r2, [pc, #124]	; (800d03c <MX_TIM1_Init+0x9c>)
 800cfc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800cfc2:	4b1d      	ldr	r3, [pc, #116]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cfc8:	4b1b      	ldr	r3, [pc, #108]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800cfce:	4b1a      	ldr	r3, [pc, #104]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cfd4:	4b18      	ldr	r3, [pc, #96]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800cfda:	4b17      	ldr	r3, [pc, #92]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cfe0:	4b15      	ldr	r3, [pc, #84]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800cfe6:	4814      	ldr	r0, [pc, #80]	; (800d038 <MX_TIM1_Init+0x98>)
 800cfe8:	f7fb f912 	bl	8008210 <HAL_TIM_Base_Init>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d001      	beq.n	800cff6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800cff2:	f000 fa67 	bl	800d4c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800cffc:	f107 0308 	add.w	r3, r7, #8
 800d000:	4619      	mov	r1, r3
 800d002:	480d      	ldr	r0, [pc, #52]	; (800d038 <MX_TIM1_Init+0x98>)
 800d004:	f7fb fa5b 	bl	80084be <HAL_TIM_ConfigClockSource>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800d00e:	f000 fa59 	bl	800d4c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d012:	2300      	movs	r3, #0
 800d014:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d016:	2300      	movs	r3, #0
 800d018:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d01a:	463b      	mov	r3, r7
 800d01c:	4619      	mov	r1, r3
 800d01e:	4806      	ldr	r0, [pc, #24]	; (800d038 <MX_TIM1_Init+0x98>)
 800d020:	f7fb fc66 	bl	80088f0 <HAL_TIMEx_MasterConfigSynchronization>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800d02a:	f000 fa4b 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800d02e:	bf00      	nop
 800d030:	3718      	adds	r7, #24
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20000c28 	.word	0x20000c28
 800d03c:	40010000 	.word	0x40010000

0800d040 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800d044:	4b11      	ldr	r3, [pc, #68]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d046:	4a12      	ldr	r2, [pc, #72]	; (800d090 <MX_USART3_UART_Init+0x50>)
 800d048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800d04a:	4b10      	ldr	r3, [pc, #64]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d04c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d052:	4b0e      	ldr	r3, [pc, #56]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d054:	2200      	movs	r2, #0
 800d056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d058:	4b0c      	ldr	r3, [pc, #48]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d05e:	4b0b      	ldr	r3, [pc, #44]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d060:	2200      	movs	r2, #0
 800d062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d064:	4b09      	ldr	r3, [pc, #36]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d066:	220c      	movs	r2, #12
 800d068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d06a:	4b08      	ldr	r3, [pc, #32]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d070:	4b06      	ldr	r3, [pc, #24]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d072:	2200      	movs	r2, #0
 800d074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d076:	4805      	ldr	r0, [pc, #20]	; (800d08c <MX_USART3_UART_Init+0x4c>)
 800d078:	f7fb fc93 	bl	80089a2 <HAL_UART_Init>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800d082:	f000 fa1f 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800d086:	bf00      	nop
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000a74 	.word	0x20000a74
 800d090:	40004800 	.word	0x40004800

0800d094 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800d098:	4b11      	ldr	r3, [pc, #68]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d09a:	4a12      	ldr	r2, [pc, #72]	; (800d0e4 <MX_USART6_UART_Init+0x50>)
 800d09c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800d09e:	4b10      	ldr	r3, [pc, #64]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d0a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d0a6:	4b0e      	ldr	r3, [pc, #56]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d0b8:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0ba:	220c      	movs	r2, #12
 800d0bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0be:	4b08      	ldr	r3, [pc, #32]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0c4:	4b06      	ldr	r3, [pc, #24]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800d0ca:	4805      	ldr	r0, [pc, #20]	; (800d0e0 <MX_USART6_UART_Init+0x4c>)
 800d0cc:	f7fb fc69 	bl	80089a2 <HAL_UART_Init>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800d0d6:	f000 f9f5 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800d0da:	bf00      	nop
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	20000cec 	.word	0x20000cec
 800d0e4:	40011400 	.word	0x40011400

0800d0e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800d0ee:	1d3b      	adds	r3, r7, #4
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	605a      	str	r2, [r3, #4]
 800d0f6:	609a      	str	r2, [r3, #8]
 800d0f8:	60da      	str	r2, [r3, #12]
 800d0fa:	611a      	str	r2, [r3, #16]
 800d0fc:	615a      	str	r2, [r3, #20]
 800d0fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800d100:	4b1f      	ldr	r3, [pc, #124]	; (800d180 <MX_FMC_Init+0x98>)
 800d102:	4a20      	ldr	r2, [pc, #128]	; (800d184 <MX_FMC_Init+0x9c>)
 800d104:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800d106:	4b1e      	ldr	r3, [pc, #120]	; (800d180 <MX_FMC_Init+0x98>)
 800d108:	2200      	movs	r2, #0
 800d10a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d10c:	4b1c      	ldr	r3, [pc, #112]	; (800d180 <MX_FMC_Init+0x98>)
 800d10e:	2200      	movs	r2, #0
 800d110:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800d112:	4b1b      	ldr	r3, [pc, #108]	; (800d180 <MX_FMC_Init+0x98>)
 800d114:	2204      	movs	r2, #4
 800d116:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800d118:	4b19      	ldr	r3, [pc, #100]	; (800d180 <MX_FMC_Init+0x98>)
 800d11a:	2220      	movs	r2, #32
 800d11c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d11e:	4b18      	ldr	r3, [pc, #96]	; (800d180 <MX_FMC_Init+0x98>)
 800d120:	2240      	movs	r2, #64	; 0x40
 800d122:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800d124:	4b16      	ldr	r3, [pc, #88]	; (800d180 <MX_FMC_Init+0x98>)
 800d126:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d12a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d12c:	4b14      	ldr	r3, [pc, #80]	; (800d180 <MX_FMC_Init+0x98>)
 800d12e:	2200      	movs	r2, #0
 800d130:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800d132:	4b13      	ldr	r3, [pc, #76]	; (800d180 <MX_FMC_Init+0x98>)
 800d134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d138:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800d13a:	4b11      	ldr	r3, [pc, #68]	; (800d180 <MX_FMC_Init+0x98>)
 800d13c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d140:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800d142:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <MX_FMC_Init+0x98>)
 800d144:	2200      	movs	r2, #0
 800d146:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800d148:	2302      	movs	r3, #2
 800d14a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800d14c:	2307      	movs	r3, #7
 800d14e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800d150:	2304      	movs	r3, #4
 800d152:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800d154:	2307      	movs	r3, #7
 800d156:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800d158:	2303      	movs	r3, #3
 800d15a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800d15c:	2302      	movs	r3, #2
 800d15e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800d160:	2302      	movs	r3, #2
 800d162:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800d164:	1d3b      	adds	r3, r7, #4
 800d166:	4619      	mov	r1, r3
 800d168:	4805      	ldr	r0, [pc, #20]	; (800d180 <MX_FMC_Init+0x98>)
 800d16a:	f7fa ffd2 	bl	8008112 <HAL_SDRAM_Init>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800d174:	f000 f9a6 	bl	800d4c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800d178:	bf00      	nop
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20000df4 	.word	0x20000df4
 800d184:	a0000140 	.word	0xa0000140

0800d188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b090      	sub	sp, #64	; 0x40
 800d18c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d18e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	605a      	str	r2, [r3, #4]
 800d198:	609a      	str	r2, [r3, #8]
 800d19a:	60da      	str	r2, [r3, #12]
 800d19c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d19e:	2300      	movs	r3, #0
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1a2:	4bad      	ldr	r3, [pc, #692]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a6:	4aac      	ldr	r2, [pc, #688]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1a8:	f043 0310 	orr.w	r3, r3, #16
 800d1ac:	6313      	str	r3, [r2, #48]	; 0x30
 800d1ae:	4baa      	ldr	r3, [pc, #680]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b2:	f003 0310 	and.w	r3, r3, #16
 800d1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d1be:	4ba6      	ldr	r3, [pc, #664]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c2:	4aa5      	ldr	r2, [pc, #660]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1c8:	6313      	str	r3, [r2, #48]	; 0x30
 800d1ca:	4ba3      	ldr	r3, [pc, #652]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	623b      	str	r3, [r7, #32]
 800d1da:	4b9f      	ldr	r3, [pc, #636]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1de:	4a9e      	ldr	r2, [pc, #632]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1e0:	f043 0302 	orr.w	r3, r3, #2
 800d1e4:	6313      	str	r3, [r2, #48]	; 0x30
 800d1e6:	4b9c      	ldr	r3, [pc, #624]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ea:	f003 0302 	and.w	r3, r3, #2
 800d1ee:	623b      	str	r3, [r7, #32]
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61fb      	str	r3, [r7, #28]
 800d1f6:	4b98      	ldr	r3, [pc, #608]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fa:	4a97      	ldr	r2, [pc, #604]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d1fc:	f043 0304 	orr.w	r3, r3, #4
 800d200:	6313      	str	r3, [r2, #48]	; 0x30
 800d202:	4b95      	ldr	r3, [pc, #596]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d206:	f003 0304 	and.w	r3, r3, #4
 800d20a:	61fb      	str	r3, [r7, #28]
 800d20c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d20e:	2300      	movs	r3, #0
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	4b91      	ldr	r3, [pc, #580]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d216:	4a90      	ldr	r2, [pc, #576]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d218:	f043 0301 	orr.w	r3, r3, #1
 800d21c:	6313      	str	r3, [r2, #48]	; 0x30
 800d21e:	4b8e      	ldr	r3, [pc, #568]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d222:	f003 0301 	and.w	r3, r3, #1
 800d226:	61bb      	str	r3, [r7, #24]
 800d228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d22a:	2300      	movs	r3, #0
 800d22c:	617b      	str	r3, [r7, #20]
 800d22e:	4b8a      	ldr	r3, [pc, #552]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d232:	4a89      	ldr	r2, [pc, #548]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d234:	f043 0308 	orr.w	r3, r3, #8
 800d238:	6313      	str	r3, [r2, #48]	; 0x30
 800d23a:	4b87      	ldr	r3, [pc, #540]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23e:	f003 0308 	and.w	r3, r3, #8
 800d242:	617b      	str	r3, [r7, #20]
 800d244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800d246:	2300      	movs	r3, #0
 800d248:	613b      	str	r3, [r7, #16]
 800d24a:	4b83      	ldr	r3, [pc, #524]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24e:	4a82      	ldr	r2, [pc, #520]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d254:	6313      	str	r3, [r2, #48]	; 0x30
 800d256:	4b80      	ldr	r3, [pc, #512]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d25e:	613b      	str	r3, [r7, #16]
 800d260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d262:	2300      	movs	r3, #0
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	4b7c      	ldr	r3, [pc, #496]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26a:	4a7b      	ldr	r2, [pc, #492]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d26c:	f043 0320 	orr.w	r3, r3, #32
 800d270:	6313      	str	r3, [r2, #48]	; 0x30
 800d272:	4b79      	ldr	r3, [pc, #484]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800d27e:	2300      	movs	r3, #0
 800d280:	60bb      	str	r3, [r7, #8]
 800d282:	4b75      	ldr	r3, [pc, #468]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d286:	4a74      	ldr	r2, [pc, #464]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d28c:	6313      	str	r3, [r2, #48]	; 0x30
 800d28e:	4b72      	ldr	r3, [pc, #456]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d296:	60bb      	str	r3, [r7, #8]
 800d298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d29a:	2300      	movs	r3, #0
 800d29c:	607b      	str	r3, [r7, #4]
 800d29e:	4b6e      	ldr	r3, [pc, #440]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a2:	4a6d      	ldr	r2, [pc, #436]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a8:	6313      	str	r3, [r2, #48]	; 0x30
 800d2aa:	4b6b      	ldr	r3, [pc, #428]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b2:	607b      	str	r3, [r7, #4]
 800d2b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	603b      	str	r3, [r7, #0]
 800d2ba:	4b67      	ldr	r3, [pc, #412]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2be:	4a66      	ldr	r2, [pc, #408]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d2c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d2c4:	6313      	str	r3, [r2, #48]	; 0x30
 800d2c6:	4b64      	ldr	r3, [pc, #400]	; (800d458 <MX_GPIO_Init+0x2d0>)
 800d2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	210c      	movs	r1, #12
 800d2d6:	4861      	ldr	r0, [pc, #388]	; (800d45c <MX_GPIO_Init+0x2d4>)
 800d2d8:	f7f6 fcf2 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2130      	movs	r1, #48	; 0x30
 800d2e0:	485f      	ldr	r0, [pc, #380]	; (800d460 <MX_GPIO_Init+0x2d8>)
 800d2e2:	f7f6 fced 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	2108      	movs	r1, #8
 800d2ea:	485e      	ldr	r0, [pc, #376]	; (800d464 <MX_GPIO_Init+0x2dc>)
 800d2ec:	f7f6 fce8 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2140      	movs	r1, #64	; 0x40
 800d2f4:	485c      	ldr	r0, [pc, #368]	; (800d468 <MX_GPIO_Init+0x2e0>)
 800d2f6:	f7f6 fce3 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2105      	movs	r1, #5
 800d2fe:	485b      	ldr	r0, [pc, #364]	; (800d46c <MX_GPIO_Init+0x2e4>)
 800d300:	f7f6 fcde 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800d304:	2200      	movs	r2, #0
 800d306:	2180      	movs	r1, #128	; 0x80
 800d308:	4859      	ldr	r0, [pc, #356]	; (800d470 <MX_GPIO_Init+0x2e8>)
 800d30a:	f7f6 fcd9 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800d30e:	2200      	movs	r2, #0
 800d310:	2108      	movs	r1, #8
 800d312:	4858      	ldr	r0, [pc, #352]	; (800d474 <MX_GPIO_Init+0x2ec>)
 800d314:	f7f6 fcd4 	bl	8003cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800d318:	230c      	movs	r3, #12
 800d31a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d31c:	2301      	movs	r3, #1
 800d31e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d320:	2300      	movs	r3, #0
 800d322:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d324:	2300      	movs	r3, #0
 800d326:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d32c:	4619      	mov	r1, r3
 800d32e:	484b      	ldr	r0, [pc, #300]	; (800d45c <MX_GPIO_Init+0x2d4>)
 800d330:	f7f6 f9fa 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800d334:	2308      	movs	r3, #8
 800d336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d338:	2302      	movs	r3, #2
 800d33a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d33c:	2300      	movs	r3, #0
 800d33e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d340:	2300      	movs	r3, #0
 800d342:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800d344:	2306      	movs	r3, #6
 800d346:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 800d348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d34c:	4619      	mov	r1, r3
 800d34e:	4847      	ldr	r0, [pc, #284]	; (800d46c <MX_GPIO_Init+0x2e4>)
 800d350:	f7f6 f9ea 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800d354:	2380      	movs	r3, #128	; 0x80
 800d356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d358:	4b47      	ldr	r3, [pc, #284]	; (800d478 <MX_GPIO_Init+0x2f0>)
 800d35a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800d360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d364:	4619      	mov	r1, r3
 800d366:	4841      	ldr	r0, [pc, #260]	; (800d46c <MX_GPIO_Init+0x2e4>)
 800d368:	f7f6 f9de 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800d36c:	2330      	movs	r3, #48	; 0x30
 800d36e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d370:	2311      	movs	r3, #17
 800d372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d374:	2300      	movs	r3, #0
 800d376:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d378:	2300      	movs	r3, #0
 800d37a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d37c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d380:	4619      	mov	r1, r3
 800d382:	4837      	ldr	r0, [pc, #220]	; (800d460 <MX_GPIO_Init+0x2d8>)
 800d384:	f7f6 f9d0 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800d388:	2308      	movs	r3, #8
 800d38a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d38c:	2311      	movs	r3, #17
 800d38e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d390:	2300      	movs	r3, #0
 800d392:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d394:	2300      	movs	r3, #0
 800d396:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800d398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d39c:	4619      	mov	r1, r3
 800d39e:	4831      	ldr	r0, [pc, #196]	; (800d464 <MX_GPIO_Init+0x2dc>)
 800d3a0:	f7f6 f9c2 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800d3a4:	2340      	movs	r3, #64	; 0x40
 800d3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800d3a8:	2311      	movs	r3, #17
 800d3aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800d3b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	482b      	ldr	r0, [pc, #172]	; (800d468 <MX_GPIO_Init+0x2e0>)
 800d3bc:	f7f6 f9b4 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800d3c0:	2305      	movs	r3, #5
 800d3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d3d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4825      	ldr	r0, [pc, #148]	; (800d46c <MX_GPIO_Init+0x2e4>)
 800d3d8:	f7f6 f9a6 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800d3dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3e2:	2302      	movs	r3, #2
 800d3e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 800d3f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	4819      	ldr	r0, [pc, #100]	; (800d460 <MX_GPIO_Init+0x2d8>)
 800d3fa:	f7f6 f995 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800d3fe:	2304      	movs	r3, #4
 800d400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d402:	2300      	movs	r3, #0
 800d404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d406:	2300      	movs	r3, #0
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800d40a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d40e:	4619      	mov	r1, r3
 800d410:	4815      	ldr	r0, [pc, #84]	; (800d468 <MX_GPIO_Init+0x2e0>)
 800d412:	f7f6 f989 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800d416:	2320      	movs	r3, #32
 800d418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d41a:	4b17      	ldr	r3, [pc, #92]	; (800d478 <MX_GPIO_Init+0x2f0>)
 800d41c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800d422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d426:	4619      	mov	r1, r3
 800d428:	4814      	ldr	r0, [pc, #80]	; (800d47c <MX_GPIO_Init+0x2f4>)
 800d42a:	f7f6 f97d 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d42e:	2380      	movs	r3, #128	; 0x80
 800d430:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d432:	2301      	movs	r3, #1
 800d434:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d436:	2300      	movs	r3, #0
 800d438:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d43a:	2300      	movs	r3, #0
 800d43c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d43e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d442:	4619      	mov	r1, r3
 800d444:	480a      	ldr	r0, [pc, #40]	; (800d470 <MX_GPIO_Init+0x2e8>)
 800d446:	f7f6 f96f 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800d44a:	2308      	movs	r3, #8
 800d44c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d44e:	2301      	movs	r3, #1
 800d450:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d452:	2300      	movs	r3, #0
 800d454:	e014      	b.n	800d480 <MX_GPIO_Init+0x2f8>
 800d456:	bf00      	nop
 800d458:	40023800 	.word	0x40023800
 800d45c:	40021000 	.word	0x40021000
 800d460:	40020c00 	.word	0x40020c00
 800d464:	40022800 	.word	0x40022800
 800d468:	40021800 	.word	0x40021800
 800d46c:	40020400 	.word	0x40020400
 800d470:	40021c00 	.word	0x40021c00
 800d474:	40020000 	.word	0x40020000
 800d478:	10110000 	.word	0x10110000
 800d47c:	40022400 	.word	0x40022400
 800d480:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d482:	2300      	movs	r3, #0
 800d484:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800d486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d48a:	4619      	mov	r1, r3
 800d48c:	4803      	ldr	r0, [pc, #12]	; (800d49c <MX_GPIO_Init+0x314>)
 800d48e:	f7f6 f94b 	bl	8003728 <HAL_GPIO_Init>

}
 800d492:	bf00      	nop
 800d494:	3740      	adds	r7, #64	; 0x40
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	40020000 	.word	0x40020000

0800d4a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a04      	ldr	r2, [pc, #16]	; (800d4c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d101      	bne.n	800d4b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d4b2:	f7f4 f911 	bl	80016d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d4b6:	bf00      	nop
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	40001000 	.word	0x40001000

0800d4c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d4c8:	bf00      	nop
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
	...

0800d4d4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d4de:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <SD_CheckStatus+0x38>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d4e4:	f7f3 fed4 	bl	8001290 <BSP_SD_GetCardState>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d107      	bne.n	800d4fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d4ee:	4b07      	ldr	r3, [pc, #28]	; (800d50c <SD_CheckStatus+0x38>)
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	f023 0301 	bic.w	r3, r3, #1
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	4b04      	ldr	r3, [pc, #16]	; (800d50c <SD_CheckStatus+0x38>)
 800d4fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d4fe:	4b03      	ldr	r3, [pc, #12]	; (800d50c <SD_CheckStatus+0x38>)
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	b2db      	uxtb	r3, r3
}
 800d504:	4618      	mov	r0, r3
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	20000123 	.word	0x20000123

0800d510 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	4603      	mov	r3, r0
 800d518:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <SD_initialize+0x38>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d520:	f7f3 fcfe 	bl	8000f20 <BSP_SD_Init>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d107      	bne.n	800d53a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff ffd1 	bl	800d4d4 <SD_CheckStatus>
 800d532:	4603      	mov	r3, r0
 800d534:	461a      	mov	r2, r3
 800d536:	4b04      	ldr	r3, [pc, #16]	; (800d548 <SD_initialize+0x38>)
 800d538:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800d53a:	4b03      	ldr	r3, [pc, #12]	; (800d548 <SD_initialize+0x38>)
 800d53c:	781b      	ldrb	r3, [r3, #0]
 800d53e:	b2db      	uxtb	r3, r3
}
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20000123 	.word	0x20000123

0800d54c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	4603      	mov	r3, r0
 800d554:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff ffbb 	bl	800d4d4 <SD_CheckStatus>
 800d55e:	4603      	mov	r3, r0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b086      	sub	sp, #24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
 800d572:	603b      	str	r3, [r7, #0]
 800d574:	4603      	mov	r3, r0
 800d576:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d580:	683a      	ldr	r2, [r7, #0]
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	68b8      	ldr	r0, [r7, #8]
 800d586:	f7f3 fd2d 	bl	8000fe4 <BSP_SD_ReadBlocks>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d107      	bne.n	800d5a0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d590:	bf00      	nop
 800d592:	f7f3 fe7d 	bl	8001290 <BSP_SD_GetCardState>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1fa      	bne.n	800d592 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3718      	adds	r7, #24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b086      	sub	sp, #24
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d5be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	68b8      	ldr	r0, [r7, #8]
 800d5c8:	f7f3 fd28 	bl	800101c <BSP_SD_WriteBlocks>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d107      	bne.n	800d5e2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d5d2:	bf00      	nop
 800d5d4:	f7f3 fe5c 	bl	8001290 <BSP_SD_GetCardState>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1fa      	bne.n	800d5d4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3718      	adds	r7, #24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08c      	sub	sp, #48	; 0x30
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	603a      	str	r2, [r7, #0]
 800d5f6:	71fb      	strb	r3, [r7, #7]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d602:	4b25      	ldr	r3, [pc, #148]	; (800d698 <SD_ioctl+0xac>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <SD_ioctl+0x28>
 800d610:	2303      	movs	r3, #3
 800d612:	e03c      	b.n	800d68e <SD_ioctl+0xa2>

  switch (cmd)
 800d614:	79bb      	ldrb	r3, [r7, #6]
 800d616:	2b03      	cmp	r3, #3
 800d618:	d834      	bhi.n	800d684 <SD_ioctl+0x98>
 800d61a:	a201      	add	r2, pc, #4	; (adr r2, 800d620 <SD_ioctl+0x34>)
 800d61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d620:	0800d631 	.word	0x0800d631
 800d624:	0800d639 	.word	0x0800d639
 800d628:	0800d651 	.word	0x0800d651
 800d62c:	0800d66b 	.word	0x0800d66b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d636:	e028      	b.n	800d68a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d638:	f107 030c 	add.w	r3, r7, #12
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7f3 fe37 	bl	80012b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d64e:	e01c      	b.n	800d68a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d650:	f107 030c 	add.w	r3, r7, #12
 800d654:	4618      	mov	r0, r3
 800d656:	f7f3 fe2b 	bl	80012b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d668:	e00f      	b.n	800d68a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d66a:	f107 030c 	add.w	r3, r7, #12
 800d66e:	4618      	mov	r0, r3
 800d670:	f7f3 fe1e 	bl	80012b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d676:	0a5a      	lsrs	r2, r3, #9
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d682:	e002      	b.n	800d68a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d684:	2304      	movs	r3, #4
 800d686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3730      	adds	r7, #48	; 0x30
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000123 	.word	0x20000123

0800d69c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	607b      	str	r3, [r7, #4]
 800d6a6:	4b10      	ldr	r3, [pc, #64]	; (800d6e8 <HAL_MspInit+0x4c>)
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6aa:	4a0f      	ldr	r2, [pc, #60]	; (800d6e8 <HAL_MspInit+0x4c>)
 800d6ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6b0:	6453      	str	r3, [r2, #68]	; 0x44
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	; (800d6e8 <HAL_MspInit+0x4c>)
 800d6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6ba:	607b      	str	r3, [r7, #4]
 800d6bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d6be:	2300      	movs	r3, #0
 800d6c0:	603b      	str	r3, [r7, #0]
 800d6c2:	4b09      	ldr	r3, [pc, #36]	; (800d6e8 <HAL_MspInit+0x4c>)
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	4a08      	ldr	r2, [pc, #32]	; (800d6e8 <HAL_MspInit+0x4c>)
 800d6c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6cc:	6413      	str	r3, [r2, #64]	; 0x40
 800d6ce:	4b06      	ldr	r3, [pc, #24]	; (800d6e8 <HAL_MspInit+0x4c>)
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6d6:	603b      	str	r3, [r7, #0]
 800d6d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d6da:	bf00      	nop
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	40023800 	.word	0x40023800

0800d6ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a0b      	ldr	r2, [pc, #44]	; (800d728 <HAL_CRC_MspInit+0x3c>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d10d      	bne.n	800d71a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800d6fe:	2300      	movs	r3, #0
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <HAL_CRC_MspInit+0x40>)
 800d704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d706:	4a09      	ldr	r2, [pc, #36]	; (800d72c <HAL_CRC_MspInit+0x40>)
 800d708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d70c:	6313      	str	r3, [r2, #48]	; 0x30
 800d70e:	4b07      	ldr	r3, [pc, #28]	; (800d72c <HAL_CRC_MspInit+0x40>)
 800d710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800d71a:	bf00      	nop
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	40023000 	.word	0x40023000
 800d72c:	40023800 	.word	0x40023800

0800d730 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a0e      	ldr	r2, [pc, #56]	; (800d778 <HAL_DMA2D_MspInit+0x48>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d115      	bne.n	800d76e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d742:	2300      	movs	r3, #0
 800d744:	60fb      	str	r3, [r7, #12]
 800d746:	4b0d      	ldr	r3, [pc, #52]	; (800d77c <HAL_DMA2D_MspInit+0x4c>)
 800d748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d74a:	4a0c      	ldr	r2, [pc, #48]	; (800d77c <HAL_DMA2D_MspInit+0x4c>)
 800d74c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d750:	6313      	str	r3, [r2, #48]	; 0x30
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <HAL_DMA2D_MspInit+0x4c>)
 800d754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800d75e:	2200      	movs	r2, #0
 800d760:	2100      	movs	r1, #0
 800d762:	205a      	movs	r0, #90	; 0x5a
 800d764:	f7f4 f8d4 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800d768:	205a      	movs	r0, #90	; 0x5a
 800d76a:	f7f4 f8ed 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800d76e:	bf00      	nop
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	4002b000 	.word	0x4002b000
 800d77c:	40023800 	.word	0x40023800

0800d780 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08a      	sub	sp, #40	; 0x28
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d788:	f107 0314 	add.w	r3, r7, #20
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	605a      	str	r2, [r3, #4]
 800d792:	609a      	str	r2, [r3, #8]
 800d794:	60da      	str	r2, [r3, #12]
 800d796:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a1d      	ldr	r2, [pc, #116]	; (800d814 <HAL_DSI_MspInit+0x94>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d133      	bne.n	800d80a <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	613b      	str	r3, [r7, #16]
 800d7a6:	4b1c      	ldr	r3, [pc, #112]	; (800d818 <HAL_DSI_MspInit+0x98>)
 800d7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7aa:	4a1b      	ldr	r2, [pc, #108]	; (800d818 <HAL_DSI_MspInit+0x98>)
 800d7ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d7b0:	6453      	str	r3, [r2, #68]	; 0x44
 800d7b2:	4b19      	ldr	r3, [pc, #100]	; (800d818 <HAL_DSI_MspInit+0x98>)
 800d7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7ba:	613b      	str	r3, [r7, #16]
 800d7bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	4b15      	ldr	r3, [pc, #84]	; (800d818 <HAL_DSI_MspInit+0x98>)
 800d7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c6:	4a14      	ldr	r2, [pc, #80]	; (800d818 <HAL_DSI_MspInit+0x98>)
 800d7c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7cc:	6313      	str	r3, [r2, #48]	; 0x30
 800d7ce:	4b12      	ldr	r3, [pc, #72]	; (800d818 <HAL_DSI_MspInit+0x98>)
 800d7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800d7da:	2304      	movs	r3, #4
 800d7dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7de:	2302      	movs	r3, #2
 800d7e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800d7ea:	230d      	movs	r3, #13
 800d7ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800d7ee:	f107 0314 	add.w	r3, r7, #20
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4809      	ldr	r0, [pc, #36]	; (800d81c <HAL_DSI_MspInit+0x9c>)
 800d7f6:	f7f5 ff97 	bl	8003728 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	205c      	movs	r0, #92	; 0x5c
 800d800:	f7f4 f886 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800d804:	205c      	movs	r0, #92	; 0x5c
 800d806:	f7f4 f89f 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800d80a:	bf00      	nop
 800d80c:	3728      	adds	r7, #40	; 0x28
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	40016c00 	.word	0x40016c00
 800d818:	40023800 	.word	0x40023800
 800d81c:	40022400 	.word	0x40022400

0800d820 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a09      	ldr	r2, [pc, #36]	; (800d854 <HAL_DSI_MspDeInit+0x34>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d10c      	bne.n	800d84c <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <HAL_DSI_MspDeInit+0x38>)
 800d834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d836:	4a08      	ldr	r2, [pc, #32]	; (800d858 <HAL_DSI_MspDeInit+0x38>)
 800d838:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800d83c:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(DSI_TE_GPIO_Port, DSI_TE_Pin);
 800d83e:	2104      	movs	r1, #4
 800d840:	4806      	ldr	r0, [pc, #24]	; (800d85c <HAL_DSI_MspDeInit+0x3c>)
 800d842:	f7f6 f91b 	bl	8003a7c <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 800d846:	205c      	movs	r0, #92	; 0x5c
 800d848:	f7f4 f88c 	bl	8001964 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	40016c00 	.word	0x40016c00
 800d858:	40023800 	.word	0x40023800
 800d85c:	40022400 	.word	0x40022400

0800d860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08c      	sub	sp, #48	; 0x30
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d868:	f107 031c 	add.w	r3, r7, #28
 800d86c:	2200      	movs	r2, #0
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	605a      	str	r2, [r3, #4]
 800d872:	609a      	str	r2, [r3, #8]
 800d874:	60da      	str	r2, [r3, #12]
 800d876:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a32      	ldr	r2, [pc, #200]	; (800d948 <HAL_I2C_MspInit+0xe8>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d12d      	bne.n	800d8de <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d882:	2300      	movs	r3, #0
 800d884:	61bb      	str	r3, [r7, #24]
 800d886:	4b31      	ldr	r3, [pc, #196]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88a:	4a30      	ldr	r2, [pc, #192]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d88c:	f043 0302 	orr.w	r3, r3, #2
 800d890:	6313      	str	r3, [r2, #48]	; 0x30
 800d892:	4b2e      	ldr	r3, [pc, #184]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d896:	f003 0302 	and.w	r3, r3, #2
 800d89a:	61bb      	str	r3, [r7, #24]
 800d89c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800d89e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d8a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d8a4:	2312      	movs	r3, #18
 800d8a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d8b0:	2304      	movs	r3, #4
 800d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d8b4:	f107 031c 	add.w	r3, r7, #28
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4825      	ldr	r0, [pc, #148]	; (800d950 <HAL_I2C_MspInit+0xf0>)
 800d8bc:	f7f5 ff34 	bl	8003728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	4b21      	ldr	r3, [pc, #132]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c8:	4a20      	ldr	r2, [pc, #128]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d8ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8ce:	6413      	str	r3, [r2, #64]	; 0x40
 800d8d0:	4b1e      	ldr	r3, [pc, #120]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800d8dc:	e030      	b.n	800d940 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a1c      	ldr	r2, [pc, #112]	; (800d954 <HAL_I2C_MspInit+0xf4>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d12b      	bne.n	800d940 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	613b      	str	r3, [r7, #16]
 800d8ec:	4b17      	ldr	r3, [pc, #92]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f0:	4a16      	ldr	r2, [pc, #88]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8f6:	6313      	str	r3, [r2, #48]	; 0x30
 800d8f8:	4b14      	ldr	r3, [pc, #80]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d900:	613b      	str	r3, [r7, #16]
 800d902:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800d904:	2330      	movs	r3, #48	; 0x30
 800d906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d908:	2312      	movs	r3, #18
 800d90a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d90c:	2301      	movs	r3, #1
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d910:	2303      	movs	r3, #3
 800d912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800d914:	2304      	movs	r3, #4
 800d916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d918:	f107 031c 	add.w	r3, r7, #28
 800d91c:	4619      	mov	r1, r3
 800d91e:	480e      	ldr	r0, [pc, #56]	; (800d958 <HAL_I2C_MspInit+0xf8>)
 800d920:	f7f5 ff02 	bl	8003728 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	4b08      	ldr	r3, [pc, #32]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92c:	4a07      	ldr	r2, [pc, #28]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d92e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d932:	6413      	str	r3, [r2, #64]	; 0x40
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <HAL_I2C_MspInit+0xec>)
 800d936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	68fb      	ldr	r3, [r7, #12]
}
 800d940:	bf00      	nop
 800d942:	3730      	adds	r7, #48	; 0x30
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	40005400 	.word	0x40005400
 800d94c:	40023800 	.word	0x40023800
 800d950:	40020400 	.word	0x40020400
 800d954:	40005800 	.word	0x40005800
 800d958:	40021c00 	.word	0x40021c00

0800d95c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a0e      	ldr	r2, [pc, #56]	; (800d9a4 <HAL_LTDC_MspInit+0x48>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d115      	bne.n	800d99a <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800d96e:	2300      	movs	r3, #0
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	4b0d      	ldr	r3, [pc, #52]	; (800d9a8 <HAL_LTDC_MspInit+0x4c>)
 800d974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d976:	4a0c      	ldr	r2, [pc, #48]	; (800d9a8 <HAL_LTDC_MspInit+0x4c>)
 800d978:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d97c:	6453      	str	r3, [r2, #68]	; 0x44
 800d97e:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <HAL_LTDC_MspInit+0x4c>)
 800d980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800d98a:	2200      	movs	r2, #0
 800d98c:	2100      	movs	r1, #0
 800d98e:	2058      	movs	r0, #88	; 0x58
 800d990:	f7f3 ffbe 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800d994:	2058      	movs	r0, #88	; 0x58
 800d996:	f7f3 ffd7 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800d99a:	bf00      	nop
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	40016800 	.word	0x40016800
 800d9a8:	40023800 	.word	0x40023800

0800d9ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08a      	sub	sp, #40	; 0x28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d9b4:	f107 0314 	add.w	r3, r7, #20
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	605a      	str	r2, [r3, #4]
 800d9be:	609a      	str	r2, [r3, #8]
 800d9c0:	60da      	str	r2, [r3, #12]
 800d9c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a31      	ldr	r2, [pc, #196]	; (800da90 <HAL_QSPI_MspInit+0xe4>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d15b      	bne.n	800da86 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	613b      	str	r3, [r7, #16]
 800d9d2:	4b30      	ldr	r3, [pc, #192]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d6:	4a2f      	ldr	r2, [pc, #188]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800d9d8:	f043 0302 	orr.w	r3, r3, #2
 800d9dc:	6393      	str	r3, [r2, #56]	; 0x38
 800d9de:	4b2d      	ldr	r3, [pc, #180]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	613b      	str	r3, [r7, #16]
 800d9e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	4b29      	ldr	r3, [pc, #164]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800d9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f2:	4a28      	ldr	r2, [pc, #160]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800d9f4:	f043 0302 	orr.w	r3, r3, #2
 800d9f8:	6313      	str	r3, [r2, #48]	; 0x30
 800d9fa:	4b26      	ldr	r3, [pc, #152]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800d9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9fe:	f003 0302 	and.w	r3, r3, #2
 800da02:	60fb      	str	r3, [r7, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800da06:	2300      	movs	r3, #0
 800da08:	60bb      	str	r3, [r7, #8]
 800da0a:	4b22      	ldr	r3, [pc, #136]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800da0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da0e:	4a21      	ldr	r2, [pc, #132]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800da10:	f043 0320 	orr.w	r3, r3, #32
 800da14:	6313      	str	r3, [r2, #48]	; 0x30
 800da16:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <HAL_QSPI_MspInit+0xe8>)
 800da18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1a:	f003 0320 	and.w	r3, r3, #32
 800da1e:	60bb      	str	r3, [r7, #8]
 800da20:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800da22:	2340      	movs	r3, #64	; 0x40
 800da24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da26:	2302      	movs	r3, #2
 800da28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da2e:	2303      	movs	r3, #3
 800da30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800da32:	230a      	movs	r3, #10
 800da34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800da36:	f107 0314 	add.w	r3, r7, #20
 800da3a:	4619      	mov	r1, r3
 800da3c:	4816      	ldr	r0, [pc, #88]	; (800da98 <HAL_QSPI_MspInit+0xec>)
 800da3e:	f7f5 fe73 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800da42:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800da46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da48:	2302      	movs	r3, #2
 800da4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da50:	2303      	movs	r3, #3
 800da52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800da54:	2309      	movs	r3, #9
 800da56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800da58:	f107 0314 	add.w	r3, r7, #20
 800da5c:	4619      	mov	r1, r3
 800da5e:	480f      	ldr	r0, [pc, #60]	; (800da9c <HAL_QSPI_MspInit+0xf0>)
 800da60:	f7f5 fe62 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800da64:	f44f 7340 	mov.w	r3, #768	; 0x300
 800da68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da6a:	2302      	movs	r3, #2
 800da6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da6e:	2300      	movs	r3, #0
 800da70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800da72:	2303      	movs	r3, #3
 800da74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800da76:	230a      	movs	r3, #10
 800da78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800da7a:	f107 0314 	add.w	r3, r7, #20
 800da7e:	4619      	mov	r1, r3
 800da80:	4806      	ldr	r0, [pc, #24]	; (800da9c <HAL_QSPI_MspInit+0xf0>)
 800da82:	f7f5 fe51 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800da86:	bf00      	nop
 800da88:	3728      	adds	r7, #40	; 0x28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	a0001000 	.word	0xa0001000
 800da94:	40023800 	.word	0x40023800
 800da98:	40020400 	.word	0x40020400
 800da9c:	40021400 	.word	0x40021400

0800daa0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b08a      	sub	sp, #40	; 0x28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daa8:	f107 0314 	add.w	r3, r7, #20
 800daac:	2200      	movs	r2, #0
 800daae:	601a      	str	r2, [r3, #0]
 800dab0:	605a      	str	r2, [r3, #4]
 800dab2:	609a      	str	r2, [r3, #8]
 800dab4:	60da      	str	r2, [r3, #12]
 800dab6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a28      	ldr	r2, [pc, #160]	; (800db60 <HAL_SD_MspInit+0xc0>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d14a      	bne.n	800db58 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800dac2:	2300      	movs	r3, #0
 800dac4:	613b      	str	r3, [r7, #16]
 800dac6:	4b27      	ldr	r3, [pc, #156]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800dac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daca:	4a26      	ldr	r2, [pc, #152]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800dacc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dad0:	6453      	str	r3, [r2, #68]	; 0x44
 800dad2:	4b24      	ldr	r3, [pc, #144]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800dad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dada:	613b      	str	r3, [r7, #16]
 800dadc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dade:	2300      	movs	r3, #0
 800dae0:	60fb      	str	r3, [r7, #12]
 800dae2:	4b20      	ldr	r3, [pc, #128]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800dae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae6:	4a1f      	ldr	r2, [pc, #124]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800dae8:	f043 0304 	orr.w	r3, r3, #4
 800daec:	6313      	str	r3, [r2, #48]	; 0x30
 800daee:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800daf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf2:	f003 0304 	and.w	r3, r3, #4
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dafa:	2300      	movs	r3, #0
 800dafc:	60bb      	str	r3, [r7, #8]
 800dafe:	4b19      	ldr	r3, [pc, #100]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800db00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db02:	4a18      	ldr	r2, [pc, #96]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800db04:	f043 0308 	orr.w	r3, r3, #8
 800db08:	6313      	str	r3, [r2, #48]	; 0x30
 800db0a:	4b16      	ldr	r3, [pc, #88]	; (800db64 <HAL_SD_MspInit+0xc4>)
 800db0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db0e:	f003 0308 	and.w	r3, r3, #8
 800db12:	60bb      	str	r3, [r7, #8]
 800db14:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0 
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin 
 800db16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800db1a:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db1c:	2302      	movs	r3, #2
 800db1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db20:	2300      	movs	r3, #0
 800db22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db24:	2303      	movs	r3, #3
 800db26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800db28:	230c      	movs	r3, #12
 800db2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800db2c:	f107 0314 	add.w	r3, r7, #20
 800db30:	4619      	mov	r1, r3
 800db32:	480d      	ldr	r0, [pc, #52]	; (800db68 <HAL_SD_MspInit+0xc8>)
 800db34:	f7f5 fdf8 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 800db38:	2304      	movs	r3, #4
 800db3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db3c:	2302      	movs	r3, #2
 800db3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db40:	2300      	movs	r3, #0
 800db42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db44:	2303      	movs	r3, #3
 800db46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800db48:	230c      	movs	r3, #12
 800db4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800db4c:	f107 0314 	add.w	r3, r7, #20
 800db50:	4619      	mov	r1, r3
 800db52:	4806      	ldr	r0, [pc, #24]	; (800db6c <HAL_SD_MspInit+0xcc>)
 800db54:	f7f5 fde8 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800db58:	bf00      	nop
 800db5a:	3728      	adds	r7, #40	; 0x28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	40012c00 	.word	0x40012c00
 800db64:	40023800 	.word	0x40023800
 800db68:	40020800 	.word	0x40020800
 800db6c:	40020c00 	.word	0x40020c00

0800db70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a0b      	ldr	r2, [pc, #44]	; (800dbac <HAL_TIM_Base_MspInit+0x3c>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d10d      	bne.n	800db9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	4b0a      	ldr	r3, [pc, #40]	; (800dbb0 <HAL_TIM_Base_MspInit+0x40>)
 800db88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db8a:	4a09      	ldr	r2, [pc, #36]	; (800dbb0 <HAL_TIM_Base_MspInit+0x40>)
 800db8c:	f043 0301 	orr.w	r3, r3, #1
 800db90:	6453      	str	r3, [r2, #68]	; 0x44
 800db92:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <HAL_TIM_Base_MspInit+0x40>)
 800db94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800db9e:	bf00      	nop
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	40010000 	.word	0x40010000
 800dbb0:	40023800 	.word	0x40023800

0800dbb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08c      	sub	sp, #48	; 0x30
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbbc:	f107 031c 	add.w	r3, r7, #28
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	605a      	str	r2, [r3, #4]
 800dbc6:	609a      	str	r2, [r3, #8]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a33      	ldr	r2, [pc, #204]	; (800dca0 <HAL_UART_MspInit+0xec>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d12d      	bne.n	800dc32 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	61bb      	str	r3, [r7, #24]
 800dbda:	4b32      	ldr	r3, [pc, #200]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbde:	4a31      	ldr	r2, [pc, #196]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dbe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dbe4:	6413      	str	r3, [r2, #64]	; 0x40
 800dbe6:	4b2f      	ldr	r3, [pc, #188]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbee:	61bb      	str	r3, [r7, #24]
 800dbf0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	617b      	str	r3, [r7, #20]
 800dbf6:	4b2b      	ldr	r3, [pc, #172]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfa:	4a2a      	ldr	r2, [pc, #168]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dbfc:	f043 0302 	orr.w	r3, r3, #2
 800dc00:	6313      	str	r3, [r2, #48]	; 0x30
 800dc02:	4b28      	ldr	r3, [pc, #160]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc06:	f003 0302 	and.w	r3, r3, #2
 800dc0a:	617b      	str	r3, [r7, #20]
 800dc0c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800dc0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800dc12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc14:	2302      	movs	r3, #2
 800dc16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc1c:	2303      	movs	r3, #3
 800dc1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800dc20:	2307      	movs	r3, #7
 800dc22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc24:	f107 031c 	add.w	r3, r7, #28
 800dc28:	4619      	mov	r1, r3
 800dc2a:	481f      	ldr	r0, [pc, #124]	; (800dca8 <HAL_UART_MspInit+0xf4>)
 800dc2c:	f7f5 fd7c 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800dc30:	e031      	b.n	800dc96 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a1d      	ldr	r2, [pc, #116]	; (800dcac <HAL_UART_MspInit+0xf8>)
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d12c      	bne.n	800dc96 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	613b      	str	r3, [r7, #16]
 800dc40:	4b18      	ldr	r3, [pc, #96]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc44:	4a17      	ldr	r2, [pc, #92]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc46:	f043 0320 	orr.w	r3, r3, #32
 800dc4a:	6453      	str	r3, [r2, #68]	; 0x44
 800dc4c:	4b15      	ldr	r3, [pc, #84]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc50:	f003 0320 	and.w	r3, r3, #32
 800dc54:	613b      	str	r3, [r7, #16]
 800dc56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800dc58:	2300      	movs	r3, #0
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	4b11      	ldr	r3, [pc, #68]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc60:	4a10      	ldr	r2, [pc, #64]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc66:	6313      	str	r3, [r2, #48]	; 0x30
 800dc68:	4b0e      	ldr	r3, [pc, #56]	; (800dca4 <HAL_UART_MspInit+0xf0>)
 800dc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 800dc74:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800dc78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc82:	2303      	movs	r3, #3
 800dc84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800dc86:	2308      	movs	r3, #8
 800dc88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dc8a:	f107 031c 	add.w	r3, r7, #28
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4807      	ldr	r0, [pc, #28]	; (800dcb0 <HAL_UART_MspInit+0xfc>)
 800dc92:	f7f5 fd49 	bl	8003728 <HAL_GPIO_Init>
}
 800dc96:	bf00      	nop
 800dc98:	3730      	adds	r7, #48	; 0x30
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	40004800 	.word	0x40004800
 800dca4:	40023800 	.word	0x40023800
 800dca8:	40020400 	.word	0x40020400
 800dcac:	40011400 	.word	0x40011400
 800dcb0:	40021800 	.word	0x40021800

0800dcb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800dcba:	1d3b      	adds	r3, r7, #4
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	605a      	str	r2, [r3, #4]
 800dcc2:	609a      	str	r2, [r3, #8]
 800dcc4:	60da      	str	r2, [r3, #12]
 800dcc6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800dcc8:	4b44      	ldr	r3, [pc, #272]	; (800dddc <HAL_FMC_MspInit+0x128>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f040 8081 	bne.w	800ddd4 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 800dcd2:	4b42      	ldr	r3, [pc, #264]	; (800dddc <HAL_FMC_MspInit+0x128>)
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800dcd8:	2300      	movs	r3, #0
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	4b40      	ldr	r3, [pc, #256]	; (800dde0 <HAL_FMC_MspInit+0x12c>)
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	4a3f      	ldr	r2, [pc, #252]	; (800dde0 <HAL_FMC_MspInit+0x12c>)
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	6393      	str	r3, [r2, #56]	; 0x38
 800dce8:	4b3d      	ldr	r3, [pc, #244]	; (800dde0 <HAL_FMC_MspInit+0x12c>)
 800dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	603b      	str	r3, [r7, #0]
 800dcf2:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin 
 800dcf4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800dcf8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin 
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd02:	2303      	movs	r3, #3
 800dd04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800dd06:	230c      	movs	r3, #12
 800dd08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800dd0a:	1d3b      	adds	r3, r7, #4
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4835      	ldr	r0, [pc, #212]	; (800dde4 <HAL_FMC_MspInit+0x130>)
 800dd10:	f7f5 fd0a 	bl	8003728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin 
 800dd14:	f248 1333 	movw	r3, #33075	; 0x8133
 800dd18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd22:	2303      	movs	r3, #3
 800dd24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800dd26:	230c      	movs	r3, #12
 800dd28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dd2a:	1d3b      	adds	r3, r7, #4
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	482e      	ldr	r0, [pc, #184]	; (800dde8 <HAL_FMC_MspInit+0x134>)
 800dd30:	f7f5 fcfa 	bl	8003728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin 
 800dd34:	f24c 7303 	movw	r3, #50947	; 0xc703
 800dd38:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd3a:	2302      	movs	r3, #2
 800dd3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd42:	2303      	movs	r3, #3
 800dd44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800dd46:	230c      	movs	r3, #12
 800dd48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dd4a:	1d3b      	adds	r3, r7, #4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4827      	ldr	r0, [pc, #156]	; (800ddec <HAL_FMC_MspInit+0x138>)
 800dd50:	f7f5 fcea 	bl	8003728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 800dd54:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800dd58:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd62:	2303      	movs	r3, #3
 800dd64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800dd66:	230c      	movs	r3, #12
 800dd68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800dd6a:	1d3b      	adds	r3, r7, #4
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4820      	ldr	r0, [pc, #128]	; (800ddf0 <HAL_FMC_MspInit+0x13c>)
 800dd70:	f7f5 fcda 	bl	8003728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800dd74:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800dd78:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin 
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd82:	2303      	movs	r3, #3
 800dd84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800dd86:	230c      	movs	r3, #12
 800dd88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800dd8a:	1d3b      	adds	r3, r7, #4
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	4819      	ldr	r0, [pc, #100]	; (800ddf4 <HAL_FMC_MspInit+0x140>)
 800dd90:	f7f5 fcca 	bl	8003728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin 
 800dd94:	f64f 730c 	movw	r3, #65292	; 0xff0c
 800dd98:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin 
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dda2:	2303      	movs	r3, #3
 800dda4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800dda6:	230c      	movs	r3, #12
 800dda8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ddaa:	1d3b      	adds	r3, r7, #4
 800ddac:	4619      	mov	r1, r3
 800ddae:	4812      	ldr	r0, [pc, #72]	; (800ddf8 <HAL_FMC_MspInit+0x144>)
 800ddb0:	f7f5 fcba 	bl	8003728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddb8:	2302      	movs	r3, #2
 800ddba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ddc0:	2303      	movs	r3, #3
 800ddc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ddc4:	230c      	movs	r3, #12
 800ddc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800ddc8:	1d3b      	adds	r3, r7, #4
 800ddca:	4619      	mov	r1, r3
 800ddcc:	480b      	ldr	r0, [pc, #44]	; (800ddfc <HAL_FMC_MspInit+0x148>)
 800ddce:	f7f5 fcab 	bl	8003728 <HAL_GPIO_Init>
 800ddd2:	e000      	b.n	800ddd6 <HAL_FMC_MspInit+0x122>
    return;
 800ddd4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	2000046c 	.word	0x2000046c
 800dde0:	40023800 	.word	0x40023800
 800dde4:	40021000 	.word	0x40021000
 800dde8:	40021800 	.word	0x40021800
 800ddec:	40020c00 	.word	0x40020c00
 800ddf0:	40022000 	.word	0x40022000
 800ddf4:	40021400 	.word	0x40021400
 800ddf8:	40021c00 	.word	0x40021c00
 800ddfc:	40020800 	.word	0x40020800

0800de00 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800de08:	f7ff ff54 	bl	800dcb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800de0c:	bf00      	nop
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a26      	ldr	r2, [pc, #152]	; (800debc <HAL_SAI_MspInit+0xa8>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d146      	bne.n	800deb4 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800de26:	4b26      	ldr	r3, [pc, #152]	; (800dec0 <HAL_SAI_MspInit+0xac>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10d      	bne.n	800de4a <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800de2e:	2300      	movs	r3, #0
 800de30:	60bb      	str	r3, [r7, #8]
 800de32:	4b24      	ldr	r3, [pc, #144]	; (800dec4 <HAL_SAI_MspInit+0xb0>)
 800de34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de36:	4a23      	ldr	r2, [pc, #140]	; (800dec4 <HAL_SAI_MspInit+0xb0>)
 800de38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800de3c:	6453      	str	r3, [r2, #68]	; 0x44
 800de3e:	4b21      	ldr	r3, [pc, #132]	; (800dec4 <HAL_SAI_MspInit+0xb0>)
 800de40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de46:	60bb      	str	r3, [r7, #8]
 800de48:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800de4a:	4b1d      	ldr	r3, [pc, #116]	; (800dec0 <HAL_SAI_MspInit+0xac>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3301      	adds	r3, #1
 800de50:	4a1b      	ldr	r2, [pc, #108]	; (800dec0 <HAL_SAI_MspInit+0xac>)
 800de52:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 800de54:	2330      	movs	r3, #48	; 0x30
 800de56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de58:	2302      	movs	r3, #2
 800de5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de5c:	2300      	movs	r3, #0
 800de5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de60:	2300      	movs	r3, #0
 800de62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800de64:	2306      	movs	r3, #6
 800de66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	4619      	mov	r1, r3
 800de6e:	4816      	ldr	r0, [pc, #88]	; (800dec8 <HAL_SAI_MspInit+0xb4>)
 800de70:	f7f5 fc5a 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 800de74:	2340      	movs	r3, #64	; 0x40
 800de76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de78:	2302      	movs	r3, #2
 800de7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de7c:	2300      	movs	r3, #0
 800de7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de80:	2300      	movs	r3, #0
 800de82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800de84:	2306      	movs	r3, #6
 800de86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800de88:	f107 030c 	add.w	r3, r7, #12
 800de8c:	4619      	mov	r1, r3
 800de8e:	480f      	ldr	r0, [pc, #60]	; (800decc <HAL_SAI_MspInit+0xb8>)
 800de90:	f7f5 fc4a 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800de94:	2380      	movs	r3, #128	; 0x80
 800de96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de98:	2302      	movs	r3, #2
 800de9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de9c:	2300      	movs	r3, #0
 800de9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dea0:	2300      	movs	r3, #0
 800dea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800dea4:	2306      	movs	r3, #6
 800dea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800dea8:	f107 030c 	add.w	r3, r7, #12
 800deac:	4619      	mov	r1, r3
 800deae:	4808      	ldr	r0, [pc, #32]	; (800ded0 <HAL_SAI_MspInit+0xbc>)
 800deb0:	f7f5 fc3a 	bl	8003728 <HAL_GPIO_Init>

    }
}
 800deb4:	bf00      	nop
 800deb6:	3720      	adds	r7, #32
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	40015804 	.word	0x40015804
 800dec0:	20000470 	.word	0x20000470
 800dec4:	40023800 	.word	0x40023800
 800dec8:	40021000 	.word	0x40021000
 800decc:	40020c00 	.word	0x40020c00
 800ded0:	40021800 	.word	0x40021800

0800ded4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b08c      	sub	sp, #48	; 0x30
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800dee0:	2300      	movs	r3, #0
 800dee2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800dee4:	2200      	movs	r2, #0
 800dee6:	6879      	ldr	r1, [r7, #4]
 800dee8:	2036      	movs	r0, #54	; 0x36
 800deea:	f7f3 fd11 	bl	8001910 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800deee:	2036      	movs	r0, #54	; 0x36
 800def0:	f7f3 fd2a 	bl	8001948 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800def4:	2300      	movs	r3, #0
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	4b1f      	ldr	r3, [pc, #124]	; (800df78 <HAL_InitTick+0xa4>)
 800defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defc:	4a1e      	ldr	r2, [pc, #120]	; (800df78 <HAL_InitTick+0xa4>)
 800defe:	f043 0310 	orr.w	r3, r3, #16
 800df02:	6413      	str	r3, [r2, #64]	; 0x40
 800df04:	4b1c      	ldr	r3, [pc, #112]	; (800df78 <HAL_InitTick+0xa4>)
 800df06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df08:	f003 0310 	and.w	r3, r3, #16
 800df0c:	60fb      	str	r3, [r7, #12]
 800df0e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800df10:	f107 0210 	add.w	r2, r7, #16
 800df14:	f107 0314 	add.w	r3, r7, #20
 800df18:	4611      	mov	r1, r2
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7f8 f8ae 	bl	800607c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800df20:	f7f8 f884 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 800df24:	4603      	mov	r3, r0
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800df2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2c:	4a13      	ldr	r2, [pc, #76]	; (800df7c <HAL_InitTick+0xa8>)
 800df2e:	fba2 2303 	umull	r2, r3, r2, r3
 800df32:	0c9b      	lsrs	r3, r3, #18
 800df34:	3b01      	subs	r3, #1
 800df36:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800df38:	4b11      	ldr	r3, [pc, #68]	; (800df80 <HAL_InitTick+0xac>)
 800df3a:	4a12      	ldr	r2, [pc, #72]	; (800df84 <HAL_InitTick+0xb0>)
 800df3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800df3e:	4b10      	ldr	r3, [pc, #64]	; (800df80 <HAL_InitTick+0xac>)
 800df40:	f240 32e7 	movw	r2, #999	; 0x3e7
 800df44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800df46:	4a0e      	ldr	r2, [pc, #56]	; (800df80 <HAL_InitTick+0xac>)
 800df48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800df4c:	4b0c      	ldr	r3, [pc, #48]	; (800df80 <HAL_InitTick+0xac>)
 800df4e:	2200      	movs	r2, #0
 800df50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df52:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <HAL_InitTick+0xac>)
 800df54:	2200      	movs	r2, #0
 800df56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800df58:	4809      	ldr	r0, [pc, #36]	; (800df80 <HAL_InitTick+0xac>)
 800df5a:	f7fa f959 	bl	8008210 <HAL_TIM_Base_Init>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d104      	bne.n	800df6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800df64:	4806      	ldr	r0, [pc, #24]	; (800df80 <HAL_InitTick+0xac>)
 800df66:	f7fa f97e 	bl	8008266 <HAL_TIM_Base_Start_IT>
 800df6a:	4603      	mov	r3, r0
 800df6c:	e000      	b.n	800df70 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
}
 800df70:	4618      	mov	r0, r3
 800df72:	3730      	adds	r7, #48	; 0x30
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	40023800 	.word	0x40023800
 800df7c:	431bde83 	.word	0x431bde83
 800df80:	20000e74 	.word	0x20000e74
 800df84:	40001000 	.word	0x40001000

0800df88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800df8c:	bf00      	nop
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800df96:	b480      	push	{r7}
 800df98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800df9a:	e7fe      	b.n	800df9a <HardFault_Handler+0x4>

0800df9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dfa0:	e7fe      	b.n	800dfa0 <MemManage_Handler+0x4>

0800dfa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dfa2:	b480      	push	{r7}
 800dfa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dfa6:	e7fe      	b.n	800dfa6 <BusFault_Handler+0x4>

0800dfa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dfac:	e7fe      	b.n	800dfac <UsageFault_Handler+0x4>

0800dfae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dfae:	b480      	push	{r7}
 800dfb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dfb2:	bf00      	nop
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dfc0:	bf00      	nop
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dfca:	b480      	push	{r7}
 800dfcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dfce:	bf00      	nop
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800dfdc:	4802      	ldr	r0, [pc, #8]	; (800dfe8 <TIM6_DAC_IRQHandler+0x10>)
 800dfde:	f7fa f966 	bl	80082ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800dfe2:	bf00      	nop
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20000e74 	.word	0x20000e74

0800dfec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800dff0:	4802      	ldr	r0, [pc, #8]	; (800dffc <OTG_FS_IRQHandler+0x10>)
 800dff2:	f7f6 fcb5 	bl	8004960 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800dff6:	bf00      	nop
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20002150 	.word	0x20002150

0800e000 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800e004:	4802      	ldr	r0, [pc, #8]	; (800e010 <LTDC_IRQHandler+0x10>)
 800e006:	f7f6 f86d 	bl	80040e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800e00a:	bf00      	nop
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	20000b80 	.word	0x20000b80

0800e014 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800e018:	4802      	ldr	r0, [pc, #8]	; (800e024 <DMA2D_IRQHandler+0x10>)
 800e01a:	f7f3 ffea 	bl	8001ff2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800e01e:	bf00      	nop
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	20000d2c 	.word	0x20000d2c

0800e028 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800e02c:	4802      	ldr	r0, [pc, #8]	; (800e038 <DSI_IRQHandler+0x10>)
 800e02e:	f7f4 fcb2 	bl	8002996 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800e032:	bf00      	nop
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	20000b64 	.word	0x20000b64

0800e03c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e044:	4b11      	ldr	r3, [pc, #68]	; (800e08c <_sbrk+0x50>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d102      	bne.n	800e052 <_sbrk+0x16>
		heap_end = &end;
 800e04c:	4b0f      	ldr	r3, [pc, #60]	; (800e08c <_sbrk+0x50>)
 800e04e:	4a10      	ldr	r2, [pc, #64]	; (800e090 <_sbrk+0x54>)
 800e050:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e052:	4b0e      	ldr	r3, [pc, #56]	; (800e08c <_sbrk+0x50>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e058:	4b0c      	ldr	r3, [pc, #48]	; (800e08c <_sbrk+0x50>)
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4413      	add	r3, r2
 800e060:	466a      	mov	r2, sp
 800e062:	4293      	cmp	r3, r2
 800e064:	d907      	bls.n	800e076 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e066:	f000 fdaf 	bl	800ebc8 <__errno>
 800e06a:	4602      	mov	r2, r0
 800e06c:	230c      	movs	r3, #12
 800e06e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e074:	e006      	b.n	800e084 <_sbrk+0x48>
	}

	heap_end += incr;
 800e076:	4b05      	ldr	r3, [pc, #20]	; (800e08c <_sbrk+0x50>)
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4413      	add	r3, r2
 800e07e:	4a03      	ldr	r2, [pc, #12]	; (800e08c <_sbrk+0x50>)
 800e080:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e082:	68fb      	ldr	r3, [r7, #12]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20000474 	.word	0x20000474
 800e090:	20002760 	.word	0x20002760

0800e094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e098:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <SystemInit+0x60>)
 800e09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e09e:	4a15      	ldr	r2, [pc, #84]	; (800e0f4 <SystemInit+0x60>)
 800e0a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e0a8:	4b13      	ldr	r3, [pc, #76]	; (800e0f8 <SystemInit+0x64>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a12      	ldr	r2, [pc, #72]	; (800e0f8 <SystemInit+0x64>)
 800e0ae:	f043 0301 	orr.w	r3, r3, #1
 800e0b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e0b4:	4b10      	ldr	r3, [pc, #64]	; (800e0f8 <SystemInit+0x64>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e0ba:	4b0f      	ldr	r3, [pc, #60]	; (800e0f8 <SystemInit+0x64>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a0e      	ldr	r2, [pc, #56]	; (800e0f8 <SystemInit+0x64>)
 800e0c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e0c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e0ca:	4b0b      	ldr	r3, [pc, #44]	; (800e0f8 <SystemInit+0x64>)
 800e0cc:	4a0b      	ldr	r2, [pc, #44]	; (800e0fc <SystemInit+0x68>)
 800e0ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e0d0:	4b09      	ldr	r3, [pc, #36]	; (800e0f8 <SystemInit+0x64>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a08      	ldr	r2, [pc, #32]	; (800e0f8 <SystemInit+0x64>)
 800e0d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e0da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e0dc:	4b06      	ldr	r3, [pc, #24]	; (800e0f8 <SystemInit+0x64>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e0e2:	4b04      	ldr	r3, [pc, #16]	; (800e0f4 <SystemInit+0x60>)
 800e0e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e0e8:	609a      	str	r2, [r3, #8]
#endif
}
 800e0ea:	bf00      	nop
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr
 800e0f4:	e000ed00 	.word	0xe000ed00
 800e0f8:	40023800 	.word	0x40023800
 800e0fc:	24003010 	.word	0x24003010

0800e100 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e104:	2200      	movs	r2, #0
 800e106:	4912      	ldr	r1, [pc, #72]	; (800e150 <MX_USB_DEVICE_Init+0x50>)
 800e108:	4812      	ldr	r0, [pc, #72]	; (800e154 <MX_USB_DEVICE_Init+0x54>)
 800e10a:	f7fd fabe 	bl	800b68a <USBD_Init>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d001      	beq.n	800e118 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e114:	f7ff f9d6 	bl	800d4c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e118:	490f      	ldr	r1, [pc, #60]	; (800e158 <MX_USB_DEVICE_Init+0x58>)
 800e11a:	480e      	ldr	r0, [pc, #56]	; (800e154 <MX_USB_DEVICE_Init+0x54>)
 800e11c:	f7fd fae0 	bl	800b6e0 <USBD_RegisterClass>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e126:	f7ff f9cd 	bl	800d4c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e12a:	490c      	ldr	r1, [pc, #48]	; (800e15c <MX_USB_DEVICE_Init+0x5c>)
 800e12c:	4809      	ldr	r0, [pc, #36]	; (800e154 <MX_USB_DEVICE_Init+0x54>)
 800e12e:	f7fd fa3d 	bl	800b5ac <USBD_CDC_RegisterInterface>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e138:	f7ff f9c4 	bl	800d4c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e13c:	4805      	ldr	r0, [pc, #20]	; (800e154 <MX_USB_DEVICE_Init+0x54>)
 800e13e:	f7fd fae9 	bl	800b714 <USBD_Start>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e148:	f7ff f9bc 	bl	800d4c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e14c:	bf00      	nop
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	20000138 	.word	0x20000138
 800e154:	20000eb4 	.word	0x20000eb4
 800e158:	20000020 	.word	0x20000020
 800e15c:	20000128 	.word	0x20000128

0800e160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e164:	2200      	movs	r2, #0
 800e166:	4905      	ldr	r1, [pc, #20]	; (800e17c <CDC_Init_FS+0x1c>)
 800e168:	4805      	ldr	r0, [pc, #20]	; (800e180 <CDC_Init_FS+0x20>)
 800e16a:	f7fd fa36 	bl	800b5da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e16e:	4905      	ldr	r1, [pc, #20]	; (800e184 <CDC_Init_FS+0x24>)
 800e170:	4803      	ldr	r0, [pc, #12]	; (800e180 <CDC_Init_FS+0x20>)
 800e172:	f7fd fa4c 	bl	800b60e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e176:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e178:	4618      	mov	r0, r3
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	20001950 	.word	0x20001950
 800e180:	20000eb4 	.word	0x20000eb4
 800e184:	20001150 	.word	0x20001150

0800e188 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e188:	b480      	push	{r7}
 800e18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e18c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e18e:	4618      	mov	r0, r3
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	6039      	str	r1, [r7, #0]
 800e1a2:	71fb      	strb	r3, [r7, #7]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	2b23      	cmp	r3, #35	; 0x23
 800e1ac:	d84a      	bhi.n	800e244 <CDC_Control_FS+0xac>
 800e1ae:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <CDC_Control_FS+0x1c>)
 800e1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b4:	0800e245 	.word	0x0800e245
 800e1b8:	0800e245 	.word	0x0800e245
 800e1bc:	0800e245 	.word	0x0800e245
 800e1c0:	0800e245 	.word	0x0800e245
 800e1c4:	0800e245 	.word	0x0800e245
 800e1c8:	0800e245 	.word	0x0800e245
 800e1cc:	0800e245 	.word	0x0800e245
 800e1d0:	0800e245 	.word	0x0800e245
 800e1d4:	0800e245 	.word	0x0800e245
 800e1d8:	0800e245 	.word	0x0800e245
 800e1dc:	0800e245 	.word	0x0800e245
 800e1e0:	0800e245 	.word	0x0800e245
 800e1e4:	0800e245 	.word	0x0800e245
 800e1e8:	0800e245 	.word	0x0800e245
 800e1ec:	0800e245 	.word	0x0800e245
 800e1f0:	0800e245 	.word	0x0800e245
 800e1f4:	0800e245 	.word	0x0800e245
 800e1f8:	0800e245 	.word	0x0800e245
 800e1fc:	0800e245 	.word	0x0800e245
 800e200:	0800e245 	.word	0x0800e245
 800e204:	0800e245 	.word	0x0800e245
 800e208:	0800e245 	.word	0x0800e245
 800e20c:	0800e245 	.word	0x0800e245
 800e210:	0800e245 	.word	0x0800e245
 800e214:	0800e245 	.word	0x0800e245
 800e218:	0800e245 	.word	0x0800e245
 800e21c:	0800e245 	.word	0x0800e245
 800e220:	0800e245 	.word	0x0800e245
 800e224:	0800e245 	.word	0x0800e245
 800e228:	0800e245 	.word	0x0800e245
 800e22c:	0800e245 	.word	0x0800e245
 800e230:	0800e245 	.word	0x0800e245
 800e234:	0800e245 	.word	0x0800e245
 800e238:	0800e245 	.word	0x0800e245
 800e23c:	0800e245 	.word	0x0800e245
 800e240:	0800e245 	.word	0x0800e245
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e244:	bf00      	nop
  }

  return (USBD_OK);
 800e246:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	4805      	ldr	r0, [pc, #20]	; (800e278 <CDC_Receive_FS+0x24>)
 800e262:	f7fd f9d4 	bl	800b60e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e266:	4804      	ldr	r0, [pc, #16]	; (800e278 <CDC_Receive_FS+0x24>)
 800e268:	f7fd f9e5 	bl	800b636 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e26c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20000eb4 	.word	0x20000eb4

0800e27c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b08a      	sub	sp, #40	; 0x28
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e284:	f107 0314 	add.w	r3, r7, #20
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	605a      	str	r2, [r3, #4]
 800e28e:	609a      	str	r2, [r3, #8]
 800e290:	60da      	str	r2, [r3, #12]
 800e292:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e29c:	d147      	bne.n	800e32e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e29e:	2300      	movs	r3, #0
 800e2a0:	613b      	str	r3, [r7, #16]
 800e2a2:	4b25      	ldr	r3, [pc, #148]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a6:	4a24      	ldr	r2, [pc, #144]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e2a8:	f043 0301 	orr.w	r3, r3, #1
 800e2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e2ae:	4b22      	ldr	r3, [pc, #136]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2b2:	f003 0301 	and.w	r3, r3, #1
 800e2b6:	613b      	str	r3, [r7, #16]
 800e2b8:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS 
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800e2ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e2be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2cc:	230a      	movs	r3, #10
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2d0:	f107 0314 	add.w	r3, r7, #20
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4819      	ldr	r0, [pc, #100]	; (800e33c <HAL_PCD_MspInit+0xc0>)
 800e2d8:	f7f5 fa26 	bl	8003728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800e2dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2e2:	2302      	movs	r3, #2
 800e2e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800e2ea:	f107 0314 	add.w	r3, r7, #20
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	4812      	ldr	r0, [pc, #72]	; (800e33c <HAL_PCD_MspInit+0xc0>)
 800e2f2:	f7f5 fa19 	bl	8003728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e2f6:	4b10      	ldr	r3, [pc, #64]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fa:	4a0f      	ldr	r2, [pc, #60]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e300:	6353      	str	r3, [r2, #52]	; 0x34
 800e302:	2300      	movs	r3, #0
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30a:	4a0b      	ldr	r2, [pc, #44]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e30c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e310:	6453      	str	r3, [r2, #68]	; 0x44
 800e312:	4b09      	ldr	r3, [pc, #36]	; (800e338 <HAL_PCD_MspInit+0xbc>)
 800e314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e31e:	2200      	movs	r2, #0
 800e320:	2100      	movs	r1, #0
 800e322:	2043      	movs	r0, #67	; 0x43
 800e324:	f7f3 faf4 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e328:	2043      	movs	r0, #67	; 0x43
 800e32a:	f7f3 fb0d 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e32e:	bf00      	nop
 800e330:	3728      	adds	r7, #40	; 0x28
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	40023800 	.word	0x40023800
 800e33c:	40020000 	.word	0x40020000

0800e340 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e354:	4619      	mov	r1, r3
 800e356:	4610      	mov	r0, r2
 800e358:	f7fd fa25 	bl	800b7a6 <USBD_LL_SetupStage>
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e376:	78fa      	ldrb	r2, [r7, #3]
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	4613      	mov	r3, r2
 800e37c:	00db      	lsls	r3, r3, #3
 800e37e:	1a9b      	subs	r3, r3, r2
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	440b      	add	r3, r1
 800e384:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	4619      	mov	r1, r3
 800e38e:	f7fd fa55 	bl	800b83c <USBD_LL_DataOutStage>
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e3ac:	78fa      	ldrb	r2, [r7, #3]
 800e3ae:	6879      	ldr	r1, [r7, #4]
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	1a9b      	subs	r3, r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	440b      	add	r3, r1
 800e3ba:	3348      	adds	r3, #72	; 0x48
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	f7fd faac 	bl	800b91e <USBD_LL_DataInStage>
}
 800e3c6:	bf00      	nop
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fd fbba 	bl	800bb56 <USBD_LL_SOF>
}
 800e3e2:	bf00      	nop
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d102      	bne.n	800e404 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e3fe:	2300      	movs	r3, #0
 800e400:	73fb      	strb	r3, [r7, #15]
 800e402:	e008      	b.n	800e416 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	2b02      	cmp	r3, #2
 800e40a:	d102      	bne.n	800e412 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e40c:	2301      	movs	r3, #1
 800e40e:	73fb      	strb	r3, [r7, #15]
 800e410:	e001      	b.n	800e416 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e412:	f7ff f857 	bl	800d4c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e41c:	7bfa      	ldrb	r2, [r7, #15]
 800e41e:	4611      	mov	r1, r2
 800e420:	4618      	mov	r0, r3
 800e422:	f7fd fb62 	bl	800baea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fd fb1b 	bl	800ba68 <USBD_LL_Reset>
}
 800e432:	bf00      	nop
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
	...

0800e43c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fd fb5d 	bl	800bb0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	6812      	ldr	r2, [r2, #0]
 800e45e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e462:	f043 0301 	orr.w	r3, r3, #1
 800e466:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a1b      	ldr	r3, [r3, #32]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d005      	beq.n	800e47c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e470:	4b04      	ldr	r3, [pc, #16]	; (800e484 <HAL_PCD_SuspendCallback+0x48>)
 800e472:	691b      	ldr	r3, [r3, #16]
 800e474:	4a03      	ldr	r2, [pc, #12]	; (800e484 <HAL_PCD_SuspendCallback+0x48>)
 800e476:	f043 0306 	orr.w	r3, r3, #6
 800e47a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e47c:	bf00      	nop
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	e000ed00 	.word	0xe000ed00

0800e488 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e496:	4618      	mov	r0, r3
 800e498:	f7fd fb4c 	bl	800bb34 <USBD_LL_Resume>
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4b6:	78fa      	ldrb	r2, [r7, #3]
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fd fb72 	bl	800bba4 <USBD_LL_IsoOUTIncomplete>
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4da:	78fa      	ldrb	r2, [r7, #3]
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fd fb53 	bl	800bb8a <USBD_LL_IsoINIncomplete>
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fd fb5f 	bl	800bbbe <USBD_LL_DevConnected>
}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e516:	4618      	mov	r0, r3
 800e518:	f7fd fb5c 	bl	800bbd4 <USBD_LL_DevDisconnected>
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d13c      	bne.n	800e5ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e534:	4a20      	ldr	r2, [pc, #128]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a1e      	ldr	r2, [pc, #120]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e540:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e544:	4b1c      	ldr	r3, [pc, #112]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e546:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e54a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e54c:	4b1a      	ldr	r3, [pc, #104]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e54e:	2206      	movs	r2, #6
 800e550:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e552:	4b19      	ldr	r3, [pc, #100]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e554:	2202      	movs	r2, #2
 800e556:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e558:	4b17      	ldr	r3, [pc, #92]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e55e:	4b16      	ldr	r3, [pc, #88]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e560:	2202      	movs	r2, #2
 800e562:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e564:	4b14      	ldr	r3, [pc, #80]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e566:	2200      	movs	r2, #0
 800e568:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e56a:	4b13      	ldr	r3, [pc, #76]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e570:	4b11      	ldr	r3, [pc, #68]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e572:	2200      	movs	r2, #0
 800e574:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e576:	4b10      	ldr	r3, [pc, #64]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e578:	2201      	movs	r2, #1
 800e57a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e57c:	4b0e      	ldr	r3, [pc, #56]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e57e:	2200      	movs	r2, #0
 800e580:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e582:	480d      	ldr	r0, [pc, #52]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e584:	f7f6 f895 	bl	80046b2 <HAL_PCD_Init>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e58e:	f7fe ff99 	bl	800d4c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e592:	2180      	movs	r1, #128	; 0x80
 800e594:	4808      	ldr	r0, [pc, #32]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e596:	f7f7 fa2e 	bl	80059f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e59a:	2240      	movs	r2, #64	; 0x40
 800e59c:	2100      	movs	r1, #0
 800e59e:	4806      	ldr	r0, [pc, #24]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e5a0:	f7f7 f9e2 	bl	8005968 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e5a4:	2280      	movs	r2, #128	; 0x80
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	4803      	ldr	r0, [pc, #12]	; (800e5b8 <USBD_LL_Init+0x94>)
 800e5aa:	f7f7 f9dd 	bl	8005968 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	20002150 	.word	0x20002150

0800e5bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7f6 f991 	bl	80048fa <HAL_PCD_Start>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 f97c 	bl	800e8dc <USBD_Get_USB_Status>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	4608      	mov	r0, r1
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	461a      	mov	r2, r3
 800e600:	4603      	mov	r3, r0
 800e602:	70fb      	strb	r3, [r7, #3]
 800e604:	460b      	mov	r3, r1
 800e606:	70bb      	strb	r3, [r7, #2]
 800e608:	4613      	mov	r3, r2
 800e60a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e61a:	78bb      	ldrb	r3, [r7, #2]
 800e61c:	883a      	ldrh	r2, [r7, #0]
 800e61e:	78f9      	ldrb	r1, [r7, #3]
 800e620:	f7f6 fd93 	bl	800514a <HAL_PCD_EP_Open>
 800e624:	4603      	mov	r3, r0
 800e626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e628:	7bfb      	ldrb	r3, [r7, #15]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f000 f956 	bl	800e8dc <USBD_Get_USB_Status>
 800e630:	4603      	mov	r3, r0
 800e632:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e634:	7bbb      	ldrb	r3, [r7, #14]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	460b      	mov	r3, r1
 800e648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e64a:	2300      	movs	r3, #0
 800e64c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e658:	78fa      	ldrb	r2, [r7, #3]
 800e65a:	4611      	mov	r1, r2
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f6 fddc 	bl	800521a <HAL_PCD_EP_Close>
 800e662:	4603      	mov	r3, r0
 800e664:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800e666:	7bfb      	ldrb	r3, [r7, #15]
 800e668:	4618      	mov	r0, r3
 800e66a:	f000 f937 	bl	800e8dc <USBD_Get_USB_Status>
 800e66e:	4603      	mov	r3, r0
 800e670:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e672:	7bbb      	ldrb	r3, [r7, #14]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b084      	sub	sp, #16
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	460b      	mov	r3, r1
 800e686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e688:	2300      	movs	r3, #0
 800e68a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e696:	78fa      	ldrb	r2, [r7, #3]
 800e698:	4611      	mov	r1, r2
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f6 feb4 	bl	8005408 <HAL_PCD_EP_SetStall>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 f918 	bl	800e8dc <USBD_Get_USB_Status>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e6b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e6d4:	78fa      	ldrb	r2, [r7, #3]
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7f6 fef9 	bl	80054d0 <HAL_PCD_EP_ClrStall>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f000 f8f9 	bl	800e8dc <USBD_Get_USB_Status>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e70a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e70c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e710:	2b00      	cmp	r3, #0
 800e712:	da0b      	bge.n	800e72c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e714:	78fb      	ldrb	r3, [r7, #3]
 800e716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e71a:	68f9      	ldr	r1, [r7, #12]
 800e71c:	4613      	mov	r3, r2
 800e71e:	00db      	lsls	r3, r3, #3
 800e720:	1a9b      	subs	r3, r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	440b      	add	r3, r1
 800e726:	333e      	adds	r3, #62	; 0x3e
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	e00b      	b.n	800e744 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e72c:	78fb      	ldrb	r3, [r7, #3]
 800e72e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e732:	68f9      	ldr	r1, [r7, #12]
 800e734:	4613      	mov	r3, r2
 800e736:	00db      	lsls	r3, r3, #3
 800e738:	1a9b      	subs	r3, r3, r2
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	440b      	add	r3, r1
 800e73e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e742:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e76a:	78fa      	ldrb	r2, [r7, #3]
 800e76c:	4611      	mov	r1, r2
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f6 fcc6 	bl	8005100 <HAL_PCD_SetAddress>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f000 f8ae 	bl	800e8dc <USBD_Get_USB_Status>
 800e780:	4603      	mov	r3, r0
 800e782:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e784:	7bbb      	ldrb	r3, [r7, #14]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b086      	sub	sp, #24
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	461a      	mov	r2, r3
 800e79a:	460b      	mov	r3, r1
 800e79c:	72fb      	strb	r3, [r7, #11]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e7b0:	893b      	ldrh	r3, [r7, #8]
 800e7b2:	7af9      	ldrb	r1, [r7, #11]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	f7f6 fddd 	bl	8005374 <HAL_PCD_EP_Transmit>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 f88b 	bl	800e8dc <USBD_Get_USB_Status>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e7ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	607a      	str	r2, [r7, #4]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	72fb      	strb	r3, [r7, #11]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e7f6:	893b      	ldrh	r3, [r7, #8]
 800e7f8:	7af9      	ldrb	r1, [r7, #11]
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	f7f6 fd57 	bl	80052ae <HAL_PCD_EP_Receive>
 800e800:	4603      	mov	r3, r0
 800e802:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800e804:	7dfb      	ldrb	r3, [r7, #23]
 800e806:	4618      	mov	r0, r3
 800e808:	f000 f868 	bl	800e8dc <USBD_Get_USB_Status>
 800e80c:	4603      	mov	r3, r0
 800e80e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800e810:	7dbb      	ldrb	r3, [r7, #22]
}
 800e812:	4618      	mov	r0, r3
 800e814:	3718      	adds	r7, #24
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
 800e822:	460b      	mov	r3, r1
 800e824:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e82c:	78fa      	ldrb	r2, [r7, #3]
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7f6 fd87 	bl	8005344 <HAL_PCD_EP_GetRxCount>
 800e836:	4603      	mov	r3, r0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	460b      	mov	r3, r1
 800e84a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e84c:	78fb      	ldrb	r3, [r7, #3]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d002      	beq.n	800e858 <HAL_PCDEx_LPM_Callback+0x18>
 800e852:	2b01      	cmp	r3, #1
 800e854:	d01f      	beq.n	800e896 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800e856:	e03b      	b.n	800e8d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a1b      	ldr	r3, [r3, #32]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d007      	beq.n	800e870 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e860:	f7fe f838 	bl	800c8d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e864:	4b1c      	ldr	r3, [pc, #112]	; (800e8d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e866:	691b      	ldr	r3, [r3, #16]
 800e868:	4a1b      	ldr	r2, [pc, #108]	; (800e8d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e86a:	f023 0306 	bic.w	r3, r3, #6
 800e86e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	687a      	ldr	r2, [r7, #4]
 800e87c:	6812      	ldr	r2, [r2, #0]
 800e87e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e882:	f023 0301 	bic.w	r3, r3, #1
 800e886:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fd f950 	bl	800bb34 <USBD_LL_Resume>
    break;
 800e894:	e01c      	b.n	800e8d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	6812      	ldr	r2, [r2, #0]
 800e8a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8a8:	f043 0301 	orr.w	r3, r3, #1
 800e8ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fd f928 	bl	800bb0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d005      	beq.n	800e8ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e8c2:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	4a04      	ldr	r2, [pc, #16]	; (800e8d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e8c8:	f043 0306 	orr.w	r3, r3, #6
 800e8cc:	6113      	str	r3, [r2, #16]
    break;   
 800e8ce:	bf00      	nop
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	e000ed00 	.word	0xe000ed00

0800e8dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8ea:	79fb      	ldrb	r3, [r7, #7]
 800e8ec:	2b03      	cmp	r3, #3
 800e8ee:	d817      	bhi.n	800e920 <USBD_Get_USB_Status+0x44>
 800e8f0:	a201      	add	r2, pc, #4	; (adr r2, 800e8f8 <USBD_Get_USB_Status+0x1c>)
 800e8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f6:	bf00      	nop
 800e8f8:	0800e909 	.word	0x0800e909
 800e8fc:	0800e90f 	.word	0x0800e90f
 800e900:	0800e915 	.word	0x0800e915
 800e904:	0800e91b 	.word	0x0800e91b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e908:	2300      	movs	r3, #0
 800e90a:	73fb      	strb	r3, [r7, #15]
    break;
 800e90c:	e00b      	b.n	800e926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e90e:	2302      	movs	r3, #2
 800e910:	73fb      	strb	r3, [r7, #15]
    break;
 800e912:	e008      	b.n	800e926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e914:	2301      	movs	r3, #1
 800e916:	73fb      	strb	r3, [r7, #15]
    break;
 800e918:	e005      	b.n	800e926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e91a:	2302      	movs	r3, #2
 800e91c:	73fb      	strb	r3, [r7, #15]
    break;
 800e91e:	e002      	b.n	800e926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e920:	2302      	movs	r3, #2
 800e922:	73fb      	strb	r3, [r7, #15]
    break;
 800e924:	bf00      	nop
  }
  return usb_status;
 800e926:	7bfb      	ldrb	r3, [r7, #15]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3714      	adds	r7, #20
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	4603      	mov	r3, r0
 800e93c:	6039      	str	r1, [r7, #0]
 800e93e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2212      	movs	r2, #18
 800e944:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e946:	4b03      	ldr	r3, [pc, #12]	; (800e954 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	20000158 	.word	0x20000158

0800e958 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	4603      	mov	r3, r0
 800e960:	6039      	str	r1, [r7, #0]
 800e962:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2204      	movs	r2, #4
 800e968:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e96a:	4b03      	ldr	r3, [pc, #12]	; (800e978 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	20000178 	.word	0x20000178

0800e97c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	4603      	mov	r3, r0
 800e984:	6039      	str	r1, [r7, #0]
 800e986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e98e:	683a      	ldr	r2, [r7, #0]
 800e990:	4907      	ldr	r1, [pc, #28]	; (800e9b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e992:	4808      	ldr	r0, [pc, #32]	; (800e9b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e994:	f7fd fe12 	bl	800c5bc <USBD_GetString>
 800e998:	e004      	b.n	800e9a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	4904      	ldr	r1, [pc, #16]	; (800e9b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e99e:	4805      	ldr	r0, [pc, #20]	; (800e9b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e9a0:	f7fd fe0c 	bl	800c5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9a4:	4b02      	ldr	r3, [pc, #8]	; (800e9b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20002558 	.word	0x20002558
 800e9b4:	0800edd8 	.word	0x0800edd8

0800e9b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	4603      	mov	r3, r0
 800e9c0:	6039      	str	r1, [r7, #0]
 800e9c2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e9c4:	683a      	ldr	r2, [r7, #0]
 800e9c6:	4904      	ldr	r1, [pc, #16]	; (800e9d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e9c8:	4804      	ldr	r0, [pc, #16]	; (800e9dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e9ca:	f7fd fdf7 	bl	800c5bc <USBD_GetString>
  return USBD_StrDesc;
 800e9ce:	4b02      	ldr	r3, [pc, #8]	; (800e9d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20002558 	.word	0x20002558
 800e9dc:	0800ede0 	.word	0x0800ede0

0800e9e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	6039      	str	r1, [r7, #0]
 800e9ea:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	221a      	movs	r2, #26
 800e9f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e9f2:	f000 f855 	bl	800eaa0 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800e9f6:	4b02      	ldr	r3, [pc, #8]	; (800ea00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	2000017c 	.word	0x2000017c

0800ea04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	6039      	str	r1, [r7, #0]
 800ea0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ea10:	79fb      	ldrb	r3, [r7, #7]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d105      	bne.n	800ea22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	4907      	ldr	r1, [pc, #28]	; (800ea38 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea1a:	4808      	ldr	r0, [pc, #32]	; (800ea3c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea1c:	f7fd fdce 	bl	800c5bc <USBD_GetString>
 800ea20:	e004      	b.n	800ea2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	4904      	ldr	r1, [pc, #16]	; (800ea38 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ea26:	4805      	ldr	r0, [pc, #20]	; (800ea3c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ea28:	f7fd fdc8 	bl	800c5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea2c:	4b02      	ldr	r3, [pc, #8]	; (800ea38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20002558 	.word	0x20002558
 800ea3c:	0800edf4 	.word	0x0800edf4

0800ea40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	4603      	mov	r3, r0
 800ea48:	6039      	str	r1, [r7, #0]
 800ea4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea4c:	79fb      	ldrb	r3, [r7, #7]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d105      	bne.n	800ea5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	4907      	ldr	r1, [pc, #28]	; (800ea74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea56:	4808      	ldr	r0, [pc, #32]	; (800ea78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea58:	f7fd fdb0 	bl	800c5bc <USBD_GetString>
 800ea5c:	e004      	b.n	800ea68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	4904      	ldr	r1, [pc, #16]	; (800ea74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ea62:	4805      	ldr	r0, [pc, #20]	; (800ea78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ea64:	f7fd fdaa 	bl	800c5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea68:	4b02      	ldr	r3, [pc, #8]	; (800ea74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20002558 	.word	0x20002558
 800ea78:	0800ee00 	.word	0x0800ee00

0800ea7c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	4603      	mov	r3, r0
 800ea84:	6039      	str	r1, [r7, #0]
 800ea86:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	220c      	movs	r2, #12
 800ea8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ea8e:	4b03      	ldr	r3, [pc, #12]	; (800ea9c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	2000016c 	.word	0x2000016c

0800eaa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eaa6:	4b0f      	ldr	r3, [pc, #60]	; (800eae4 <Get_SerialNum+0x44>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eaac:	4b0e      	ldr	r3, [pc, #56]	; (800eae8 <Get_SerialNum+0x48>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eab2:	4b0e      	ldr	r3, [pc, #56]	; (800eaec <Get_SerialNum+0x4c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4413      	add	r3, r2
 800eabe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d009      	beq.n	800eada <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eac6:	2208      	movs	r2, #8
 800eac8:	4909      	ldr	r1, [pc, #36]	; (800eaf0 <Get_SerialNum+0x50>)
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f000 f814 	bl	800eaf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ead0:	2204      	movs	r2, #4
 800ead2:	4908      	ldr	r1, [pc, #32]	; (800eaf4 <Get_SerialNum+0x54>)
 800ead4:	68b8      	ldr	r0, [r7, #8]
 800ead6:	f000 f80f 	bl	800eaf8 <IntToUnicode>
  }
}
 800eada:	bf00      	nop
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	1fff7a10 	.word	0x1fff7a10
 800eae8:	1fff7a14 	.word	0x1fff7a14
 800eaec:	1fff7a18 	.word	0x1fff7a18
 800eaf0:	2000017e 	.word	0x2000017e
 800eaf4:	2000018e 	.word	0x2000018e

0800eaf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	4613      	mov	r3, r2
 800eb04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	75fb      	strb	r3, [r7, #23]
 800eb0e:	e027      	b.n	800eb60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	0f1b      	lsrs	r3, r3, #28
 800eb14:	2b09      	cmp	r3, #9
 800eb16:	d80b      	bhi.n	800eb30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	0f1b      	lsrs	r3, r3, #28
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	005b      	lsls	r3, r3, #1
 800eb22:	4619      	mov	r1, r3
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	440b      	add	r3, r1
 800eb28:	3230      	adds	r2, #48	; 0x30
 800eb2a:	b2d2      	uxtb	r2, r2
 800eb2c:	701a      	strb	r2, [r3, #0]
 800eb2e:	e00a      	b.n	800eb46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	0f1b      	lsrs	r3, r3, #28
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	005b      	lsls	r3, r3, #1
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	440b      	add	r3, r1
 800eb40:	3237      	adds	r2, #55	; 0x37
 800eb42:	b2d2      	uxtb	r2, r2
 800eb44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	011b      	lsls	r3, r3, #4
 800eb4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eb4c:	7dfb      	ldrb	r3, [r7, #23]
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	3301      	adds	r3, #1
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	4413      	add	r3, r2
 800eb56:	2200      	movs	r2, #0
 800eb58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eb5a:	7dfb      	ldrb	r3, [r7, #23]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	75fb      	strb	r3, [r7, #23]
 800eb60:	7dfa      	ldrb	r2, [r7, #23]
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d3d3      	bcc.n	800eb10 <IntToUnicode+0x18>
  }
}
 800eb68:	bf00      	nop
 800eb6a:	371c      	adds	r7, #28
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800eb74:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ebac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eb78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eb7a:	e003      	b.n	800eb84 <LoopCopyDataInit>

0800eb7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800eb7c:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800eb7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800eb80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800eb82:	3104      	adds	r1, #4

0800eb84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800eb84:	480b      	ldr	r0, [pc, #44]	; (800ebb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800eb86:	4b0c      	ldr	r3, [pc, #48]	; (800ebb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800eb88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800eb8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800eb8c:	d3f6      	bcc.n	800eb7c <CopyDataInit>
  ldr  r2, =_sbss
 800eb8e:	4a0b      	ldr	r2, [pc, #44]	; (800ebbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800eb90:	e002      	b.n	800eb98 <LoopFillZerobss>

0800eb92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800eb92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800eb94:	f842 3b04 	str.w	r3, [r2], #4

0800eb98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800eb98:	4b09      	ldr	r3, [pc, #36]	; (800ebc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800eb9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800eb9c:	d3f9      	bcc.n	800eb92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800eb9e:	f7ff fa79 	bl	800e094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800eba2:	f000 f817 	bl	800ebd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800eba6:	f7fd fe55 	bl	800c854 <main>
  bx  lr    
 800ebaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ebac:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 800ebb0:	08010b20 	.word	0x08010b20
  ldr  r0, =_sdata
 800ebb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ebb8:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800ebbc:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 800ebc0:	2000275c 	.word	0x2000275c

0800ebc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ebc4:	e7fe      	b.n	800ebc4 <ADC_IRQHandler>
	...

0800ebc8 <__errno>:
 800ebc8:	4b01      	ldr	r3, [pc, #4]	; (800ebd0 <__errno+0x8>)
 800ebca:	6818      	ldr	r0, [r3, #0]
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	20000198 	.word	0x20000198

0800ebd4 <__libc_init_array>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	4e0d      	ldr	r6, [pc, #52]	; (800ec0c <__libc_init_array+0x38>)
 800ebd8:	4c0d      	ldr	r4, [pc, #52]	; (800ec10 <__libc_init_array+0x3c>)
 800ebda:	1ba4      	subs	r4, r4, r6
 800ebdc:	10a4      	asrs	r4, r4, #2
 800ebde:	2500      	movs	r5, #0
 800ebe0:	42a5      	cmp	r5, r4
 800ebe2:	d109      	bne.n	800ebf8 <__libc_init_array+0x24>
 800ebe4:	4e0b      	ldr	r6, [pc, #44]	; (800ec14 <__libc_init_array+0x40>)
 800ebe6:	4c0c      	ldr	r4, [pc, #48]	; (800ec18 <__libc_init_array+0x44>)
 800ebe8:	f000 f8ea 	bl	800edc0 <_init>
 800ebec:	1ba4      	subs	r4, r4, r6
 800ebee:	10a4      	asrs	r4, r4, #2
 800ebf0:	2500      	movs	r5, #0
 800ebf2:	42a5      	cmp	r5, r4
 800ebf4:	d105      	bne.n	800ec02 <__libc_init_array+0x2e>
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebfc:	4798      	blx	r3
 800ebfe:	3501      	adds	r5, #1
 800ec00:	e7ee      	b.n	800ebe0 <__libc_init_array+0xc>
 800ec02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec06:	4798      	blx	r3
 800ec08:	3501      	adds	r5, #1
 800ec0a:	e7f2      	b.n	800ebf2 <__libc_init_array+0x1e>
 800ec0c:	08010b18 	.word	0x08010b18
 800ec10:	08010b18 	.word	0x08010b18
 800ec14:	08010b18 	.word	0x08010b18
 800ec18:	08010b1c 	.word	0x08010b1c

0800ec1c <malloc>:
 800ec1c:	4b02      	ldr	r3, [pc, #8]	; (800ec28 <malloc+0xc>)
 800ec1e:	4601      	mov	r1, r0
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	f000 b861 	b.w	800ece8 <_malloc_r>
 800ec26:	bf00      	nop
 800ec28:	20000198 	.word	0x20000198

0800ec2c <free>:
 800ec2c:	4b02      	ldr	r3, [pc, #8]	; (800ec38 <free+0xc>)
 800ec2e:	4601      	mov	r1, r0
 800ec30:	6818      	ldr	r0, [r3, #0]
 800ec32:	f000 b80b 	b.w	800ec4c <_free_r>
 800ec36:	bf00      	nop
 800ec38:	20000198 	.word	0x20000198

0800ec3c <memset>:
 800ec3c:	4402      	add	r2, r0
 800ec3e:	4603      	mov	r3, r0
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d100      	bne.n	800ec46 <memset+0xa>
 800ec44:	4770      	bx	lr
 800ec46:	f803 1b01 	strb.w	r1, [r3], #1
 800ec4a:	e7f9      	b.n	800ec40 <memset+0x4>

0800ec4c <_free_r>:
 800ec4c:	b538      	push	{r3, r4, r5, lr}
 800ec4e:	4605      	mov	r5, r0
 800ec50:	2900      	cmp	r1, #0
 800ec52:	d045      	beq.n	800ece0 <_free_r+0x94>
 800ec54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec58:	1f0c      	subs	r4, r1, #4
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	bfb8      	it	lt
 800ec5e:	18e4      	addlt	r4, r4, r3
 800ec60:	f000 f8ac 	bl	800edbc <__malloc_lock>
 800ec64:	4a1f      	ldr	r2, [pc, #124]	; (800ece4 <_free_r+0x98>)
 800ec66:	6813      	ldr	r3, [r2, #0]
 800ec68:	4610      	mov	r0, r2
 800ec6a:	b933      	cbnz	r3, 800ec7a <_free_r+0x2e>
 800ec6c:	6063      	str	r3, [r4, #4]
 800ec6e:	6014      	str	r4, [r2, #0]
 800ec70:	4628      	mov	r0, r5
 800ec72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec76:	f000 b8a2 	b.w	800edbe <__malloc_unlock>
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	d90c      	bls.n	800ec98 <_free_r+0x4c>
 800ec7e:	6821      	ldr	r1, [r4, #0]
 800ec80:	1862      	adds	r2, r4, r1
 800ec82:	4293      	cmp	r3, r2
 800ec84:	bf04      	itt	eq
 800ec86:	681a      	ldreq	r2, [r3, #0]
 800ec88:	685b      	ldreq	r3, [r3, #4]
 800ec8a:	6063      	str	r3, [r4, #4]
 800ec8c:	bf04      	itt	eq
 800ec8e:	1852      	addeq	r2, r2, r1
 800ec90:	6022      	streq	r2, [r4, #0]
 800ec92:	6004      	str	r4, [r0, #0]
 800ec94:	e7ec      	b.n	800ec70 <_free_r+0x24>
 800ec96:	4613      	mov	r3, r2
 800ec98:	685a      	ldr	r2, [r3, #4]
 800ec9a:	b10a      	cbz	r2, 800eca0 <_free_r+0x54>
 800ec9c:	42a2      	cmp	r2, r4
 800ec9e:	d9fa      	bls.n	800ec96 <_free_r+0x4a>
 800eca0:	6819      	ldr	r1, [r3, #0]
 800eca2:	1858      	adds	r0, r3, r1
 800eca4:	42a0      	cmp	r0, r4
 800eca6:	d10b      	bne.n	800ecc0 <_free_r+0x74>
 800eca8:	6820      	ldr	r0, [r4, #0]
 800ecaa:	4401      	add	r1, r0
 800ecac:	1858      	adds	r0, r3, r1
 800ecae:	4282      	cmp	r2, r0
 800ecb0:	6019      	str	r1, [r3, #0]
 800ecb2:	d1dd      	bne.n	800ec70 <_free_r+0x24>
 800ecb4:	6810      	ldr	r0, [r2, #0]
 800ecb6:	6852      	ldr	r2, [r2, #4]
 800ecb8:	605a      	str	r2, [r3, #4]
 800ecba:	4401      	add	r1, r0
 800ecbc:	6019      	str	r1, [r3, #0]
 800ecbe:	e7d7      	b.n	800ec70 <_free_r+0x24>
 800ecc0:	d902      	bls.n	800ecc8 <_free_r+0x7c>
 800ecc2:	230c      	movs	r3, #12
 800ecc4:	602b      	str	r3, [r5, #0]
 800ecc6:	e7d3      	b.n	800ec70 <_free_r+0x24>
 800ecc8:	6820      	ldr	r0, [r4, #0]
 800ecca:	1821      	adds	r1, r4, r0
 800eccc:	428a      	cmp	r2, r1
 800ecce:	bf04      	itt	eq
 800ecd0:	6811      	ldreq	r1, [r2, #0]
 800ecd2:	6852      	ldreq	r2, [r2, #4]
 800ecd4:	6062      	str	r2, [r4, #4]
 800ecd6:	bf04      	itt	eq
 800ecd8:	1809      	addeq	r1, r1, r0
 800ecda:	6021      	streq	r1, [r4, #0]
 800ecdc:	605c      	str	r4, [r3, #4]
 800ecde:	e7c7      	b.n	800ec70 <_free_r+0x24>
 800ece0:	bd38      	pop	{r3, r4, r5, pc}
 800ece2:	bf00      	nop
 800ece4:	20000478 	.word	0x20000478

0800ece8 <_malloc_r>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	1ccd      	adds	r5, r1, #3
 800ecec:	f025 0503 	bic.w	r5, r5, #3
 800ecf0:	3508      	adds	r5, #8
 800ecf2:	2d0c      	cmp	r5, #12
 800ecf4:	bf38      	it	cc
 800ecf6:	250c      	movcc	r5, #12
 800ecf8:	2d00      	cmp	r5, #0
 800ecfa:	4606      	mov	r6, r0
 800ecfc:	db01      	blt.n	800ed02 <_malloc_r+0x1a>
 800ecfe:	42a9      	cmp	r1, r5
 800ed00:	d903      	bls.n	800ed0a <_malloc_r+0x22>
 800ed02:	230c      	movs	r3, #12
 800ed04:	6033      	str	r3, [r6, #0]
 800ed06:	2000      	movs	r0, #0
 800ed08:	bd70      	pop	{r4, r5, r6, pc}
 800ed0a:	f000 f857 	bl	800edbc <__malloc_lock>
 800ed0e:	4a21      	ldr	r2, [pc, #132]	; (800ed94 <_malloc_r+0xac>)
 800ed10:	6814      	ldr	r4, [r2, #0]
 800ed12:	4621      	mov	r1, r4
 800ed14:	b991      	cbnz	r1, 800ed3c <_malloc_r+0x54>
 800ed16:	4c20      	ldr	r4, [pc, #128]	; (800ed98 <_malloc_r+0xb0>)
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	b91b      	cbnz	r3, 800ed24 <_malloc_r+0x3c>
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f000 f83d 	bl	800ed9c <_sbrk_r>
 800ed22:	6020      	str	r0, [r4, #0]
 800ed24:	4629      	mov	r1, r5
 800ed26:	4630      	mov	r0, r6
 800ed28:	f000 f838 	bl	800ed9c <_sbrk_r>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d124      	bne.n	800ed7a <_malloc_r+0x92>
 800ed30:	230c      	movs	r3, #12
 800ed32:	6033      	str	r3, [r6, #0]
 800ed34:	4630      	mov	r0, r6
 800ed36:	f000 f842 	bl	800edbe <__malloc_unlock>
 800ed3a:	e7e4      	b.n	800ed06 <_malloc_r+0x1e>
 800ed3c:	680b      	ldr	r3, [r1, #0]
 800ed3e:	1b5b      	subs	r3, r3, r5
 800ed40:	d418      	bmi.n	800ed74 <_malloc_r+0x8c>
 800ed42:	2b0b      	cmp	r3, #11
 800ed44:	d90f      	bls.n	800ed66 <_malloc_r+0x7e>
 800ed46:	600b      	str	r3, [r1, #0]
 800ed48:	50cd      	str	r5, [r1, r3]
 800ed4a:	18cc      	adds	r4, r1, r3
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	f000 f836 	bl	800edbe <__malloc_unlock>
 800ed52:	f104 000b 	add.w	r0, r4, #11
 800ed56:	1d23      	adds	r3, r4, #4
 800ed58:	f020 0007 	bic.w	r0, r0, #7
 800ed5c:	1ac3      	subs	r3, r0, r3
 800ed5e:	d0d3      	beq.n	800ed08 <_malloc_r+0x20>
 800ed60:	425a      	negs	r2, r3
 800ed62:	50e2      	str	r2, [r4, r3]
 800ed64:	e7d0      	b.n	800ed08 <_malloc_r+0x20>
 800ed66:	428c      	cmp	r4, r1
 800ed68:	684b      	ldr	r3, [r1, #4]
 800ed6a:	bf16      	itet	ne
 800ed6c:	6063      	strne	r3, [r4, #4]
 800ed6e:	6013      	streq	r3, [r2, #0]
 800ed70:	460c      	movne	r4, r1
 800ed72:	e7eb      	b.n	800ed4c <_malloc_r+0x64>
 800ed74:	460c      	mov	r4, r1
 800ed76:	6849      	ldr	r1, [r1, #4]
 800ed78:	e7cc      	b.n	800ed14 <_malloc_r+0x2c>
 800ed7a:	1cc4      	adds	r4, r0, #3
 800ed7c:	f024 0403 	bic.w	r4, r4, #3
 800ed80:	42a0      	cmp	r0, r4
 800ed82:	d005      	beq.n	800ed90 <_malloc_r+0xa8>
 800ed84:	1a21      	subs	r1, r4, r0
 800ed86:	4630      	mov	r0, r6
 800ed88:	f000 f808 	bl	800ed9c <_sbrk_r>
 800ed8c:	3001      	adds	r0, #1
 800ed8e:	d0cf      	beq.n	800ed30 <_malloc_r+0x48>
 800ed90:	6025      	str	r5, [r4, #0]
 800ed92:	e7db      	b.n	800ed4c <_malloc_r+0x64>
 800ed94:	20000478 	.word	0x20000478
 800ed98:	2000047c 	.word	0x2000047c

0800ed9c <_sbrk_r>:
 800ed9c:	b538      	push	{r3, r4, r5, lr}
 800ed9e:	4c06      	ldr	r4, [pc, #24]	; (800edb8 <_sbrk_r+0x1c>)
 800eda0:	2300      	movs	r3, #0
 800eda2:	4605      	mov	r5, r0
 800eda4:	4608      	mov	r0, r1
 800eda6:	6023      	str	r3, [r4, #0]
 800eda8:	f7ff f948 	bl	800e03c <_sbrk>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	d102      	bne.n	800edb6 <_sbrk_r+0x1a>
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	b103      	cbz	r3, 800edb6 <_sbrk_r+0x1a>
 800edb4:	602b      	str	r3, [r5, #0]
 800edb6:	bd38      	pop	{r3, r4, r5, pc}
 800edb8:	20002758 	.word	0x20002758

0800edbc <__malloc_lock>:
 800edbc:	4770      	bx	lr

0800edbe <__malloc_unlock>:
 800edbe:	4770      	bx	lr

0800edc0 <_init>:
 800edc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc2:	bf00      	nop
 800edc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edc6:	bc08      	pop	{r3}
 800edc8:	469e      	mov	lr, r3
 800edca:	4770      	bx	lr

0800edcc <_fini>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	bf00      	nop
 800edd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd2:	bc08      	pop	{r3}
 800edd4:	469e      	mov	lr, r3
 800edd6:	4770      	bx	lr
