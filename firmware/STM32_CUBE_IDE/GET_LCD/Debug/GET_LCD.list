
GET_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001150c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d7c  080116cc  080116cc  000216cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013448  08013448  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  08013448  08013448  00023448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013450  08013450  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013450  08013450  00023450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013454  08013454  00023454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08013458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097c8  200000a4  080134fc  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000986c  080134fc  0003986c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043632  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a6e  00000000  00000000  00073706  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002dc8  00000000  00000000  0007b178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002a88  00000000  00000000  0007df40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000363da  00000000  00000000  000809c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032358  00000000  00000000  000b6da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00120752  00000000  00000000  000e90fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020984c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c228  00000000  00000000  002098c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080116b4 	.word	0x080116b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000a8 	.word	0x200000a8
 80001fc:	080116b4 	.word	0x080116b4

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 ff95 	bl	8001438 <HAL_Delay>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800051a:	2001      	movs	r0, #1
 800051c:	f000 f804 	bl	8000528 <BSP_LCD_InitEx>
 8000520:	4603      	mov	r3, r0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000532:	f646 3325 	movw	r3, #27429	; 0x6b25
 8000536:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 800053c:	f000 f93e 	bl	80007bc <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8000540:	f000 fa56 	bl	80009f0 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8000544:	4b93      	ldr	r3, [pc, #588]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 8000546:	4a94      	ldr	r2, [pc, #592]	; (8000798 <BSP_LCD_InitEx+0x270>)
 8000548:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 800054a:	4892      	ldr	r0, [pc, #584]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 800054c:	f002 f810 	bl	8002570 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8000550:	237d      	movs	r3, #125	; 0x7d
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800055c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8000560:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000562:	4b8c      	ldr	r3, [pc, #560]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 8000564:	2201      	movs	r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	4a8b      	ldr	r2, [pc, #556]	; (800079c <BSP_LCD_InitEx+0x274>)
 800056e:	fba2 2303 	umull	r2, r3, r2, r3
 8000572:	0a9b      	lsrs	r3, r3, #10
 8000574:	4a87      	ldr	r2, [pc, #540]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 8000576:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8000578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057c:	4619      	mov	r1, r3
 800057e:	4885      	ldr	r0, [pc, #532]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 8000580:	f001 fedc 	bl	800233c <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d108      	bne.n	800059c <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 800058a:	4b85      	ldr	r3, [pc, #532]	; (80007a0 <BSP_LCD_InitEx+0x278>)
 800058c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000590:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8000592:	4b84      	ldr	r3, [pc, #528]	; (80007a4 <BSP_LCD_InitEx+0x27c>)
 8000594:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e007      	b.n	80005ac <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800059c:	4b80      	ldr	r3, [pc, #512]	; (80007a0 <BSP_LCD_InitEx+0x278>)
 800059e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005a2:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80005a4:	4b7f      	ldr	r3, [pc, #508]	; (80007a4 <BSP_LCD_InitEx+0x27c>)
 80005a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005aa:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 80005ac:	4b7c      	ldr	r3, [pc, #496]	; (80007a0 <BSP_LCD_InitEx+0x278>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 80005b2:	4b7c      	ldr	r3, [pc, #496]	; (80007a4 <BSP_LCD_InitEx+0x27c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;
 80005b8:	2301      	movs	r3, #1
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 80005bc:	230f      	movs	r3, #15
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 80005c0:	2310      	movs	r3, #16
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 80005c8:	2322      	movs	r3, #34	; 0x22
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 80005cc:	2322      	movs	r3, #34	; 0x22
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80005d0:	4b75      	ldr	r3, [pc, #468]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80005d6:	4b74      	ldr	r3, [pc, #464]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005d8:	2205      	movs	r2, #5
 80005da:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80005dc:	4b72      	ldr	r3, [pc, #456]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80005e2:	4b71      	ldr	r3, [pc, #452]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80005e8:	4b6f      	ldr	r3, [pc, #444]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80005ee:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80005f4:	4b6c      	ldr	r3, [pc, #432]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005fa:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80005fc:	4b6a      	ldr	r3, [pc, #424]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8000602:	4a69      	ldr	r2, [pc, #420]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000606:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8000608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800060a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800060c:	fb02 f203 	mul.w	r2, r2, r3
 8000610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000612:	fbb2 f3f3 	udiv	r3, r2, r3
 8000616:	4a64      	ldr	r2, [pc, #400]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000618:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 800061a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800061c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800061e:	fb02 f203 	mul.w	r2, r2, r3
 8000622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000624:	fbb2 f3f3 	udiv	r3, r2, r3
 8000628:	4a5f      	ldr	r2, [pc, #380]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 800062a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800062c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800062e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000630:	441a      	add	r2, r3
 8000632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000634:	441a      	add	r2, r3
 8000636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000638:	4413      	add	r3, r2
 800063a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800063c:	fb02 f203 	mul.w	r2, r2, r3
 8000640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4a58      	ldr	r2, [pc, #352]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800064a:	4a57      	ldr	r2, [pc, #348]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 800064c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800064e:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8000650:	4a55      	ldr	r2, [pc, #340]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000654:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000656:	4a54      	ldr	r2, [pc, #336]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800065c:	4a52      	ldr	r2, [pc, #328]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 800065e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8000662:	4b51      	ldr	r3, [pc, #324]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000664:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000668:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 800066a:	4b4f      	ldr	r3, [pc, #316]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 800066c:	2210      	movs	r2, #16
 800066e:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8000670:	4b4d      	ldr	r3, [pc, #308]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000672:	2200      	movs	r2, #0
 8000674:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000676:	4b4c      	ldr	r3, [pc, #304]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800067c:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800067e:	4b4a      	ldr	r3, [pc, #296]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000680:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000684:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000686:	4b48      	ldr	r3, [pc, #288]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800068c:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800068e:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000694:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800069e:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80006a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006a4:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 80006a6:	4940      	ldr	r1, [pc, #256]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 80006a8:	483a      	ldr	r0, [pc, #232]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 80006aa:	f002 f9a1 	bl	80029f0 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 80006ae:	2323      	movs	r3, #35	; 0x23
 80006b0:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 80006b2:	2323      	movs	r3, #35	; 0x23
 80006b4:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 80006b6:	2323      	movs	r3, #35	; 0x23
 80006b8:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 80006ba:	2323      	movs	r3, #35	; 0x23
 80006bc:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 80006c2:	230a      	movs	r3, #10
 80006c4:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	4831      	ldr	r0, [pc, #196]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 80006ce:	f002 fcf5 	bl	80030bc <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 80006d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a35      	ldr	r2, [pc, #212]	; (80007ac <BSP_LCD_InitEx+0x284>)
 80006d8:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 80006da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80006dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006de:	4413      	add	r3, r2
 80006e0:	3b01      	subs	r3, #1
 80006e2:	4a32      	ldr	r2, [pc, #200]	; (80007ac <BSP_LCD_InitEx+0x284>)
 80006e4:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <BSP_LCD_InitEx+0x278>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006ec:	441a      	add	r2, r3
 80006ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f0:	4413      	add	r3, r2
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <BSP_LCD_InitEx+0x284>)
 80006f6:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <BSP_LCD_InitEx+0x278>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006fe:	441a      	add	r2, r3
 8000700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000702:	441a      	add	r2, r3
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	4413      	add	r3, r2
 8000708:	3b01      	subs	r3, #1
 800070a:	4a28      	ldr	r2, [pc, #160]	; (80007ac <BSP_LCD_InitEx+0x284>)
 800070c:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 800070e:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <BSP_LCD_InitEx+0x278>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a26      	ldr	r2, [pc, #152]	; (80007ac <BSP_LCD_InitEx+0x284>)
 8000714:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <BSP_LCD_InitEx+0x27c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a24      	ldr	r2, [pc, #144]	; (80007ac <BSP_LCD_InitEx+0x284>)
 800071c:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <BSP_LCD_InitEx+0x288>)
 8000720:	2208      	movs	r2, #8
 8000722:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <BSP_LCD_InitEx+0x288>)
 8000726:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800072a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <BSP_LCD_InitEx+0x288>)
 800072e:	2207      	movs	r2, #7
 8000730:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <BSP_LCD_InitEx+0x288>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000738:	481d      	ldr	r0, [pc, #116]	; (80007b0 <BSP_LCD_InitEx+0x288>)
 800073a:	f005 fe7f 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <BSP_LCD_InitEx+0x284>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <BSP_LCD_InitEx+0x284>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <BSP_LCD_InitEx+0x284>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <BSP_LCD_InitEx+0x284>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <BSP_LCD_InitEx+0x284>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <BSP_LCD_InitEx+0x28c>)
 8000760:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8000762:	4911      	ldr	r1, [pc, #68]	; (80007a8 <BSP_LCD_InitEx+0x280>)
 8000764:	4811      	ldr	r0, [pc, #68]	; (80007ac <BSP_LCD_InitEx+0x284>)
 8000766:	f005 fad8 	bl	8005d1a <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 800076a:	4810      	ldr	r0, [pc, #64]	; (80007ac <BSP_LCD_InitEx+0x284>)
 800076c:	f004 ff6e 	bl	800564c <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <BSP_LCD_InitEx+0x26c>)
 8000772:	f002 fdd3 	bl	800331c <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8000776:	f000 f9e3 	bl	8000b40 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800077a:	480f      	ldr	r0, [pc, #60]	; (80007b8 <BSP_LCD_InitEx+0x290>)
 800077c:	f000 f8cc 	bl	8000918 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4619      	mov	r1, r3
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fbbf 	bl	8000f08 <OTM8009A_Init>
  
/***********************End OTM8009A Initialization****************************/ 
  
  return LCD_OK;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	3758      	adds	r7, #88	; 0x58
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200088bc 	.word	0x200088bc
 8000798:	40016c00 	.word	0x40016c00
 800079c:	43215e57 	.word	0x43215e57
 80007a0:	20000008 	.word	0x20000008
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	200000c0 	.word	0x200000c0
 80007ac:	20008814 	.word	0x20008814
 80007b0:	20000148 	.word	0x20000148
 80007b4:	40016800 	.word	0x40016800
 80007b8:	20000000 	.word	0x20000000

080007bc <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
/* EVAL Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <BSP_LCD_Reset+0x64>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <BSP_LCD_Reset+0x64>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <BSP_LCD_Reset+0x64>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 80007e2:	2311      	movs	r3, #17
 80007e4:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <BSP_LCD_Reset+0x68>)
 80007f4:	f002 feb6 	bl	8003564 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <BSP_LCD_Reset+0x68>)
 80007fe:	f003 f97d 	bl	8003afc <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000802:	2014      	movs	r0, #20
 8000804:	f000 fe18 	bl	8001438 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <BSP_LCD_Reset+0x68>)
 800080e:	f003 f975 	bl	8003afc <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);    
 8000812:	200a      	movs	r0, #10
 8000814:	f000 fe10 	bl	8001438 <HAL_Delay>
#else
  
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40021c00 	.word	0x40021c00

08000828 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <BSP_LCD_GetXSize+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008

08000840 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <BSP_LCD_GetYSize+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	2000000c 	.word	0x2000000c

08000858 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b090      	sub	sp, #64	; 0x40
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000868:	f7ff ffde 	bl	8000828 <BSP_LCD_GetXSize>
 800086c:	4603      	mov	r3, r0
 800086e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000874:	f7ff ffe4 	bl	8000840 <BSP_LCD_GetYSize>
 8000878:	4603      	mov	r3, r0
 800087a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8000884:	23ff      	movs	r3, #255	; 0xff
 8000886:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800089e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008a4:	2307      	movs	r3, #7
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80008a8:	f7ff ffbe 	bl	8000828 <BSP_LCD_GetXSize>
 80008ac:	4603      	mov	r3, r0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80008b0:	f7ff ffc6 	bl	8000840 <BSP_LCD_GetYSize>
 80008b4:	4603      	mov	r3, r0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80008b8:	88fa      	ldrh	r2, [r7, #6]
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <BSP_LCD_LayerDefaultInit+0xb4>)
 80008c2:	f005 f855 	bl	8005970 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80008c6:	88fa      	ldrh	r2, [r7, #6]
 80008c8:	4911      	ldr	r1, [pc, #68]	; (8000910 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	440b      	add	r3, r1
 80008d4:	3304      	adds	r3, #4
 80008d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	490c      	ldr	r1, [pc, #48]	; (8000910 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	3308      	adds	r3, #8
 80008ec:	4a09      	ldr	r2, [pc, #36]	; (8000914 <BSP_LCD_LayerDefaultInit+0xbc>)
 80008ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80008f0:	88fa      	ldrh	r2, [r7, #6]
 80008f2:	4907      	ldr	r1, [pc, #28]	; (8000910 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	bf00      	nop
 8000906:	3740      	adds	r7, #64	; 0x40
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20008814 	.word	0x20008814
 8000910:	20000130 	.word	0x20000130
 8000914:	20000000 	.word	0x20000000

08000918 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <BSP_LCD_SetFont+0x2c>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4908      	ldr	r1, [pc, #32]	; (8000948 <BSP_LCD_SetFont+0x30>)
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	3308      	adds	r3, #8
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2000012c 	.word	0x2000012c
 8000948:	20000130 	.word	0x20000130

0800094c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <BSP_LCD_Clear+0x48>)
 8000956:	681c      	ldr	r4, [r3, #0]
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <BSP_LCD_Clear+0x48>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <BSP_LCD_Clear+0x4c>)
 800095e:	2134      	movs	r1, #52	; 0x34
 8000960:	fb01 f303 	mul.w	r3, r1, r3
 8000964:	4413      	add	r3, r2
 8000966:	335c      	adds	r3, #92	; 0x5c
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	461d      	mov	r5, r3
 800096c:	f7ff ff5c 	bl	8000828 <BSP_LCD_GetXSize>
 8000970:	4606      	mov	r6, r0
 8000972:	f7ff ff65 	bl	8000840 <BSP_LCD_GetYSize>
 8000976:	4602      	mov	r2, r0
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2300      	movs	r3, #0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4613      	mov	r3, r2
 8000982:	4632      	mov	r2, r6
 8000984:	4629      	mov	r1, r5
 8000986:	4620      	mov	r0, r4
 8000988:	f000 f8a2 	bl	8000ad0 <LL_FillBuffer>
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000994:	2000012c 	.word	0x2000012c
 8000998:	20008814 	.word	0x20008814

0800099c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d80d      	bhi.n	80009c8 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	4613      	mov	r3, r2
 80009bc:	2215      	movs	r2, #21
 80009be:	2100      	movs	r1, #0
 80009c0:	480a      	ldr	r0, [pc, #40]	; (80009ec <DSI_IO_WriteCmd+0x50>)
 80009c2:	f002 fce7 	bl	8003394 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 80009c6:	e00d      	b.n	80009e4 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2239      	movs	r2, #57	; 0x39
 80009dc:	2100      	movs	r1, #0
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <DSI_IO_WriteCmd+0x50>)
 80009e0:	f002 fcfa 	bl	80033d8 <HAL_DSI_LongWrite>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200088bc 	.word	0x200088bc

080009f0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a33      	ldr	r2, [pc, #204]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000a28:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	4a20      	ldr	r2, [pc, #128]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a50:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000a5c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a19      	ldr	r2, [pc, #100]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	4a13      	ldr	r2, [pc, #76]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a84:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <BSP_LCD_MspInit+0xdc>)
 8000a8c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000a90:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2103      	movs	r1, #3
 8000a96:	2058      	movs	r0, #88	; 0x58
 8000a98:	f000 fdca 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000a9c:	2058      	movs	r0, #88	; 0x58
 8000a9e:	f000 fde3 	bl	8001668 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2103      	movs	r1, #3
 8000aa6:	205a      	movs	r0, #90	; 0x5a
 8000aa8:	f000 fdc2 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000aac:	205a      	movs	r0, #90	; 0x5a
 8000aae:	f000 fddb 	bl	8001668 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	205c      	movs	r0, #92	; 0x5c
 8000ab8:	f000 fdba 	bl	8001630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000abc:	205c      	movs	r0, #92	; 0x5c
 8000abe:	f000 fdd3 	bl	8001668 <HAL_NVIC_EnableIRQ>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <LL_FillBuffer+0x68>)
 8000ae0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae4:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <LL_FillBuffer+0x68>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <LL_FillBuffer+0x68>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <LL_FillBuffer+0x68>)
 8000af4:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <LL_FillBuffer+0x6c>)
 8000af6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <LL_FillBuffer+0x68>)
 8000afa:	f001 f83b 	bl	8001b74 <HAL_DMA2D_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d115      	bne.n	8000b30 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LL_FillBuffer+0x68>)
 8000b08:	f001 faa2 	bl	8002050 <HAL_DMA2D_ConfigLayer>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10e      	bne.n	8000b30 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69f9      	ldr	r1, [r7, #28]
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <LL_FillBuffer+0x68>)
 8000b1e:	f001 f872 	bl	8001c06 <HAL_DMA2D_Start>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d103      	bne.n	8000b30 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8000b28:	210a      	movs	r1, #10
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <LL_FillBuffer+0x68>)
 8000b2c:	f001 f896 	bl	8001c5c <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200088d8 	.word	0x200088d8
 8000b3c:	4002b000 	.word	0x4002b000

08000b40 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b46:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <BSP_SDRAM_Init+0xb0>)
 8000b48:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b52:	2207      	movs	r2, #7
 8000b54:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000b56:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000b5c:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b5e:	2207      	movs	r2, #7
 8000b60:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b88:	2220      	movs	r2, #32
 8000b8a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b94:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b98:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000baa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000bba:	f000 f87f 	bl	8000cbc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <BSP_SDRAM_Init+0xb4>)
 8000bc0:	480a      	ldr	r0, [pc, #40]	; (8000bec <BSP_SDRAM_Init+0xac>)
 8000bc2:	f007 fb86 	bl	80082d2 <HAL_SDRAM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <BSP_SDRAM_Init+0xb8>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e002      	b.n	8000bda <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <BSP_SDRAM_Init+0xb8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000bda:	f240 5069 	movw	r0, #1385	; 0x569
 8000bde:	f000 f80d 	bl	8000bfc <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <BSP_SDRAM_Init+0xb8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000184 	.word	0x20000184
 8000bf0:	a0000140 	.word	0xa0000140
 8000bf4:	200001b8 	.word	0x200001b8
 8000bf8:	20000010 	.word	0x20000010

08000bfc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000c08:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c0e:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000c20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c24:	4923      	ldr	r1, [pc, #140]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c26:	4824      	ldr	r0, [pc, #144]	; (8000cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000c28:	f007 fb87 	bl	800833a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fc03 	bl	8001438 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4e:	4919      	ldr	r1, [pc, #100]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c50:	4819      	ldr	r0, [pc, #100]	; (8000cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000c52:	f007 fb72 	bl	800833a <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c5e:	2210      	movs	r2, #16
 8000c60:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c64:	2208      	movs	r2, #8
 8000c66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c72:	4910      	ldr	r1, [pc, #64]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000c76:	f007 fb60 	bl	800833a <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8000c7a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000c7e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c88:	2210      	movs	r2, #16
 8000c8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c96:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9c:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000ca0:	f007 fb4b 	bl	800833a <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000ca8:	f007 fb72 	bl	8008390 <HAL_SDRAM_ProgramRefreshRate>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001d4 	.word	0x200001d4
 8000cb8:	20000184 	.word	0x20000184

08000cbc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	; 0x40
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 8104 	beq.w	8000ed6 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd2:	4b83      	ldr	r3, [pc, #524]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd6:	4a82      	ldr	r2, [pc, #520]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6393      	str	r3, [r2, #56]	; 0x38
 8000cde:	4b80      	ldr	r3, [pc, #512]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
 8000cee:	4b7c      	ldr	r3, [pc, #496]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a7b      	ldr	r2, [pc, #492]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b79      	ldr	r3, [pc, #484]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	4b75      	ldr	r3, [pc, #468]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a74      	ldr	r2, [pc, #464]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b72      	ldr	r3, [pc, #456]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	623b      	str	r3, [r7, #32]
 8000d20:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	4b6e      	ldr	r3, [pc, #440]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a6d      	ldr	r2, [pc, #436]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b6b      	ldr	r3, [pc, #428]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	4b67      	ldr	r3, [pc, #412]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a66      	ldr	r2, [pc, #408]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b64      	ldr	r3, [pc, #400]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	4b60      	ldr	r3, [pc, #384]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a5f      	ldr	r2, [pc, #380]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d64:	f043 0320 	orr.w	r3, r3, #32
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b59      	ldr	r3, [pc, #356]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a58      	ldr	r2, [pc, #352]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b52      	ldr	r3, [pc, #328]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a51      	ldr	r2, [pc, #324]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b4f      	ldr	r3, [pc, #316]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a4a      	ldr	r2, [pc, #296]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b48      	ldr	r3, [pc, #288]	; (8000ee0 <BSP_SDRAM_MspInit+0x224>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de2:	4619      	mov	r1, r3
 8000de4:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <BSP_SDRAM_MspInit+0x228>)
 8000de6:	f002 fbbd 	bl	8003564 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000dea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	483c      	ldr	r0, [pc, #240]	; (8000ee8 <BSP_SDRAM_MspInit+0x22c>)
 8000df8:	f002 fbb4 	bl	8003564 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000dfc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4838      	ldr	r0, [pc, #224]	; (8000eec <BSP_SDRAM_MspInit+0x230>)
 8000e0a:	f002 fbab 	bl	8003564 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4835      	ldr	r0, [pc, #212]	; (8000ef0 <BSP_SDRAM_MspInit+0x234>)
 8000e1c:	f002 fba2 	bl	8003564 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8000e20:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <BSP_SDRAM_MspInit+0x238>)
 8000e2e:	f002 fb99 	bl	8003564 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000e32:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	482e      	ldr	r0, [pc, #184]	; (8000ef8 <BSP_SDRAM_MspInit+0x23c>)
 8000e40:	f002 fb90 	bl	8003564 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000e44:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482a      	ldr	r0, [pc, #168]	; (8000efc <BSP_SDRAM_MspInit+0x240>)
 8000e52:	f002 fb87 	bl	8003564 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e80:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e8e:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e98:	2203      	movs	r2, #3
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <BSP_SDRAM_MspInit+0x248>)
 8000eac:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000ebc:	f000 fcbe 	bl	800183c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8000ec0:	480f      	ldr	r0, [pc, #60]	; (8000f00 <BSP_SDRAM_MspInit+0x244>)
 8000ec2:	f000 fc0d 	bl	80016e0 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2038      	movs	r0, #56	; 0x38
 8000ecc:	f000 fbb0 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000ed0:	2038      	movs	r0, #56	; 0x38
 8000ed2:	f000 fbc9 	bl	8001668 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	; 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40021400 	.word	0x40021400
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40021c00 	.word	0x40021c00
 8000efc:	40022000 	.word	0x40022000
 8000f00:	200001e4 	.word	0x200001e4
 8000f04:	40026410 	.word	0x40026410

08000f08 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f12:	49be      	ldr	r1, [pc, #760]	; (800120c <OTM8009A_Init+0x304>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fd41 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000f1a:	49bd      	ldr	r1, [pc, #756]	; (8001210 <OTM8009A_Init+0x308>)
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f7ff fd3d 	bl	800099c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000f22:	49bc      	ldr	r1, [pc, #752]	; (8001214 <OTM8009A_Init+0x30c>)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fd39 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000f2a:	49bb      	ldr	r1, [pc, #748]	; (8001218 <OTM8009A_Init+0x310>)
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f7ff fd35 	bl	800099c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000f32:	49b8      	ldr	r1, [pc, #736]	; (8001214 <OTM8009A_Init+0x30c>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fd31 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000f3a:	49b8      	ldr	r1, [pc, #736]	; (800121c <OTM8009A_Init+0x314>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fd2d 	bl	800099c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000f42:	200a      	movs	r0, #10
 8000f44:	f7ff fadc 	bl	8000500 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000f48:	49b5      	ldr	r1, [pc, #724]	; (8001220 <OTM8009A_Init+0x318>)
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fd26 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000f50:	49b4      	ldr	r1, [pc, #720]	; (8001224 <OTM8009A_Init+0x31c>)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fd22 	bl	800099c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f7ff fad1 	bl	8000500 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000f5e:	49b2      	ldr	r1, [pc, #712]	; (8001228 <OTM8009A_Init+0x320>)
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fd1b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000f66:	49b1      	ldr	r1, [pc, #708]	; (800122c <OTM8009A_Init+0x324>)
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fd17 	bl	800099c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000f6e:	49b0      	ldr	r1, [pc, #704]	; (8001230 <OTM8009A_Init+0x328>)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fd13 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000f76:	49af      	ldr	r1, [pc, #700]	; (8001234 <OTM8009A_Init+0x32c>)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff fd0f 	bl	800099c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000f7e:	49ae      	ldr	r1, [pc, #696]	; (8001238 <OTM8009A_Init+0x330>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fd0b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000f86:	49ad      	ldr	r1, [pc, #692]	; (800123c <OTM8009A_Init+0x334>)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fd07 	bl	800099c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f8e:	499f      	ldr	r1, [pc, #636]	; (800120c <OTM8009A_Init+0x304>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fd03 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000f96:	49aa      	ldr	r1, [pc, #680]	; (8001240 <OTM8009A_Init+0x338>)
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fcff 	bl	800099c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000f9e:	49a9      	ldr	r1, [pc, #676]	; (8001244 <OTM8009A_Init+0x33c>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fcfb 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000fa6:	49a8      	ldr	r1, [pc, #672]	; (8001248 <OTM8009A_Init+0x340>)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fcf7 	bl	800099c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000fae:	49a7      	ldr	r1, [pc, #668]	; (800124c <OTM8009A_Init+0x344>)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fcf3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000fb6:	49a6      	ldr	r1, [pc, #664]	; (8001250 <OTM8009A_Init+0x348>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fcef 	bl	800099c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000fbe:	49a5      	ldr	r1, [pc, #660]	; (8001254 <OTM8009A_Init+0x34c>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff fceb 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000fc6:	49a4      	ldr	r1, [pc, #656]	; (8001258 <OTM8009A_Init+0x350>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fce7 	bl	800099c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000fce:	49a3      	ldr	r1, [pc, #652]	; (800125c <OTM8009A_Init+0x354>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fce3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000fd6:	4997      	ldr	r1, [pc, #604]	; (8001234 <OTM8009A_Init+0x32c>)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fcdf 	bl	800099c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000fde:	498b      	ldr	r1, [pc, #556]	; (800120c <OTM8009A_Init+0x304>)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fcdb 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000fe6:	499e      	ldr	r1, [pc, #632]	; (8001260 <OTM8009A_Init+0x358>)
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff fcd7 	bl	800099c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000fee:	499d      	ldr	r1, [pc, #628]	; (8001264 <OTM8009A_Init+0x35c>)
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fcd3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000ff6:	499c      	ldr	r1, [pc, #624]	; (8001268 <OTM8009A_Init+0x360>)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fccf 	bl	800099c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000ffe:	499b      	ldr	r1, [pc, #620]	; (800126c <OTM8009A_Init+0x364>)
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fccb 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001006:	499a      	ldr	r1, [pc, #616]	; (8001270 <OTM8009A_Init+0x368>)
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fcc7 	bl	800099c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800100e:	4999      	ldr	r1, [pc, #612]	; (8001274 <OTM8009A_Init+0x36c>)
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fcc3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001016:	4998      	ldr	r1, [pc, #608]	; (8001278 <OTM8009A_Init+0x370>)
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fcbf 	bl	800099c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800101e:	4989      	ldr	r1, [pc, #548]	; (8001244 <OTM8009A_Init+0x33c>)
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fcbb 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001026:	4995      	ldr	r1, [pc, #596]	; (800127c <OTM8009A_Init+0x374>)
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fcb7 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800102e:	4987      	ldr	r1, [pc, #540]	; (800124c <OTM8009A_Init+0x344>)
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fcb3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001036:	4992      	ldr	r1, [pc, #584]	; (8001280 <OTM8009A_Init+0x378>)
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fcaf 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800103e:	4991      	ldr	r1, [pc, #580]	; (8001284 <OTM8009A_Init+0x37c>)
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fcab 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001046:	4990      	ldr	r1, [pc, #576]	; (8001288 <OTM8009A_Init+0x380>)
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff fca7 	bl	800099c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800104e:	4971      	ldr	r1, [pc, #452]	; (8001214 <OTM8009A_Init+0x30c>)
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fca3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001056:	498d      	ldr	r1, [pc, #564]	; (800128c <OTM8009A_Init+0x384>)
 8001058:	2006      	movs	r0, #6
 800105a:	f7ff fc9f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800105e:	498c      	ldr	r1, [pc, #560]	; (8001290 <OTM8009A_Init+0x388>)
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fc9b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001066:	498b      	ldr	r1, [pc, #556]	; (8001294 <OTM8009A_Init+0x38c>)
 8001068:	200e      	movs	r0, #14
 800106a:	f7ff fc97 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800106e:	498a      	ldr	r1, [pc, #552]	; (8001298 <OTM8009A_Init+0x390>)
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc93 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001076:	4989      	ldr	r1, [pc, #548]	; (800129c <OTM8009A_Init+0x394>)
 8001078:	200e      	movs	r0, #14
 800107a:	f7ff fc8f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800107e:	4988      	ldr	r1, [pc, #544]	; (80012a0 <OTM8009A_Init+0x398>)
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fc8b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001086:	4987      	ldr	r1, [pc, #540]	; (80012a4 <OTM8009A_Init+0x39c>)
 8001088:	200a      	movs	r0, #10
 800108a:	f7ff fc87 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800108e:	4986      	ldr	r1, [pc, #536]	; (80012a8 <OTM8009A_Init+0x3a0>)
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fc83 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001096:	4985      	ldr	r1, [pc, #532]	; (80012ac <OTM8009A_Init+0x3a4>)
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fc7f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800109e:	495d      	ldr	r1, [pc, #372]	; (8001214 <OTM8009A_Init+0x30c>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fc7b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80010a6:	4982      	ldr	r1, [pc, #520]	; (80012b0 <OTM8009A_Init+0x3a8>)
 80010a8:	200a      	movs	r0, #10
 80010aa:	f7ff fc77 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80010ae:	4981      	ldr	r1, [pc, #516]	; (80012b4 <OTM8009A_Init+0x3ac>)
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fc73 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80010b6:	4980      	ldr	r1, [pc, #512]	; (80012b8 <OTM8009A_Init+0x3b0>)
 80010b8:	200f      	movs	r0, #15
 80010ba:	f7ff fc6f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80010be:	4974      	ldr	r1, [pc, #464]	; (8001290 <OTM8009A_Init+0x388>)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fc6b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80010c6:	497d      	ldr	r1, [pc, #500]	; (80012bc <OTM8009A_Init+0x3b4>)
 80010c8:	200f      	movs	r0, #15
 80010ca:	f7ff fc67 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80010ce:	4972      	ldr	r1, [pc, #456]	; (8001298 <OTM8009A_Init+0x390>)
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fc63 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80010d6:	497a      	ldr	r1, [pc, #488]	; (80012c0 <OTM8009A_Init+0x3b8>)
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff fc5f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80010de:	4970      	ldr	r1, [pc, #448]	; (80012a0 <OTM8009A_Init+0x398>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fc5b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80010e6:	4977      	ldr	r1, [pc, #476]	; (80012c4 <OTM8009A_Init+0x3bc>)
 80010e8:	200f      	movs	r0, #15
 80010ea:	f7ff fc57 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80010ee:	496e      	ldr	r1, [pc, #440]	; (80012a8 <OTM8009A_Init+0x3a0>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fc53 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80010f6:	4974      	ldr	r1, [pc, #464]	; (80012c8 <OTM8009A_Init+0x3c0>)
 80010f8:	200f      	movs	r0, #15
 80010fa:	f7ff fc4f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80010fe:	4973      	ldr	r1, [pc, #460]	; (80012cc <OTM8009A_Init+0x3c4>)
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fc4b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001106:	4972      	ldr	r1, [pc, #456]	; (80012d0 <OTM8009A_Init+0x3c8>)
 8001108:	200a      	movs	r0, #10
 800110a:	f7ff fc47 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800110e:	4971      	ldr	r1, [pc, #452]	; (80012d4 <OTM8009A_Init+0x3cc>)
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fc43 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001116:	4970      	ldr	r1, [pc, #448]	; (80012d8 <OTM8009A_Init+0x3d0>)
 8001118:	200a      	movs	r0, #10
 800111a:	f7ff fc3f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800111e:	493d      	ldr	r1, [pc, #244]	; (8001214 <OTM8009A_Init+0x30c>)
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fc3b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001126:	496d      	ldr	r1, [pc, #436]	; (80012dc <OTM8009A_Init+0x3d4>)
 8001128:	200a      	movs	r0, #10
 800112a:	f7ff fc37 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800112e:	4961      	ldr	r1, [pc, #388]	; (80012b4 <OTM8009A_Init+0x3ac>)
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fc33 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001136:	496a      	ldr	r1, [pc, #424]	; (80012e0 <OTM8009A_Init+0x3d8>)
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff fc2f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800113e:	4954      	ldr	r1, [pc, #336]	; (8001290 <OTM8009A_Init+0x388>)
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fc2b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001146:	4967      	ldr	r1, [pc, #412]	; (80012e4 <OTM8009A_Init+0x3dc>)
 8001148:	200f      	movs	r0, #15
 800114a:	f7ff fc27 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800114e:	4952      	ldr	r1, [pc, #328]	; (8001298 <OTM8009A_Init+0x390>)
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fc23 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001156:	4964      	ldr	r1, [pc, #400]	; (80012e8 <OTM8009A_Init+0x3e0>)
 8001158:	200a      	movs	r0, #10
 800115a:	f7ff fc1f 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800115e:	4950      	ldr	r1, [pc, #320]	; (80012a0 <OTM8009A_Init+0x398>)
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fc1b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001166:	4961      	ldr	r1, [pc, #388]	; (80012ec <OTM8009A_Init+0x3e4>)
 8001168:	200f      	movs	r0, #15
 800116a:	f7ff fc17 	bl	800099c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800116e:	494e      	ldr	r1, [pc, #312]	; (80012a8 <OTM8009A_Init+0x3a0>)
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fc13 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001176:	495e      	ldr	r1, [pc, #376]	; (80012f0 <OTM8009A_Init+0x3e8>)
 8001178:	200f      	movs	r0, #15
 800117a:	f7ff fc0f 	bl	800099c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800117e:	4931      	ldr	r1, [pc, #196]	; (8001244 <OTM8009A_Init+0x33c>)
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fc0b 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001186:	495b      	ldr	r1, [pc, #364]	; (80012f4 <OTM8009A_Init+0x3ec>)
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fc07 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800118e:	495a      	ldr	r1, [pc, #360]	; (80012f8 <OTM8009A_Init+0x3f0>)
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fc03 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001196:	4959      	ldr	r1, [pc, #356]	; (80012fc <OTM8009A_Init+0x3f4>)
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fbff 	bl	800099c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800119e:	4958      	ldr	r1, [pc, #352]	; (8001300 <OTM8009A_Init+0x3f8>)
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fbfb 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80011a6:	4957      	ldr	r1, [pc, #348]	; (8001304 <OTM8009A_Init+0x3fc>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fbf7 	bl	800099c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80011ae:	4917      	ldr	r1, [pc, #92]	; (800120c <OTM8009A_Init+0x304>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fbf3 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80011b6:	4954      	ldr	r1, [pc, #336]	; (8001308 <OTM8009A_Init+0x400>)
 80011b8:	2003      	movs	r0, #3
 80011ba:	f7ff fbef 	bl	800099c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80011be:	4913      	ldr	r1, [pc, #76]	; (800120c <OTM8009A_Init+0x304>)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fbeb 	bl	800099c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80011c6:	4911      	ldr	r1, [pc, #68]	; (800120c <OTM8009A_Init+0x304>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fbe7 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80011ce:	494f      	ldr	r1, [pc, #316]	; (800130c <OTM8009A_Init+0x404>)
 80011d0:	2010      	movs	r0, #16
 80011d2:	f7ff fbe3 	bl	800099c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <OTM8009A_Init+0x304>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fbdf 	bl	800099c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80011de:	494c      	ldr	r1, [pc, #304]	; (8001310 <OTM8009A_Init+0x408>)
 80011e0:	2010      	movs	r0, #16
 80011e2:	f7ff fbdb 	bl	800099c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80011e6:	494b      	ldr	r1, [pc, #300]	; (8001314 <OTM8009A_Init+0x40c>)
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fbd7 	bl	800099c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f7ff f986 	bl	8000500 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8090 	beq.w	800131c <OTM8009A_Init+0x414>
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d000      	beq.n	8001202 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8001200:	e091      	b.n	8001326 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001202:	4945      	ldr	r1, [pc, #276]	; (8001318 <OTM8009A_Init+0x410>)
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff fbc9 	bl	800099c <DSI_IO_WriteCmd>
    break;
 800120a:	e08c      	b.n	8001326 <OTM8009A_Init+0x41e>
 800120c:	08013348 	.word	0x08013348
 8001210:	08013200 	.word	0x08013200
 8001214:	0801334c 	.word	0x0801334c
 8001218:	08013204 	.word	0x08013204
 800121c:	08013350 	.word	0x08013350
 8001220:	08013354 	.word	0x08013354
 8001224:	08013358 	.word	0x08013358
 8001228:	0801335c 	.word	0x0801335c
 800122c:	08013360 	.word	0x08013360
 8001230:	08013364 	.word	0x08013364
 8001234:	08013368 	.word	0x08013368
 8001238:	0801336c 	.word	0x0801336c
 800123c:	08013370 	.word	0x08013370
 8001240:	08013374 	.word	0x08013374
 8001244:	08013378 	.word	0x08013378
 8001248:	0801337c 	.word	0x0801337c
 800124c:	08013380 	.word	0x08013380
 8001250:	08013384 	.word	0x08013384
 8001254:	08013388 	.word	0x08013388
 8001258:	0801338c 	.word	0x0801338c
 800125c:	08013390 	.word	0x08013390
 8001260:	08013230 	.word	0x08013230
 8001264:	08013394 	.word	0x08013394
 8001268:	08013398 	.word	0x08013398
 800126c:	0801339c 	.word	0x0801339c
 8001270:	080133a0 	.word	0x080133a0
 8001274:	080133a4 	.word	0x080133a4
 8001278:	080133a8 	.word	0x080133a8
 800127c:	080133ac 	.word	0x080133ac
 8001280:	080133b0 	.word	0x080133b0
 8001284:	080133b4 	.word	0x080133b4
 8001288:	08013234 	.word	0x08013234
 800128c:	08013238 	.word	0x08013238
 8001290:	080133b8 	.word	0x080133b8
 8001294:	08013240 	.word	0x08013240
 8001298:	080133bc 	.word	0x080133bc
 800129c:	08013250 	.word	0x08013250
 80012a0:	080133c0 	.word	0x080133c0
 80012a4:	08013260 	.word	0x08013260
 80012a8:	080133c4 	.word	0x080133c4
 80012ac:	080133fc 	.word	0x080133fc
 80012b0:	0801326c 	.word	0x0801326c
 80012b4:	080133c8 	.word	0x080133c8
 80012b8:	08013278 	.word	0x08013278
 80012bc:	08013288 	.word	0x08013288
 80012c0:	08013298 	.word	0x08013298
 80012c4:	080132a4 	.word	0x080132a4
 80012c8:	080132b4 	.word	0x080132b4
 80012cc:	080133cc 	.word	0x080133cc
 80012d0:	080132c4 	.word	0x080132c4
 80012d4:	080133d0 	.word	0x080133d0
 80012d8:	080132d0 	.word	0x080132d0
 80012dc:	080132dc 	.word	0x080132dc
 80012e0:	080132e8 	.word	0x080132e8
 80012e4:	080132f8 	.word	0x080132f8
 80012e8:	08013308 	.word	0x08013308
 80012ec:	08013314 	.word	0x08013314
 80012f0:	08013324 	.word	0x08013324
 80012f4:	08013400 	.word	0x08013400
 80012f8:	08013404 	.word	0x08013404
 80012fc:	08013408 	.word	0x08013408
 8001300:	0801340c 	.word	0x0801340c
 8001304:	08013410 	.word	0x08013410
 8001308:	08013334 	.word	0x08013334
 800130c:	08013208 	.word	0x08013208
 8001310:	0801321c 	.word	0x0801321c
 8001314:	080133d4 	.word	0x080133d4
 8001318:	080133d8 	.word	0x080133d8
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800131c:	491a      	ldr	r1, [pc, #104]	; (8001388 <OTM8009A_Init+0x480>)
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fb3c 	bl	800099c <DSI_IO_WriteCmd>
    break;
 8001324:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10b      	bne.n	8001344 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 800132c:	4917      	ldr	r1, [pc, #92]	; (800138c <OTM8009A_Init+0x484>)
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fb34 	bl	800099c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001334:	4916      	ldr	r1, [pc, #88]	; (8001390 <OTM8009A_Init+0x488>)
 8001336:	2004      	movs	r0, #4
 8001338:	f7ff fb30 	bl	800099c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 800133c:	4915      	ldr	r1, [pc, #84]	; (8001394 <OTM8009A_Init+0x48c>)
 800133e:	2004      	movs	r0, #4
 8001340:	f7ff fb2c 	bl	800099c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001344:	4914      	ldr	r1, [pc, #80]	; (8001398 <OTM8009A_Init+0x490>)
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fb28 	bl	800099c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800134c:	4913      	ldr	r1, [pc, #76]	; (800139c <OTM8009A_Init+0x494>)
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fb24 	bl	800099c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001354:	4912      	ldr	r1, [pc, #72]	; (80013a0 <OTM8009A_Init+0x498>)
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fb20 	bl	800099c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800135c:	4911      	ldr	r1, [pc, #68]	; (80013a4 <OTM8009A_Init+0x49c>)
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fb1c 	bl	800099c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001364:	4910      	ldr	r1, [pc, #64]	; (80013a8 <OTM8009A_Init+0x4a0>)
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fb18 	bl	800099c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800136c:	490f      	ldr	r1, [pc, #60]	; (80013ac <OTM8009A_Init+0x4a4>)
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fb14 	bl	800099c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001374:	490e      	ldr	r1, [pc, #56]	; (80013b0 <OTM8009A_Init+0x4a8>)
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fb10 	bl	800099c <DSI_IO_WriteCmd>

  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	080133dc 	.word	0x080133dc
 800138c:	080133e0 	.word	0x080133e0
 8001390:	08013338 	.word	0x08013338
 8001394:	08013340 	.word	0x08013340
 8001398:	080133e4 	.word	0x080133e4
 800139c:	080133e8 	.word	0x080133e8
 80013a0:	080133ec 	.word	0x080133ec
 80013a4:	080133f0 	.word	0x080133f0
 80013a8:	080133f4 	.word	0x080133f4
 80013ac:	08013348 	.word	0x08013348
 80013b0:	080133f8 	.word	0x080133f8

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f91c 	bl	800161a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f00f fc2a 	bl	8010c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f00f f80c 	bl	8010404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000011 	.word	0x20000011
 800141c:	20008918 	.word	0x20008918

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20008918 	.word	0x20008918

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_Delay+0x40>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
  {
  }
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000011 	.word	0x20000011

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db10      	blt.n	8001550 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4909      	ldr	r1, [pc, #36]	; (800155c <__NVIC_DisableIRQ+0x40>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	3320      	adds	r3, #32
 8001544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800154c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff2a 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001642:	f7ff ff3f 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001646:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff ffb1 	bl	80015b4 <NVIC_EncodePriority>
 8001652:	4602      	mov	r2, r0
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff80 	bl	8001560 <__NVIC_SetPriority>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff32 	bl	80014e0 <__NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff42 	bl	800151c <__NVIC_DisableIRQ>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e011      	b.n	80016d6 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	795b      	ldrb	r3, [r3, #5]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f00e fec6 	bl	8010454 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fe98 	bl	8001420 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e099      	b.n	8001830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171c:	e00f      	b.n	800173e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171e:	f7ff fe7f 	bl	8001420 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b05      	cmp	r3, #5
 800172a:	d908      	bls.n	800173e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e078      	b.n	8001830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e8      	bne.n	800171e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_DMA_Init+0x158>)
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4313      	orrs	r3, r2
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d117      	bne.n	8001802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f94b 	bl	8001a80 <DMA_CheckFifoParam>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017fe:	2301      	movs	r3, #1
 8001800:	e016      	b.n	8001830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f902 	bl	8001a14 <DMA_CalcBaseAndBitshift>
 8001810:	4603      	mov	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	223f      	movs	r2, #63	; 0x3f
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	f010803f 	.word	0xf010803f

0800183c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e050      	b.n	80018f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d101      	bne.n	800185e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800185a:	2302      	movs	r3, #2
 800185c:	e048      	b.n	80018f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2221      	movs	r2, #33	; 0x21
 800189c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8b8 	bl	8001a14 <DMA_CalcBaseAndBitshift>
 80018a4:	4603      	mov	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	223f      	movs	r2, #63	; 0x3f
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_DMA_Start_IT+0x26>
 800191a:	2302      	movs	r3, #2
 800191c:	e048      	b.n	80019b0 <HAL_DMA_Start_IT+0xb8>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d137      	bne.n	80019a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f836 	bl	80019b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	223f      	movs	r2, #63	; 0x3f
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0216 	orr.w	r2, r2, #22
 8001966:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001976:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0208 	orr.w	r2, r2, #8
 800198e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e005      	b.n	80019ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
 80019ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d108      	bne.n	80019f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019f6:	e007      	b.n	8001a08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3b10      	subs	r3, #16
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <DMA_CalcBaseAndBitshift+0x64>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <DMA_CalcBaseAndBitshift+0x68>)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d909      	bls.n	8001a56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	1d1a      	adds	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	659a      	str	r2, [r3, #88]	; 0x58
 8001a54:	e007      	b.n	8001a66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	aaaaaaab 	.word	0xaaaaaaab
 8001a7c:	08013414 	.word	0x08013414

08001a80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11f      	bne.n	8001ada <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d855      	bhi.n	8001b4c <DMA_CheckFifoParam+0xcc>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <DMA_CheckFifoParam+0x28>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001ab9 	.word	0x08001ab9
 8001aac:	08001acb 	.word	0x08001acb
 8001ab0:	08001ab9 	.word	0x08001ab9
 8001ab4:	08001b4d 	.word	0x08001b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d045      	beq.n	8001b50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac8:	e042      	b.n	8001b50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ad2:	d13f      	bne.n	8001b54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ad8:	e03c      	b.n	8001b54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae2:	d121      	bne.n	8001b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d836      	bhi.n	8001b58 <DMA_CheckFifoParam+0xd8>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <DMA_CheckFifoParam+0x70>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b07 	.word	0x08001b07
 8001af8:	08001b01 	.word	0x08001b01
 8001afc:	08001b19 	.word	0x08001b19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
      break;
 8001b04:	e02f      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d024      	beq.n	8001b5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b16:	e021      	b.n	8001b5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b20:	d11e      	bne.n	8001b60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b26:	e01b      	b.n	8001b60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d902      	bls.n	8001b34 <DMA_CheckFifoParam+0xb4>
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d003      	beq.n	8001b3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b32:	e018      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
      break;
 8001b38:	e015      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4a:	e00b      	b.n	8001b64 <DMA_CheckFifoParam+0xe4>
      break;
 8001b4c:	bf00      	nop
 8001b4e:	e00a      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;
 8001b50:	bf00      	nop
 8001b52:	e008      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;
 8001b54:	bf00      	nop
 8001b56:	e006      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;
 8001b58:	bf00      	nop
 8001b5a:	e004      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;
 8001b5c:	bf00      	nop
 8001b5e:	e002      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;   
 8001b60:	bf00      	nop
 8001b62:	e000      	b.n	8001b66 <DMA_CheckFifoParam+0xe6>
      break;
 8001b64:	bf00      	nop
    }
  } 
  
  return status; 
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e03b      	b.n	8001bfe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f00e fc7c 	bl	8010498 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	f023 0107 	bic.w	r1, r3, #7
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68d1      	ldr	r1, [r2, #12]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af02      	add	r7, sp, #8
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_DMA2D_Start+0x1c>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e018      	b.n	8001c54 <HAL_DMA2D_Start+0x4e>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa99 	bl	8002174 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d056      	beq.n	8001d26 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001c78:	f7ff fbd2 	bl	8001420 <HAL_GetTick>
 8001c7c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001c7e:	e04b      	b.n	8001d18 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d023      	beq.n	8001cda <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f043 0202 	orr.w	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2221      	movs	r2, #33	; 0x21
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0a5      	b.n	8001e26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce0:	d01a      	beq.n	8001d18 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001ce2:	f7ff fb9d 	bl	8001420 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <HAL_DMA2D_PollForTransfer+0x9c>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10f      	bne.n	8001d18 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e086      	b.n	8001e26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0ac      	beq.n	8001c80 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d061      	beq.n	8001e0c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d48:	f7ff fb6a 	bl	8001420 <HAL_GetTick>
 8001d4c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001d4e:	e056      	b.n	8001dfe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d02e      	beq.n	8001dc0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	f043 0204 	orr.w	r2, r3, #4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	f043 0202 	orr.w	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2229      	movs	r2, #41	; 0x29
 8001daa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2204      	movs	r2, #4
 8001db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc6:	d01a      	beq.n	8001dfe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001dc8:	f7ff fb2a 	bl	8001420 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <HAL_DMA2D_PollForTransfer+0x182>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e013      	b.n	8001e26 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0a1      	beq.n	8001d50 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2212      	movs	r2, #18
 8001e12:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d026      	beq.n	8001e9e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d021      	beq.n	8001e9e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e68:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2204      	movs	r2, #4
 8001e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d026      	beq.n	8001ef6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d021      	beq.n	8001ef6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ece:	f043 0202 	orr.w	r2, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2204      	movs	r2, #4
 8001eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d026      	beq.n	8001f4e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d021      	beq.n	8001f4e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f18:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2208      	movs	r2, #8
 8001f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	f043 0204 	orr.w	r2, r3, #4
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00e      	beq.n	8001f80 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f70:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f853 	bl	8002026 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01f      	beq.n	8001fd4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01f      	beq.n	800201e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01a      	beq.n	800201e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f80e 	bl	800203a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_DMA2D_ConfigLayer+0x20>
 800206c:	2302      	movs	r3, #2
 800206e:	e079      	b.n	8002164 <HAL_DMA2D_ConfigLayer+0x114>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	3318      	adds	r3, #24
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800209a:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_DMA2D_ConfigLayer+0x120>)
 800209c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d003      	beq.n	80020ae <HAL_DMA2D_ConfigLayer+0x5e>
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	d107      	bne.n	80020be <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e005      	b.n	80020ca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	061b      	lsls	r3, r3, #24
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d120      	bne.n	8002112 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43db      	mvns	r3, r3
 80020da:	ea02 0103 	and.w	r1, r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b0a      	cmp	r3, #10
 80020f8:	d003      	beq.n	8002102 <HAL_DMA2D_ConfigLayer+0xb2>
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b09      	cmp	r3, #9
 8002100:	d127      	bne.n	8002152 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
 8002110:	e01f      	b.n	8002152 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43db      	mvns	r3, r3
 800211c:	ea02 0103 	and.w	r1, r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	430a      	orrs	r2, r1
 8002128:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b0a      	cmp	r3, #10
 800213a:	d003      	beq.n	8002144 <HAL_DMA2D_ConfigLayer+0xf4>
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b09      	cmp	r3, #9
 8002142:	d106      	bne.n	8002152 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002150:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	ff03000f 	.word	0xff03000f

08002174 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002174:	b480      	push	{r7}
 8002176:	b08b      	sub	sp, #44	; 0x2c
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	041a      	lsls	r2, r3, #16
 8002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002192:	431a      	orrs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021ac:	d174      	bne.n	8002298 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80021c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d108      	bne.n	80021e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	431a      	orrs	r2, r3
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	4313      	orrs	r3, r2
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	e053      	b.n	800228e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d106      	bne.n	80021fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e048      	b.n	800228e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d111      	bne.n	8002228 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	0cdb      	lsrs	r3, r3, #19
 8002208:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	0a9b      	lsrs	r3, r3, #10
 800220e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	08db      	lsrs	r3, r3, #3
 8002214:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	02db      	lsls	r3, r3, #11
 800221e:	4313      	orrs	r3, r2
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	e032      	b.n	800228e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d117      	bne.n	8002260 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	0fdb      	lsrs	r3, r3, #31
 8002234:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	0cdb      	lsrs	r3, r3, #19
 800223a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	431a      	orrs	r2, r3
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	03db      	lsls	r3, r3, #15
 8002256:	4313      	orrs	r3, r2
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e016      	b.n	800228e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	0f1b      	lsrs	r3, r3, #28
 8002264:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	0d1b      	lsrs	r3, r3, #20
 800226a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	0b1b      	lsrs	r3, r3, #12
 8002270:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	011a      	lsls	r2, r3, #4
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	431a      	orrs	r2, r3
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	031b      	lsls	r3, r3, #12
 8002286:	4313      	orrs	r3, r2
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4313      	orrs	r3, r2
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002296:	e003      	b.n	80022a0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	60da      	str	r2, [r3, #12]
}
 80022a0:	bf00      	nop
 80022a2:	372c      	adds	r7, #44	; 0x2c
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	019a      	lsls	r2, r3, #6
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	431a      	orrs	r2, r3
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ec:	f7ff f898 	bl	8001420 <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80022f2:	e009      	b.n	8002308 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80022f4:	f7ff f894 	bl	8001420 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002302:	d901      	bls.n	8002308 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e015      	b.n	8002334 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ee      	beq.n	80022f4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	019a      	lsls	r2, r3, #6
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	ea42 0103 	orr.w	r1, r2, r3
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e108      	b.n	8002562 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7c5b      	ldrb	r3, [r3, #17]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f00e f8c4 	bl	80104e8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2203      	movs	r2, #3
 8002364:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800237a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238e:	f7ff f847 	bl	8001420 <HAL_GetTick>
 8002392:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002394:	e009      	b.n	80023aa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002396:	f7ff f843 	bl	8001420 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a4:	d901      	bls.n	80023aa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0db      	b.n	8002562 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80023b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ed      	beq.n	8002396 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80023ca:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80023ce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	009a      	lsls	r2, r3, #2
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	02db      	lsls	r3, r3, #11
 80023e6:	431a      	orrs	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002422:	f7fe fffd 	bl	8001420 <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002428:	e009      	b.n	800243e <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800242a:	f7fe fff9 	bl	8001420 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002438:	d901      	bls.n	800243e <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e091      	b.n	8002562 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ed      	beq.n	800242a <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0206 	orr.w	r2, r2, #6
 800245e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0203 	bic.w	r2, r2, #3
 8002472:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0203 	bic.w	r2, r2, #3
 80024a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024c8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_DSI_Init+0x1ae>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	e000      	b.n	80024ec <HAL_DSI_Init+0x1b0>
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4a1e      	ldr	r2, [pc, #120]	; (800256c <HAL_DSI_Init+0x230>)
 80024f2:	fb02 f203 	mul.w	r2, r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	409a      	lsls	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002522:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	430a      	orrs	r2, r1
 8002536:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	003d0900 	.word	0x003d0900

08002570 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e066      	b.n	8002650 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2203      	movs	r2, #3
 8002586:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0206 	bic.w	r2, r2, #6
 80025e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002622:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f00d ffa6 	bl	8010588 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7c1b      	ldrb	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_DSI_ConfigErrorMonitor+0x16>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ab      	b.n	80027c6 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80026a8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80026ac:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80026ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0202 	orr.w	r2, r2, #2
 8002706:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 020c 	orr.w	r2, r2, #12
 8002724:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0210 	orr.w	r2, r2, #16
 8002742:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d009      	beq.n	80027a0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800279c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80027ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00f      	beq.n	800280a <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f8ad 	bl	8002964 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00f      	beq.n	800283a <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2202      	movs	r2, #2
 8002830:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f89f 	bl	8002978 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 808c 	beq.w	800295c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800284c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002864:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f043 0202 	orr.w	r2, r3, #2
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f043 0208 	orr.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f043 0210 	orr.w	r2, r3, #16
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f818 	bl	800298c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7c1b      	ldrb	r3, [r3, #16]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_DSI_SetGenericVCID+0x16>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e016      	b.n	80029e4 <HAL_DSI_SetGenericVCID+0x44>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0203 	bic.w	r2, r2, #3
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7c1b      	ldrb	r3, [r3, #16]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_DSI_ConfigVideoMode+0x16>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e1f6      	b.n	8002df4 <HAL_DSI_ConfigVideoMode+0x404>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0203 	bic.w	r2, r2, #3
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a64:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002a86:	f023 031f 	bic.w	r3, r3, #31
 8002a8a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002aac:	f023 031f 	bic.w	r3, r3, #31
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0203 	bic.w	r2, r2, #3
 8002ad2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0207 	bic.w	r2, r2, #7
 8002af4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6959      	ldr	r1, [r3, #20]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 020f 	bic.w	r2, r2, #15
 8002b22:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6919      	ldr	r1, [r3, #16]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 020e 	bic.w	r2, r2, #14
 8002b46:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	005a      	lsls	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d110      	bne.n	8002b8c <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b78:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6919      	ldr	r1, [r3, #16]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b9a:	f023 030f 	bic.w	r3, r3, #15
 8002b9e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002bc0:	f023 030f 	bic.w	r3, r3, #15
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bea:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c32:	f023 0303 	bic.w	r3, r3, #3
 8002c36:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c58:	f023 0303 	bic.w	r3, r3, #3
 8002c5c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c82:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002cc6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	041a      	lsls	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7c1b      	ldrb	r3, [r3, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0c5      	b.n	8002fa2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0203 	bic.w	r2, r2, #3
 8002e62:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68d9      	ldr	r1, [r3, #12]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0207 	bic.w	r2, r2, #7
 8002e84:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6959      	ldr	r1, [r3, #20]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020f 	bic.w	r2, r2, #15
 8002eb2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6919      	ldr	r1, [r3, #16]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 020e 	bic.w	r2, r2, #14
 8002ed6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	005a      	lsls	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f24:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0202 	orr.w	r2, r2, #2
 8002f96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7c1b      	ldrb	r3, [r3, #16]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DSI_ConfigCommand+0x16>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e049      	b.n	800305a <HAL_DSI_ConfigCommand+0xaa>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_DSI_ConfigCommand+0xb8>)
 8002fd8:	400b      	ands	r3, r1
 8002fda:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002fea:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8002ff0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002ff6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002ffc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003002:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003008:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800300e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003014:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800301a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003020:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003026:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0202 	bic.w	r2, r2, #2
 800303e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	fef080ff 	.word	0xfef080ff

0800306c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7c1b      	ldrb	r3, [r3, #16]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_DSI_ConfigFlowControl+0x16>
 800307e:	2302      	movs	r3, #2
 8003080:	e016      	b.n	80030b0 <HAL_DSI_ConfigFlowControl+0x44>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 021f 	bic.w	r2, r2, #31
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7c1b      	ldrb	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_DSI_ConfigPhyTimer+0x16>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e058      	b.n	8003184 <HAL_DSI_ConfigPhyTimer+0xc8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bf38      	it	cc
 80030e4:	4613      	movcc	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80030f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	041a      	lsls	r2, r3, #16
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003126:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	041b      	lsls	r3, r3, #16
 800313c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003160:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	021a      	lsls	r2, r3, #8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7c1b      	ldrb	r3, [r3, #16]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e0b4      	b.n	8003310 <HAL_DSI_ConfigHostTimeouts+0x180>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80031ba:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	b292      	uxth	r2, r2
 80031dc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	041a      	lsls	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	0c1b      	lsrs	r3, r3, #16
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800329a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7c1b      	ldrb	r3, [r3, #16]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_DSI_Start+0x14>
 800332c:	2302      	movs	r3, #2
 800332e:	e02b      	b.n	8003388 <HAL_DSI_Start+0x6c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0208 	orr.w	r2, r2, #8
 800336c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	7c1b      	ldrb	r3, [r3, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_DSI_ShortWrite+0x1a>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e010      	b.n	80033d0 <HAL_DSI_ShortWrite+0x3c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7fe ff8d 	bl	80022de <DSI_ShortWrite>
 80033c4:	4603      	mov	r3, r0
 80033c6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	741a      	strb	r2, [r3, #16]

  return status;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	; 0x30
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80033e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	7c1b      	ldrb	r3, [r3, #16]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_DSI_LongWrite+0x1e>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e084      	b.n	8003500 <HAL_DSI_LongWrite+0x128>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fc:	f7fe f810 	bl	8001420 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003402:	e00c      	b.n	800341e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003404:	f7fe f80c 	bl	8001420 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003412:	d904      	bls.n	800341e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e070      	b.n	8003500 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0eb      	beq.n	8003404 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b03      	cmp	r3, #3
 8003434:	bf28      	it	cs
 8003436:	2303      	movcs	r3, #3
 8003438:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	e00f      	b.n	8003460 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	4413      	add	r3, r2
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	3301      	adds	r3, #1
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	4313      	orrs	r3, r2
 8003458:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	3301      	adds	r3, #1
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	429a      	cmp	r2, r3
 8003466:	d3eb      	bcc.n	8003440 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003480:	e028      	b.n	80034d4 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	2b04      	cmp	r3, #4
 8003486:	bf28      	it	cs
 8003488:	2304      	movcs	r3, #4
 800348a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	e00e      	b.n	80034b4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	3301      	adds	r3, #1
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d3ec      	bcc.n	8003496 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1d3      	bne.n	8003482 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80034e2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	f7fe feda 	bl	80022ac <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7c1b      	ldrb	r3, [r3, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800351a:	2302      	movs	r3, #2
 800351c:	e01b      	b.n	8003556 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003534:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	065a      	lsls	r2, r3, #25
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e177      	b.n	8003870 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	f040 8166 	bne.w	800386a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x4a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b12      	cmp	r3, #18
 80035ac:	d123      	bne.n	80035f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	08da      	lsrs	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	69b9      	ldr	r1, [r7, #24]
 80035f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0203 	and.w	r2, r3, #3
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d00b      	beq.n	800364a <HAL_GPIO_Init+0xe6>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d007      	beq.n	800364a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800363e:	2b11      	cmp	r3, #17
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b12      	cmp	r3, #18
 8003648:	d130      	bne.n	80036ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0201 	and.w	r2, r3, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	2203      	movs	r2, #3
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80c0 	beq.w	800386a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b65      	ldr	r3, [pc, #404]	; (8003884 <HAL_GPIO_Init+0x320>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a64      	ldr	r2, [pc, #400]	; (8003884 <HAL_GPIO_Init+0x320>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b62      	ldr	r3, [pc, #392]	; (8003884 <HAL_GPIO_Init+0x320>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003706:	4a60      	ldr	r2, [pc, #384]	; (8003888 <HAL_GPIO_Init+0x324>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a57      	ldr	r2, [pc, #348]	; (800388c <HAL_GPIO_Init+0x328>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d037      	beq.n	80037a2 <HAL_GPIO_Init+0x23e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a56      	ldr	r2, [pc, #344]	; (8003890 <HAL_GPIO_Init+0x32c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d031      	beq.n	800379e <HAL_GPIO_Init+0x23a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a55      	ldr	r2, [pc, #340]	; (8003894 <HAL_GPIO_Init+0x330>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02b      	beq.n	800379a <HAL_GPIO_Init+0x236>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a54      	ldr	r2, [pc, #336]	; (8003898 <HAL_GPIO_Init+0x334>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d025      	beq.n	8003796 <HAL_GPIO_Init+0x232>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a53      	ldr	r2, [pc, #332]	; (800389c <HAL_GPIO_Init+0x338>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <HAL_GPIO_Init+0x22e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_GPIO_Init+0x33c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <HAL_GPIO_Init+0x22a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a51      	ldr	r2, [pc, #324]	; (80038a4 <HAL_GPIO_Init+0x340>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x226>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a50      	ldr	r2, [pc, #320]	; (80038a8 <HAL_GPIO_Init+0x344>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4f      	ldr	r2, [pc, #316]	; (80038ac <HAL_GPIO_Init+0x348>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <HAL_GPIO_Init+0x34c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x21a>
 800377a:	2309      	movs	r3, #9
 800377c:	e012      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800377e:	230a      	movs	r3, #10
 8003780:	e010      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003782:	2308      	movs	r3, #8
 8003784:	e00e      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003786:	2307      	movs	r3, #7
 8003788:	e00c      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800378a:	2306      	movs	r3, #6
 800378c:	e00a      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800378e:	2305      	movs	r3, #5
 8003790:	e008      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003792:	2304      	movs	r3, #4
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 8003796:	2303      	movs	r3, #3
 8003798:	e004      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800379a:	2302      	movs	r3, #2
 800379c:	e002      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_GPIO_Init+0x240>
 80037a2:	2300      	movs	r3, #0
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	f002 0203 	and.w	r2, r2, #3
 80037aa:	0092      	lsls	r2, r2, #2
 80037ac:	4093      	lsls	r3, r2
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b4:	4934      	ldr	r1, [pc, #208]	; (8003888 <HAL_GPIO_Init+0x324>)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	3302      	adds	r3, #2
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <HAL_GPIO_Init+0x350>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e6:	4a33      	ldr	r2, [pc, #204]	; (80038b4 <HAL_GPIO_Init+0x350>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_GPIO_Init+0x350>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_GPIO_Init+0x350>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_GPIO_Init+0x350>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_GPIO_Init+0x350>)
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <HAL_GPIO_Init+0x350>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_GPIO_Init+0x350>)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	f67f ae84 	bls.w	8003580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003878:	bf00      	nop
 800387a:	3724      	adds	r7, #36	; 0x24
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40023800 	.word	0x40023800
 8003888:	40013800 	.word	0x40013800
 800388c:	40020000 	.word	0x40020000
 8003890:	40020400 	.word	0x40020400
 8003894:	40020800 	.word	0x40020800
 8003898:	40020c00 	.word	0x40020c00
 800389c:	40021000 	.word	0x40021000
 80038a0:	40021400 	.word	0x40021400
 80038a4:	40021800 	.word	0x40021800
 80038a8:	40021c00 	.word	0x40021c00
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40022400 	.word	0x40022400
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e0d9      	b.n	8003a88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	f040 80c9 	bne.w	8003a82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038f0:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <HAL_GPIO_DeInit+0x1e4>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a62      	ldr	r2, [pc, #392]	; (8003aa0 <HAL_GPIO_DeInit+0x1e8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d037      	beq.n	800398a <HAL_GPIO_DeInit+0xd2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a61      	ldr	r2, [pc, #388]	; (8003aa4 <HAL_GPIO_DeInit+0x1ec>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d031      	beq.n	8003986 <HAL_GPIO_DeInit+0xce>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a60      	ldr	r2, [pc, #384]	; (8003aa8 <HAL_GPIO_DeInit+0x1f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02b      	beq.n	8003982 <HAL_GPIO_DeInit+0xca>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a5f      	ldr	r2, [pc, #380]	; (8003aac <HAL_GPIO_DeInit+0x1f4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d025      	beq.n	800397e <HAL_GPIO_DeInit+0xc6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a5e      	ldr	r2, [pc, #376]	; (8003ab0 <HAL_GPIO_DeInit+0x1f8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_GPIO_DeInit+0xc2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a5d      	ldr	r2, [pc, #372]	; (8003ab4 <HAL_GPIO_DeInit+0x1fc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d019      	beq.n	8003976 <HAL_GPIO_DeInit+0xbe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a5c      	ldr	r2, [pc, #368]	; (8003ab8 <HAL_GPIO_DeInit+0x200>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_GPIO_DeInit+0xba>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a5b      	ldr	r2, [pc, #364]	; (8003abc <HAL_GPIO_DeInit+0x204>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00d      	beq.n	800396e <HAL_GPIO_DeInit+0xb6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a5a      	ldr	r2, [pc, #360]	; (8003ac0 <HAL_GPIO_DeInit+0x208>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <HAL_GPIO_DeInit+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a59      	ldr	r2, [pc, #356]	; (8003ac4 <HAL_GPIO_DeInit+0x20c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_GPIO_DeInit+0xae>
 8003962:	2309      	movs	r3, #9
 8003964:	e012      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 8003966:	230a      	movs	r3, #10
 8003968:	e010      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 800396a:	2308      	movs	r3, #8
 800396c:	e00e      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 800396e:	2307      	movs	r3, #7
 8003970:	e00c      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 8003972:	2306      	movs	r3, #6
 8003974:	e00a      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 8003976:	2305      	movs	r3, #5
 8003978:	e008      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 800397a:	2304      	movs	r3, #4
 800397c:	e006      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 800397e:	2303      	movs	r3, #3
 8003980:	e004      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 8003982:	2302      	movs	r3, #2
 8003984:	e002      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_GPIO_DeInit+0xd4>
 800398a:	2300      	movs	r3, #0
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	f002 0203 	and.w	r2, r2, #3
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	4093      	lsls	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d132      	bne.n	8003a02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	220f      	movs	r2, #15
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80039ac:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <HAL_GPIO_DeInit+0x1e4>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	4837      	ldr	r0, [pc, #220]	; (8003a9c <HAL_GPIO_DeInit+0x1e4>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	400a      	ands	r2, r1
 80039c4:	3302      	adds	r3, #2
 80039c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	493d      	ldr	r1, [pc, #244]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80039d8:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	4939      	ldr	r1, [pc, #228]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	4936      	ldr	r1, [pc, #216]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80039f4:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	4932      	ldr	r1, [pc, #200]	; (8003ac8 <HAL_GPIO_DeInit+0x210>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	08da      	lsrs	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3208      	adds	r2, #8
 8003a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	08d2      	lsrs	r2, r2, #3
 8003a38:	4019      	ands	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	401a      	ands	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2103      	movs	r1, #3
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	401a      	ands	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3301      	adds	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	f67f af22 	bls.w	80038d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020c00 	.word	0x40020c00
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40021400 	.word	0x40021400
 8003ab8:	40021800 	.word	0x40021800
 8003abc:	40021c00 	.word	0x40021c00
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	40022400 	.word	0x40022400
 8003ac8:	40013c00 	.word	0x40013c00

08003acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e001      	b.n	8003aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b18:	e003      	b.n	8003b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b30:	b08f      	sub	sp, #60	; 0x3c
 8003b32:	af0a      	add	r7, sp, #40	; 0x28
 8003b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e054      	b.n	8003bea <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f00d f9ca 	bl	8010ef4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f006 f948 	bl	8009e14 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	687e      	ldr	r6, [r7, #4]
 8003b8c:	466d      	mov	r5, sp
 8003b8e:	f106 0410 	add.w	r4, r6, #16
 8003b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba2:	1d33      	adds	r3, r6, #4
 8003ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f006 f8c2 	bl	8009d30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f006 f93f 	bl	8009e36 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	687e      	ldr	r6, [r7, #4]
 8003bc0:	466d      	mov	r5, sp
 8003bc2:	f106 0410 	add.w	r4, r6, #16
 8003bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bd6:	1d33      	adds	r3, r6, #4
 8003bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bda:	6838      	ldr	r0, [r7, #0]
 8003bdc:	f006 fa52 	bl	800a084 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bf2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003bf2:	b590      	push	{r4, r7, lr}
 8003bf4:	b089      	sub	sp, #36	; 0x24
 8003bf6:	af04      	add	r7, sp, #16
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4603      	mov	r3, r0
 8003c02:	70fb      	strb	r3, [r7, #3]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70bb      	strb	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_HCD_HC_Init+0x28>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e07f      	b.n	8003d1a <HAL_HCD_HC_Init+0x128>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	440b      	add	r3, r1
 8003c30:	333d      	adds	r3, #61	; 0x3d
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	440b      	add	r3, r1
 8003c44:	3338      	adds	r3, #56	; 0x38
 8003c46:	787a      	ldrb	r2, [r7, #1]
 8003c48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	440b      	add	r3, r1
 8003c58:	3340      	adds	r3, #64	; 0x40
 8003c5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c5c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3339      	adds	r3, #57	; 0x39
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	333f      	adds	r3, #63	; 0x3f
 8003c82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	78bb      	ldrb	r3, [r7, #2]
 8003c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c90:	b2d8      	uxtb	r0, r3
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	333a      	adds	r3, #58	; 0x3a
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	da0a      	bge.n	8003cc2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	333b      	adds	r3, #59	; 0x3b
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e009      	b.n	8003cd6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	333b      	adds	r3, #59	; 0x3b
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	333c      	adds	r3, #60	; 0x3c
 8003ce6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003cea:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	787c      	ldrb	r4, [r7, #1]
 8003cf2:	78ba      	ldrb	r2, [r7, #2]
 8003cf4:	78f9      	ldrb	r1, [r7, #3]
 8003cf6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cf8:	9302      	str	r3, [sp, #8]
 8003cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4623      	mov	r3, r4
 8003d08:	f006 fb32 	bl	800a370 <USB_HC_Init>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}

08003d22 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_HCD_HC_Halt+0x1e>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e00f      	b.n	8003d60 <HAL_HCD_HC_Halt+0x3e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f006 fd6c 	bl	800a82e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	70fb      	strb	r3, [r7, #3]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70bb      	strb	r3, [r7, #2]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8003d82:	78fa      	ldrb	r2, [r7, #3]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	333b      	adds	r3, #59	; 0x3b
 8003d92:	78ba      	ldrb	r2, [r7, #2]
 8003d94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	333f      	adds	r3, #63	; 0x3f
 8003da6:	787a      	ldrb	r2, [r7, #1]
 8003da8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003daa:	7c3b      	ldrb	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3342      	adds	r3, #66	; 0x42
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	e009      	b.n	8003dda <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3342      	adds	r3, #66	; 0x42
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003dda:	787b      	ldrb	r3, [r7, #1]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	f200 80d6 	bhi.w	8003f8e <HAL_HCD_HC_SubmitRequest+0x226>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <HAL_HCD_HC_SubmitRequest+0x80>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003f79 	.word	0x08003f79
 8003df0:	08003e65 	.word	0x08003e65
 8003df4:	08003eef 	.word	0x08003eef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003df8:	7c3b      	ldrb	r3, [r7, #16]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	f040 80c9 	bne.w	8003f92 <HAL_HCD_HC_SubmitRequest+0x22a>
 8003e00:	78bb      	ldrb	r3, [r7, #2]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 80c5 	bne.w	8003f92 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8003e08:	8b3b      	ldrh	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3351      	adds	r3, #81	; 0x51
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	440b      	add	r3, r1
 8003e30:	3351      	adds	r3, #81	; 0x51
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	3342      	adds	r3, #66	; 0x42
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e4c:	e0a1      	b.n	8003f92 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3342      	adds	r3, #66	; 0x42
 8003e5e:	2202      	movs	r2, #2
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	e096      	b.n	8003f92 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003e64:	78bb      	ldrb	r3, [r7, #2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d120      	bne.n	8003eac <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	3351      	adds	r3, #81	; 0x51
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3342      	adds	r3, #66	; 0x42
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003e94:	e07e      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3342      	adds	r3, #66	; 0x42
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
      break;
 8003eaa:	e073      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	440b      	add	r3, r1
 8003eba:	3350      	adds	r3, #80	; 0x50
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	3342      	adds	r3, #66	; 0x42
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
      break;
 8003ed6:	e05d      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	3342      	adds	r3, #66	; 0x42
 8003ee8:	2202      	movs	r2, #2
 8003eea:	701a      	strb	r2, [r3, #0]
      break;
 8003eec:	e052      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003eee:	78bb      	ldrb	r3, [r7, #2]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d120      	bne.n	8003f36 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	3351      	adds	r3, #81	; 0x51
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	3342      	adds	r3, #66	; 0x42
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f1e:	e039      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	440b      	add	r3, r1
 8003f2e:	3342      	adds	r3, #66	; 0x42
 8003f30:	2202      	movs	r2, #2
 8003f32:	701a      	strb	r2, [r3, #0]
      break;
 8003f34:	e02e      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	440b      	add	r3, r1
 8003f44:	3350      	adds	r3, #80	; 0x50
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	440b      	add	r3, r1
 8003f5a:	3342      	adds	r3, #66	; 0x42
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
      break;
 8003f60:	e018      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	3342      	adds	r3, #66	; 0x42
 8003f72:	2202      	movs	r2, #2
 8003f74:	701a      	strb	r2, [r3, #0]
      break;
 8003f76:	e00d      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	440b      	add	r3, r1
 8003f86:	3342      	adds	r3, #66	; 0x42
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003f92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3344      	adds	r3, #68	; 0x44
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	8b39      	ldrh	r1, [r7, #24]
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4403      	add	r3, r0
 8003fb8:	3348      	adds	r3, #72	; 0x48
 8003fba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	335c      	adds	r3, #92	; 0x5c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	440b      	add	r3, r1
 8003fde:	334c      	adds	r3, #76	; 0x4c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3339      	adds	r3, #57	; 0x39
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	440b      	add	r3, r1
 8004006:	335d      	adds	r3, #93	; 0x5d
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	3338      	adds	r3, #56	; 0x38
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	18d1      	adds	r1, r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	461a      	mov	r2, r3
 8004028:	f006 faac 	bl	800a584 <USB_HC_StartXfer>
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop

08004038 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f005 ffd5 	bl	8009ffe <USB_GetMode>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	f040 80f1 	bne.w	800423e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f005 ffb9 	bl	8009fd8 <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80e7 	beq.w	800423c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f005 ffb0 	bl	8009fd8 <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004082:	d104      	bne.n	800408e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800408c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f005 ffa0 	bl	8009fd8 <USB_ReadInterrupts>
 8004098:	4603      	mov	r3, r0
 800409a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a2:	d104      	bne.n	80040ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f005 ff90 	bl	8009fd8 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040c2:	d104      	bne.n	80040ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f005 ff80 	bl	8009fd8 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d103      	bne.n	80040ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f005 ff72 	bl	8009fd8 <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fe:	d117      	bne.n	8004130 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800410e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004112:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f00c ff6b 	bl	8010ff0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f006 f85f 	bl	800a1e4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800412e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f005 ff4f 	bl	8009fd8 <USB_ReadInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004144:	d102      	bne.n	800414c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 f8c8 	bl	80052dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f005 ff41 	bl	8009fd8 <USB_ReadInterrupts>
 8004156:	4603      	mov	r3, r0
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b08      	cmp	r3, #8
 800415e:	d106      	bne.n	800416e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f00c ff29 	bl	8010fb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2208      	movs	r2, #8
 800416c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f005 ff30 	bl	8009fd8 <USB_ReadInterrupts>
 8004178:	4603      	mov	r3, r0
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004182:	d138      	bne.n	80041f6 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f006 fb3f 	bl	800a80c <USB_HC_ReadInterrupt>
 800418e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e025      	b.n	80041e2 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d106      	bne.n	80041d0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8cf 	bl	800436c <HCD_HC_IN_IRQHandler>
 80041ce:	e005      	b.n	80041dc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fc5f 	bl	8004a9a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3301      	adds	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d3d4      	bcc.n	8004196 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f005 feec 	bl	8009fd8 <USB_ReadInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d101      	bne.n	800420e <HAL_HCD_IRQHandler+0x1d6>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_HCD_IRQHandler+0x1d8>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d014      	beq.n	800423e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0210 	bic.w	r2, r2, #16
 8004222:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 ffad 	bl	8005184 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0210 	orr.w	r2, r2, #16
 8004238:	619a      	str	r2, [r3, #24]
 800423a:	e000      	b.n	800423e <HAL_HCD_IRQHandler+0x206>
      return;
 800423c:	bf00      	nop
    }
  }
}
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_HCD_Start+0x16>
 8004256:	2302      	movs	r3, #2
 8004258:	e013      	b.n	8004282 <HAL_HCD_Start+0x3e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f005 fdc3 	bl	8009df2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f006 f81a 	bl	800a2ac <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_HCD_Stop+0x16>
 800429c:	2302      	movs	r3, #2
 800429e:	e00d      	b.n	80042bc <HAL_HCD_Stop+0x32>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f006 fbf9 	bl	800aaa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f005 ffc1 	bl	800a258 <USB_ResetPort>
 80042d6:	4603      	mov	r3, r0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	440b      	add	r3, r1
 80042fa:	335c      	adds	r3, #92	; 0x5c
 80042fc:	781b      	ldrb	r3, [r3, #0]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	334c      	adds	r3, #76	; 0x4c
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f006 f803 	bl	800a34c <USB_GetCurrentFrame>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f005 ffde 	bl	800a31e <USB_GetHostSpeed>
 8004362:	4603      	mov	r3, r0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d119      	bne.n	80043d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	461a      	mov	r2, r3
 80043aa:	2304      	movs	r3, #4
 80043ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	60d3      	str	r3, [r2, #12]
 80043ce:	e095      	b.n	80044fc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d109      	bne.n	80043fa <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f2:	461a      	mov	r2, r3
 80043f4:	2320      	movs	r3, #32
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	e080      	b.n	80044fc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b08      	cmp	r3, #8
 800440e:	d134      	bne.n	800447a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	440a      	add	r2, r1
 8004426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	335d      	adds	r3, #93	; 0x5d
 8004440:	2205      	movs	r2, #5
 8004442:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	461a      	mov	r2, r3
 8004452:	2310      	movs	r3, #16
 8004454:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	2308      	movs	r3, #8
 8004466:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f006 f9db 	bl	800a82e <USB_HC_Halt>
 8004478:	e040      	b.n	80044fc <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	d134      	bne.n	80044fc <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f006 f9b6 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	461a      	mov	r2, r3
 80044d0:	2310      	movs	r3, #16
 80044d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	335d      	adds	r3, #93	; 0x5d
 80044e4:	2208      	movs	r2, #8
 80044e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044fa:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004512:	d122      	bne.n	800455a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	440a      	add	r2, r1
 800452a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f006 f975 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004556:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004558:	e29b      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 80c1 	bne.w	80046f4 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	440b      	add	r3, r1
 8004588:	3348      	adds	r3, #72	; 0x48
 800458a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	0159      	lsls	r1, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	440b      	add	r3, r1
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800459e:	1ad1      	subs	r1, r2, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4403      	add	r3, r0
 80045ae:	334c      	adds	r3, #76	; 0x4c
 80045b0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	440b      	add	r3, r1
 80045c0:	335d      	adds	r3, #93	; 0x5d
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	440b      	add	r3, r1
 80045d4:	3358      	adds	r3, #88	; 0x58
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e6:	461a      	mov	r2, r3
 80045e8:	2301      	movs	r3, #1
 80045ea:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	333f      	adds	r3, #63	; 0x3f
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	333f      	adds	r3, #63	; 0x3f
 8004612:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004614:	2b02      	cmp	r3, #2
 8004616:	d121      	bne.n	800465c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	440a      	add	r2, r1
 800462e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004632:	f043 0302 	orr.w	r3, r3, #2
 8004636:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f006 f8f3 	bl	800a82e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4413      	add	r3, r2
 8004650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004654:	461a      	mov	r2, r3
 8004656:	2310      	movs	r3, #16
 8004658:	6093      	str	r3, [r2, #8]
 800465a:	e034      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	440b      	add	r3, r1
 800466a:	333f      	adds	r3, #63	; 0x3f
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d129      	bne.n	80046c6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4413      	add	r3, r2
 800467a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	440a      	add	r2, r1
 8004688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800468c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004690:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	440b      	add	r3, r1
 80046a0:	335c      	adds	r3, #92	; 0x5c
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	b2d8      	uxtb	r0, r3
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	440b      	add	r3, r1
 80046b8:	335c      	adds	r3, #92	; 0x5c
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	4601      	mov	r1, r0
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f00c fca3 	bl	801100c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	3350      	adds	r3, #80	; 0x50
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f083 0301 	eor.w	r3, r3, #1
 80046dc:	b2d8      	uxtb	r0, r3
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	3350      	adds	r3, #80	; 0x50
 80046ee:	4602      	mov	r2, r0
 80046f0:	701a      	strb	r2, [r3, #0]
}
 80046f2:	e1ce      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	f040 80f1 	bne.w	80048ee <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	440a      	add	r2, r1
 8004722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004726:	f023 0302 	bic.w	r3, r3, #2
 800472a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	335d      	adds	r3, #93	; 0x5d
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10a      	bne.n	8004758 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	335c      	adds	r3, #92	; 0x5c
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e0b0      	b.n	80048ba <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	440b      	add	r3, r1
 8004766:	335d      	adds	r3, #93	; 0x5d
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b05      	cmp	r3, #5
 800476c:	d10a      	bne.n	8004784 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	440b      	add	r3, r1
 800477c:	335c      	adds	r3, #92	; 0x5c
 800477e:	2205      	movs	r2, #5
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e09a      	b.n	80048ba <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	440b      	add	r3, r1
 8004792:	335d      	adds	r3, #93	; 0x5d
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b06      	cmp	r3, #6
 8004798:	d00a      	beq.n	80047b0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	440b      	add	r3, r1
 80047a8:	335d      	adds	r3, #93	; 0x5d
 80047aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d156      	bne.n	800485e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	440b      	add	r3, r1
 80047be:	3358      	adds	r3, #88	; 0x58
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4403      	add	r3, r0
 80047d2:	3358      	adds	r3, #88	; 0x58
 80047d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	3358      	adds	r3, #88	; 0x58
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d914      	bls.n	8004816 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	3358      	adds	r3, #88	; 0x58
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	440b      	add	r3, r1
 800480e:	335c      	adds	r3, #92	; 0x5c
 8004810:	2204      	movs	r2, #4
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e009      	b.n	800482a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	440b      	add	r3, r1
 8004824:	335c      	adds	r3, #92	; 0x5c
 8004826:	2202      	movs	r2, #2
 8004828:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004840:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004848:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4413      	add	r3, r2
 8004852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e02d      	b.n	80048ba <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	335d      	adds	r3, #93	; 0x5d
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d122      	bne.n	80048ba <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	440b      	add	r3, r1
 8004882:	335c      	adds	r3, #92	; 0x5c
 8004884:	2202      	movs	r2, #2
 8004886:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800489e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c6:	461a      	mov	r2, r3
 80048c8:	2302      	movs	r3, #2
 80048ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	b2d8      	uxtb	r0, r3
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	440b      	add	r3, r1
 80048de:	335c      	adds	r3, #92	; 0x5c
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	4601      	mov	r1, r0
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f00c fb90 	bl	801100c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048ec:	e0d1      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d13e      	bne.n	8004982 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	440a      	add	r2, r1
 800491a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491e:	f043 0302 	orr.w	r3, r3, #2
 8004922:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	440b      	add	r3, r1
 8004932:	3358      	adds	r3, #88	; 0x58
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1c59      	adds	r1, r3, #1
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4403      	add	r3, r0
 8004946:	3358      	adds	r3, #88	; 0x58
 8004948:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	335d      	adds	r3, #93	; 0x5d
 800495a:	2206      	movs	r2, #6
 800495c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	4611      	mov	r1, r2
 8004968:	4618      	mov	r0, r3
 800496a:	f005 ff60 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	461a      	mov	r2, r3
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	6093      	str	r3, [r2, #8]
}
 8004980:	e087      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b10      	cmp	r3, #16
 8004996:	d17c      	bne.n	8004a92 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	333f      	adds	r3, #63	; 0x3f
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d122      	bne.n	80049f4 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	3358      	adds	r3, #88	; 0x58
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f005 ff1e 	bl	800a82e <USB_HC_Halt>
 80049f2:	e045      	b.n	8004a80 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	333f      	adds	r3, #63	; 0x3f
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	333f      	adds	r3, #63	; 0x3f
 8004a1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d12f      	bne.n	8004a80 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3358      	adds	r3, #88	; 0x58
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d121      	bne.n	8004a80 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	440b      	add	r3, r1
 8004a4a:	335d      	adds	r3, #93	; 0x5d
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a6a:	f043 0302 	orr.w	r3, r3, #2
 8004a6e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f005 fed7 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2310      	movs	r3, #16
 8004a90:	6093      	str	r3, [r2, #8]
}
 8004a92:	bf00      	nop
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d119      	bne.n	8004afe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2304      	movs	r3, #4
 8004ada:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	0151      	lsls	r1, r2, #5
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	440a      	add	r2, r1
 8004af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004af6:	f043 0302 	orr.w	r3, r3, #2
 8004afa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004afc:	e33e      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d141      	bne.n	8004b98 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	2320      	movs	r3, #32
 8004b24:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	440b      	add	r3, r1
 8004b34:	333d      	adds	r3, #61	; 0x3d
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	f040 831f 	bne.w	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	440b      	add	r3, r1
 8004b4c:	333d      	adds	r3, #61	; 0x3d
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	440b      	add	r3, r1
 8004b60:	335c      	adds	r3, #92	; 0x5c
 8004b62:	2202      	movs	r2, #2
 8004b64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	0151      	lsls	r1, r2, #5
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	440a      	add	r2, r1
 8004b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f005 fe4c 	bl	800a82e <USB_HC_Halt>
}
 8004b96:	e2f1      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d13f      	bne.n	8004c2e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	440b      	add	r3, r1
 8004bbc:	335d      	adds	r3, #93	; 0x5d
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	440b      	add	r3, r1
 8004bd0:	333d      	adds	r3, #61	; 0x3d
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	440b      	add	r3, r1
 8004be4:	3358      	adds	r3, #88	; 0x58
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c04:	f043 0302 	orr.w	r3, r3, #2
 8004c08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f005 fe0a 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	461a      	mov	r2, r3
 8004c28:	2340      	movs	r3, #64	; 0x40
 8004c2a:	6093      	str	r3, [r2, #8]
}
 8004c2c:	e2a6      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d122      	bne.n	8004c8c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f005 fddc 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c82:	461a      	mov	r2, r3
 8004c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c88:	6093      	str	r3, [r2, #8]
}
 8004c8a:	e277      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d135      	bne.n	8004d0e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	440b      	add	r3, r1
 8004cb0:	3358      	adds	r3, #88	; 0x58
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f005 fda4 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	335d      	adds	r3, #93	; 0x5d
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
}
 8004d0c:	e236      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d12b      	bne.n	8004d7c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	2308      	movs	r3, #8
 8004d34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f005 fd64 	bl	800a82e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	440b      	add	r3, r1
 8004d74:	335d      	adds	r3, #93	; 0x5d
 8004d76:	2205      	movs	r2, #5
 8004d78:	701a      	strb	r2, [r3, #0]
}
 8004d7a:	e1ff      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d155      	bne.n	8004e3e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	440b      	add	r3, r1
 8004da0:	3358      	adds	r3, #88	; 0x58
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	440b      	add	r3, r1
 8004db4:	335d      	adds	r3, #93	; 0x5d
 8004db6:	2203      	movs	r2, #3
 8004db8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	440b      	add	r3, r1
 8004dc8:	333d      	adds	r3, #61	; 0x3d
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d114      	bne.n	8004dfa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	440b      	add	r3, r1
 8004dde:	333c      	adds	r3, #60	; 0x3c
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	440b      	add	r3, r1
 8004df4:	333d      	adds	r3, #61	; 0x3d
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	4611      	mov	r1, r2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f005 fd02 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	461a      	mov	r2, r3
 8004e38:	2310      	movs	r3, #16
 8004e3a:	6093      	str	r3, [r2, #8]
}
 8004e3c:	e19e      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d12b      	bne.n	8004eac <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6e:	f043 0302 	orr.w	r3, r3, #2
 8004e72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fcd5 	bl	800a82e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	335d      	adds	r3, #93	; 0x5d
 8004e94:	2206      	movs	r2, #6
 8004e96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	6093      	str	r3, [r2, #8]
}
 8004eaa:	e167      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d135      	bne.n	8004f30 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ede:	f043 0302 	orr.w	r3, r3, #2
 8004ee2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f005 fc9d 	bl	800a82e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	461a      	mov	r2, r3
 8004f02:	2310      	movs	r3, #16
 8004f04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	461a      	mov	r2, r3
 8004f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	335d      	adds	r3, #93	; 0x5d
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	701a      	strb	r2, [r3, #0]
}
 8004f2e:	e125      	b.n	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	f040 811a 	bne.w	800517c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f62:	f023 0302 	bic.w	r3, r3, #2
 8004f66:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	335d      	adds	r3, #93	; 0x5d
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d137      	bne.n	8004fee <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	335c      	adds	r3, #92	; 0x5c
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	440b      	add	r3, r1
 8004fa0:	333f      	adds	r3, #63	; 0x3f
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d00b      	beq.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	440b      	add	r3, r1
 8004fb6:	333f      	adds	r3, #63	; 0x3f
 8004fb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	f040 80c5 	bne.w	800514a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	440b      	add	r3, r1
 8004fce:	3351      	adds	r3, #81	; 0x51
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	f083 0301 	eor.w	r3, r3, #1
 8004fd6:	b2d8      	uxtb	r0, r3
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3351      	adds	r3, #81	; 0x51
 8004fe8:	4602      	mov	r2, r0
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e0ad      	b.n	800514a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	440b      	add	r3, r1
 8004ffc:	335d      	adds	r3, #93	; 0x5d
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d10a      	bne.n	800501a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	440b      	add	r3, r1
 8005012:	335c      	adds	r3, #92	; 0x5c
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e097      	b.n	800514a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	335d      	adds	r3, #93	; 0x5d
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d10a      	bne.n	8005046 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	335c      	adds	r3, #92	; 0x5c
 8005040:	2202      	movs	r2, #2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e081      	b.n	800514a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	335d      	adds	r3, #93	; 0x5d
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b05      	cmp	r3, #5
 800505a:	d10a      	bne.n	8005072 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	440b      	add	r3, r1
 800506a:	335c      	adds	r3, #92	; 0x5c
 800506c:	2205      	movs	r2, #5
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	e06b      	b.n	800514a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	440b      	add	r3, r1
 8005080:	335d      	adds	r3, #93	; 0x5d
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d00a      	beq.n	800509e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	335d      	adds	r3, #93	; 0x5d
 8005098:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800509a:	2b08      	cmp	r3, #8
 800509c:	d155      	bne.n	800514a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	440b      	add	r3, r1
 80050ac:	3358      	adds	r3, #88	; 0x58
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1c59      	adds	r1, r3, #1
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4403      	add	r3, r0
 80050c0:	3358      	adds	r3, #88	; 0x58
 80050c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	3358      	adds	r3, #88	; 0x58
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d914      	bls.n	8005104 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	440b      	add	r3, r1
 80050e8:	3358      	adds	r3, #88	; 0x58
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	335c      	adds	r3, #92	; 0x5c
 80050fe:	2204      	movs	r2, #4
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e009      	b.n	8005118 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	440b      	add	r3, r1
 8005112:	335c      	adds	r3, #92	; 0x5c
 8005114:	2202      	movs	r2, #2
 8005116:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800512e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005136:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	461a      	mov	r2, r3
 8005158:	2302      	movs	r3, #2
 800515a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	b2d8      	uxtb	r0, r3
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	440b      	add	r3, r1
 800516e:	335c      	adds	r3, #92	; 0x5c
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4601      	mov	r1, r0
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f00b ff48 	bl	801100c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800517c:	bf00      	nop
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	0c5b      	lsrs	r3, r3, #17
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d003      	beq.n	80051c8 <HCD_RXQLVL_IRQHandler+0x44>
 80051c0:	2b05      	cmp	r3, #5
 80051c2:	f000 8082 	beq.w	80052ca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80051c6:	e083      	b.n	80052d0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d07f      	beq.n	80052ce <HCD_RXQLVL_IRQHandler+0x14a>
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3344      	adds	r3, #68	; 0x44
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d074      	beq.n	80052ce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	3344      	adds	r3, #68	; 0x44
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	b292      	uxth	r2, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	f004 fec1 	bl	8009f86 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	3344      	adds	r3, #68	; 0x44
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	18d1      	adds	r1, r2, r3
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4403      	add	r3, r0
 8005228:	3344      	adds	r3, #68	; 0x44
 800522a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	334c      	adds	r3, #76	; 0x4c
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	18d1      	adds	r1, r2, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4403      	add	r3, r0
 8005250:	334c      	adds	r3, #76	; 0x4c
 8005252:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HCD_RXQLVL_IRQHandler+0x154>)
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d031      	beq.n	80052ce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005280:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005288:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	461a      	mov	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	3350      	adds	r3, #80	; 0x50
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f083 0301 	eor.w	r3, r3, #1
 80052b2:	b2d8      	uxtb	r0, r3
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3350      	adds	r3, #80	; 0x50
 80052c4:	4602      	mov	r2, r0
 80052c6:	701a      	strb	r2, [r3, #0]
      break;
 80052c8:	e001      	b.n	80052ce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80052ce:	bf00      	nop
  }
}
 80052d0:	bf00      	nop
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	1ff80000 	.word	0x1ff80000

080052dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005308:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d113      	bne.n	800533c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d10a      	bne.n	8005334 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800532c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f00b fe50 	bl	8010fd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f043 0302 	orr.w	r3, r3, #2
 800533a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b08      	cmp	r3, #8
 8005344:	d147      	bne.n	80053d6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f043 0308 	orr.w	r3, r3, #8
 800534c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d129      	bne.n	80053ac <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d113      	bne.n	8005388 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005366:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800536a:	d106      	bne.n	800537a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2102      	movs	r1, #2
 8005372:	4618      	mov	r0, r3
 8005374:	f004 ff36 	bl	800a1e4 <USB_InitFSLSPClkSel>
 8005378:	e011      	b.n	800539e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f004 ff2f 	bl	800a1e4 <USB_InitFSLSPClkSel>
 8005386:	e00a      	b.n	800539e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005396:	461a      	mov	r2, r3
 8005398:	f64e 2360 	movw	r3, #60000	; 0xea60
 800539c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f00b fe46 	bl	8011030 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f00b fe15 	bl	8010fd4 <HAL_HCD_Connect_Callback>
 80053aa:	e014      	b.n	80053d6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f00b fe4d 	bl	801104c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053c4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d103      	bne.n	80053e8 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053ee:	461a      	mov	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e10f      	b.n	800562e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f00b f8d0 	bl	80105c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2224      	movs	r2, #36	; 0x24
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005440:	f000 ffa2 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8005444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4a7b      	ldr	r2, [pc, #492]	; (8005638 <HAL_I2C_Init+0x23c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d807      	bhi.n	8005460 <HAL_I2C_Init+0x64>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a7a      	ldr	r2, [pc, #488]	; (800563c <HAL_I2C_Init+0x240>)
 8005454:	4293      	cmp	r3, r2
 8005456:	bf94      	ite	ls
 8005458:	2301      	movls	r3, #1
 800545a:	2300      	movhi	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e006      	b.n	800546e <HAL_I2C_Init+0x72>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a77      	ldr	r2, [pc, #476]	; (8005640 <HAL_I2C_Init+0x244>)
 8005464:	4293      	cmp	r3, r2
 8005466:	bf94      	ite	ls
 8005468:	2301      	movls	r3, #1
 800546a:	2300      	movhi	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e0db      	b.n	800562e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a72      	ldr	r2, [pc, #456]	; (8005644 <HAL_I2C_Init+0x248>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	0c9b      	lsrs	r3, r3, #18
 8005480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4a64      	ldr	r2, [pc, #400]	; (8005638 <HAL_I2C_Init+0x23c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d802      	bhi.n	80054b0 <HAL_I2C_Init+0xb4>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	3301      	adds	r3, #1
 80054ae:	e009      	b.n	80054c4 <HAL_I2C_Init+0xc8>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	4a63      	ldr	r2, [pc, #396]	; (8005648 <HAL_I2C_Init+0x24c>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	3301      	adds	r3, #1
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	430b      	orrs	r3, r1
 80054ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4956      	ldr	r1, [pc, #344]	; (8005638 <HAL_I2C_Init+0x23c>)
 80054e0:	428b      	cmp	r3, r1
 80054e2:	d80d      	bhi.n	8005500 <HAL_I2C_Init+0x104>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1e59      	subs	r1, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80054f2:	3301      	adds	r3, #1
 80054f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	bf38      	it	cc
 80054fc:	2304      	movcc	r3, #4
 80054fe:	e04f      	b.n	80055a0 <HAL_I2C_Init+0x1a4>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d111      	bne.n	800552c <HAL_I2C_Init+0x130>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	1e58      	subs	r0, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6859      	ldr	r1, [r3, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	440b      	add	r3, r1
 8005516:	fbb0 f3f3 	udiv	r3, r0, r3
 800551a:	3301      	adds	r3, #1
 800551c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	e012      	b.n	8005552 <HAL_I2C_Init+0x156>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1e58      	subs	r0, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6859      	ldr	r1, [r3, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	0099      	lsls	r1, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005542:	3301      	adds	r3, #1
 8005544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_I2C_Init+0x15e>
 8005556:	2301      	movs	r3, #1
 8005558:	e022      	b.n	80055a0 <HAL_I2C_Init+0x1a4>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10e      	bne.n	8005580 <HAL_I2C_Init+0x184>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1e58      	subs	r0, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	440b      	add	r3, r1
 8005570:	fbb0 f3f3 	udiv	r3, r0, r3
 8005574:	3301      	adds	r3, #1
 8005576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800557e:	e00f      	b.n	80055a0 <HAL_I2C_Init+0x1a4>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e58      	subs	r0, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	0099      	lsls	r1, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	fbb0 f3f3 	udiv	r3, r0, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	6809      	ldr	r1, [r1, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69da      	ldr	r2, [r3, #28]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6911      	ldr	r1, [r2, #16]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68d2      	ldr	r2, [r2, #12]
 80055da:	4311      	orrs	r1, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	000186a0 	.word	0x000186a0
 800563c:	001e847f 	.word	0x001e847f
 8005640:	003d08ff 	.word	0x003d08ff
 8005644:	431bde83 	.word	0x431bde83
 8005648:	10624dd3 	.word	0x10624dd3

0800564c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e0bf      	b.n	80057de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f00b f826 	bl	80106c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800568e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b4a      	ldr	r3, [pc, #296]	; (80057e8 <HAL_LTDC_Init+0x19c>)
 80056c0:	400b      	ands	r3, r1
 80056c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6899      	ldr	r1, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68d9      	ldr	r1, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b3e      	ldr	r3, [pc, #248]	; (80057e8 <HAL_LTDC_Init+0x19c>)
 80056ee:	400b      	ands	r3, r1
 80056f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68d9      	ldr	r1, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1a      	ldr	r2, [r3, #32]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6919      	ldr	r1, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <HAL_LTDC_Init+0x19c>)
 800571c:	400b      	ands	r3, r1
 800571e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6919      	ldr	r1, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6959      	ldr	r1, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <HAL_LTDC_Init+0x19c>)
 800574a:	400b      	ands	r3, r1
 800574c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6959      	ldr	r1, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0206 	orr.w	r2, r2, #6
 80057ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	f000f800 	.word	0xf000f800

080057ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d023      	beq.n	8005856 <HAL_LTDC_IRQHandler+0x6a>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01e      	beq.n	8005856 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2204      	movs	r2, #4
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005836:	f043 0201 	orr.w	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2204      	movs	r2, #4
 8005844:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f86f 	bl	8005934 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d023      	beq.n	80058a8 <HAL_LTDC_IRQHandler+0xbc>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01e      	beq.n	80058a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0202 	bic.w	r2, r2, #2
 8005878:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2202      	movs	r2, #2
 8005880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005888:	f043 0202 	orr.w	r2, r3, #2
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2204      	movs	r2, #4
 8005896:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f846 	bl	8005934 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01b      	beq.n	80058ea <HAL_LTDC_IRQHandler+0xfe>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d016      	beq.n	80058ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2201      	movs	r2, #1
 80058d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f82f 	bl	8005948 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01b      	beq.n	800592c <HAL_LTDC_IRQHandler+0x140>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0208 	bic.w	r2, r2, #8
 800590c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2208      	movs	r2, #8
 8005914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f818 	bl	800595c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_LTDC_ConfigLayer+0x1a>
 8005986:	2302      	movs	r3, #2
 8005988:	e02c      	b.n	80059e4 <HAL_LTDC_ConfigLayer+0x74>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2134      	movs	r1, #52	; 0x34
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4614      	mov	r4, r2
 80059ae:	461d      	mov	r5, r3
 80059b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f811 	bl	80059ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bdb0      	pop	{r4, r5, r7, pc}

080059ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b089      	sub	sp, #36	; 0x24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	4413      	add	r3, r2
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	01db      	lsls	r3, r3, #7
 8005a18:	4413      	add	r3, r2
 8005a1a:	3384      	adds	r3, #132	; 0x84
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	4611      	mov	r1, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	01d2      	lsls	r2, r2, #7
 8005a28:	440a      	add	r2, r1
 8005a2a:	3284      	adds	r2, #132	; 0x84
 8005a2c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a30:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a42:	4413      	add	r3, r2
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	01db      	lsls	r3, r3, #7
 8005a50:	440b      	add	r3, r1
 8005a52:	3384      	adds	r3, #132	; 0x84
 8005a54:	4619      	mov	r1, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a6a:	4413      	add	r3, r2
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	01db      	lsls	r3, r3, #7
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3384      	adds	r3, #132	; 0x84
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	4611      	mov	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	01d2      	lsls	r2, r2, #7
 8005a8a:	440a      	add	r2, r1
 8005a8c:	3284      	adds	r2, #132	; 0x84
 8005a8e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a92:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aa2:	4413      	add	r3, r2
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	01db      	lsls	r3, r3, #7
 8005ab0:	440b      	add	r3, r1
 8005ab2:	3384      	adds	r3, #132	; 0x84
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	01db      	lsls	r3, r3, #7
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3384      	adds	r3, #132	; 0x84
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	01d2      	lsls	r2, r2, #7
 8005ad6:	440a      	add	r2, r1
 8005ad8:	3284      	adds	r2, #132	; 0x84
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	01db      	lsls	r3, r3, #7
 8005aea:	4413      	add	r3, r2
 8005aec:	3384      	adds	r3, #132	; 0x84
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	01db      	lsls	r3, r3, #7
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3384      	adds	r3, #132	; 0x84
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	01db      	lsls	r3, r3, #7
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3384      	adds	r3, #132	; 0x84
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	01db      	lsls	r3, r3, #7
 8005b50:	440b      	add	r3, r1
 8005b52:	3384      	adds	r3, #132	; 0x84
 8005b54:	4619      	mov	r1, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	01db      	lsls	r3, r3, #7
 8005b66:	4413      	add	r3, r2
 8005b68:	3384      	adds	r3, #132	; 0x84
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	4611      	mov	r1, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	01d2      	lsls	r2, r2, #7
 8005b76:	440a      	add	r2, r1
 8005b78:	3284      	adds	r2, #132	; 0x84
 8005b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b7e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	01db      	lsls	r3, r3, #7
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3384      	adds	r3, #132	; 0x84
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	01db      	lsls	r3, r3, #7
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3384      	adds	r3, #132	; 0x84
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	4611      	mov	r1, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	01d2      	lsls	r2, r2, #7
 8005bb0:	440a      	add	r2, r1
 8005bb2:	3284      	adds	r2, #132	; 0x84
 8005bb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005bb8:	f023 0307 	bic.w	r3, r3, #7
 8005bbc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	69da      	ldr	r2, [r3, #28]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	6809      	ldr	r1, [r1, #0]
 8005bca:	4608      	mov	r0, r1
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	01c9      	lsls	r1, r1, #7
 8005bd0:	4401      	add	r1, r0
 8005bd2:	3184      	adds	r1, #132	; 0x84
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	01db      	lsls	r3, r3, #7
 8005be2:	4413      	add	r3, r2
 8005be4:	3384      	adds	r3, #132	; 0x84
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	01db      	lsls	r3, r3, #7
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3384      	adds	r3, #132	; 0x84
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	4413      	add	r3, r2
 8005c08:	3384      	adds	r3, #132	; 0x84
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d102      	bne.n	8005c20 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e01b      	b.n	8005c58 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d102      	bne.n	8005c2e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e014      	b.n	8005c58 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d00b      	beq.n	8005c4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d007      	beq.n	8005c4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d003      	beq.n	8005c4e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c4a:	2b07      	cmp	r3, #7
 8005c4c:	d102      	bne.n	8005c54 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	e001      	b.n	8005c58 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c54:	2301      	movs	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	01db      	lsls	r3, r3, #7
 8005c62:	4413      	add	r3, r2
 8005c64:	3384      	adds	r3, #132	; 0x84
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	01d2      	lsls	r2, r2, #7
 8005c72:	440a      	add	r2, r1
 8005c74:	3284      	adds	r2, #132	; 0x84
 8005c76:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	041a      	lsls	r2, r3, #16
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6859      	ldr	r1, [r3, #4]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	1acb      	subs	r3, r1, r3
 8005c92:	69f9      	ldr	r1, [r7, #28]
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	3303      	adds	r3, #3
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6809      	ldr	r1, [r1, #0]
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	01c9      	lsls	r1, r1, #7
 8005ca4:	4401      	add	r1, r0
 8005ca6:	3184      	adds	r1, #132	; 0x84
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	01db      	lsls	r3, r3, #7
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3384      	adds	r3, #132	; 0x84
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	01d2      	lsls	r2, r2, #7
 8005cc6:	440a      	add	r2, r1
 8005cc8:	3284      	adds	r2, #132	; 0x84
 8005cca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	01db      	lsls	r3, r3, #7
 8005cde:	4413      	add	r3, r2
 8005ce0:	3384      	adds	r3, #132	; 0x84
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	01db      	lsls	r3, r3, #7
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3384      	adds	r3, #132	; 0x84
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	01d2      	lsls	r2, r2, #7
 8005d04:	440a      	add	r2, r1
 8005d06:	3284      	adds	r2, #132	; 0x84
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6013      	str	r3, [r2, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	3724      	adds	r7, #36	; 0x24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	e001      	b.n	8005d34 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8005d30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8005d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d44:	e000      	b.n	8005d48 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8005d46:	2200      	movs	r2, #0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8005d54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d58:	e000      	b.n	8005d5c <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	4413      	add	r3, r2
 8005d74:	1e5a      	subs	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	441a      	add	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	4413      	add	r3, r2
 8005d8a:	1e5a      	subs	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	441a      	add	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	441a      	add	r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	4413      	add	r3, r2
 8005da6:	1e5a      	subs	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8005dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x94>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005de8:	f7fb fb1a 	bl	8001420 <HAL_GetTick>
 8005dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005dee:	e009      	b.n	8005e04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005df0:	f7fb fb16 	bl	8001420 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dfe:	d901      	bls.n	8005e04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e01f      	b.n	8005e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e04:	4b13      	ldr	r3, [pc, #76]	; (8005e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e10:	d1ee      	bne.n	8005df0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e12:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e18:	f7fb fb02 	bl	8001420 <HAL_GetTick>
 8005e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e1e:	e009      	b.n	8005e34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e20:	f7fb fafe 	bl	8001420 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e2e:	d901      	bls.n	8005e34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e007      	b.n	8005e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e40:	d1ee      	bne.n	8005e20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	420e0040 	.word	0x420e0040
 8005e54:	40007000 	.word	0x40007000
 8005e58:	420e0044 	.word	0x420e0044

08005e5c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005e68:	f7fb fada 	bl	8001420 <HAL_GetTick>
 8005e6c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e075      	b.n	8005f64 <HAL_QSPI_Init+0x108>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_QSPI_Init+0x2c>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e06d      	b.n	8005f64 <HAL_QSPI_Init+0x108>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f00a fc35 	bl	8010714 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005eaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f85e 	bl	8005f70 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	021a      	lsls	r2, r3, #8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2120      	movs	r1, #32
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f856 	bl	8005f8c <QSPI_WaitFlagStateUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d137      	bne.n	8005f5a <HAL_QSPI_Init+0xfe>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ef4:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6852      	ldr	r2, [r2, #4]
 8005efc:	0611      	lsls	r1, r2, #24
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68d2      	ldr	r2, [r2, #12]
 8005f02:	4311      	orrs	r1, r2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	69d2      	ldr	r2, [r2, #28]
 8005f08:	4311      	orrs	r1, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6a12      	ldr	r2, [r2, #32]
 8005f0e:	4311      	orrs	r1, r2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_QSPI_Init+0x110>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6912      	ldr	r2, [r2, #16]
 8005f26:	0411      	lsls	r1, r2, #16
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6952      	ldr	r2, [r2, #20]
 8005f2c:	4311      	orrs	r1, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6992      	ldr	r2, [r2, #24]
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16U) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	ffe0f8fe 	.word	0xffe0f8fe

08005f70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005f9c:	e01a      	b.n	8005fd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa4:	d016      	beq.n	8005fd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005fac:	f7fb fa38 	bl	8001420 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d20b      	bcs.n	8005fd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e00e      	b.n	8005ff2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d1d6      	bne.n	8005f9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0ca      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <HAL_RCC_ClockConfig+0x1b4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d90c      	bls.n	8006038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <HAL_RCC_ClockConfig+0x1b4>)
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006026:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_RCC_ClockConfig+0x1b4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0b6      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006050:	4b58      	ldr	r3, [pc, #352]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a57      	ldr	r2, [pc, #348]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800605a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006068:	4b52      	ldr	r3, [pc, #328]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4a51      	ldr	r2, [pc, #324]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800606e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006074:	4b4f      	ldr	r3, [pc, #316]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	494c      	ldr	r1, [pc, #304]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d044      	beq.n	800611c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609a:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d119      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e07d      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d003      	beq.n	80060ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ba:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e06d      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ca:	4b3a      	ldr	r3, [pc, #232]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e065      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060da:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4933      	ldr	r1, [pc, #204]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ec:	f7fb f998 	bl	8001420 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f2:	e00a      	b.n	800610a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f4:	f7fb f994 	bl	8001420 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e04d      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 020c 	and.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	429a      	cmp	r2, r3
 800611a:	d1eb      	bne.n	80060f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800611c:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <HAL_RCC_ClockConfig+0x1b4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d20c      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <HAL_RCC_ClockConfig+0x1b4>)
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b1f      	ldr	r3, [pc, #124]	; (80061b0 <HAL_RCC_ClockConfig+0x1b4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e030      	b.n	80061a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006150:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4915      	ldr	r1, [pc, #84]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616e:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	490d      	ldr	r1, [pc, #52]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006182:	f000 f81d 	bl	80061c0 <HAL_RCC_GetSysClockFreq>
 8006186:	4601      	mov	r1, r0
 8006188:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	5cd3      	ldrb	r3, [r2, r3]
 8006196:	fa21 f303 	lsr.w	r3, r1, r3
 800619a:	4a08      	ldr	r2, [pc, #32]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 800619c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800619e:	2000      	movs	r0, #0
 80061a0:	f00a fd4c 	bl	8010c3c <HAL_InitTick>

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40023c00 	.word	0x40023c00
 80061b4:	40023800 	.word	0x40023800
 80061b8:	08013430 	.word	0x08013430
 80061bc:	2000003c 	.word	0x2000003c

080061c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	2300      	movs	r3, #0
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d6:	4b63      	ldr	r3, [pc, #396]	; (8006364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d007      	beq.n	80061f2 <HAL_RCC_GetSysClockFreq+0x32>
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d008      	beq.n	80061f8 <HAL_RCC_GetSysClockFreq+0x38>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f040 80b4 	bne.w	8006354 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061ec:	4b5e      	ldr	r3, [pc, #376]	; (8006368 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80061ee:	60bb      	str	r3, [r7, #8]
       break;
 80061f0:	e0b3      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061f2:	4b5e      	ldr	r3, [pc, #376]	; (800636c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80061f4:	60bb      	str	r3, [r7, #8]
      break;
 80061f6:	e0b0      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061f8:	4b5a      	ldr	r3, [pc, #360]	; (8006364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006200:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006202:	4b58      	ldr	r3, [pc, #352]	; (8006364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d04a      	beq.n	80062a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620e:	4b55      	ldr	r3, [pc, #340]	; (8006364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	099b      	lsrs	r3, r3, #6
 8006214:	f04f 0400 	mov.w	r4, #0
 8006218:	f240 11ff 	movw	r1, #511	; 0x1ff
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	ea03 0501 	and.w	r5, r3, r1
 8006224:	ea04 0602 	and.w	r6, r4, r2
 8006228:	4629      	mov	r1, r5
 800622a:	4632      	mov	r2, r6
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	f04f 0400 	mov.w	r4, #0
 8006234:	0154      	lsls	r4, r2, #5
 8006236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800623a:	014b      	lsls	r3, r1, #5
 800623c:	4619      	mov	r1, r3
 800623e:	4622      	mov	r2, r4
 8006240:	1b49      	subs	r1, r1, r5
 8006242:	eb62 0206 	sbc.w	r2, r2, r6
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	f04f 0400 	mov.w	r4, #0
 800624e:	0194      	lsls	r4, r2, #6
 8006250:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006254:	018b      	lsls	r3, r1, #6
 8006256:	1a5b      	subs	r3, r3, r1
 8006258:	eb64 0402 	sbc.w	r4, r4, r2
 800625c:	f04f 0100 	mov.w	r1, #0
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	00e2      	lsls	r2, r4, #3
 8006266:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800626a:	00d9      	lsls	r1, r3, #3
 800626c:	460b      	mov	r3, r1
 800626e:	4614      	mov	r4, r2
 8006270:	195b      	adds	r3, r3, r5
 8006272:	eb44 0406 	adc.w	r4, r4, r6
 8006276:	f04f 0100 	mov.w	r1, #0
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	0262      	lsls	r2, r4, #9
 8006280:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006284:	0259      	lsls	r1, r3, #9
 8006286:	460b      	mov	r3, r1
 8006288:	4614      	mov	r4, r2
 800628a:	4618      	mov	r0, r3
 800628c:	4621      	mov	r1, r4
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f04f 0400 	mov.w	r4, #0
 8006294:	461a      	mov	r2, r3
 8006296:	4623      	mov	r3, r4
 8006298:	f7f9 ffb2 	bl	8000200 <__aeabi_uldivmod>
 800629c:	4603      	mov	r3, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e049      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a4:	4b2f      	ldr	r3, [pc, #188]	; (8006364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	f04f 0400 	mov.w	r4, #0
 80062ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	ea03 0501 	and.w	r5, r3, r1
 80062ba:	ea04 0602 	and.w	r6, r4, r2
 80062be:	4629      	mov	r1, r5
 80062c0:	4632      	mov	r2, r6
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	f04f 0400 	mov.w	r4, #0
 80062ca:	0154      	lsls	r4, r2, #5
 80062cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80062d0:	014b      	lsls	r3, r1, #5
 80062d2:	4619      	mov	r1, r3
 80062d4:	4622      	mov	r2, r4
 80062d6:	1b49      	subs	r1, r1, r5
 80062d8:	eb62 0206 	sbc.w	r2, r2, r6
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	f04f 0400 	mov.w	r4, #0
 80062e4:	0194      	lsls	r4, r2, #6
 80062e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062ea:	018b      	lsls	r3, r1, #6
 80062ec:	1a5b      	subs	r3, r3, r1
 80062ee:	eb64 0402 	sbc.w	r4, r4, r2
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	00e2      	lsls	r2, r4, #3
 80062fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006300:	00d9      	lsls	r1, r3, #3
 8006302:	460b      	mov	r3, r1
 8006304:	4614      	mov	r4, r2
 8006306:	195b      	adds	r3, r3, r5
 8006308:	eb44 0406 	adc.w	r4, r4, r6
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	02a2      	lsls	r2, r4, #10
 8006316:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800631a:	0299      	lsls	r1, r3, #10
 800631c:	460b      	mov	r3, r1
 800631e:	4614      	mov	r4, r2
 8006320:	4618      	mov	r0, r3
 8006322:	4621      	mov	r1, r4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f04f 0400 	mov.w	r4, #0
 800632a:	461a      	mov	r2, r3
 800632c:	4623      	mov	r3, r4
 800632e:	f7f9 ff67 	bl	8000200 <__aeabi_uldivmod>
 8006332:	4603      	mov	r3, r0
 8006334:	460c      	mov	r4, r1
 8006336:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	3301      	adds	r3, #1
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	60bb      	str	r3, [r7, #8]
      break;
 8006352:	e002      	b.n	800635a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006356:	60bb      	str	r3, [r7, #8]
      break;
 8006358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800635a:	68bb      	ldr	r3, [r7, #8]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006364:	40023800 	.word	0x40023800
 8006368:	00f42400 	.word	0x00f42400
 800636c:	007a1200 	.word	0x007a1200

08006370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006374:	4b03      	ldr	r3, [pc, #12]	; (8006384 <HAL_RCC_GetHCLKFreq+0x14>)
 8006376:	681b      	ldr	r3, [r3, #0]
}
 8006378:	4618      	mov	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000003c 	.word	0x2000003c

08006388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800638c:	f7ff fff0 	bl	8006370 <HAL_RCC_GetHCLKFreq>
 8006390:	4601      	mov	r1, r0
 8006392:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	0a9b      	lsrs	r3, r3, #10
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	4a03      	ldr	r2, [pc, #12]	; (80063ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800639e:	5cd3      	ldrb	r3, [r2, r3]
 80063a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40023800 	.word	0x40023800
 80063ac:	08013440 	.word	0x08013440

080063b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063b4:	f7ff ffdc 	bl	8006370 <HAL_RCC_GetHCLKFreq>
 80063b8:	4601      	mov	r1, r0
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	0b5b      	lsrs	r3, r3, #13
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063c6:	5cd3      	ldrb	r3, [r2, r3]
 80063c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40023800 	.word	0x40023800
 80063d4:	08013440 	.word	0x08013440

080063d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	220f      	movs	r2, #15
 80063e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <HAL_RCC_GetClockConfig+0x5c>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0203 	and.w	r2, r3, #3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <HAL_RCC_GetClockConfig+0x5c>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <HAL_RCC_GetClockConfig+0x5c>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <HAL_RCC_GetClockConfig+0x5c>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	08db      	lsrs	r3, r3, #3
 8006412:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <HAL_RCC_GetClockConfig+0x60>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 020f 	and.w	r2, r3, #15
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	601a      	str	r2, [r3, #0]
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40023800 	.word	0x40023800
 8006438:	40023c00 	.word	0x40023c00

0800643c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006464:	4b66      	ldr	r3, [pc, #408]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	4963      	ldr	r1, [pc, #396]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006486:	4b5e      	ldr	r3, [pc, #376]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	495a      	ldr	r1, [pc, #360]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10b      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d075      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064c0:	4b50      	ldr	r3, [pc, #320]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064c6:	f7fa ffab 	bl	8001420 <HAL_GetTick>
 80064ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ce:	f7fa ffa7 	bl	8001420 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e1dc      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064e0:	4b47      	ldr	r3, [pc, #284]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	019a      	lsls	r2, r3, #6
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	071b      	lsls	r3, r3, #28
 8006504:	493e      	ldr	r1, [pc, #248]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01f      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006518:	4b39      	ldr	r3, [pc, #228]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651e:	0f1b      	lsrs	r3, r3, #28
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	019a      	lsls	r2, r3, #6
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	061b      	lsls	r3, r3, #24
 8006532:	431a      	orrs	r2, r3
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	071b      	lsls	r3, r3, #28
 8006538:	4931      	ldr	r1, [pc, #196]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800653a:	4313      	orrs	r3, r2
 800653c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006540:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006546:	f023 021f 	bic.w	r2, r3, #31
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	3b01      	subs	r3, #1
 8006550:	492b      	ldr	r1, [pc, #172]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00d      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	019a      	lsls	r2, r3, #6
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	071b      	lsls	r3, r3, #28
 8006578:	4921      	ldr	r1, [pc, #132]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006580:	4b20      	ldr	r3, [pc, #128]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006582:	2201      	movs	r2, #1
 8006584:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006586:	f7fa ff4b 	bl	8001420 <HAL_GetTick>
 800658a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800658e:	f7fa ff47 	bl	8001420 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e17c      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0f0      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d112      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80ce 	beq.w	800676e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065da:	f040 80c8 	bne.w	800676e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065de:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065e4:	f7fa ff1c 	bl	8001420 <HAL_GetTick>
 80065e8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ea:	e00f      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065ec:	f7fa ff18 	bl	8001420 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d908      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e14d      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800
 8006604:	42470068 	.word	0x42470068
 8006608:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800660c:	4ba5      	ldr	r3, [pc, #660]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006618:	d0e8      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	d02e      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006626:	4b9f      	ldr	r3, [pc, #636]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	3301      	adds	r3, #1
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006638:	4b9a      	ldr	r3, [pc, #616]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	0f1b      	lsrs	r3, r3, #28
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	019a      	lsls	r2, r3, #6
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	3b01      	subs	r3, #1
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	061b      	lsls	r3, r3, #24
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	071b      	lsls	r3, r3, #28
 8006662:	4990      	ldr	r1, [pc, #576]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800666a:	4b8e      	ldr	r3, [pc, #568]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800666c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	3b01      	subs	r3, #1
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	4989      	ldr	r1, [pc, #548]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b00      	cmp	r3, #0
 800668e:	d02c      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006690:	4b84      	ldr	r3, [pc, #528]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006696:	0c1b      	lsrs	r3, r3, #16
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	3301      	adds	r3, #1
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066a2:	4b80      	ldr	r3, [pc, #512]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	019a      	lsls	r2, r3, #6
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	061b      	lsls	r3, r3, #24
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	071b      	lsls	r3, r3, #28
 80066cc:	4975      	ldr	r1, [pc, #468]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066d4:	4b73      	ldr	r3, [pc, #460]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e2:	4970      	ldr	r1, [pc, #448]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d024      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80066fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066fe:	d11f      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006700:	4b68      	ldr	r3, [pc, #416]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	0e1b      	lsrs	r3, r3, #24
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800670e:	4b65      	ldr	r3, [pc, #404]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006714:	0f1b      	lsrs	r3, r3, #28
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	019a      	lsls	r2, r3, #6
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	3b01      	subs	r3, #1
 800672a:	041b      	lsls	r3, r3, #16
 800672c:	431a      	orrs	r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	061b      	lsls	r3, r3, #24
 8006732:	431a      	orrs	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	071b      	lsls	r3, r3, #28
 8006738:	495a      	ldr	r1, [pc, #360]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006740:	4b59      	ldr	r3, [pc, #356]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006746:	f7fa fe6b 	bl	8001420 <HAL_GetTick>
 800674a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800674c:	e008      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800674e:	f7fa fe67 	bl	8001420 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	2b02      	cmp	r3, #2
 800675a:	d901      	bls.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e09c      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006760:	4b50      	ldr	r3, [pc, #320]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676c:	d1ef      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8083 	beq.w	8006882 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800677c:	2300      	movs	r3, #0
 800677e:	60bb      	str	r3, [r7, #8]
 8006780:	4b48      	ldr	r3, [pc, #288]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	4a47      	ldr	r2, [pc, #284]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678a:	6413      	str	r3, [r2, #64]	; 0x40
 800678c:	4b45      	ldr	r3, [pc, #276]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006798:	4b44      	ldr	r3, [pc, #272]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a43      	ldr	r2, [pc, #268]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800679e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067a4:	f7fa fe3c 	bl	8001420 <HAL_GetTick>
 80067a8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067ac:	f7fa fe38 	bl	8001420 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e06d      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ca:	4b36      	ldr	r3, [pc, #216]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d02f      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d028      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067e8:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067f2:	4b2f      	ldr	r3, [pc, #188]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067f8:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80067fe:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006804:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d114      	bne.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006810:	f7fa fe06 	bl	8001420 <HAL_GetTick>
 8006814:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006816:	e00a      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006818:	f7fa fe02 	bl	8001420 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f241 3288 	movw	r2, #5000	; 0x1388
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e035      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800682e:	4b1d      	ldr	r3, [pc, #116]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0ee      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006846:	d10d      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006848:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685c:	4911      	ldr	r1, [pc, #68]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
 8006862:	e005      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006864:	4b0f      	ldr	r3, [pc, #60]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4a0e      	ldr	r2, [pc, #56]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800686a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800686e:	6093      	str	r3, [r2, #8]
 8006870:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687c:	4909      	ldr	r1, [pc, #36]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800687e:	4313      	orrs	r3, r2
 8006880:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006896:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	42470070 	.word	0x42470070
 80068ac:	40007000 	.word	0x40007000
 80068b0:	42470e40 	.word	0x42470e40
 80068b4:	424711e0 	.word	0x424711e0

080068b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d075      	beq.n	80069bc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068d0:	4ba2      	ldr	r3, [pc, #648]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d00c      	beq.n	80068f6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068dc:	4b9f      	ldr	r3, [pc, #636]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d112      	bne.n	800690e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068e8:	4b9c      	ldr	r3, [pc, #624]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f4:	d10b      	bne.n	800690e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f6:	4b99      	ldr	r3, [pc, #612]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d05b      	beq.n	80069ba <HAL_RCC_OscConfig+0x102>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d157      	bne.n	80069ba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e20b      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d106      	bne.n	8006926 <HAL_RCC_OscConfig+0x6e>
 8006918:	4b90      	ldr	r3, [pc, #576]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a8f      	ldr	r2, [pc, #572]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 800691e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e01d      	b.n	8006962 <HAL_RCC_OscConfig+0xaa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800692e:	d10c      	bne.n	800694a <HAL_RCC_OscConfig+0x92>
 8006930:	4b8a      	ldr	r3, [pc, #552]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a89      	ldr	r2, [pc, #548]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	4b87      	ldr	r3, [pc, #540]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a86      	ldr	r2, [pc, #536]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e00b      	b.n	8006962 <HAL_RCC_OscConfig+0xaa>
 800694a:	4b84      	ldr	r3, [pc, #528]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a83      	ldr	r2, [pc, #524]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4b81      	ldr	r3, [pc, #516]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a80      	ldr	r2, [pc, #512]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 800695c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fa fd59 	bl	8001420 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006972:	f7fa fd55 	bl	8001420 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b64      	cmp	r3, #100	; 0x64
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e1d0      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006984:	4b75      	ldr	r3, [pc, #468]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0f0      	beq.n	8006972 <HAL_RCC_OscConfig+0xba>
 8006990:	e014      	b.n	80069bc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fa fd45 	bl	8001420 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699a:	f7fa fd41 	bl	8001420 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b64      	cmp	r3, #100	; 0x64
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e1bc      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ac:	4b6b      	ldr	r3, [pc, #428]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0xe2>
 80069b8:	e000      	b.n	80069bc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d063      	beq.n	8006a90 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069c8:	4b64      	ldr	r3, [pc, #400]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069d4:	4b61      	ldr	r3, [pc, #388]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d11c      	bne.n	8006a1a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069e0:	4b5e      	ldr	r3, [pc, #376]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d116      	bne.n	8006a1a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ec:	4b5b      	ldr	r3, [pc, #364]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_OscConfig+0x14c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d001      	beq.n	8006a04 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e190      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	4b55      	ldr	r3, [pc, #340]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4952      	ldr	r1, [pc, #328]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a18:	e03a      	b.n	8006a90 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d020      	beq.n	8006a64 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a22:	4b4f      	ldr	r3, [pc, #316]	; (8006b60 <HAL_RCC_OscConfig+0x2a8>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fa fcfa 	bl	8001420 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a30:	f7fa fcf6 	bl	8001420 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e171      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a42:	4b46      	ldr	r3, [pc, #280]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4e:	4b43      	ldr	r3, [pc, #268]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	493f      	ldr	r1, [pc, #252]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]
 8006a62:	e015      	b.n	8006a90 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a64:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <HAL_RCC_OscConfig+0x2a8>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6a:	f7fa fcd9 	bl	8001420 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a72:	f7fa fcd5 	bl	8001420 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e150      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a84:	4b35      	ldr	r3, [pc, #212]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f0      	bne.n	8006a72 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d030      	beq.n	8006afe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d016      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aa4:	4b2f      	ldr	r3, [pc, #188]	; (8006b64 <HAL_RCC_OscConfig+0x2ac>)
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fa fcb9 	bl	8001420 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ab2:	f7fa fcb5 	bl	8001420 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e130      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ac4:	4b25      	ldr	r3, [pc, #148]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f0      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x1fa>
 8006ad0:	e015      	b.n	8006afe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ad2:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fa fca2 	bl	8001420 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ae0:	f7fa fc9e 	bl	8001420 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e119      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af2:	4b1a      	ldr	r3, [pc, #104]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 809f 	beq.w	8006c4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b10:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10f      	bne.n	8006b3c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <HAL_RCC_OscConfig+0x2a4>)
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <HAL_RCC_OscConfig+0x2b0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d120      	bne.n	8006b8a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <HAL_RCC_OscConfig+0x2b0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a06      	ldr	r2, [pc, #24]	; (8006b68 <HAL_RCC_OscConfig+0x2b0>)
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b54:	f7fa fc64 	bl	8001420 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b5a:	e010      	b.n	8006b7e <HAL_RCC_OscConfig+0x2c6>
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	42470000 	.word	0x42470000
 8006b64:	42470e80 	.word	0x42470e80
 8006b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6c:	f7fa fc58 	bl	8001420 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e0d3      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b7e:	4b6c      	ldr	r3, [pc, #432]	; (8006d30 <HAL_RCC_OscConfig+0x478>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d106      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x2e8>
 8006b92:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	4a67      	ldr	r2, [pc, #412]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9e:	e01c      	b.n	8006bda <HAL_RCC_OscConfig+0x322>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x30a>
 8006ba8:	4b62      	ldr	r3, [pc, #392]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bac:	4a61      	ldr	r2, [pc, #388]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bae:	f043 0304 	orr.w	r3, r3, #4
 8006bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb4:	4b5f      	ldr	r3, [pc, #380]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb8:	4a5e      	ldr	r2, [pc, #376]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc0:	e00b      	b.n	8006bda <HAL_RCC_OscConfig+0x322>
 8006bc2:	4b5c      	ldr	r3, [pc, #368]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc6:	4a5b      	ldr	r2, [pc, #364]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bce:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd2:	4a58      	ldr	r2, [pc, #352]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006bd4:	f023 0304 	bic.w	r3, r3, #4
 8006bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be2:	f7fa fc1d 	bl	8001420 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be8:	e00a      	b.n	8006c00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bea:	f7fa fc19 	bl	8001420 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e092      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c00:	4b4c      	ldr	r3, [pc, #304]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0ee      	beq.n	8006bea <HAL_RCC_OscConfig+0x332>
 8006c0c:	e014      	b.n	8006c38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0e:	f7fa fc07 	bl	8001420 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fa fc03 	bl	8001420 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e07c      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c2c:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1ee      	bne.n	8006c16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d105      	bne.n	8006c4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3e:	4b3d      	ldr	r3, [pc, #244]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	4a3c      	ldr	r2, [pc, #240]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d068      	beq.n	8006d24 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c52:	4b38      	ldr	r3, [pc, #224]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f003 030c 	and.w	r3, r3, #12
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d060      	beq.n	8006d20 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d145      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c66:	4b34      	ldr	r3, [pc, #208]	; (8006d38 <HAL_RCC_OscConfig+0x480>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6c:	f7fa fbd8 	bl	8001420 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c74:	f7fa fbd4 	bl	8001420 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e04f      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c86:	4b2b      	ldr	r3, [pc, #172]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	019b      	lsls	r3, r3, #6
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	3b01      	subs	r3, #1
 8006cac:	041b      	lsls	r3, r3, #16
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	061b      	lsls	r3, r3, #24
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	071b      	lsls	r3, r3, #28
 8006cbe:	491d      	ldr	r1, [pc, #116]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <HAL_RCC_OscConfig+0x480>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7fa fba9 	bl	8001420 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd2:	f7fa fba5 	bl	8001420 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e020      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce4:	4b13      	ldr	r3, [pc, #76]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x41a>
 8006cf0:	e018      	b.n	8006d24 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf2:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <HAL_RCC_OscConfig+0x480>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fa fb92 	bl	8001420 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d00:	f7fa fb8e 	bl	8001420 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e009      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_RCC_OscConfig+0x47c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f0      	bne.n	8006d00 <HAL_RCC_OscConfig+0x448>
 8006d1e:	e001      	b.n	8006d24 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40007000 	.word	0x40007000
 8006d34:	40023800 	.word	0x40023800
 8006d38:	42470060 	.word	0x42470060

08006d3c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e107      	b.n	8006f6e <HAL_SAI_Init+0x232>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d106      	bne.n	8006d78 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f009 ff02 	bl	8010b7c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f8ff 	bl	8006f84 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f932 	bl	8006ff0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d027      	beq.n	8006de4 <HAL_SAI_Init+0xa8>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f94f 	bl	8007038 <SAI_GetInputClock>
 8006d9a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	025b      	lsls	r3, r3, #9
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a70      	ldr	r2, [pc, #448]	; (8006f78 <HAL_SAI_Init+0x23c>)
 8006db8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbc:	08da      	lsrs	r2, r3, #3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if((tmpregisterGCR % 10U) > 8U)
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <HAL_SAI_Init+0x23c>)
 8006dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dca:	08da      	lsrs	r2, r3, #3
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	1aca      	subs	r2, r1, r3
 8006dd6:	2a08      	cmp	r2, #8
 8006dd8:	d904      	bls.n	8006de4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv+= 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_SAI_Init+0xb8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d109      	bne.n	8006e08 <HAL_SAI_Init+0xcc>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_SAI_Init+0xc4>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e001      	b.n	8006e04 <HAL_SAI_Init+0xc8>
 8006e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	e008      	b.n	8006e1a <HAL_SAI_Init+0xde>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <HAL_SAI_Init+0xda>
 8006e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e14:	e000      	b.n	8006e18 <HAL_SAI_Init+0xdc>
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch(hsai->Init.Synchro)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d815      	bhi.n	8006e4e <HAL_SAI_Init+0x112>
 8006e22:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <HAL_SAI_Init+0xec>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e3f 	.word	0x08006e3f
 8006e30:	08006e47 	.word	0x08006e47
 8006e34:	08006e47 	.word	0x08006e47
  {
  case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	613b      	str	r3, [r7, #16]
    }
    break;
 8006e3c:	e008      	b.n	8006e50 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e42:	613b      	str	r3, [r7, #16]
    }
    break;
 8006e44:	e004      	b.n	8006e50 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS_EXT_SAI1 :
  case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e4a:	613b      	str	r3, [r7, #16]
    }
    break;
 8006e4c:	e000      	b.n	8006e50 <HAL_SAI_Init+0x114>
  default:
    break;
 8006e4e:	bf00      	nop
  }
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6819      	ldr	r1, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	4b48      	ldr	r3, [pc, #288]	; (8006f7c <HAL_SAI_Init+0x240>)
 8006e5c:	400b      	ands	r3, r1
 8006e5e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6819      	ldr	r1, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e74:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006e88:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e94:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	051b      	lsls	r3, r3, #20
 8006e9c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006eb4:	f023 030f 	bic.w	r3, r3, #15
 8006eb8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6859      	ldr	r1, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6899      	ldr	r1, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b27      	ldr	r3, [pc, #156]	; (8006f80 <HAL_SAI_Init+0x244>)
 8006ee4:	400b      	ands	r3, r1
 8006ee6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6899      	ldr	r1, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset     |
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8006ef8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSOffset     |
 8006efe:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                          hsai->FrameInit.FSDefinition |
 8006f04:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006f0e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68d9      	ldr	r1, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006f26:	400b      	ands	r3, r1
 8006f28:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN );

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68d9      	ldr	r1, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f38:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f3e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006f40:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f46:	3b01      	subs	r3, #1
 8006f48:	021b      	lsls	r3, r3, #8
 8006f4a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	cccccccd 	.word	0xcccccccd
 8006f7c:	ff05c010 	.word	0xff05c010
 8006f80:	fff88000 	.word	0xfff88000

08006f84 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006f84:	b490      	push	{r4, r7}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7U/1000U);
 8006f8c:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <SAI_Disable+0x64>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a16      	ldr	r2, [pc, #88]	; (8006fec <SAI_Disable+0x68>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	0b1b      	lsrs	r3, r3, #12
 8006f98:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fac:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8006fae:	4623      	mov	r3, r4
 8006fb0:	1e5c      	subs	r4, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fca:	e006      	b.n	8006fda <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e9      	bne.n	8006fae <SAI_Disable+0x2a>

  return status;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc90      	pop	{r4, r7}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	2000003c 	.word	0x2000003c
 8006fec:	95cbec1b 	.word	0x95cbec1b

08006ff0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d007      	beq.n	8007010 <SAI_BlockSynchroConfig+0x20>
 8007000:	2b01      	cmp	r3, #1
 8007002:	d302      	bcc.n	800700a <SAI_BlockSynchroConfig+0x1a>
 8007004:	2b02      	cmp	r3, #2
 8007006:	d006      	beq.n	8007016 <SAI_BlockSynchroConfig+0x26>
 8007008:	e008      	b.n	800701c <SAI_BlockSynchroConfig+0x2c>
  {
  case SAI_SYNCEXT_DISABLE :
    tmpregisterGCR = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
    break;
 800700e:	e008      	b.n	8007022 <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007010:	2310      	movs	r3, #16
 8007012:	60fb      	str	r3, [r7, #12]
    break;
 8007014:	e005      	b.n	8007022 <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007016:	2320      	movs	r3, #32
 8007018:	60fb      	str	r3, [r7, #12]
    break;
 800701a:	e002      	b.n	8007022 <SAI_BlockSynchroConfig+0x32>
  default:
    tmpregisterGCR = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
    break;
 8007020:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <SAI_BlockSynchroConfig+0x44>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */ 
}
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40015800 	.word	0x40015800

08007038 <SAI_GetInputClock>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)   
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2); 
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));
 
  /* SAI Block clock source selection */
  if(hsai->Instance == SAI1_Block_A)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a44      	ldr	r2, [pc, #272]	; (8007164 <SAI_GetInputClock+0x12c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10b      	bne.n	800706e <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007056:	4b44      	ldr	r3, [pc, #272]	; (8007168 <SAI_GetInputClock+0x130>)
 8007058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	4940      	ldr	r1, [pc, #256]	; (8007168 <SAI_GetInputClock+0x130>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800706c:	e00b      	b.n	8007086 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800706e:	4b3e      	ldr	r3, [pc, #248]	; (8007168 <SAI_GetInputClock+0x130>)
 8007070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	493a      	ldr	r1, [pc, #232]	; (8007168 <SAI_GetInputClock+0x130>)
 8007080:	4313      	orrs	r3, r2
 8007082:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /* VCO Input Clock value calculation */
  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007086:	4b38      	ldr	r3, [pc, #224]	; (8007168 <SAI_GetInputClock+0x130>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d108      	bne.n	80070a4 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007092:	4b35      	ldr	r3, [pc, #212]	; (8007168 <SAI_GetInputClock+0x130>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800709a:	4a34      	ldr	r2, [pc, #208]	; (800716c <SAI_GetInputClock+0x134>)
 800709c:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	e007      	b.n	80070b4 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80070a4:	4b30      	ldr	r3, [pc, #192]	; (8007168 <SAI_GetInputClock+0x130>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	4a30      	ldr	r2, [pc, #192]	; (8007170 <SAI_GetInputClock+0x138>)
 80070ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b2:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d121      	bne.n	8007100 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80070bc:	4b2a      	ldr	r3, [pc, #168]	; (8007168 <SAI_GetInputClock+0x130>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	0e1b      	lsrs	r3, r3, #24
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg);
 80070ca:	4b27      	ldr	r3, [pc, #156]	; (8007168 <SAI_GetInputClock+0x130>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d0:	099b      	lsrs	r3, r3, #6
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	fb02 f203 	mul.w	r2, r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80070e4:	4b20      	ldr	r3, [pc, #128]	; (8007168 <SAI_GetInputClock+0x130>)
 80070e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	3301      	adds	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource/(tmpreg); 
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	e02a      	b.n	8007156 <SAI_GetInputClock+0x11e>

  }
  else if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007108:	d120      	bne.n	800714c <SAI_GetInputClock+0x114>
  {        
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800710a:	4b17      	ldr	r3, [pc, #92]	; (8007168 <SAI_GetInputClock+0x130>)
 800710c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007110:	0e1b      	lsrs	r3, r3, #24
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg);
 8007118:	4b13      	ldr	r3, [pc, #76]	; (8007168 <SAI_GetInputClock+0x130>)
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711e:	099b      	lsrs	r3, r3, #6
 8007120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	fb02 f203 	mul.w	r2, r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007130:	617b      	str	r3, [r7, #20]
    
    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U); 
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <SAI_GetInputClock+0x130>)
 8007134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource/(tmpreg);
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e004      	b.n	8007156 <SAI_GetInputClock+0x11e>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <SAI_GetInputClock+0x13c>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]
    
    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <SAI_GetInputClock+0x140>)
 8007154:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */  
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
       /* the return result is the value of SAI clock */
  return saiclocksource;
 8007156:	697b      	ldr	r3, [r7, #20]
}
 8007158:	4618      	mov	r0, r3
 800715a:	371c      	adds	r7, #28
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	40015804 	.word	0x40015804
 8007168:	40023800 	.word	0x40023800
 800716c:	00f42400 	.word	0x00f42400
 8007170:	007a1200 	.word	0x007a1200
 8007174:	4247015c 	.word	0x4247015c
 8007178:	00bb8000 	.word	0x00bb8000

0800717c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e01d      	b.n	80071ca <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f009 fb31 	bl	8010808 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2203      	movs	r2, #3
 80071aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f810 	bl	80071d4 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80071d4:	b5b0      	push	{r4, r5, r7, lr}
 80071d6:	b08e      	sub	sp, #56	; 0x38
 80071d8:	af04      	add	r7, sp, #16
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80071f4:	2376      	movs	r3, #118	; 0x76
 80071f6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681d      	ldr	r5, [r3, #0]
 80071fc:	466c      	mov	r4, sp
 80071fe:	f107 0318 	add.w	r3, r7, #24
 8007202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800720a:	f107 030c 	add.w	r3, r7, #12
 800720e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007210:	4628      	mov	r0, r5
 8007212:	f002 f83e 	bl	8009292 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <HAL_SD_InitCard+0xb4>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f002 f86e 	bl	8009302 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <HAL_SD_InitCard+0xb4>)
 8007228:	2201      	movs	r2, #1
 800722a:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 800722c:	2002      	movs	r0, #2
 800722e:	f7fa f903 	bl	8001438 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fe18 	bl	8007e68 <SD_PowerON>
 8007238:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e013      	b.n	8007280 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fd3c 	bl	8007cd6 <SD_InitCard>
 800725e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3728      	adds	r7, #40	; 0x28
 8007284:	46bd      	mov	sp, r7
 8007286:	bdb0      	pop	{r4, r5, r7, pc}
 8007288:	422580a0 	.word	0x422580a0

0800728c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08c      	sub	sp, #48	; 0x30
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800729a:	2300      	movs	r3, #0
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0ab      	b.n	800740c <HAL_SD_ReadBlocks_DMA+0x180>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	f040 80a4 	bne.w	800740a <HAL_SD_ReadBlocks_DMA+0x17e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d907      	bls.n	80072e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e092      	b.n	800740c <HAL_SD_ReadBlocks_DMA+0x180>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2203      	movs	r2, #3
 80072ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007304:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	4a42      	ldr	r2, [pc, #264]	; (8007414 <HAL_SD_ReadBlocks_DMA+0x188>)
 800730c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	4a41      	ldr	r2, [pc, #260]	; (8007418 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007314:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	2200      	movs	r2, #0
 800731c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3380      	adds	r3, #128	; 0x80
 8007328:	4619      	mov	r1, r3
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	025b      	lsls	r3, r3, #9
 8007330:	089b      	lsrs	r3, r3, #2
 8007332:	f7fa fae1 	bl	80018f8 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007336:	4b39      	ldr	r3, [pc, #228]	; (800741c <HAL_SD_ReadBlocks_DMA+0x190>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	2b01      	cmp	r3, #1
 8007342:	d002      	beq.n	800734a <HAL_SD_ReadBlocks_DMA+0xbe>
    {
      BlockAdd *= 512U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	025b      	lsls	r3, r3, #9
 8007348:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800734a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800734e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	025b      	lsls	r3, r3, #9
 8007354:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007356:	2390      	movs	r3, #144	; 0x90
 8007358:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800735a:	2302      	movs	r3, #2
 800735c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007362:	2301      	movs	r3, #1
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f107 0214 	add.w	r2, r7, #20
 800736e:	4611      	mov	r1, r2
 8007370:	4618      	mov	r0, r3
 8007372:	f002 f82e 	bl	80093d2 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800737e:	4618      	mov	r0, r3
 8007380:	f002 f853 	bl	800942a <SDMMC_CmdBlockLength>
 8007384:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d010      	beq.n	80073ae <HAL_SD_ReadBlocks_DMA+0x122>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	431a      	orrs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e02e      	b.n	800740c <HAL_SD_ReadBlocks_DMA+0x180>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d90a      	bls.n	80073ca <HAL_SD_ReadBlocks_DMA+0x13e>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2282      	movs	r2, #130	; 0x82
 80073b8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f002 f87a 	bl	80094ba <SDMMC_CmdReadMultiBlock>
 80073c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80073c8:	e009      	b.n	80073de <HAL_SD_ReadBlocks_DMA+0x152>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2281      	movs	r2, #129	; 0x81
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f002 f84b 	bl	8009472 <SDMMC_CmdReadSingleBlock>
 80073dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <HAL_SD_ReadBlocks_DMA+0x17a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	431a      	orrs	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e002      	b.n	800740c <HAL_SD_ReadBlocks_DMA+0x180>
    }

    return HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e000      	b.n	800740c <HAL_SD_ReadBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 800740a:	2302      	movs	r3, #2
  }
}
 800740c:	4618      	mov	r0, r3
 800740e:	3730      	adds	r7, #48	; 0x30
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	08007bdf 	.word	0x08007bdf
 8007418:	08007c4d 	.word	0x08007c4d
 800741c:	4225858c 	.word	0x4225858c

08007420 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08c      	sub	sp, #48	; 0x30
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800742e:	2300      	movs	r3, #0
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e0ab      	b.n	80075a0 <HAL_SD_WriteBlocks_DMA+0x180>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 80a4 	bne.w	800759e <HAL_SD_WriteBlocks_DMA+0x17e>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	441a      	add	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007466:	429a      	cmp	r2, r3
 8007468:	d907      	bls.n	800747a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e092      	b.n	80075a0 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2203      	movs	r2, #3
 800747e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2200      	movs	r2, #0
 8007488:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 021a 	orr.w	r2, r2, #26
 8007498:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	4a42      	ldr	r2, [pc, #264]	; (80075a8 <HAL_SD_WriteBlocks_DMA+0x188>)
 80074a0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	4a41      	ldr	r2, [pc, #260]	; (80075ac <HAL_SD_WriteBlocks_DMA+0x18c>)
 80074a8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	2200      	movs	r2, #0
 80074b0:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d002      	beq.n	80074c0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	025b      	lsls	r3, r3, #9
 80074be:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 ffae 	bl	800942a <SDMMC_CmdBlockLength>
 80074ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d010      	beq.n	80074f8 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e053      	b.n	80075a0 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d90a      	bls.n	8007514 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	22a0      	movs	r2, #160	; 0xa0
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4618      	mov	r0, r3
 800750c:	f002 f81d 	bl	800954a <SDMMC_CmdWriteMultiBlock>
 8007510:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007512:	e009      	b.n	8007528 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2290      	movs	r2, #144	; 0x90
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	4618      	mov	r0, r3
 8007522:	f001 ffee 	bl	8009502 <SDMMC_CmdWriteSingleBlock>
 8007526:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	2b00      	cmp	r3, #0
 800752c:	d010      	beq.n	8007550 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	431a      	orrs	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e027      	b.n	80075a0 <HAL_SD_WriteBlocks_DMA+0x180>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <HAL_SD_WriteBlocks_DMA+0x190>)
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3380      	adds	r3, #128	; 0x80
 8007562:	461a      	mov	r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	025b      	lsls	r3, r3, #9
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	f7fa f9c5 	bl	80018f8 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800756e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007572:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	025b      	lsls	r3, r3, #9
 8007578:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800757a:	2390      	movs	r3, #144	; 0x90
 800757c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800757e:	2300      	movs	r3, #0
 8007580:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007582:	2300      	movs	r3, #0
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007586:	2301      	movs	r3, #1
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f107 0214 	add.w	r2, r7, #20
 8007592:	4611      	mov	r1, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f001 ff1c 	bl	80093d2 <SDIO_ConfigData>
    
    return HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	e000      	b.n	80075a0 <HAL_SD_WriteBlocks_DMA+0x180>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3730      	adds	r7, #48	; 0x30
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	08007bb5 	.word	0x08007bb5
 80075ac:	08007c4d 	.word	0x08007c4d
 80075b0:	4225858c 	.word	0x4225858c

080075b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075da:	0e1b      	lsrs	r3, r3, #24
 80075dc:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	099b      	lsrs	r3, r3, #6
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	089b      	lsrs	r3, r3, #2
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	b2da      	uxtb	r2, r3
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	b2db      	uxtb	r3, r3
 8007614:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	b2da      	uxtb	r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	b2db      	uxtb	r3, r3
 8007626:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007634:	b2db      	uxtb	r3, r3
 8007636:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007644:	0e1b      	lsrs	r3, r3, #24
 8007646:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	b29b      	uxth	r3, r3
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	b29a      	uxth	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	b2db      	uxtb	r3, r3
 800765c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	88db      	ldrh	r3, [r3, #6]
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	091b      	lsrs	r3, r3, #4
 8007668:	b29b      	uxth	r3, r3
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	b29b      	uxth	r3, r3
 8007670:	4313      	orrs	r3, r2
 8007672:	b29a      	uxth	r2, r3
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	b2da      	uxtb	r2, r3
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	b2db      	uxtb	r3, r3
 800768e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	09db      	lsrs	r3, r3, #7
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	b2da      	uxtb	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	099b      	lsrs	r3, r3, #6
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 8087 	bne.w	80077ee <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	431a      	orrs	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007706:	0e1b      	lsrs	r3, r3, #24
 8007708:	b2db      	uxtb	r3, r3
 800770a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	099b      	lsrs	r3, r3, #6
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	431a      	orrs	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	08db      	lsrs	r3, r3, #3
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0307 	and.w	r3, r3, #7
 8007728:	b2da      	uxtb	r2, r3
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	b2da      	uxtb	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	b2db      	uxtb	r3, r3
 8007744:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	b2da      	uxtb	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	089b      	lsrs	r3, r3, #2
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	b2da      	uxtb	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f003 0306 	and.w	r3, r3, #6
 8007772:	b2da      	uxtb	r2, r3
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	b2db      	uxtb	r3, r3
 8007780:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	7e1b      	ldrb	r3, [r3, #24]
 8007786:	b2da      	uxtb	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	09db      	lsrs	r3, r3, #7
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b2da      	uxtb	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	7e1b      	ldrb	r3, [r3, #24]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	3302      	adds	r3, #2
 80077ae:	2201      	movs	r2, #1
 80077b0:	fa02 f303 	lsl.w	r3, r2, r3
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80077b8:	fb02 f203 	mul.w	r2, r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	7a1b      	ldrb	r3, [r3, #8]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	2301      	movs	r3, #1
 80077ca:	fa03 f202 	lsl.w	r2, r3, r2
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80077da:	0a52      	lsrs	r2, r2, #9
 80077dc:	fb02 f203 	mul.w	r2, r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ea:	661a      	str	r2, [r3, #96]	; 0x60
 80077ec:	e04d      	b.n	800788a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d138      	bne.n	8007868 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	041b      	lsls	r3, r3, #16
 8007802:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780e:	0e1b      	lsrs	r3, r3, #24
 8007810:	b2db      	uxtb	r3, r3
 8007812:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	691a      	ldr	r2, [r3, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	431a      	orrs	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	b2db      	uxtb	r3, r3
 800782a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	431a      	orrs	r2, r3
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783c:	0a1b      	lsrs	r3, r3, #8
 800783e:	b2db      	uxtb	r3, r3
 8007840:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	3301      	adds	r3, #1
 8007848:	029a      	lsls	r2, r3, #10
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800785c:	659a      	str	r2, [r3, #88]	; 0x58
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	661a      	str	r2, [r3, #96]	; 0x60
 8007866:	e010      	b.n	800788a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e0c1      	b.n	8007a0e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	099b      	lsrs	r3, r3, #6
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	b2da      	uxtb	r2, r3
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	7e9b      	ldrb	r3, [r3, #26]
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	09db      	lsrs	r3, r3, #7
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e0:	0e1b      	lsrs	r3, r3, #24
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	09db      	lsrs	r3, r3, #7
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	095b      	lsrs	r3, r3, #5
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	b2da      	uxtb	r2, r3
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	089b      	lsrs	r3, r3, #2
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	b2da      	uxtb	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 030c 	and.w	r3, r3, #12
 8007922:	b2da      	uxtb	r2, r3
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	b2db      	uxtb	r3, r3
 8007930:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	7fdb      	ldrb	r3, [r3, #31]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	099b      	lsrs	r3, r3, #6
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b2da      	uxtb	r2, r3
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	095b      	lsrs	r3, r3, #5
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	b2da      	uxtb	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	b2db      	uxtb	r3, r3
 800797e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	09db      	lsrs	r3, r3, #7
 8007984:	b2db      	uxtb	r3, r3
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	099b      	lsrs	r3, r3, #6
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	b2da      	uxtb	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	091b      	lsrs	r3, r3, #4
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	089b      	lsrs	r3, r3, #2
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0303 	and.w	r3, r3, #3
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a72:	b5b0      	push	{r4, r5, r7, lr}
 8007a74:	b08e      	sub	sp, #56	; 0x38
 8007a76:	af04      	add	r7, sp, #16
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2203      	movs	r2, #3
 8007a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d02e      	beq.n	8007aee <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a96:	d106      	bne.n	8007aa6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa4:	e029      	b.n	8007afa <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aac:	d10a      	bne.n	8007ac4 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 faac 	bl	800800c <SD_WideBus_Enable>
 8007ab4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ac2:	e01a      	b.n	8007afa <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10a      	bne.n	8007ae0 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 faeb 	bl	80080a6 <SD_WideBus_Disable>
 8007ad0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ade:	e00c      	b.n	8007afa <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
 8007aec:	e005      	b.n	8007afa <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e024      	b.n	8007b62 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681d      	ldr	r5, [r3, #0]
 8007b3e:	466c      	mov	r4, sp
 8007b40:	f107 0318 	add.w	r3, r7, #24
 8007b44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b4c:	f107 030c 	add.w	r3, r7, #12
 8007b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b52:	4628      	mov	r0, r5
 8007b54:	f001 fb9d 	bl	8009292 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bdb0      	pop	{r4, r5, r7, pc}

08007b6a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8007b72:	2304      	movs	r3, #4
 8007b74:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8007b7e:	f107 030c 	add.w	r3, r7, #12
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa17 	bl	8007fb8 <SD_SendStatus>
 8007b8a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	0a5b      	lsrs	r3, r3, #9
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	2b82      	cmp	r3, #130	; 0x82
 8007bf6:	d111      	bne.n	8007c1c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 fcc9 	bl	8009594 <SDMMC_CmdStopTransfer>
 8007c02:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d008      	beq.n	8007c1c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	431a      	orrs	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fccc 	bl	80075b4 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0208 	bic.w	r2, r2, #8
 8007c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f007 fb00 	bl	800f244 <HAL_SD_RxCpltCallback>
#endif
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d004      	beq.n	8007c6e <SD_DMAError+0x22>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d12c      	bne.n	8007cc8 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c86:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff ff68 	bl	8007b6a <HAL_SD_GetCardState>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	2b06      	cmp	r3, #6
 8007ca2:	d002      	beq.n	8007caa <SD_DMAError+0x5e>
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d10a      	bne.n	8007cc0 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 fc70 	bl	8009594 <SDMMC_CmdStopTransfer>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff fc73 	bl	80075b4 <HAL_SD_ErrorCallback>
#endif
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007cd6:	b5b0      	push	{r4, r5, r7, lr}
 8007cd8:	b094      	sub	sp, #80	; 0x50
 8007cda:	af04      	add	r7, sp, #16
 8007cdc:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 fb17 	bl	800931e <SDIO_GetPowerState>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007cf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007cfa:	e0b1      	b.n	8007e60 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d02f      	beq.n	8007d64 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 fd5d 	bl	80097c8 <SDMMC_CmdSendCID>
 8007d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <SD_InitCard+0x44>
    {
      return errorstate;
 8007d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d18:	e0a2      	b.n	8007e60 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 fb41 	bl	80093a8 <SDIO_GetResponse>
 8007d26:	4602      	mov	r2, r0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2104      	movs	r1, #4
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 fb38 	bl	80093a8 <SDIO_GetResponse>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2108      	movs	r1, #8
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 fb2f 	bl	80093a8 <SDIO_GetResponse>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	210c      	movs	r1, #12
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 fb26 	bl	80093a8 <SDIO_GetResponse>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d00d      	beq.n	8007d88 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f107 020e 	add.w	r2, r7, #14
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fd67 	bl	800984a <SDMMC_CmdSetRelAdd>
 8007d7c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <SD_InitCard+0xb2>
    {
      return errorstate;
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d86:	e06b      	b.n	8007e60 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d036      	beq.n	8007dfe <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007d90:	89fb      	ldrh	r3, [r7, #14]
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	041b      	lsls	r3, r3, #16
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f001 fd2f 	bl	8009808 <SDMMC_CmdSendCSD>
 8007daa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <SD_InitCard+0xe0>
    {
      return errorstate;
 8007db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db4:	e054      	b.n	8007e60 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 faf3 	bl	80093a8 <SDIO_GetResponse>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2104      	movs	r1, #4
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 faea 	bl	80093a8 <SDIO_GetResponse>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2108      	movs	r1, #8
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 fae1 	bl	80093a8 <SDIO_GetResponse>
 8007de6:	4602      	mov	r2, r0
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	210c      	movs	r1, #12
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fad8 	bl	80093a8 <SDIO_GetResponse>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2104      	movs	r1, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 facf 	bl	80093a8 <SDIO_GetResponse>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	0d1a      	lsrs	r2, r3, #20
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8007e12:	f107 0310 	add.w	r3, r7, #16
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fbd5 	bl	80075c8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	f04f 0400 	mov.w	r4, #0
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4623      	mov	r3, r4
 8007e30:	4608      	mov	r0, r1
 8007e32:	f001 fbd3 	bl	80095dc <SDMMC_CmdSelDesel>
 8007e36:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <SD_InitCard+0x16c>
  {
    return errorstate;
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	e00e      	b.n	8007e60 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681d      	ldr	r5, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	466c      	mov	r4, sp
 8007e4a:	f103 0210 	add.w	r2, r3, #16
 8007e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e54:	3304      	adds	r3, #4
 8007e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f001 fa1a 	bl	8009292 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3740      	adds	r7, #64	; 0x40
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bdb0      	pop	{r4, r5, r7, pc}

08007e68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fbce 	bl	8009626 <SDMMC_CmdGoIdleState>
 8007e8a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <SD_PowerON+0x2e>
  {
    return errorstate;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	e08c      	b.n	8007fb0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fbe3 	bl	8009666 <SDMMC_CmdOperCond>
 8007ea0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d03d      	beq.n	8007f24 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8007eae:	e032      	b.n	8007f16 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	60ba      	str	r2, [r7, #8]
 8007eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d102      	bne.n	8007ec4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ec2:	e075      	b.n	8007fb0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fbec 	bl	80096a8 <SDMMC_CmdAppCommand>
 8007ed0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007edc:	e068      	b.n	8007fb0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 fc03 	bl	80096f0 <SDMMC_CmdAppOperCommand>
 8007eea:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ef6:	e05b      	b.n	8007fb0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fa52 	bl	80093a8 <SDIO_GetResponse>
 8007f04:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	0fdb      	lsrs	r3, r3, #31
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <SD_PowerON+0xaa>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <SD_PowerON+0xac>
 8007f12:	2300      	movs	r3, #0
 8007f14:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0c9      	beq.n	8007eb0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	645a      	str	r2, [r3, #68]	; 0x44
 8007f22:	e044      	b.n	8007fae <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8007f2a:	e031      	b.n	8007f90 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	60ba      	str	r2, [r7, #8]
 8007f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d102      	bne.n	8007f40 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f3e:	e037      	b.n	8007fb0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 fbae 	bl	80096a8 <SDMMC_CmdAppCommand>
 8007f4c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <SD_PowerON+0xf0>
      {
        return errorstate;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	e02b      	b.n	8007fb0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fbc5 	bl	80096f0 <SDMMC_CmdAppOperCommand>
 8007f66:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <SD_PowerON+0x10a>
      {
        return errorstate;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	e01e      	b.n	8007fb0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fa15 	bl	80093a8 <SDIO_GetResponse>
 8007f7e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	0fdb      	lsrs	r3, r3, #31
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <SD_PowerON+0x124>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <SD_PowerON+0x126>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0ca      	beq.n	8007f2c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	645a      	str	r2, [r3, #68]	; 0x44
 8007fa6:	e002      	b.n	8007fae <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8007fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fd0:	e018      	b.n	8008004 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f001 fc56 	bl	8009890 <SDMMC_CmdSendStatus>
 8007fe4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <SD_SendStatus+0x38>
  {
    return errorstate;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	e009      	b.n	8008004 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 f9d6 	bl	80093a8 <SDIO_GetResponse>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008014:	2300      	movs	r3, #0
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	2300      	movs	r3, #0
 800801a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2100      	movs	r1, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f001 f9be 	bl	80093a8 <SDIO_GetResponse>
 800802c:	4603      	mov	r3, r0
 800802e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008036:	d102      	bne.n	800803e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008038:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800803c:	e02f      	b.n	800809e <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800803e:	f107 030c 	add.w	r3, r7, #12
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f87b 	bl	8008140 <SD_FindSCR>
 800804a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	e023      	b.n	800809e <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01c      	beq.n	800809a <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	4619      	mov	r1, r3
 800806c:	4610      	mov	r0, r2
 800806e:	f001 fb1b 	bl	80096a8 <SDMMC_CmdAppCommand>
 8008072:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	e00f      	b.n	800809e <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2102      	movs	r1, #2
 8008084:	4618      	mov	r0, r3
 8008086:	f001 fb58 	bl	800973a <SDMMC_CmdBusWidth>
 800808a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	e003      	b.n	800809e <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008096:	2300      	movs	r3, #0
 8008098:	e001      	b.n	800809e <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800809a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 f971 	bl	80093a8 <SDIO_GetResponse>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d0:	d102      	bne.n	80080d8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80080d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080d6:	e02f      	b.n	8008138 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f82e 	bl	8008140 <SD_FindSCR>
 80080e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	e023      	b.n	8008138 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01c      	beq.n	8008134 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f001 face 	bl	80096a8 <SDMMC_CmdAppCommand>
 800810c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	e00f      	b.n	8008138 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2100      	movs	r1, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f001 fb0b 	bl	800973a <SDMMC_CmdBusWidth>
 8008124:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	e003      	b.n	8008138 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008130:	2300      	movs	r3, #0
 8008132:	e001      	b.n	8008138 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008134:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b08f      	sub	sp, #60	; 0x3c
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800814a:	2300      	movs	r3, #0
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800814e:	f7f9 f967 	bl	8001420 <HAL_GetTick>
 8008152:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	2300      	movs	r3, #0
 800815e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2108      	movs	r1, #8
 8008166:	4618      	mov	r0, r3
 8008168:	f001 f95f 	bl	800942a <SDMMC_CmdBlockLength>
 800816c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	e0a8      	b.n	80082ca <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f001 fa8f 	bl	80096a8 <SDMMC_CmdAppCommand>
 800818a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	e099      	b.n	80082ca <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800819a:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800819c:	2308      	movs	r3, #8
 800819e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80081a0:	2330      	movs	r3, #48	; 0x30
 80081a2:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80081a4:	2302      	movs	r3, #2
 80081a6:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f107 0214 	add.w	r2, r7, #20
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f001 f909 	bl	80093d2 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fadc 	bl	8009782 <SDMMC_CmdSendSCR>
 80081ca:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d022      	beq.n	8008218 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	e079      	b.n	80082ca <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00e      	beq.n	8008202 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6819      	ldr	r1, [r3, #0]
 80081e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	f107 020c 	add.w	r2, r7, #12
 80081f0:	18d4      	adds	r4, r2, r3
 80081f2:	4608      	mov	r0, r1
 80081f4:	f001 f878 	bl	80092e8 <SDIO_ReadFIFO>
 80081f8:	4603      	mov	r3, r0
 80081fa:	6023      	str	r3, [r4, #0]
      index++;
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081fe:	3301      	adds	r3, #1
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008202:	f7f9 f90d 	bl	8001420 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008210:	d102      	bne.n	8008218 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008212:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008216:	e058      	b.n	80082ca <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0d6      	beq.n	80081d6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	f003 0308 	and.w	r3, r3, #8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2208      	movs	r2, #8
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800823e:	2308      	movs	r3, #8
 8008240:	e043      	b.n	80082ca <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2202      	movs	r2, #2
 8008256:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008258:	2302      	movs	r3, #2
 800825a:	e036      	b.n	80082ca <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2220      	movs	r2, #32
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008272:	2320      	movs	r3, #32
 8008274:	e029      	b.n	80082ca <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	061a      	lsls	r2, r3, #24
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800828c:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	0a1b      	lsrs	r3, r3, #8
 8008292:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8008296:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80082a2:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80082a4:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	061a      	lsls	r2, r3, #24
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082b2:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	0a1b      	lsrs	r3, r3, #8
 80082b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80082bc:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	0e1b      	lsrs	r3, r3, #24
 80082c2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	373c      	adds	r7, #60	; 0x3c
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd90      	pop	{r4, r7, pc}

080082d2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e025      	b.n	8008332 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f008 fc34 	bl	8010b68 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f000 fe7c 	bl	8009010 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	461a      	mov	r2, r3
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	f000 fee7 	bl	80090f6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d101      	bne.n	8008356 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008352:	2302      	movs	r3, #2
 8008354:	e018      	b.n	8008388 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2202      	movs	r2, #2
 800835a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 ff44 	bl	80091f4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d104      	bne.n	800837e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2205      	movs	r2, #5
 8008378:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800837c:	e003      	b.n	8008386 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d101      	bne.n	80083aa <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80083a6:	2302      	movs	r3, #2
 80083a8:	e00e      	b.n	80083c8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 ff57 	bl	800926c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e01d      	b.n	800841e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f008 fa6e 	bl	80108d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f000 fa14 	bl	800883c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 0307 	and.w	r3, r3, #7
 8008448:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b06      	cmp	r3, #6
 800844e:	d007      	beq.n	8008460 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b02      	cmp	r3, #2
 8008482:	d122      	bne.n	80084ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b02      	cmp	r3, #2
 8008490:	d11b      	bne.n	80084ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f06f 0202 	mvn.w	r2, #2
 800849a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f003 0303 	and.w	r3, r3, #3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f9a5 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 80084b6:	e005      	b.n	80084c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f997 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9a8 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d122      	bne.n	800851e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d11b      	bne.n	800851e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f06f 0204 	mvn.w	r2, #4
 80084ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2202      	movs	r2, #2
 80084f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f97b 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 800850a:	e005      	b.n	8008518 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f96d 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f97e 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b08      	cmp	r3, #8
 800852a:	d122      	bne.n	8008572 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b08      	cmp	r3, #8
 8008538:	d11b      	bne.n	8008572 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f06f 0208 	mvn.w	r2, #8
 8008542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2204      	movs	r2, #4
 8008548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f003 0303 	and.w	r3, r3, #3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f951 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 800855e:	e005      	b.n	800856c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f943 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f954 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b10      	cmp	r3, #16
 800857e:	d122      	bne.n	80085c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b10      	cmp	r3, #16
 800858c:	d11b      	bne.n	80085c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0210 	mvn.w	r2, #16
 8008596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2208      	movs	r2, #8
 800859c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f927 	bl	8008800 <HAL_TIM_IC_CaptureCallback>
 80085b2:	e005      	b.n	80085c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f919 	bl	80087ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f92a 	bl	8008814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10e      	bne.n	80085f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d107      	bne.n	80085f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f06f 0201 	mvn.w	r2, #1
 80085ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f007 fcdd 	bl	800ffac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d10e      	bne.n	800861e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b80      	cmp	r3, #128	; 0x80
 800860c:	d107      	bne.n	800861e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa98 	bl	8008b4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d10e      	bne.n	800864a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d107      	bne.n	800864a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f8ef 	bl	8008828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b20      	cmp	r3, #32
 8008656:	d10e      	bne.n	8008676 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b20      	cmp	r3, #32
 8008664:	d107      	bne.n	8008676 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f06f 0220 	mvn.w	r2, #32
 800866e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fa62 	bl	8008b3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_TIM_ConfigClockSource+0x18>
 8008692:	2302      	movs	r3, #2
 8008694:	e0a6      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x166>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b40      	cmp	r3, #64	; 0x40
 80086cc:	d067      	beq.n	800879e <HAL_TIM_ConfigClockSource+0x120>
 80086ce:	2b40      	cmp	r3, #64	; 0x40
 80086d0:	d80b      	bhi.n	80086ea <HAL_TIM_ConfigClockSource+0x6c>
 80086d2:	2b10      	cmp	r3, #16
 80086d4:	d073      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x140>
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d802      	bhi.n	80086e0 <HAL_TIM_ConfigClockSource+0x62>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d06f      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80086de:	e078      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d06c      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x140>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d06a      	beq.n	80087be <HAL_TIM_ConfigClockSource+0x140>
      break;
 80086e8:	e073      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086ea:	2b70      	cmp	r3, #112	; 0x70
 80086ec:	d00d      	beq.n	800870a <HAL_TIM_ConfigClockSource+0x8c>
 80086ee:	2b70      	cmp	r3, #112	; 0x70
 80086f0:	d804      	bhi.n	80086fc <HAL_TIM_ConfigClockSource+0x7e>
 80086f2:	2b50      	cmp	r3, #80	; 0x50
 80086f4:	d033      	beq.n	800875e <HAL_TIM_ConfigClockSource+0xe0>
 80086f6:	2b60      	cmp	r3, #96	; 0x60
 80086f8:	d041      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80086fa:	e06a      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008700:	d066      	beq.n	80087d0 <HAL_TIM_ConfigClockSource+0x152>
 8008702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008706:	d017      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008708:	e063      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6899      	ldr	r1, [r3, #8]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f000 f9a9 	bl	8008a70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800872c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	609a      	str	r2, [r3, #8]
      break;
 8008736:	e04c      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6899      	ldr	r1, [r3, #8]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f000 f992 	bl	8008a70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800875a:	609a      	str	r2, [r3, #8]
      break;
 800875c:	e039      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6859      	ldr	r1, [r3, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	461a      	mov	r2, r3
 800876c:	f000 f906 	bl	800897c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2150      	movs	r1, #80	; 0x50
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f95f 	bl	8008a3a <TIM_ITRx_SetConfig>
      break;
 800877c:	e029      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6859      	ldr	r1, [r3, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	461a      	mov	r2, r3
 800878c:	f000 f925 	bl	80089da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2160      	movs	r1, #96	; 0x60
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f94f 	bl	8008a3a <TIM_ITRx_SetConfig>
      break;
 800879c:	e019      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6859      	ldr	r1, [r3, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f000 f8e6 	bl	800897c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2140      	movs	r1, #64	; 0x40
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f93f 	bl	8008a3a <TIM_ITRx_SetConfig>
      break;
 80087bc:	e009      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f000 f936 	bl	8008a3a <TIM_ITRx_SetConfig>
      break;
 80087ce:	e000      	b.n	80087d2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80087d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a40      	ldr	r2, [pc, #256]	; (8008950 <TIM_Base_SetConfig+0x114>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885a:	d00f      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a3d      	ldr	r2, [pc, #244]	; (8008954 <TIM_Base_SetConfig+0x118>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a3c      	ldr	r2, [pc, #240]	; (8008958 <TIM_Base_SetConfig+0x11c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a3b      	ldr	r2, [pc, #236]	; (800895c <TIM_Base_SetConfig+0x120>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0x40>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a3a      	ldr	r2, [pc, #232]	; (8008960 <TIM_Base_SetConfig+0x124>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d108      	bne.n	800888e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a2f      	ldr	r2, [pc, #188]	; (8008950 <TIM_Base_SetConfig+0x114>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d02b      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889c:	d027      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a2c      	ldr	r2, [pc, #176]	; (8008954 <TIM_Base_SetConfig+0x118>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d023      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a2b      	ldr	r2, [pc, #172]	; (8008958 <TIM_Base_SetConfig+0x11c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d01f      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a2a      	ldr	r2, [pc, #168]	; (800895c <TIM_Base_SetConfig+0x120>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d01b      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a29      	ldr	r2, [pc, #164]	; (8008960 <TIM_Base_SetConfig+0x124>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d017      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a28      	ldr	r2, [pc, #160]	; (8008964 <TIM_Base_SetConfig+0x128>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a27      	ldr	r2, [pc, #156]	; (8008968 <TIM_Base_SetConfig+0x12c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00f      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a26      	ldr	r2, [pc, #152]	; (800896c <TIM_Base_SetConfig+0x130>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00b      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a25      	ldr	r2, [pc, #148]	; (8008970 <TIM_Base_SetConfig+0x134>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d007      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a24      	ldr	r2, [pc, #144]	; (8008974 <TIM_Base_SetConfig+0x138>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a23      	ldr	r2, [pc, #140]	; (8008978 <TIM_Base_SetConfig+0x13c>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689a      	ldr	r2, [r3, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <TIM_Base_SetConfig+0x114>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_Base_SetConfig+0xf8>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <TIM_Base_SetConfig+0x124>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d103      	bne.n	800893c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	615a      	str	r2, [r3, #20]
}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	40010000 	.word	0x40010000
 8008954:	40000400 	.word	0x40000400
 8008958:	40000800 	.word	0x40000800
 800895c:	40000c00 	.word	0x40000c00
 8008960:	40010400 	.word	0x40010400
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400
 800896c:	40014800 	.word	0x40014800
 8008970:	40001800 	.word	0x40001800
 8008974:	40001c00 	.word	0x40001c00
 8008978:	40002000 	.word	0x40002000

0800897c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	f023 0201 	bic.w	r2, r3, #1
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 030a 	bic.w	r3, r3, #10
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f023 0210 	bic.w	r2, r3, #16
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	031b      	lsls	r3, r3, #12
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b085      	sub	sp, #20
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f043 0307 	orr.w	r3, r3, #7
 8008a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	609a      	str	r2, [r3, #8]
}
 8008a64:	bf00      	nop
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	021a      	lsls	r2, r3, #8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	431a      	orrs	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e032      	b.n	8008b2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e03f      	b.n	8008bf4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f007 fec7 	bl	801091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2224      	movs	r2, #36	; 0x24
 8008b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ba4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f828 	bl	8008bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691a      	ldr	r2, [r3, #16]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	695a      	ldr	r2, [r3, #20]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bfc:	b5b0      	push	{r4, r5, r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008c3c:	f023 030c 	bic.w	r3, r3, #12
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	68f9      	ldr	r1, [r7, #12]
 8008c46:	430b      	orrs	r3, r1
 8008c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699a      	ldr	r2, [r3, #24]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c68:	f040 80e4 	bne.w	8008e34 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4aab      	ldr	r2, [pc, #684]	; (8008f20 <UART_SetConfig+0x324>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d004      	beq.n	8008c80 <UART_SetConfig+0x84>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4aaa      	ldr	r2, [pc, #680]	; (8008f24 <UART_SetConfig+0x328>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d16c      	bne.n	8008d5a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008c80:	f7fd fb96 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008c84:	4602      	mov	r2, r0
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009a      	lsls	r2, r3, #2
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	4aa3      	ldr	r2, [pc, #652]	; (8008f28 <UART_SetConfig+0x32c>)
 8008c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	011c      	lsls	r4, r3, #4
 8008ca4:	f7fd fb84 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009a      	lsls	r2, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fbb2 f5f3 	udiv	r5, r2, r3
 8008cbe:	f7fd fb77 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009a      	lsls	r2, r3, #2
 8008ccc:	441a      	add	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd8:	4a93      	ldr	r2, [pc, #588]	; (8008f28 <UART_SetConfig+0x32c>)
 8008cda:	fba2 2303 	umull	r2, r3, r2, r3
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	2264      	movs	r2, #100	; 0x64
 8008ce2:	fb02 f303 	mul.w	r3, r2, r3
 8008ce6:	1aeb      	subs	r3, r5, r3
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	3332      	adds	r3, #50	; 0x32
 8008cec:	4a8e      	ldr	r2, [pc, #568]	; (8008f28 <UART_SetConfig+0x32c>)
 8008cee:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf2:	095b      	lsrs	r3, r3, #5
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cfa:	441c      	add	r4, r3
 8008cfc:	f7fd fb58 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009a      	lsls	r2, r3, #2
 8008d0a:	441a      	add	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	fbb2 f5f3 	udiv	r5, r2, r3
 8008d16:	f7fd fb4b 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009a      	lsls	r2, r3, #2
 8008d24:	441a      	add	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d30:	4a7d      	ldr	r2, [pc, #500]	; (8008f28 <UART_SetConfig+0x32c>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	095b      	lsrs	r3, r3, #5
 8008d38:	2264      	movs	r2, #100	; 0x64
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	1aeb      	subs	r3, r5, r3
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	3332      	adds	r3, #50	; 0x32
 8008d44:	4a78      	ldr	r2, [pc, #480]	; (8008f28 <UART_SetConfig+0x32c>)
 8008d46:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	f003 0207 	and.w	r2, r3, #7
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4422      	add	r2, r4
 8008d56:	609a      	str	r2, [r3, #8]
 8008d58:	e154      	b.n	8009004 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008d5a:	f7fd fb15 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	009a      	lsls	r2, r3, #2
 8008d68:	441a      	add	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	4a6c      	ldr	r2, [pc, #432]	; (8008f28 <UART_SetConfig+0x32c>)
 8008d76:	fba2 2303 	umull	r2, r3, r2, r3
 8008d7a:	095b      	lsrs	r3, r3, #5
 8008d7c:	011c      	lsls	r4, r3, #4
 8008d7e:	f7fd fb03 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	009a      	lsls	r2, r3, #2
 8008d8c:	441a      	add	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	fbb2 f5f3 	udiv	r5, r2, r3
 8008d98:	f7fd faf6 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009a      	lsls	r2, r3, #2
 8008da6:	441a      	add	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db2:	4a5d      	ldr	r2, [pc, #372]	; (8008f28 <UART_SetConfig+0x32c>)
 8008db4:	fba2 2303 	umull	r2, r3, r2, r3
 8008db8:	095b      	lsrs	r3, r3, #5
 8008dba:	2264      	movs	r2, #100	; 0x64
 8008dbc:	fb02 f303 	mul.w	r3, r2, r3
 8008dc0:	1aeb      	subs	r3, r5, r3
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	3332      	adds	r3, #50	; 0x32
 8008dc6:	4a58      	ldr	r2, [pc, #352]	; (8008f28 <UART_SetConfig+0x32c>)
 8008dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dcc:	095b      	lsrs	r3, r3, #5
 8008dce:	005b      	lsls	r3, r3, #1
 8008dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dd4:	441c      	add	r4, r3
 8008dd6:	f7fd fad7 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	009a      	lsls	r2, r3, #2
 8008de4:	441a      	add	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	fbb2 f5f3 	udiv	r5, r2, r3
 8008df0:	f7fd faca 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008df4:	4602      	mov	r2, r0
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009a      	lsls	r2, r3, #2
 8008dfe:	441a      	add	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	005b      	lsls	r3, r3, #1
 8008e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0a:	4a47      	ldr	r2, [pc, #284]	; (8008f28 <UART_SetConfig+0x32c>)
 8008e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	2264      	movs	r2, #100	; 0x64
 8008e14:	fb02 f303 	mul.w	r3, r2, r3
 8008e18:	1aeb      	subs	r3, r5, r3
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	3332      	adds	r3, #50	; 0x32
 8008e1e:	4a42      	ldr	r2, [pc, #264]	; (8008f28 <UART_SetConfig+0x32c>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	f003 0207 	and.w	r2, r3, #7
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4422      	add	r2, r4
 8008e30:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8008e32:	e0e7      	b.n	8009004 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a39      	ldr	r2, [pc, #228]	; (8008f20 <UART_SetConfig+0x324>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <UART_SetConfig+0x24c>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a38      	ldr	r2, [pc, #224]	; (8008f24 <UART_SetConfig+0x328>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d171      	bne.n	8008f2c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008e48:	f7fd fab2 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009a      	lsls	r2, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e62:	4a31      	ldr	r2, [pc, #196]	; (8008f28 <UART_SetConfig+0x32c>)
 8008e64:	fba2 2303 	umull	r2, r3, r2, r3
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	011c      	lsls	r4, r3, #4
 8008e6c:	f7fd faa0 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009a      	lsls	r2, r3, #2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	fbb2 f5f3 	udiv	r5, r2, r3
 8008e86:	f7fd fa93 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009a      	lsls	r2, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea0:	4a21      	ldr	r2, [pc, #132]	; (8008f28 <UART_SetConfig+0x32c>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	2264      	movs	r2, #100	; 0x64
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	1aeb      	subs	r3, r5, r3
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	3332      	adds	r3, #50	; 0x32
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	; (8008f28 <UART_SetConfig+0x32c>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec0:	441c      	add	r4, r3
 8008ec2:	f7fd fa75 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009a      	lsls	r2, r3, #2
 8008ed0:	441a      	add	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	fbb2 f5f3 	udiv	r5, r2, r3
 8008edc:	f7fd fa68 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009a      	lsls	r2, r3, #2
 8008eea:	441a      	add	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	; (8008f28 <UART_SetConfig+0x32c>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	2264      	movs	r2, #100	; 0x64
 8008f00:	fb02 f303 	mul.w	r3, r2, r3
 8008f04:	1aeb      	subs	r3, r5, r3
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	3332      	adds	r3, #50	; 0x32
 8008f0a:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <UART_SetConfig+0x32c>)
 8008f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f10:	095b      	lsrs	r3, r3, #5
 8008f12:	f003 020f 	and.w	r2, r3, #15
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4422      	add	r2, r4
 8008f1c:	609a      	str	r2, [r3, #8]
 8008f1e:	e071      	b.n	8009004 <UART_SetConfig+0x408>
 8008f20:	40011000 	.word	0x40011000
 8008f24:	40011400 	.word	0x40011400
 8008f28:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008f2c:	f7fd fa2c 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008f30:	4602      	mov	r2, r0
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009a      	lsls	r2, r3, #2
 8008f3a:	441a      	add	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f46:	4a31      	ldr	r2, [pc, #196]	; (800900c <UART_SetConfig+0x410>)
 8008f48:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4c:	095b      	lsrs	r3, r3, #5
 8008f4e:	011c      	lsls	r4, r3, #4
 8008f50:	f7fd fa1a 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008f54:	4602      	mov	r2, r0
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009a      	lsls	r2, r3, #2
 8008f5e:	441a      	add	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	fbb2 f5f3 	udiv	r5, r2, r3
 8008f6a:	f7fd fa0d 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009a      	lsls	r2, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f84:	4a21      	ldr	r2, [pc, #132]	; (800900c <UART_SetConfig+0x410>)
 8008f86:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	2264      	movs	r2, #100	; 0x64
 8008f8e:	fb02 f303 	mul.w	r3, r2, r3
 8008f92:	1aeb      	subs	r3, r5, r3
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	3332      	adds	r3, #50	; 0x32
 8008f98:	4a1c      	ldr	r2, [pc, #112]	; (800900c <UART_SetConfig+0x410>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fa4:	441c      	add	r4, r3
 8008fa6:	f7fd f9ef 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008faa:	4602      	mov	r2, r0
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009a      	lsls	r2, r3, #2
 8008fb4:	441a      	add	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8008fc0:	f7fd f9e2 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009a      	lsls	r2, r3, #2
 8008fce:	441a      	add	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fda:	4a0c      	ldr	r2, [pc, #48]	; (800900c <UART_SetConfig+0x410>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	2264      	movs	r2, #100	; 0x64
 8008fe4:	fb02 f303 	mul.w	r3, r2, r3
 8008fe8:	1aeb      	subs	r3, r5, r3
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	3332      	adds	r3, #50	; 0x32
 8008fee:	4a07      	ldr	r2, [pc, #28]	; (800900c <UART_SetConfig+0x410>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f003 020f 	and.w	r2, r3, #15
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4422      	add	r2, r4
 8009000:	609a      	str	r2, [r3, #8]
}
 8009002:	e7ff      	b.n	8009004 <UART_SetConfig+0x408>
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bdb0      	pop	{r4, r5, r7, pc}
 800900c:	51eb851f 	.word	0x51eb851f

08009010 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d029      	beq.n	800907e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800903a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009044:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800904a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009050:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009056:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800905c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009062:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009068:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800906e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	e034      	b.n	80090e8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800908a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009094:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800909a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80090ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090b2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090bc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80090c2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80090c8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80090ce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80090d4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b087      	sub	sp, #28
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d02e      	beq.n	800916e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800911c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	3b01      	subs	r3, #1
 800912a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800912c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	3b01      	subs	r3, #1
 8009134:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009136:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	3b01      	subs	r3, #1
 800913e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009140:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	3b01      	subs	r3, #1
 8009148:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800914a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	3b01      	subs	r3, #1
 8009152:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009154:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	3b01      	subs	r3, #1
 800915c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800915e:	4313      	orrs	r3, r2
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	609a      	str	r2, [r3, #8]
 800916c:	e03b      	b.n	80091e6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800917a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800917e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	3b01      	subs	r3, #1
 8009186:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	3b01      	subs	r3, #1
 800918e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009190:	4313      	orrs	r3, r2
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80091a4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80091b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80091be:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80091c8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80091d2:	4313      	orrs	r3, r2
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009210:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	3b01      	subs	r3, #1
 8009218:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800921a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800922c:	f7f8 f8f8 	bl	8001420 <HAL_GetTick>
 8009230:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009232:	e010      	b.n	8009256 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923a:	d00c      	beq.n	8009256 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <FMC_SDRAM_SendCommand+0x5e>
 8009242:	f7f8 f8ed 	bl	8001420 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d201      	bcs.n	8009256 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e006      	b.n	8009264 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b20      	cmp	r3, #32
 8009260:	d0e8      	beq.n	8009234 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	695a      	ldr	r2, [r3, #20]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009292:	b084      	sub	sp, #16
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	f107 001c 	add.w	r0, r7, #28
 80092a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80092a8:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80092aa:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80092ac:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80092b0:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80092b4:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80092b8:	431a      	orrs	r2, r3
             Init.ClockDiv
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80092bc:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80092cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	b004      	add	sp, #16
 80092e6:	4770      	bx	lr

080092e8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2203      	movs	r2, #3
 800930e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0303 	and.w	r3, r3, #3
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800933a:	b480      	push	{r7}
 800933c:	b085      	sub	sp, #20
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009358:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800935e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009364:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	4313      	orrs	r3, r2
 800936a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009374:	f023 030f 	bic.w	r3, r3, #15
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	b2db      	uxtb	r3, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3314      	adds	r3, #20
 80093ba:	461a      	mov	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	4413      	add	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
}  
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093f8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80093fe:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009404:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	431a      	orrs	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800941c:	2300      	movs	r3, #0

}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b088      	sub	sp, #32
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009434:	2300      	movs	r3, #0
 8009436:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800943c:	2310      	movs	r3, #16
 800943e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009440:	2340      	movs	r3, #64	; 0x40
 8009442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800944c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800944e:	f107 0308 	add.w	r3, r7, #8
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff ff70 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800945a:	f241 3288 	movw	r2, #5000	; 0x1388
 800945e:	2110      	movs	r1, #16
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa63 	bl	800992c <SDMMC_GetCmdResp1>
 8009466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009468:	69fb      	ldr	r3, [r7, #28]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b088      	sub	sp, #32
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800947c:	2300      	movs	r3, #0
 800947e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009484:	2311      	movs	r3, #17
 8009486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009488:	2340      	movs	r3, #64	; 0x40
 800948a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009494:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009496:	f107 0308 	add.w	r3, r7, #8
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ff4c 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80094a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a6:	2111      	movs	r1, #17
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fa3f 	bl	800992c <SDMMC_GetCmdResp1>
 80094ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b0:	69fb      	ldr	r3, [r7, #28]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3720      	adds	r7, #32
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b088      	sub	sp, #32
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80094cc:	2312      	movs	r3, #18
 80094ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094d0:	2340      	movs	r3, #64	; 0x40
 80094d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094d4:	2300      	movs	r3, #0
 80094d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094dc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094de:	f107 0308 	add.w	r3, r7, #8
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff28 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80094ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ee:	2112      	movs	r1, #18
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa1b 	bl	800992c <SDMMC_GetCmdResp1>
 80094f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f8:	69fb      	ldr	r3, [r7, #28]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b088      	sub	sp, #32
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009514:	2318      	movs	r3, #24
 8009516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009518:	2340      	movs	r3, #64	; 0x40
 800951a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009524:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009526:	f107 0308 	add.w	r3, r7, #8
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff ff04 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009532:	f241 3288 	movw	r2, #5000	; 0x1388
 8009536:	2118      	movs	r1, #24
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9f7 	bl	800992c <SDMMC_GetCmdResp1>
 800953e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009540:	69fb      	ldr	r3, [r7, #28]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3720      	adds	r7, #32
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b088      	sub	sp, #32
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800955c:	2319      	movs	r3, #25
 800955e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009560:	2340      	movs	r3, #64	; 0x40
 8009562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800956c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800956e:	f107 0308 	add.w	r3, r7, #8
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff fee0 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800957a:	f241 3288 	movw	r2, #5000	; 0x1388
 800957e:	2119      	movs	r1, #25
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f9d3 	bl	800992c <SDMMC_GetCmdResp1>
 8009586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009588:	69fb      	ldr	r3, [r7, #28]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3720      	adds	r7, #32
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800959c:	2300      	movs	r3, #0
 800959e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80095a4:	230c      	movs	r3, #12
 80095a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095a8:	2340      	movs	r3, #64	; 0x40
 80095aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80095b6:	f107 0308 	add.w	r3, r7, #8
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff febc 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80095c2:	4a05      	ldr	r2, [pc, #20]	; (80095d8 <SDMMC_CmdStopTransfer+0x44>)
 80095c4:	210c      	movs	r1, #12
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f9b0 	bl	800992c <SDMMC_GetCmdResp1>
 80095cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ce:	69fb      	ldr	r3, [r7, #28]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	05f5e100 	.word	0x05f5e100

080095dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80095f0:	2307      	movs	r3, #7
 80095f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80095fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009600:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009602:	f107 0310 	add.w	r3, r7, #16
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fe96 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800960e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009612:	2107      	movs	r1, #7
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 f989 	bl	800992c <SDMMC_GetCmdResp1>
 800961a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800961e:	4618      	mov	r0, r3
 8009620:	3728      	adds	r7, #40	; 0x28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b088      	sub	sp, #32
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800963a:	2300      	movs	r3, #0
 800963c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009646:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009648:	f107 0308 	add.w	r3, r7, #8
 800964c:	4619      	mov	r1, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff fe73 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f93f 	bl	80098d8 <SDMMC_GetCmdError>
 800965a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800965c:	69fb      	ldr	r3, [r7, #28]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3720      	adds	r7, #32
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b088      	sub	sp, #32
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800966e:	2300      	movs	r3, #0
 8009670:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009672:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009676:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009678:	2308      	movs	r3, #8
 800967a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009688:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800968a:	f107 0308 	add.w	r3, r7, #8
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff fe52 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fb10 	bl	8009cbc <SDMMC_GetCmdResp7>
 800969c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800969e:	69fb      	ldr	r3, [r7, #28]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3720      	adds	r7, #32
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80096ba:	2337      	movs	r3, #55	; 0x37
 80096bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ca:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fe31 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80096d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096dc:	2137      	movs	r1, #55	; 0x37
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f924 	bl	800992c <SDMMC_GetCmdResp1>
 80096e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096e6:	69fb      	ldr	r3, [r7, #28]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3720      	adds	r7, #32
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800970a:	2329      	movs	r3, #41	; 0x29
 800970c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fe09 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fa25 	bl	8009b78 <SDMMC_GetCmdResp3>
 800972e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009730:	69fb      	ldr	r3, [r7, #28]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b088      	sub	sp, #32
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800974c:	2306      	movs	r3, #6
 800974e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009750:	2340      	movs	r3, #64	; 0x40
 8009752:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009754:	2300      	movs	r3, #0
 8009756:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800975c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800975e:	f107 0308 	add.w	r3, r7, #8
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fde8 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800976a:	f241 3288 	movw	r2, #5000	; 0x1388
 800976e:	2106      	movs	r1, #6
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f8db 	bl	800992c <SDMMC_GetCmdResp1>
 8009776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009778:	69fb      	ldr	r3, [r7, #28]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3720      	adds	r7, #32
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800978a:	2300      	movs	r3, #0
 800978c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009792:	2333      	movs	r3, #51	; 0x33
 8009794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009796:	2340      	movs	r3, #64	; 0x40
 8009798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800979e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a4:	f107 0308 	add.w	r3, r7, #8
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fdc5 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80097b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b4:	2133      	movs	r1, #51	; 0x33
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f8b8 	bl	800992c <SDMMC_GetCmdResp1>
 80097bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097be:	69fb      	ldr	r3, [r7, #28]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3720      	adds	r7, #32
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80097d8:	2302      	movs	r3, #2
 80097da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80097dc:	23c0      	movs	r3, #192	; 0xc0
 80097de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ea:	f107 0308 	add.w	r3, r7, #8
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff fda2 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f97e 	bl	8009af8 <SDMMC_GetCmdResp2>
 80097fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097fe:	69fb      	ldr	r3, [r7, #28]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3720      	adds	r7, #32
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800981a:	2309      	movs	r3, #9
 800981c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800981e:	23c0      	movs	r3, #192	; 0xc0
 8009820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff fd81 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f95d 	bl	8009af8 <SDMMC_GetCmdResp2>
 800983e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009840:	69fb      	ldr	r3, [r7, #28]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800985c:	2303      	movs	r3, #3
 800985e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800986c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986e:	f107 0308 	add.w	r3, r7, #8
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff fd60 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	2103      	movs	r1, #3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f9ae 	bl	8009be0 <SDMMC_GetCmdResp6>
 8009884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009886:	69fb      	ldr	r3, [r7, #28]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80098a2:	230d      	movs	r3, #13
 80098a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098a6:	2340      	movs	r3, #64	; 0x40
 80098a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098aa:	2300      	movs	r3, #0
 80098ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b4:	f107 0308 	add.w	r3, r7, #8
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fd3d 	bl	800933a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80098c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c4:	210d      	movs	r1, #13
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f830 	bl	800992c <SDMMC_GetCmdResp1>
 80098cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098ce:	69fb      	ldr	r3, [r7, #28]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80098d8:	b490      	push	{r4, r7}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098e0:	4b10      	ldr	r3, [pc, #64]	; (8009924 <SDMMC_GetCmdError+0x4c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a10      	ldr	r2, [pc, #64]	; (8009928 <SDMMC_GetCmdError+0x50>)
 80098e6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ea:	0a5b      	lsrs	r3, r3, #9
 80098ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098f4:	4623      	mov	r3, r4
 80098f6:	1e5c      	subs	r4, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d102      	bne.n	8009902 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009900:	e00a      	b.n	8009918 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f2      	beq.n	80098f4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bc90      	pop	{r4, r7}
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	2000003c 	.word	0x2000003c
 8009928:	10624dd3 	.word	0x10624dd3

0800992c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	460b      	mov	r3, r1
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800993a:	4b6c      	ldr	r3, [pc, #432]	; (8009aec <SDMMC_GetCmdResp1+0x1c0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a6c      	ldr	r2, [pc, #432]	; (8009af0 <SDMMC_GetCmdResp1+0x1c4>)
 8009940:	fba2 2303 	umull	r2, r3, r2, r3
 8009944:	0a5b      	lsrs	r3, r3, #9
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800994c:	4623      	mov	r3, r4
 800994e:	1e5c      	subs	r4, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009954:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009958:	e0c3      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0f2      	beq.n	800994c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996a:	f003 0304 	and.w	r3, r3, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	d004      	beq.n	800997c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2204      	movs	r2, #4
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009978:	2304      	movs	r3, #4
 800997a:	e0b2      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2201      	movs	r2, #1
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800998e:	2301      	movs	r3, #1
 8009990:	e0a7      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff fcfb 	bl	800938e <SDIO_GetCommandResponse>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	4293      	cmp	r3, r2
 80099a0:	d001      	beq.n	80099a6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e09d      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80099ae:	2100      	movs	r1, #0
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7ff fcf9 	bl	80093a8 <SDIO_GetResponse>
 80099b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4b4e      	ldr	r3, [pc, #312]	; (8009af4 <SDMMC_GetCmdResp1+0x1c8>)
 80099bc:	4013      	ands	r3, r2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e08d      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	da02      	bge.n	80099d2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80099cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099d0:	e087      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80099dc:	2340      	movs	r3, #64	; 0x40
 80099de:	e080      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80099ea:	2380      	movs	r3, #128	; 0x80
 80099ec:	e079      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80099f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099fc:	e071      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a0c:	e069      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d002      	beq.n	8009a1e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a1c:	e061      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a2c:	e059      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d002      	beq.n	8009a3e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a3c:	e051      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a4c:	e049      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d002      	beq.n	8009a5e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a5c:	e041      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a6c:	e039      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a7c:	e031      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a8c:	e029      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a9c:	e021      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009aa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009aac:	e019      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009abc:	e011      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009acc:	e009      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f003 0308 	and.w	r3, r3, #8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009ad8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009adc:	e001      	b.n	8009ae2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	371c      	adds	r7, #28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd90      	pop	{r4, r7, pc}
 8009aea:	bf00      	nop
 8009aec:	2000003c 	.word	0x2000003c
 8009af0:	10624dd3 	.word	0x10624dd3
 8009af4:	fdffe008 	.word	0xfdffe008

08009af8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009af8:	b490      	push	{r4, r7}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b00:	4b1b      	ldr	r3, [pc, #108]	; (8009b70 <SDMMC_GetCmdResp2+0x78>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a1b      	ldr	r2, [pc, #108]	; (8009b74 <SDMMC_GetCmdResp2+0x7c>)
 8009b06:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0a:	0a5b      	lsrs	r3, r3, #9
 8009b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b14:	4623      	mov	r3, r4
 8009b16:	1e5c      	subs	r4, r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b20:	e020      	b.n	8009b64 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0f2      	beq.n	8009b14 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b32:	f003 0304 	and.w	r3, r3, #4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b40:	2304      	movs	r3, #4
 8009b42:	e00f      	b.n	8009b64 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b48:	f003 0301 	and.w	r3, r3, #1
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e004      	b.n	8009b64 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bc90      	pop	{r4, r7}
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	2000003c 	.word	0x2000003c
 8009b74:	10624dd3 	.word	0x10624dd3

08009b78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009b78:	b490      	push	{r4, r7}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b80:	4b15      	ldr	r3, [pc, #84]	; (8009bd8 <SDMMC_GetCmdResp3+0x60>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a15      	ldr	r2, [pc, #84]	; (8009bdc <SDMMC_GetCmdResp3+0x64>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	0a5b      	lsrs	r3, r3, #9
 8009b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b94:	4623      	mov	r3, r4
 8009b96:	1e5c      	subs	r4, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ba0:	e015      	b.n	8009bce <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f2      	beq.n	8009b94 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	e004      	b.n	8009bce <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009bca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bc90      	pop	{r4, r7}
 8009bd6:	4770      	bx	lr
 8009bd8:	2000003c 	.word	0x2000003c
 8009bdc:	10624dd3 	.word	0x10624dd3

08009be0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009be0:	b590      	push	{r4, r7, lr}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	460b      	mov	r3, r1
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009bee:	4b31      	ldr	r3, [pc, #196]	; (8009cb4 <SDMMC_GetCmdResp6+0xd4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a31      	ldr	r2, [pc, #196]	; (8009cb8 <SDMMC_GetCmdResp6+0xd8>)
 8009bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf8:	0a5b      	lsrs	r3, r3, #9
 8009bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c02:	4623      	mov	r3, r4
 8009c04:	1e5c      	subs	r4, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d102      	bne.n	8009c10 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c0e:	e04c      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0f2      	beq.n	8009c02 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c2e:	2304      	movs	r3, #4
 8009c30:	e03b      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e030      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff fba0 	bl	800938e <SDIO_GetCommandResponse>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	461a      	mov	r2, r3
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d001      	beq.n	8009c5c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e026      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff fb9e 	bl	80093a8 <SDIO_GetResponse>
 8009c6c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	0c1b      	lsrs	r3, r3, #16
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009c82:	2300      	movs	r3, #0
 8009c84:	e011      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c94:	e009      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ca4:	e001      	b.n	8009caa <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd90      	pop	{r4, r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	2000003c 	.word	0x2000003c
 8009cb8:	10624dd3 	.word	0x10624dd3

08009cbc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009cbc:	b490      	push	{r4, r7}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cc4:	4b18      	ldr	r3, [pc, #96]	; (8009d28 <SDMMC_GetCmdResp7+0x6c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a18      	ldr	r2, [pc, #96]	; (8009d2c <SDMMC_GetCmdResp7+0x70>)
 8009cca:	fba2 2303 	umull	r2, r3, r2, r3
 8009cce:	0a5b      	lsrs	r3, r3, #9
 8009cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009cd8:	4623      	mov	r3, r4
 8009cda:	1e5c      	subs	r4, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce4:	e01a      	b.n	8009d1c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0f2      	beq.n	8009cd8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf6:	f003 0304 	and.w	r3, r3, #4
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d004      	beq.n	8009d08 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2240      	movs	r2, #64	; 0x40
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d04:	2304      	movs	r3, #4
 8009d06:	e009      	b.n	8009d1c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2240      	movs	r2, #64	; 0x40
 8009d18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009d1a:	2300      	movs	r3, #0
  
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bc90      	pop	{r4, r7}
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	2000003c 	.word	0x2000003c
 8009d2c:	10624dd3 	.word	0x10624dd3

08009d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d30:	b084      	sub	sp, #16
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	f107 001c 	add.w	r0, r7, #28
 8009d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d122      	bne.n	8009d8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d105      	bne.n	8009d82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f94a 	bl	800a01c <USB_CoreReset>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
 8009d8c:	e01a      	b.n	8009dc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f93e 	bl	800a01c <USB_CoreReset>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	639a      	str	r2, [r3, #56]	; 0x38
 8009db6:	e005      	b.n	8009dc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d10b      	bne.n	8009de2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f043 0206 	orr.w	r2, r3, #6
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	f043 0220 	orr.w	r2, r3, #32
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dee:	b004      	add	sp, #16
 8009df0:	4770      	bx	lr

08009df2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f043 0201 	orr.w	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f023 0201 	bic.w	r2, r3, #1
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d106      	bne.n	8009e62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60da      	str	r2, [r3, #12]
 8009e60:	e00b      	b.n	8009e7a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e62:	78fb      	ldrb	r3, [r7, #3]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	60da      	str	r2, [r3, #12]
 8009e74:	e001      	b.n	8009e7a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e003      	b.n	8009e82 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e7a:	2032      	movs	r0, #50	; 0x32
 8009e7c:	f7f7 fadc 	bl	8001438 <HAL_Delay>

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	019b      	lsls	r3, r3, #6
 8009e9e:	f043 0220 	orr.w	r2, r3, #32
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <USB_FlushTxFifo+0x48>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d901      	bls.n	8009eb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e006      	b.n	8009ec6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	f003 0320 	and.w	r3, r3, #32
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d0f0      	beq.n	8009ea6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	00030d40 	.word	0x00030d40

08009ed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2210      	movs	r2, #16
 8009ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3301      	adds	r3, #1
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <USB_FlushRxFifo+0x40>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d901      	bls.n	8009efc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e006      	b.n	8009f0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b10      	cmp	r3, #16
 8009f06:	d0f0      	beq.n	8009eea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	00030d40 	.word	0x00030d40

08009f1c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	4611      	mov	r1, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	71fb      	strb	r3, [r7, #7]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d11a      	bne.n	8009f78 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f42:	88bb      	ldrh	r3, [r7, #4]
 8009f44:	3303      	adds	r3, #3
 8009f46:	089b      	lsrs	r3, r3, #2
 8009f48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	e00f      	b.n	8009f70 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	031a      	lsls	r2, r3, #12
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	3304      	adds	r3, #4
 8009f68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d3eb      	bcc.n	8009f50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3724      	adds	r7, #36	; 0x24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b089      	sub	sp, #36	; 0x24
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	4613      	mov	r3, r2
 8009f92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009f9c:	88fb      	ldrh	r3, [r7, #6]
 8009f9e:	3303      	adds	r3, #3
 8009fa0:	089b      	lsrs	r3, r3, #2
 8009fa2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61bb      	str	r3, [r7, #24]
 8009fa8:	e00b      	b.n	8009fc2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	601a      	str	r2, [r3, #0]
    pDest++;
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	61bb      	str	r3, [r7, #24]
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d3ef      	bcc.n	8009faa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009fca:	69fb      	ldr	r3, [r7, #28]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3724      	adds	r7, #36	; 0x24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4013      	ands	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ffe:	b480      	push	{r7}
 800a000:	b083      	sub	sp, #12
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f003 0301 	and.w	r3, r3, #1
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	4a13      	ldr	r2, [pc, #76]	; (800a080 <USB_CoreReset+0x64>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d901      	bls.n	800a03a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e01b      	b.n	800a072 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	daf2      	bge.n	800a028 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f043 0201 	orr.w	r2, r3, #1
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3301      	adds	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4a09      	ldr	r2, [pc, #36]	; (800a080 <USB_CoreReset+0x64>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d901      	bls.n	800a064 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e006      	b.n	800a072 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d0f0      	beq.n	800a052 <USB_CoreReset+0x36>

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	00030d40 	.word	0x00030d40

0800a084 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a084:	b084      	sub	sp, #16
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	f107 001c 	add.w	r0, r7, #28
 800a092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d018      	beq.n	800a0f0 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d10a      	bne.n	800a0da <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0d2:	f043 0304 	orr.w	r3, r3, #4
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	e014      	b.n	800a104 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0e8:	f023 0304 	bic.w	r3, r3, #4
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	e009      	b.n	800a104 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0fe:	f023 0304 	bic.w	r3, r3, #4
 800a102:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a104:	2110      	movs	r1, #16
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff fec0 	bl	8009e8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff fee3 	bl	8009ed8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a112:	2300      	movs	r3, #0
 800a114:	60fb      	str	r3, [r7, #12]
 800a116:	e015      	b.n	800a144 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a124:	461a      	mov	r2, r3
 800a126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a12a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4413      	add	r3, r2
 800a134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a138:	461a      	mov	r2, r3
 800a13a:	2300      	movs	r3, #0
 800a13c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3301      	adds	r3, #1
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d3e5      	bcc.n	800a118 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a14c:	2101      	movs	r1, #1
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f8ac 	bl	800a2ac <USB_DriveVbus>

  HAL_Delay(200U);
 800a154:	20c8      	movs	r0, #200	; 0xc8
 800a156:	f7f7 f96f 	bl	8001438 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a166:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a16c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <USB_HostInit+0x14c>)
 800a180:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a13      	ldr	r2, [pc, #76]	; (800a1d4 <USB_HostInit+0x150>)
 800a186:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a18a:	e009      	b.n	800a1a0 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2280      	movs	r2, #128	; 0x80
 800a190:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a10      	ldr	r2, [pc, #64]	; (800a1d8 <USB_HostInit+0x154>)
 800a196:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <USB_HostInit+0x158>)
 800a19c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d105      	bne.n	800a1b2 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	f043 0210 	orr.w	r2, r3, #16
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	699a      	ldr	r2, [r3, #24]
 800a1b6:	4b0a      	ldr	r3, [pc, #40]	; (800a1e0 <USB_HostInit+0x15c>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1ca:	b004      	add	sp, #16
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	01000200 	.word	0x01000200
 800a1d4:	00e00300 	.word	0x00e00300
 800a1d8:	00600080 	.word	0x00600080
 800a1dc:	004000e0 	.word	0x004000e0
 800a1e0:	a3200008 	.word	0xa3200008

0800a1e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a202:	f023 0303 	bic.w	r3, r3, #3
 800a206:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a21c:	4313      	orrs	r3, r2
 800a21e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a220:	78fb      	ldrb	r3, [r7, #3]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d107      	bne.n	800a236 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a22c:	461a      	mov	r2, r3
 800a22e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a232:	6053      	str	r3, [r2, #4]
 800a234:	e009      	b.n	800a24a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d106      	bne.n	800a24a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a242:	461a      	mov	r2, r3
 800a244:	f241 7370 	movw	r3, #6000	; 0x1770
 800a248:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a264:	2300      	movs	r3, #0
 800a266:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a278:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a286:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a288:	2064      	movs	r0, #100	; 0x64
 800a28a:	f7f7 f8d5 	bl	8001438 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a29a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a29c:	200a      	movs	r0, #10
 800a29e:	f7f7 f8cb 	bl	8001438 <HAL_Delay>

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a2d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d109      	bne.n	800a2f0 <USB_DriveVbus+0x44>
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d106      	bne.n	800a2f0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a2ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2ee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fa:	d109      	bne.n	800a310 <USB_DriveVbus+0x64>
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d106      	bne.n	800a310 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a30e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	0c5b      	lsrs	r3, r3, #17
 800a33c:	f003 0303 	and.w	r3, r3, #3
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	b29b      	uxth	r3, r3
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
	...

0800a370 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	4603      	mov	r3, r0
 800a380:	70fb      	strb	r3, [r7, #3]
 800a382:	460b      	mov	r3, r1
 800a384:	70bb      	strb	r3, [r7, #2]
 800a386:	4613      	mov	r3, r2
 800a388:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a3a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d87e      	bhi.n	800a4ac <USB_HC_Init+0x13c>
 800a3ae:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <USB_HC_Init+0x44>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a46f 	.word	0x0800a46f
 800a3bc:	0800a3c5 	.word	0x0800a3c5
 800a3c0:	0800a431 	.word	0x0800a431
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f240 439d 	movw	r3, #1181	; 0x49d
 800a3d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a3d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	da10      	bge.n	800a402 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	78fa      	ldrb	r2, [r7, #3]
 800a3f0:	0151      	lsls	r1, r2, #5
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	440a      	add	r2, r1
 800a3f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3fe:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a400:	e057      	b.n	800a4b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d051      	beq.n	800a4b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	4413      	add	r3, r2
 800a416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	78fa      	ldrb	r2, [r7, #3]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	440a      	add	r2, r1
 800a424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a428:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a42c:	60d3      	str	r3, [r2, #12]
      break;
 800a42e:	e040      	b.n	800a4b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4413      	add	r3, r2
 800a438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a43c:	461a      	mov	r2, r3
 800a43e:	f240 639d 	movw	r3, #1693	; 0x69d
 800a442:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a444:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	da34      	bge.n	800a4b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4413      	add	r3, r2
 800a454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	78fa      	ldrb	r2, [r7, #3]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	440a      	add	r2, r1
 800a462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a46a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a46c:	e023      	b.n	800a4b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	4413      	add	r3, r2
 800a476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47a:	461a      	mov	r2, r3
 800a47c:	f240 2325 	movw	r3, #549	; 0x225
 800a480:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a482:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a486:	2b00      	cmp	r3, #0
 800a488:	da17      	bge.n	800a4ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a48a:	78fb      	ldrb	r3, [r7, #3]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	4413      	add	r3, r2
 800a492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	78fa      	ldrb	r2, [r7, #3]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a4a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a4aa:	e006      	b.n	800a4ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a4b0:	e004      	b.n	800a4bc <USB_HC_Init+0x14c>
      break;
 800a4b2:	bf00      	nop
 800a4b4:	e002      	b.n	800a4bc <USB_HC_Init+0x14c>
      break;
 800a4b6:	bf00      	nop
 800a4b8:	e000      	b.n	800a4bc <USB_HC_Init+0x14c>
      break;
 800a4ba:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4c2:	699a      	ldr	r2, [r3, #24]
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	f003 030f 	and.w	r3, r3, #15
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a4e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	da03      	bge.n	800a4f6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a4ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4f2:	613b      	str	r3, [r7, #16]
 800a4f4:	e001      	b.n	800a4fa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a4fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d103      	bne.n	800a50a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e001      	b.n	800a50e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a50e:	787b      	ldrb	r3, [r7, #1]
 800a510:	059b      	lsls	r3, r3, #22
 800a512:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a516:	78bb      	ldrb	r3, [r7, #2]
 800a518:	02db      	lsls	r3, r3, #11
 800a51a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a51e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a524:	049b      	lsls	r3, r3, #18
 800a526:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a52a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a52c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a52e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a532:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a538:	78fb      	ldrb	r3, [r7, #3]
 800a53a:	0159      	lsls	r1, r3, #5
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	440b      	add	r3, r1
 800a540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a544:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a54a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a54c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a550:	2b03      	cmp	r3, #3
 800a552:	d10f      	bne.n	800a574 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	78fa      	ldrb	r2, [r7, #3]
 800a564:	0151      	lsls	r1, r2, #5
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	440a      	add	r2, r1
 800a56a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a56e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a572:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
}
 800a576:	4618      	mov	r0, r3
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop

0800a584 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08c      	sub	sp, #48	; 0x30
 800a588:	af02      	add	r7, sp, #8
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a59c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d028      	beq.n	800a600 <USB_HC_StartXfer+0x7c>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	791b      	ldrb	r3, [r3, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d124      	bne.n	800a600 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10b      	bne.n	800a5d4 <USB_HC_StartXfer+0x50>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	795b      	ldrb	r3, [r3, #5]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d107      	bne.n	800a5d4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fa2e 	bl	800aa2c <USB_DoPing>
      return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e112      	b.n	800a7fa <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d112      	bne.n	800a600 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	0151      	lsls	r1, r2, #5
 800a5ec:	6a3a      	ldr	r2, [r7, #32]
 800a5ee:	440a      	add	r2, r1
 800a5f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a5f8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d018      	beq.n	800a63a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	8912      	ldrh	r2, [r2, #8]
 800a610:	4413      	add	r3, r2
 800a612:	3b01      	subs	r3, #1
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	8912      	ldrh	r2, [r2, #8]
 800a618:	fbb3 f3f2 	udiv	r3, r3, r2
 800a61c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a61e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a620:	8b7b      	ldrh	r3, [r7, #26]
 800a622:	429a      	cmp	r2, r3
 800a624:	d90b      	bls.n	800a63e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a626:	8b7b      	ldrh	r3, [r7, #26]
 800a628:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a62a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	8912      	ldrh	r2, [r2, #8]
 800a630:	fb02 f203 	mul.w	r2, r2, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	611a      	str	r2, [r3, #16]
 800a638:	e001      	b.n	800a63e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a63a:	2301      	movs	r3, #1
 800a63c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	78db      	ldrb	r3, [r3, #3]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d006      	beq.n	800a654 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a646:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	8912      	ldrh	r2, [r2, #8]
 800a64c:	fb02 f203 	mul.w	r2, r2, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a65c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a65e:	04d9      	lsls	r1, r3, #19
 800a660:	4b68      	ldr	r3, [pc, #416]	; (800a804 <USB_HC_StartXfer+0x280>)
 800a662:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a664:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	7a9b      	ldrb	r3, [r3, #10]
 800a66a:	075b      	lsls	r3, r3, #29
 800a66c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a670:	69f9      	ldr	r1, [r7, #28]
 800a672:	0148      	lsls	r0, r1, #5
 800a674:	6a39      	ldr	r1, [r7, #32]
 800a676:	4401      	add	r1, r0
 800a678:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a67c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a67e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	68d9      	ldr	r1, [r3, #12]
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	4413      	add	r3, r2
 800a692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a696:	460a      	mov	r2, r1
 800a698:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	bf0c      	ite	eq
 800a6aa:	2301      	moveq	r3, #1
 800a6ac:	2300      	movne	r3, #0
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69fa      	ldr	r2, [r7, #28]
 800a6c2:	0151      	lsls	r1, r2, #5
 800a6c4:	6a3a      	ldr	r2, [r7, #32]
 800a6c6:	440a      	add	r2, r1
 800a6c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a6d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	7e7b      	ldrb	r3, [r7, #25]
 800a6e2:	075b      	lsls	r3, r3, #29
 800a6e4:	69f9      	ldr	r1, [r7, #28]
 800a6e6:	0148      	lsls	r0, r1, #5
 800a6e8:	6a39      	ldr	r1, [r7, #32]
 800a6ea:	4401      	add	r1, r0
 800a6ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a41      	ldr	r2, [pc, #260]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a704:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a706:	4b40      	ldr	r3, [pc, #256]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a70e:	4a3e      	ldr	r2, [pc, #248]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a710:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	78db      	ldrb	r3, [r3, #3]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d006      	beq.n	800a728 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a71a:	4b3b      	ldr	r3, [pc, #236]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a722:	4a39      	ldr	r2, [pc, #228]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	e005      	b.n	800a734 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a728:	4b37      	ldr	r3, [pc, #220]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a730:	4a35      	ldr	r2, [pc, #212]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a732:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a734:	4b34      	ldr	r3, [pc, #208]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a73c:	4a32      	ldr	r2, [pc, #200]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a73e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	4413      	add	r3, r2
 800a748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74c:	461a      	mov	r2, r3
 800a74e:	4b2e      	ldr	r3, [pc, #184]	; (800a808 <USB_HC_StartXfer+0x284>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d14e      	bne.n	800a7f8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	78db      	ldrb	r3, [r3, #3]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d14a      	bne.n	800a7f8 <USB_HC_StartXfer+0x274>
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d046      	beq.n	800a7f8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	79db      	ldrb	r3, [r3, #7]
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d830      	bhi.n	800a7d4 <USB_HC_StartXfer+0x250>
 800a772:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <USB_HC_StartXfer+0x1f4>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a789 	.word	0x0800a789
 800a77c:	0800a7ad 	.word	0x0800a7ad
 800a780:	0800a789 	.word	0x0800a789
 800a784:	0800a7ad 	.word	0x0800a7ad
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	3303      	adds	r3, #3
 800a78e:	089b      	lsrs	r3, r3, #2
 800a790:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a792:	8afa      	ldrh	r2, [r7, #22]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	b29b      	uxth	r3, r3
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d91c      	bls.n	800a7d8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	f043 0220 	orr.w	r2, r3, #32
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	619a      	str	r2, [r3, #24]
          }
          break;
 800a7aa:	e015      	b.n	800a7d8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	3303      	adds	r3, #3
 800a7b2:	089b      	lsrs	r3, r3, #2
 800a7b4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a7b6:	8afa      	ldrh	r2, [r7, #22]
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d90a      	bls.n	800a7dc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	619a      	str	r2, [r3, #24]
          }
          break;
 800a7d2:	e003      	b.n	800a7dc <USB_HC_StartXfer+0x258>

        default:
          break;
 800a7d4:	bf00      	nop
 800a7d6:	e002      	b.n	800a7de <USB_HC_StartXfer+0x25a>
          break;
 800a7d8:	bf00      	nop
 800a7da:	e000      	b.n	800a7de <USB_HC_StartXfer+0x25a>
          break;
 800a7dc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	68d9      	ldr	r1, [r3, #12]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	785a      	ldrb	r2, [r3, #1]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	b298      	uxth	r0, r3
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f7ff fb92 	bl	8009f1c <USB_WritePacket>
    }
  }

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3728      	adds	r7, #40	; 0x28
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	1ff80000 	.word	0x1ff80000
 800a808:	20000244 	.word	0x20000244

0800a80c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a81e:	695b      	ldr	r3, [r3, #20]
 800a820:	b29b      	uxth	r3, r3
}
 800a822:	4618      	mov	r0, r3
 800a824:	3714      	adds	r7, #20
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a82e:	b480      	push	{r7}
 800a830:	b087      	sub	sp, #28
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	460b      	mov	r3, r1
 800a838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a83e:	78fb      	ldrb	r3, [r7, #3]
 800a840:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	0c9b      	lsrs	r3, r3, #18
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <USB_HC_Halt+0x3a>
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d16c      	bne.n	800a942 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	0151      	lsls	r1, r2, #5
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	440a      	add	r2, r1
 800a87e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a886:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a890:	2b00      	cmp	r3, #0
 800a892:	d143      	bne.n	800a91c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	015a      	lsls	r2, r3, #5
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	0151      	lsls	r1, r2, #5
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	440a      	add	r2, r1
 800a8aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8f2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	617b      	str	r3, [r7, #20]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a900:	d81d      	bhi.n	800a93e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a918:	d0ec      	beq.n	800a8f4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a91a:	e080      	b.n	800aa1e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4413      	add	r3, r2
 800a924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	440a      	add	r2, r1
 800a932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a93a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a93c:	e06f      	b.n	800aa1e <USB_HC_Halt+0x1f0>
          break;
 800a93e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a940:	e06d      	b.n	800aa1e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	0151      	lsls	r1, r2, #5
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	440a      	add	r2, r1
 800a958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a95c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a960:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d143      	bne.n	800a9fa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	0151      	lsls	r1, r2, #5
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	440a      	add	r2, r1
 800a988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a990:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	0151      	lsls	r1, r2, #5
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	440a      	add	r2, r1
 800a9a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9b0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	0151      	lsls	r1, r2, #5
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	440a      	add	r2, r1
 800a9c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9d0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9de:	d81d      	bhi.n	800aa1c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9f6:	d0ec      	beq.n	800a9d2 <USB_HC_Halt+0x1a4>
 800a9f8:	e011      	b.n	800aa1e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e000      	b.n	800aa1e <USB_HC_Halt+0x1f0>
          break;
 800aa1c:	bf00      	nop
    }
  }

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	371c      	adds	r7, #28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aa3c:	78fb      	ldrb	r3, [r7, #3]
 800aa3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aa40:	2301      	movs	r3, #1
 800aa42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	04da      	lsls	r2, r3, #19
 800aa48:	4b15      	ldr	r3, [pc, #84]	; (800aaa0 <USB_DoPing+0x74>)
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	1ff80000 	.word	0x1ff80000

0800aaa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7ff f9ad 	bl	8009e14 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800aaba:	2110      	movs	r1, #16
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7ff f9e5 	bl	8009e8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff fa08 	bl	8009ed8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800aac8:	2300      	movs	r3, #0
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	e01f      	b.n	800ab0e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aae4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aaf4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab02:	461a      	mov	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	613b      	str	r3, [r7, #16]
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b0f      	cmp	r3, #15
 800ab12:	d9dc      	bls.n	800aace <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ab14:	2300      	movs	r3, #0
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	e034      	b.n	800ab84 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	3301      	adds	r3, #1
 800ab58:	617b      	str	r3, [r7, #20]
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab60:	d80c      	bhi.n	800ab7c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	015a      	lsls	r2, r3, #5
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab78:	d0ec      	beq.n	800ab54 <USB_StopHost+0xb0>
 800ab7a:	e000      	b.n	800ab7e <USB_StopHost+0xda>
        break;
 800ab7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	3301      	adds	r3, #1
 800ab82:	613b      	str	r3, [r7, #16]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	2b0f      	cmp	r3, #15
 800ab88:	d9c7      	bls.n	800ab1a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab90:	461a      	mov	r2, r3
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab9e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff f926 	bl	8009df2 <USB_EnableGlobalInt>

  return HAL_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	4613      	mov	r3, r2
 800abbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abbe:	2301      	movs	r3, #1
 800abc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abc6:	4b1f      	ldr	r3, [pc, #124]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abc8:	7a5b      	ldrb	r3, [r3, #9]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d131      	bne.n	800ac34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abd0:	4b1c      	ldr	r3, [pc, #112]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abd2:	7a5b      	ldrb	r3, [r3, #9]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	461a      	mov	r2, r3
 800abd8:	4b1a      	ldr	r3, [pc, #104]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abda:	2100      	movs	r1, #0
 800abdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abe0:	7a5b      	ldrb	r3, [r3, #9]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	4a17      	ldr	r2, [pc, #92]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800abee:	4b15      	ldr	r3, [pc, #84]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abf0:	7a5b      	ldrb	r3, [r3, #9]
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800abf8:	4413      	add	r3, r2
 800abfa:	79fa      	ldrb	r2, [r7, #7]
 800abfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800abfe:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800ac00:	7a5b      	ldrb	r3, [r3, #9]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	1c5a      	adds	r2, r3, #1
 800ac06:	b2d1      	uxtb	r1, r2
 800ac08:	4a0e      	ldr	r2, [pc, #56]	; (800ac44 <FATFS_LinkDriverEx+0x94>)
 800ac0a:	7251      	strb	r1, [r2, #9]
 800ac0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac0e:	7dbb      	ldrb	r3, [r7, #22]
 800ac10:	3330      	adds	r3, #48	; 0x30
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	223a      	movs	r2, #58	; 0x3a
 800ac1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	3302      	adds	r3, #2
 800ac24:	222f      	movs	r2, #47	; 0x2f
 800ac26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	3303      	adds	r3, #3
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20000248 	.word	0x20000248

0800ac48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac52:	2200      	movs	r2, #0
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff ffaa 	bl	800abb0 <FATFS_LinkDriverEx>
 800ac5c:	4603      	mov	r3, r0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ac74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac78:	2b84      	cmp	r3, #132	; 0x84
 800ac7a:	d005      	beq.n	800ac88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ac7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	3303      	adds	r3, #3
 800ac86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac9c:	f3ef 8305 	mrs	r3, IPSR
 800aca0:	607b      	str	r3, [r7, #4]
  return(result);
 800aca2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	bf14      	ite	ne
 800aca8:	2301      	movne	r3, #1
 800acaa:	2300      	moveq	r3, #0
 800acac:	b2db      	uxtb	r3, r3
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800acbe:	f001 fd21 	bl	800c704 <vTaskStartScheduler>
  
  return osOK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800accc:	f002 f962 	bl	800cf94 <xTaskGetSchedulerState>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d101      	bne.n	800acda <osKernelRunning+0x12>
    return 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	e000      	b.n	800acdc <osKernelRunning+0x14>
  else
    return 1;
 800acda:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800acdc:	4618      	mov	r0, r3
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ace4:	f7ff ffd7 	bl	800ac96 <inHandlerMode>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800acee:	f001 fe21 	bl	800c934 <xTaskGetTickCountFromISR>
 800acf2:	4603      	mov	r3, r0
 800acf4:	e002      	b.n	800acfc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800acf6:	f001 fe0d 	bl	800c914 <xTaskGetTickCount>
 800acfa:	4603      	mov	r3, r0
  }
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad02:	b089      	sub	sp, #36	; 0x24
 800ad04:	af04      	add	r7, sp, #16
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d020      	beq.n	800ad54 <osThreadCreate+0x54>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d01c      	beq.n	800ad54 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685c      	ldr	r4, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681d      	ldr	r5, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	691e      	ldr	r6, [r3, #16]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7ff ff9a 	bl	800ac66 <makeFreeRtosPriority>
 800ad32:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad3c:	9202      	str	r2, [sp, #8]
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	9100      	str	r1, [sp, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	4632      	mov	r2, r6
 800ad46:	4629      	mov	r1, r5
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f001 fb16 	bl	800c37a <xTaskCreateStatic>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	e01c      	b.n	800ad8e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685c      	ldr	r4, [r3, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ad60:	b29e      	uxth	r6, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff ff7c 	bl	800ac66 <makeFreeRtosPriority>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	f107 030c 	add.w	r3, r7, #12
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	9200      	str	r2, [sp, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f001 fb54 	bl	800c42c <xTaskCreate>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d001      	beq.n	800ad8e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e000      	b.n	800ad90 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad98 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <osDelay+0x16>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	e000      	b.n	800adb0 <osDelay+0x18>
 800adae:	2301      	movs	r3, #1
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 fc73 	bl	800c69c <vTaskDelay>
  
  return osOK;
 800adb6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800adc0:	b590      	push	{r4, r7, lr}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d012      	beq.n	800adf8 <osMessageCreate+0x38>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00e      	beq.n	800adf8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6859      	ldr	r1, [r3, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689a      	ldr	r2, [r3, #8]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68dc      	ldr	r4, [r3, #12]
 800adea:	2300      	movs	r3, #0
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	4623      	mov	r3, r4
 800adf0:	f000 fdfe 	bl	800b9f0 <xQueueGenericCreateStatic>
 800adf4:	4603      	mov	r3, r0
 800adf6:	e008      	b.n	800ae0a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6818      	ldr	r0, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	4619      	mov	r1, r3
 800ae04:	f000 fe66 	bl	800bad4 <xQueueGenericCreate>
 800ae08:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd90      	pop	{r4, r7, pc}
	...

0800ae14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <osMessagePut+0x1e>
    ticks = 1;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ae32:	f7ff ff30 	bl	800ac96 <inHandlerMode>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d018      	beq.n	800ae6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ae3c:	f107 0210 	add.w	r2, r7, #16
 800ae40:	f107 0108 	add.w	r1, r7, #8
 800ae44:	2300      	movs	r3, #0
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 ff9a 	bl	800bd80 <xQueueGenericSendFromISR>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d001      	beq.n	800ae56 <osMessagePut+0x42>
      return osErrorOS;
 800ae52:	23ff      	movs	r3, #255	; 0xff
 800ae54:	e018      	b.n	800ae88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d014      	beq.n	800ae86 <osMessagePut+0x72>
 800ae5c:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <osMessagePut+0x7c>)
 800ae5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	e00b      	b.n	800ae86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ae6e:	f107 0108 	add.w	r1, r7, #8
 800ae72:	2300      	movs	r3, #0
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 fe88 	bl	800bb8c <xQueueGenericSend>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d001      	beq.n	800ae86 <osMessagePut+0x72>
      return osErrorOS;
 800ae82:	23ff      	movs	r3, #255	; 0xff
 800ae84:	e000      	b.n	800ae88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	e000ed04 	.word	0xe000ed04

0800ae94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ae94:	b590      	push	{r4, r7, lr}
 800ae96:	b08b      	sub	sp, #44	; 0x2c
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10a      	bne.n	800aec4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800aeae:	2380      	movs	r3, #128	; 0x80
 800aeb0:	617b      	str	r3, [r7, #20]
    return event;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	461c      	mov	r4, r3
 800aeb6:	f107 0314 	add.w	r3, r7, #20
 800aeba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aec2:	e054      	b.n	800af6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aed2:	d103      	bne.n	800aedc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aed8:	627b      	str	r3, [r7, #36]	; 0x24
 800aeda:	e009      	b.n	800aef0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d006      	beq.n	800aef0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <osMessageGet+0x5c>
      ticks = 1;
 800aeec:	2301      	movs	r3, #1
 800aeee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aef0:	f7ff fed1 	bl	800ac96 <inHandlerMode>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d01c      	beq.n	800af34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aefa:	f107 0220 	add.w	r2, r7, #32
 800aefe:	f107 0314 	add.w	r3, r7, #20
 800af02:	3304      	adds	r3, #4
 800af04:	4619      	mov	r1, r3
 800af06:	68b8      	ldr	r0, [r7, #8]
 800af08:	f001 f8aa 	bl	800c060 <xQueueReceiveFromISR>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d102      	bne.n	800af18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800af12:	2310      	movs	r3, #16
 800af14:	617b      	str	r3, [r7, #20]
 800af16:	e001      	b.n	800af1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800af18:	2300      	movs	r3, #0
 800af1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d01d      	beq.n	800af5e <osMessageGet+0xca>
 800af22:	4b15      	ldr	r3, [pc, #84]	; (800af78 <osMessageGet+0xe4>)
 800af24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	e014      	b.n	800af5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800af34:	f107 0314 	add.w	r3, r7, #20
 800af38:	3304      	adds	r3, #4
 800af3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3c:	4619      	mov	r1, r3
 800af3e:	68b8      	ldr	r0, [r7, #8]
 800af40:	f000 ffb2 	bl	800bea8 <xQueueReceive>
 800af44:	4603      	mov	r3, r0
 800af46:	2b01      	cmp	r3, #1
 800af48:	d102      	bne.n	800af50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800af4a:	2310      	movs	r3, #16
 800af4c:	617b      	str	r3, [r7, #20]
 800af4e:	e006      	b.n	800af5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <osMessageGet+0xc6>
 800af56:	2300      	movs	r3, #0
 800af58:	e000      	b.n	800af5c <osMessageGet+0xc8>
 800af5a:	2340      	movs	r3, #64	; 0x40
 800af5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	461c      	mov	r4, r3
 800af62:	f107 0314 	add.w	r3, r7, #20
 800af66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	372c      	adds	r7, #44	; 0x2c
 800af72:	46bd      	mov	sp, r7
 800af74:	bd90      	pop	{r4, r7, pc}
 800af76:	bf00      	nop
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08a      	sub	sp, #40	; 0x28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af84:	2300      	movs	r3, #0
 800af86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af88:	f001 fc1a 	bl	800c7c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af8c:	4b59      	ldr	r3, [pc, #356]	; (800b0f4 <pvPortMalloc+0x178>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af94:	f000 f910 	bl	800b1b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af98:	4b57      	ldr	r3, [pc, #348]	; (800b0f8 <pvPortMalloc+0x17c>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4013      	ands	r3, r2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f040 808c 	bne.w	800b0be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01c      	beq.n	800afe6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800afac:	2208      	movs	r2, #8
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4413      	add	r3, r2
 800afb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d013      	beq.n	800afe6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f023 0307 	bic.w	r3, r3, #7
 800afc4:	3308      	adds	r3, #8
 800afc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	617b      	str	r3, [r7, #20]
 800afe4:	e7fe      	b.n	800afe4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d068      	beq.n	800b0be <pvPortMalloc+0x142>
 800afec:	4b43      	ldr	r3, [pc, #268]	; (800b0fc <pvPortMalloc+0x180>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d863      	bhi.n	800b0be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aff6:	4b42      	ldr	r3, [pc, #264]	; (800b100 <pvPortMalloc+0x184>)
 800aff8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800affa:	4b41      	ldr	r3, [pc, #260]	; (800b100 <pvPortMalloc+0x184>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b000:	e004      	b.n	800b00c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d903      	bls.n	800b01e <pvPortMalloc+0xa2>
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1f1      	bne.n	800b002 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b01e:	4b35      	ldr	r3, [pc, #212]	; (800b0f4 <pvPortMalloc+0x178>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b024:	429a      	cmp	r2, r3
 800b026:	d04a      	beq.n	800b0be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2208      	movs	r2, #8
 800b02e:	4413      	add	r3, r2
 800b030:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	1ad2      	subs	r2, r2, r3
 800b042:	2308      	movs	r3, #8
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	429a      	cmp	r2, r3
 800b048:	d91e      	bls.n	800b088 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b04a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4413      	add	r3, r2
 800b050:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d009      	beq.n	800b070 <pvPortMalloc+0xf4>
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	613b      	str	r3, [r7, #16]
 800b06e:	e7fe      	b.n	800b06e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	1ad2      	subs	r2, r2, r3
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b082:	69b8      	ldr	r0, [r7, #24]
 800b084:	f000 f8fa 	bl	800b27c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b088:	4b1c      	ldr	r3, [pc, #112]	; (800b0fc <pvPortMalloc+0x180>)
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	4a1a      	ldr	r2, [pc, #104]	; (800b0fc <pvPortMalloc+0x180>)
 800b094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b096:	4b19      	ldr	r3, [pc, #100]	; (800b0fc <pvPortMalloc+0x180>)
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	4b1a      	ldr	r3, [pc, #104]	; (800b104 <pvPortMalloc+0x188>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d203      	bcs.n	800b0aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0a2:	4b16      	ldr	r3, [pc, #88]	; (800b0fc <pvPortMalloc+0x180>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a17      	ldr	r2, [pc, #92]	; (800b104 <pvPortMalloc+0x188>)
 800b0a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	4b12      	ldr	r3, [pc, #72]	; (800b0f8 <pvPortMalloc+0x17c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0be:	f001 fb8d 	bl	800c7dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b0c8:	f004 f912 	bl	800f2f0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d009      	beq.n	800b0ea <pvPortMalloc+0x16e>
 800b0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	e7fe      	b.n	800b0e8 <pvPortMalloc+0x16c>
	return pvReturn;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3728      	adds	r7, #40	; 0x28
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	2000825c 	.word	0x2000825c
 800b0f8:	20008268 	.word	0x20008268
 800b0fc:	20008260 	.word	0x20008260
 800b100:	20008254 	.word	0x20008254
 800b104:	20008264 	.word	0x20008264

0800b108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d046      	beq.n	800b1a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b11a:	2308      	movs	r3, #8
 800b11c:	425b      	negs	r3, r3
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4413      	add	r3, r2
 800b122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	4b20      	ldr	r3, [pc, #128]	; (800b1b0 <vPortFree+0xa8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4013      	ands	r3, r2
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <vPortFree+0x42>
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e7fe      	b.n	800b148 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d009      	beq.n	800b166 <vPortFree+0x5e>
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60bb      	str	r3, [r7, #8]
 800b164:	e7fe      	b.n	800b164 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	685a      	ldr	r2, [r3, #4]
 800b16a:	4b11      	ldr	r3, [pc, #68]	; (800b1b0 <vPortFree+0xa8>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4013      	ands	r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	d019      	beq.n	800b1a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d115      	bne.n	800b1a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <vPortFree+0xa8>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	43db      	mvns	r3, r3
 800b186:	401a      	ands	r2, r3
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b18c:	f001 fb18 	bl	800c7c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <vPortFree+0xac>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4413      	add	r3, r2
 800b19a:	4a06      	ldr	r2, [pc, #24]	; (800b1b4 <vPortFree+0xac>)
 800b19c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b19e:	6938      	ldr	r0, [r7, #16]
 800b1a0:	f000 f86c 	bl	800b27c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b1a4:	f001 fb1a 	bl	800c7dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1a8:	bf00      	nop
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20008268 	.word	0x20008268
 800b1b4:	20008260 	.word	0x20008260

0800b1b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1c4:	4b27      	ldr	r3, [pc, #156]	; (800b264 <prvHeapInit+0xac>)
 800b1c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f003 0307 	and.w	r3, r3, #7
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00c      	beq.n	800b1ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3307      	adds	r3, #7
 800b1d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	4a1f      	ldr	r2, [pc, #124]	; (800b264 <prvHeapInit+0xac>)
 800b1e8:	4413      	add	r3, r2
 800b1ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1f0:	4a1d      	ldr	r2, [pc, #116]	; (800b268 <prvHeapInit+0xb0>)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1f6:	4b1c      	ldr	r3, [pc, #112]	; (800b268 <prvHeapInit+0xb0>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	4413      	add	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b204:	2208      	movs	r2, #8
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 0307 	bic.w	r3, r3, #7
 800b212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4a15      	ldr	r2, [pc, #84]	; (800b26c <prvHeapInit+0xb4>)
 800b218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b21a:	4b14      	ldr	r3, [pc, #80]	; (800b26c <prvHeapInit+0xb4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2200      	movs	r2, #0
 800b220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b222:	4b12      	ldr	r3, [pc, #72]	; (800b26c <prvHeapInit+0xb4>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	1ad2      	subs	r2, r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b238:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <prvHeapInit+0xb4>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	4a0a      	ldr	r2, [pc, #40]	; (800b270 <prvHeapInit+0xb8>)
 800b246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	4a09      	ldr	r2, [pc, #36]	; (800b274 <prvHeapInit+0xbc>)
 800b24e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b250:	4b09      	ldr	r3, [pc, #36]	; (800b278 <prvHeapInit+0xc0>)
 800b252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b256:	601a      	str	r2, [r3, #0]
}
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	20000254 	.word	0x20000254
 800b268:	20008254 	.word	0x20008254
 800b26c:	2000825c 	.word	0x2000825c
 800b270:	20008264 	.word	0x20008264
 800b274:	20008260 	.word	0x20008260
 800b278:	20008268 	.word	0x20008268

0800b27c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b284:	4b28      	ldr	r3, [pc, #160]	; (800b328 <prvInsertBlockIntoFreeList+0xac>)
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	e002      	b.n	800b290 <prvInsertBlockIntoFreeList+0x14>
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	429a      	cmp	r2, r3
 800b298:	d8f7      	bhi.n	800b28a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d108      	bne.n	800b2be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	441a      	add	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d118      	bne.n	800b304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b15      	ldr	r3, [pc, #84]	; (800b32c <prvInsertBlockIntoFreeList+0xb0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d00d      	beq.n	800b2fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	441a      	add	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	601a      	str	r2, [r3, #0]
 800b2f8:	e008      	b.n	800b30c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2fa:	4b0c      	ldr	r3, [pc, #48]	; (800b32c <prvInsertBlockIntoFreeList+0xb0>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	e003      	b.n	800b30c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	429a      	cmp	r2, r3
 800b312:	d002      	beq.n	800b31a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b31a:	bf00      	nop
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	20008254 	.word	0x20008254
 800b32c:	2000825c 	.word	0x2000825c

0800b330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f103 0208 	add.w	r2, r3, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f103 0208 	add.w	r2, r3, #8
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f103 0208 	add.w	r2, r3, #8
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	689a      	ldr	r2, [r3, #8]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3e8:	d103      	bne.n	800b3f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e00c      	b.n	800b40c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	e002      	b.n	800b400 <vListInsert+0x2e>
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d2f6      	bcs.n	800b3fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	685a      	ldr	r2, [r3, #4]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	601a      	str	r2, [r3, #0]
}
 800b438:	bf00      	nop
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6892      	ldr	r2, [r2, #8]
 800b45a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6852      	ldr	r2, [r2, #4]
 800b464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d103      	bne.n	800b478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	1e5a      	subs	r2, r3, #1
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3b04      	subs	r3, #4
 800b4a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3b04      	subs	r3, #4
 800b4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	f023 0201 	bic.w	r2, r3, #1
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c8:	4a0c      	ldr	r2, [pc, #48]	; (800b4fc <pxPortInitialiseStack+0x64>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3b14      	subs	r3, #20
 800b4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3b04      	subs	r3, #4
 800b4de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f06f 0202 	mvn.w	r2, #2
 800b4e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3b20      	subs	r3, #32
 800b4ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	0800b501 	.word	0x0800b501

0800b500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b50a:	4b11      	ldr	r3, [pc, #68]	; (800b550 <prvTaskExitError+0x50>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b512:	d009      	beq.n	800b528 <prvTaskExitError+0x28>
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	60fb      	str	r3, [r7, #12]
 800b526:	e7fe      	b.n	800b526 <prvTaskExitError+0x26>
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b53a:	bf00      	nop
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0fc      	beq.n	800b53c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	20000014 	.word	0x20000014
	...

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20008274 	.word	0x20008274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	; (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5b6:	4b44      	ldr	r3, [pc, #272]	; (800b6c8 <xPortStartScheduler+0x118>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a44      	ldr	r2, [pc, #272]	; (800b6cc <xPortStartScheduler+0x11c>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d109      	bne.n	800b5d4 <xPortStartScheduler+0x24>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	613b      	str	r3, [r7, #16]
 800b5d2:	e7fe      	b.n	800b5d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5d4:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <xPortStartScheduler+0x118>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a3d      	ldr	r2, [pc, #244]	; (800b6d0 <xPortStartScheduler+0x120>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d109      	bne.n	800b5f2 <xPortStartScheduler+0x42>
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	e7fe      	b.n	800b5f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5f2:	4b38      	ldr	r3, [pc, #224]	; (800b6d4 <xPortStartScheduler+0x124>)
 800b5f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	22ff      	movs	r2, #255	; 0xff
 800b602:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b614:	b2da      	uxtb	r2, r3
 800b616:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <xPortStartScheduler+0x128>)
 800b618:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b61a:	4b30      	ldr	r3, [pc, #192]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b61c:	2207      	movs	r2, #7
 800b61e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b620:	e009      	b.n	800b636 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b622:	4b2e      	ldr	r3, [pc, #184]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3b01      	subs	r3, #1
 800b628:	4a2c      	ldr	r2, [pc, #176]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b62a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b62c:	78fb      	ldrb	r3, [r7, #3]
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	b2db      	uxtb	r3, r3
 800b634:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b636:	78fb      	ldrb	r3, [r7, #3]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b63e:	2b80      	cmp	r3, #128	; 0x80
 800b640:	d0ef      	beq.n	800b622 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b642:	4b26      	ldr	r3, [pc, #152]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f1c3 0307 	rsb	r3, r3, #7
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d009      	beq.n	800b662 <xPortStartScheduler+0xb2>
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60bb      	str	r3, [r7, #8]
 800b660:	e7fe      	b.n	800b660 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b662:	4b1e      	ldr	r3, [pc, #120]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	4a1c      	ldr	r2, [pc, #112]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b66a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b674:	4a19      	ldr	r2, [pc, #100]	; (800b6dc <xPortStartScheduler+0x12c>)
 800b676:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b680:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a16      	ldr	r2, [pc, #88]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b68a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b68c:	4b14      	ldr	r3, [pc, #80]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a13      	ldr	r2, [pc, #76]	; (800b6e0 <xPortStartScheduler+0x130>)
 800b692:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b696:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b698:	f000 f8d6 	bl	800b848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b69c:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <xPortStartScheduler+0x134>)
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6a2:	f000 f8f5 	bl	800b890 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a0f      	ldr	r2, [pc, #60]	; (800b6e8 <xPortStartScheduler+0x138>)
 800b6ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6b2:	f7ff ff69 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6b6:	f001 fa0b 	bl	800cad0 <vTaskSwitchContext>
	prvTaskExitError();
 800b6ba:	f7ff ff21 	bl	800b500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed00 	.word	0xe000ed00
 800b6cc:	410fc271 	.word	0x410fc271
 800b6d0:	410fc270 	.word	0x410fc270
 800b6d4:	e000e400 	.word	0xe000e400
 800b6d8:	2000826c 	.word	0x2000826c
 800b6dc:	20008270 	.word	0x20008270
 800b6e0:	e000ed20 	.word	0xe000ed20
 800b6e4:	20000014 	.word	0x20000014
 800b6e8:	e000ef34 	.word	0xe000ef34

0800b6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <vPortEnterCritical+0x54>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	4a0d      	ldr	r2, [pc, #52]	; (800b740 <vPortEnterCritical+0x54>)
 800b70c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b70e:	4b0c      	ldr	r3, [pc, #48]	; (800b740 <vPortEnterCritical+0x54>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d10e      	bne.n	800b734 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <vPortEnterCritical+0x58>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d009      	beq.n	800b734 <vPortEnterCritical+0x48>
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	e7fe      	b.n	800b732 <vPortEnterCritical+0x46>
	}
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr
 800b740:	20000014 	.word	0x20000014
 800b744:	e000ed04 	.word	0xe000ed04

0800b748 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74e:	4b11      	ldr	r3, [pc, #68]	; (800b794 <vPortExitCritical+0x4c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <vPortExitCritical+0x22>
 800b756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	e7fe      	b.n	800b768 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x4c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3b01      	subs	r3, #1
 800b770:	4a08      	ldr	r2, [pc, #32]	; (800b794 <vPortExitCritical+0x4c>)
 800b772:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b774:	4b07      	ldr	r3, [pc, #28]	; (800b794 <vPortExitCritical+0x4c>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d104      	bne.n	800b786 <vPortExitCritical+0x3e>
 800b77c:	2300      	movs	r3, #0
 800b77e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20000014 	.word	0x20000014
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f001 f97e 	bl	800cad0 <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20008274 	.word	0x20008274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b820:	f001 f89a 	bl	800c958 <xTaskIncrementTick>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <SysTick_Handler+0x3c>)
 800b82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	2300      	movs	r3, #0
 800b834:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b83c:	bf00      	nop
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	e000ed04 	.word	0xe000ed04

0800b848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b84c:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <vPortSetupTimerInterrupt+0x34>)
 800b84e:	2200      	movs	r2, #0
 800b850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b852:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x38>)
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <vPortSetupTimerInterrupt+0x3c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x40>)
 800b85e:	fba2 2303 	umull	r2, r3, r2, r3
 800b862:	099b      	lsrs	r3, r3, #6
 800b864:	4a09      	ldr	r2, [pc, #36]	; (800b88c <vPortSetupTimerInterrupt+0x44>)
 800b866:	3b01      	subs	r3, #1
 800b868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <vPortSetupTimerInterrupt+0x34>)
 800b86c:	2207      	movs	r2, #7
 800b86e:	601a      	str	r2, [r3, #0]
}
 800b870:	bf00      	nop
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	e000e010 	.word	0xe000e010
 800b880:	e000e018 	.word	0xe000e018
 800b884:	2000003c 	.word	0x2000003c
 800b888:	10624dd3 	.word	0x10624dd3
 800b88c:	e000e014 	.word	0xe000e014

0800b890 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b890:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a0 <vPortEnableVFP+0x10>
 800b894:	6801      	ldr	r1, [r0, #0]
 800b896:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89a:	6001      	str	r1, [r0, #0]
 800b89c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b89e:	bf00      	nop
 800b8a0:	e000ed88 	.word	0xe000ed88

0800b8a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8aa:	f3ef 8305 	mrs	r3, IPSR
 800b8ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b0f      	cmp	r3, #15
 800b8b4:	d913      	bls.n	800b8de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8b6:	4a16      	ldr	r2, [pc, #88]	; (800b910 <vPortValidateInterruptPriority+0x6c>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c0:	4b14      	ldr	r3, [pc, #80]	; (800b914 <vPortValidateInterruptPriority+0x70>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	7afa      	ldrb	r2, [r7, #11]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d209      	bcs.n	800b8de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	607b      	str	r3, [r7, #4]
 800b8dc:	e7fe      	b.n	800b8dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8de:	4b0e      	ldr	r3, [pc, #56]	; (800b918 <vPortValidateInterruptPriority+0x74>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8e6:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <vPortValidateInterruptPriority+0x78>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d909      	bls.n	800b902 <vPortValidateInterruptPriority+0x5e>
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	e7fe      	b.n	800b900 <vPortValidateInterruptPriority+0x5c>
	}
 800b902:	bf00      	nop
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	e000e3f0 	.word	0xe000e3f0
 800b914:	2000826c 	.word	0x2000826c
 800b918:	e000ed0c 	.word	0xe000ed0c
 800b91c:	20008270 	.word	0x20008270

0800b920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d109      	bne.n	800b948 <xQueueGenericReset+0x28>
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	60bb      	str	r3, [r7, #8]
 800b946:	e7fe      	b.n	800b946 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b948:	f7ff fed0 	bl	800b6ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b954:	68f9      	ldr	r1, [r7, #12]
 800b956:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b958:	fb01 f303 	mul.w	r3, r1, r3
 800b95c:	441a      	add	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b978:	3b01      	subs	r3, #1
 800b97a:	68f9      	ldr	r1, [r7, #12]
 800b97c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b97e:	fb01 f303 	mul.w	r3, r1, r3
 800b982:	441a      	add	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	22ff      	movs	r2, #255	; 0xff
 800b98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	22ff      	movs	r2, #255	; 0xff
 800b994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d114      	bne.n	800b9c8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d01a      	beq.n	800b9dc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3310      	adds	r3, #16
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 f934 	bl	800cc18 <xTaskRemoveFromEventList>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d012      	beq.n	800b9dc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <xQueueGenericReset+0xcc>)
 800b9b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	e009      	b.n	800b9dc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	3310      	adds	r3, #16
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff fcaf 	bl	800b330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3324      	adds	r3, #36	; 0x24
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff fcaa 	bl	800b330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9dc:	f7ff feb4 	bl	800b748 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9e0:	2301      	movs	r3, #1
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	e000ed04 	.word	0xe000ed04

0800b9f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b08e      	sub	sp, #56	; 0x38
 800b9f4:	af02      	add	r7, sp, #8
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d109      	bne.n	800ba18 <xQueueGenericCreateStatic+0x28>
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba16:	e7fe      	b.n	800ba16 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d109      	bne.n	800ba32 <xQueueGenericCreateStatic+0x42>
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba30:	e7fe      	b.n	800ba30 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <xQueueGenericCreateStatic+0x4e>
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <xQueueGenericCreateStatic+0x52>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e000      	b.n	800ba44 <xQueueGenericCreateStatic+0x54>
 800ba42:	2300      	movs	r3, #0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d109      	bne.n	800ba5c <xQueueGenericCreateStatic+0x6c>
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	623b      	str	r3, [r7, #32]
 800ba5a:	e7fe      	b.n	800ba5a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <xQueueGenericCreateStatic+0x78>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <xQueueGenericCreateStatic+0x7c>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <xQueueGenericCreateStatic+0x7e>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d109      	bne.n	800ba86 <xQueueGenericCreateStatic+0x96>
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	61fb      	str	r3, [r7, #28]
 800ba84:	e7fe      	b.n	800ba84 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba86:	2348      	movs	r3, #72	; 0x48
 800ba88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b48      	cmp	r3, #72	; 0x48
 800ba8e:	d009      	beq.n	800baa4 <xQueueGenericCreateStatic+0xb4>
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	61bb      	str	r3, [r7, #24]
 800baa2:	e7fe      	b.n	800baa2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00d      	beq.n	800baca <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	2201      	movs	r2, #1
 800bab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bab6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 f842 	bl	800bb4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bacc:	4618      	mov	r0, r3
 800bace:	3730      	adds	r7, #48	; 0x30
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08a      	sub	sp, #40	; 0x28
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d109      	bne.n	800bafc <xQueueGenericCreate+0x28>
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	613b      	str	r3, [r7, #16]
 800bafa:	e7fe      	b.n	800bafa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	61fb      	str	r3, [r7, #28]
 800bb06:	e004      	b.n	800bb12 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	fb02 f303 	mul.w	r3, r2, r3
 800bb10:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	3348      	adds	r3, #72	; 0x48
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff fa30 	bl	800af7c <pvPortMalloc>
 800bb1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00f      	beq.n	800bb44 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	3348      	adds	r3, #72	; 0x48
 800bb28:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb32:	79fa      	ldrb	r2, [r7, #7]
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	68b9      	ldr	r1, [r7, #8]
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 f805 	bl	800bb4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bb44:	69bb      	ldr	r3, [r7, #24]
	}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3720      	adds	r7, #32
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	607a      	str	r2, [r7, #4]
 800bb5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	69ba      	ldr	r2, [r7, #24]
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	e002      	b.n	800bb70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	69b8      	ldr	r0, [r7, #24]
 800bb80:	f7ff fece 	bl	800b920 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb84:	bf00      	nop
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08e      	sub	sp, #56	; 0x38
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
 800bb98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <xQueueGenericSend+0x30>
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbba:	e7fe      	b.n	800bbba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d103      	bne.n	800bbca <xQueueGenericSend+0x3e>
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <xQueueGenericSend+0x42>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <xQueueGenericSend+0x44>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d109      	bne.n	800bbe8 <xQueueGenericSend+0x5c>
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe6:	e7fe      	b.n	800bbe6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d103      	bne.n	800bbf6 <xQueueGenericSend+0x6a>
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d101      	bne.n	800bbfa <xQueueGenericSend+0x6e>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <xQueueGenericSend+0x70>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d109      	bne.n	800bc14 <xQueueGenericSend+0x88>
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	623b      	str	r3, [r7, #32]
 800bc12:	e7fe      	b.n	800bc12 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc14:	f001 f9be 	bl	800cf94 <xTaskGetSchedulerState>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <xQueueGenericSend+0x98>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <xQueueGenericSend+0x9c>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e000      	b.n	800bc2a <xQueueGenericSend+0x9e>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d109      	bne.n	800bc42 <xQueueGenericSend+0xb6>
 800bc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	61fb      	str	r3, [r7, #28]
 800bc40:	e7fe      	b.n	800bc40 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc42:	f7ff fd53 	bl	800b6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d302      	bcc.n	800bc58 <xQueueGenericSend+0xcc>
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d129      	bne.n	800bcac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc5e:	f000 fa7c 	bl	800c15a <prvCopyDataToQueue>
 800bc62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d010      	beq.n	800bc8e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	3324      	adds	r3, #36	; 0x24
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 ffd1 	bl	800cc18 <xTaskRemoveFromEventList>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d013      	beq.n	800bca4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc7c:	4b3f      	ldr	r3, [pc, #252]	; (800bd7c <xQueueGenericSend+0x1f0>)
 800bc7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc82:	601a      	str	r2, [r3, #0]
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	e00a      	b.n	800bca4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc94:	4b39      	ldr	r3, [pc, #228]	; (800bd7c <xQueueGenericSend+0x1f0>)
 800bc96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bca4:	f7ff fd50 	bl	800b748 <vPortExitCritical>
				return pdPASS;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e063      	b.n	800bd74 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcb2:	f7ff fd49 	bl	800b748 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e05c      	b.n	800bd74 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d106      	bne.n	800bcce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcc0:	f107 0314 	add.w	r3, r7, #20
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f001 f809 	bl	800ccdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcca:	2301      	movs	r3, #1
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcce:	f7ff fd3b 	bl	800b748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcd2:	f000 fd75 	bl	800c7c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcd6:	f7ff fd09 	bl	800b6ec <vPortEnterCritical>
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bce0:	b25b      	sxtb	r3, r3
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bce6:	d103      	bne.n	800bcf0 <xQueueGenericSend+0x164>
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcf6:	b25b      	sxtb	r3, r3
 800bcf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcfc:	d103      	bne.n	800bd06 <xQueueGenericSend+0x17a>
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd06:	f7ff fd1f 	bl	800b748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd0a:	1d3a      	adds	r2, r7, #4
 800bd0c:	f107 0314 	add.w	r3, r7, #20
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fff8 	bl	800cd08 <xTaskCheckForTimeOut>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d124      	bne.n	800bd68 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd20:	f000 fb13 	bl	800c34a <prvIsQueueFull>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d018      	beq.n	800bd5c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	3310      	adds	r3, #16
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 ff4c 	bl	800cbd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bd38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3a:	f000 fa9e 	bl	800c27a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd3e:	f000 fd4d 	bl	800c7dc <xTaskResumeAll>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f47f af7c 	bne.w	800bc42 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bd4a:	4b0c      	ldr	r3, [pc, #48]	; (800bd7c <xQueueGenericSend+0x1f0>)
 800bd4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd50:	601a      	str	r2, [r3, #0]
 800bd52:	f3bf 8f4f 	dsb	sy
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	e772      	b.n	800bc42 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd5e:	f000 fa8c 	bl	800c27a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd62:	f000 fd3b 	bl	800c7dc <xTaskResumeAll>
 800bd66:	e76c      	b.n	800bc42 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd6a:	f000 fa86 	bl	800c27a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd6e:	f000 fd35 	bl	800c7dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd72:	2300      	movs	r3, #0
		}
	}
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3738      	adds	r7, #56	; 0x38
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08e      	sub	sp, #56	; 0x38
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
 800bd8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <xQueueGenericSendFromISR+0x2c>
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdaa:	e7fe      	b.n	800bdaa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <xQueueGenericSendFromISR+0x3a>
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <xQueueGenericSendFromISR+0x3e>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <xQueueGenericSendFromISR+0x40>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d109      	bne.n	800bdd8 <xQueueGenericSendFromISR+0x58>
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	623b      	str	r3, [r7, #32]
 800bdd6:	e7fe      	b.n	800bdd6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSendFromISR+0x66>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <xQueueGenericSendFromISR+0x6a>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <xQueueGenericSendFromISR+0x6c>
 800bdea:	2300      	movs	r3, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d109      	bne.n	800be04 <xQueueGenericSendFromISR+0x84>
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	e7fe      	b.n	800be02 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be04:	f7ff fd4e 	bl	800b8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800be08:	f3ef 8211 	mrs	r2, BASEPRI
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	61ba      	str	r2, [r7, #24]
 800be1e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800be20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d302      	bcc.n	800be36 <xQueueGenericSendFromISR+0xb6>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d12c      	bne.n	800be90 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be46:	f000 f988 	bl	800c15a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be52:	d112      	bne.n	800be7a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d016      	beq.n	800be8a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	3324      	adds	r3, #36	; 0x24
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fed9 	bl	800cc18 <xTaskRemoveFromEventList>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00e      	beq.n	800be8a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00b      	beq.n	800be8a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	601a      	str	r2, [r3, #0]
 800be78:	e007      	b.n	800be8a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be7e:	3301      	adds	r3, #1
 800be80:	b2db      	uxtb	r3, r3
 800be82:	b25a      	sxtb	r2, r3
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be8a:	2301      	movs	r3, #1
 800be8c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800be8e:	e001      	b.n	800be94 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be90:	2300      	movs	r3, #0
 800be92:	637b      	str	r3, [r7, #52]	; 0x34
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3738      	adds	r7, #56	; 0x38
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08c      	sub	sp, #48	; 0x30
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800beb4:	2300      	movs	r3, #0
 800beb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d109      	bne.n	800bed6 <xQueueReceive+0x2e>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	623b      	str	r3, [r7, #32]
 800bed4:	e7fe      	b.n	800bed4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <xQueueReceive+0x3c>
 800bedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <xQueueReceive+0x40>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <xQueueReceive+0x42>
 800bee8:	2300      	movs	r3, #0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <xQueueReceive+0x5a>
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	61fb      	str	r3, [r7, #28]
 800bf00:	e7fe      	b.n	800bf00 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf02:	f001 f847 	bl	800cf94 <xTaskGetSchedulerState>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <xQueueReceive+0x6a>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d101      	bne.n	800bf16 <xQueueReceive+0x6e>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e000      	b.n	800bf18 <xQueueReceive+0x70>
 800bf16:	2300      	movs	r3, #0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d109      	bne.n	800bf30 <xQueueReceive+0x88>
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	61bb      	str	r3, [r7, #24]
 800bf2e:	e7fe      	b.n	800bf2e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf30:	f7ff fbdc 	bl	800b6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01f      	beq.n	800bf80 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf44:	f000 f973 	bl	800c22e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	1e5a      	subs	r2, r3, #1
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00f      	beq.n	800bf78 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 fe5b 	bl	800cc18 <xTaskRemoveFromEventList>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d007      	beq.n	800bf78 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf68:	4b3c      	ldr	r3, [pc, #240]	; (800c05c <xQueueReceive+0x1b4>)
 800bf6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf78:	f7ff fbe6 	bl	800b748 <vPortExitCritical>
				return pdPASS;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e069      	b.n	800c054 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d103      	bne.n	800bf8e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf86:	f7ff fbdf 	bl	800b748 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e062      	b.n	800c054 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d106      	bne.n	800bfa2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf94:	f107 0310 	add.w	r3, r7, #16
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 fe9f 	bl	800ccdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfa2:	f7ff fbd1 	bl	800b748 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfa6:	f000 fc0b 	bl	800c7c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfaa:	f7ff fb9f 	bl	800b6ec <vPortEnterCritical>
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfb4:	b25b      	sxtb	r3, r3
 800bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfba:	d103      	bne.n	800bfc4 <xQueueReceive+0x11c>
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfca:	b25b      	sxtb	r3, r3
 800bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd0:	d103      	bne.n	800bfda <xQueueReceive+0x132>
 800bfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfda:	f7ff fbb5 	bl	800b748 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfde:	1d3a      	adds	r2, r7, #4
 800bfe0:	f107 0310 	add.w	r3, r7, #16
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fe8e 	bl	800cd08 <xTaskCheckForTimeOut>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d123      	bne.n	800c03a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bff2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff4:	f000 f993 	bl	800c31e <prvIsQueueEmpty>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d017      	beq.n	800c02e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c000:	3324      	adds	r3, #36	; 0x24
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	4611      	mov	r1, r2
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fde2 	bl	800cbd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c00c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00e:	f000 f934 	bl	800c27a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c012:	f000 fbe3 	bl	800c7dc <xTaskResumeAll>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d189      	bne.n	800bf30 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c01c:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <xQueueReceive+0x1b4>)
 800c01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	e780      	b.n	800bf30 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c030:	f000 f923 	bl	800c27a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c034:	f000 fbd2 	bl	800c7dc <xTaskResumeAll>
 800c038:	e77a      	b.n	800bf30 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03c:	f000 f91d 	bl	800c27a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c040:	f000 fbcc 	bl	800c7dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c046:	f000 f96a 	bl	800c31e <prvIsQueueEmpty>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f43f af6f 	beq.w	800bf30 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c052:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c054:	4618      	mov	r0, r3
 800c056:	3730      	adds	r7, #48	; 0x30
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	e000ed04 	.word	0xe000ed04

0800c060 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08e      	sub	sp, #56	; 0x38
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	2b00      	cmp	r3, #0
 800c074:	d109      	bne.n	800c08a <xQueueReceiveFromISR+0x2a>
 800c076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	623b      	str	r3, [r7, #32]
 800c088:	e7fe      	b.n	800c088 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d103      	bne.n	800c098 <xQueueReceiveFromISR+0x38>
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c094:	2b00      	cmp	r3, #0
 800c096:	d101      	bne.n	800c09c <xQueueReceiveFromISR+0x3c>
 800c098:	2301      	movs	r3, #1
 800c09a:	e000      	b.n	800c09e <xQueueReceiveFromISR+0x3e>
 800c09c:	2300      	movs	r3, #0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d109      	bne.n	800c0b6 <xQueueReceiveFromISR+0x56>
 800c0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	61fb      	str	r3, [r7, #28]
 800c0b4:	e7fe      	b.n	800c0b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0b6:	f7ff fbf5 	bl	800b8a4 <vPortValidateInterruptPriority>
	__asm volatile
 800c0ba:	f3ef 8211 	mrs	r2, BASEPRI
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	61ba      	str	r2, [r7, #24]
 800c0d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c0d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d02f      	beq.n	800c142 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c0ec:	68b9      	ldr	r1, [r7, #8]
 800c0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0f0:	f000 f89d 	bl	800c22e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f6:	1e5a      	subs	r2, r3, #1
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c0fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c104:	d112      	bne.n	800c12c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	691b      	ldr	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d016      	beq.n	800c13c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	3310      	adds	r3, #16
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fd80 	bl	800cc18 <xTaskRemoveFromEventList>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00e      	beq.n	800c13c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	e007      	b.n	800c13c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c130:	3301      	adds	r3, #1
 800c132:	b2db      	uxtb	r3, r3
 800c134:	b25a      	sxtb	r2, r3
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c13c:	2301      	movs	r3, #1
 800c13e:	637b      	str	r3, [r7, #52]	; 0x34
 800c140:	e001      	b.n	800c146 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c142:	2300      	movs	r3, #0
 800c144:	637b      	str	r3, [r7, #52]	; 0x34
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c152:	4618      	mov	r0, r3
 800c154:	3738      	adds	r7, #56	; 0x38
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b086      	sub	sp, #24
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c166:	2300      	movs	r3, #0
 800c168:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c174:	2b00      	cmp	r3, #0
 800c176:	d10d      	bne.n	800c194 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d14d      	bne.n	800c21c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	4618      	mov	r0, r3
 800c186:	f000 ff23 	bl	800cfd0 <xTaskPriorityDisinherit>
 800c18a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	605a      	str	r2, [r3, #4]
 800c192:	e043      	b.n	800c21c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d119      	bne.n	800c1ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6898      	ldr	r0, [r3, #8]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	f005 f9b7 	bl	8011518 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b2:	441a      	add	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	689a      	ldr	r2, [r3, #8]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d32b      	bcc.n	800c21c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	609a      	str	r2, [r3, #8]
 800c1cc:	e026      	b.n	800c21c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	68d8      	ldr	r0, [r3, #12]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	f005 f99d 	bl	8011518 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e6:	425b      	negs	r3, r3
 800c1e8:	441a      	add	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d207      	bcs.n	800c20a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c202:	425b      	negs	r3, r3
 800c204:	441a      	add	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d105      	bne.n	800c21c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	3b01      	subs	r3, #1
 800c21a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c224:	697b      	ldr	r3, [r7, #20]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b082      	sub	sp, #8
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
 800c236:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d018      	beq.n	800c272 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c248:	441a      	add	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	429a      	cmp	r2, r3
 800c258:	d303      	bcc.n	800c262 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68d9      	ldr	r1, [r3, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26a:	461a      	mov	r2, r3
 800c26c:	6838      	ldr	r0, [r7, #0]
 800c26e:	f005 f953 	bl	8011518 <memcpy>
	}
}
 800c272:	bf00      	nop
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b084      	sub	sp, #16
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c282:	f7ff fa33 	bl	800b6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c28c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c28e:	e011      	b.n	800c2b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d012      	beq.n	800c2be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3324      	adds	r3, #36	; 0x24
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 fcbb 	bl	800cc18 <xTaskRemoveFromEventList>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2a8:	f000 fd8e 	bl	800cdc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	dce9      	bgt.n	800c290 <prvUnlockQueue+0x16>
 800c2bc:	e000      	b.n	800c2c0 <prvUnlockQueue+0x46>
					break;
 800c2be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	22ff      	movs	r2, #255	; 0xff
 800c2c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2c8:	f7ff fa3e 	bl	800b748 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2cc:	f7ff fa0e 	bl	800b6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2d8:	e011      	b.n	800c2fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d012      	beq.n	800c308 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3310      	adds	r3, #16
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 fc96 	bl	800cc18 <xTaskRemoveFromEventList>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2f2:	f000 fd69 	bl	800cdc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2f6:	7bbb      	ldrb	r3, [r7, #14]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c302:	2b00      	cmp	r3, #0
 800c304:	dce9      	bgt.n	800c2da <prvUnlockQueue+0x60>
 800c306:	e000      	b.n	800c30a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c308:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	22ff      	movs	r2, #255	; 0xff
 800c30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c312:	f7ff fa19 	bl	800b748 <vPortExitCritical>
}
 800c316:	bf00      	nop
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c326:	f7ff f9e1 	bl	800b6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c332:	2301      	movs	r3, #1
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e001      	b.n	800c33c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c33c:	f7ff fa04 	bl	800b748 <vPortExitCritical>

	return xReturn;
 800c340:	68fb      	ldr	r3, [r7, #12]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c352:	f7ff f9cb 	bl	800b6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35e:	429a      	cmp	r2, r3
 800c360:	d102      	bne.n	800c368 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c362:	2301      	movs	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	e001      	b.n	800c36c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c368:	2300      	movs	r3, #0
 800c36a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c36c:	f7ff f9ec 	bl	800b748 <vPortExitCritical>

	return xReturn;
 800c370:	68fb      	ldr	r3, [r7, #12]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b08e      	sub	sp, #56	; 0x38
 800c37e:	af04      	add	r7, sp, #16
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
 800c386:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d109      	bne.n	800c3a2 <xTaskCreateStatic+0x28>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	623b      	str	r3, [r7, #32]
 800c3a0:	e7fe      	b.n	800c3a0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d109      	bne.n	800c3bc <xTaskCreateStatic+0x42>
 800c3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	e7fe      	b.n	800c3ba <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3bc:	2358      	movs	r3, #88	; 0x58
 800c3be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2b58      	cmp	r3, #88	; 0x58
 800c3c4:	d009      	beq.n	800c3da <xTaskCreateStatic+0x60>
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	61bb      	str	r3, [r7, #24]
 800c3d8:	e7fe      	b.n	800c3d8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d01e      	beq.n	800c41e <xTaskCreateStatic+0xa4>
 800c3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d01b      	beq.n	800c41e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	9303      	str	r3, [sp, #12]
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	9302      	str	r3, [sp, #8]
 800c400:	f107 0314 	add.w	r3, r7, #20
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	68b9      	ldr	r1, [r7, #8]
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f000 f850 	bl	800c4b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c418:	f000 f8d6 	bl	800c5c8 <prvAddNewTaskToReadyList>
 800c41c:	e001      	b.n	800c422 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c422:	697b      	ldr	r3, [r7, #20]
	}
 800c424:	4618      	mov	r0, r3
 800c426:	3728      	adds	r7, #40	; 0x28
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08c      	sub	sp, #48	; 0x30
 800c430:	af04      	add	r7, sp, #16
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	4613      	mov	r3, r2
 800c43a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c43c:	88fb      	ldrh	r3, [r7, #6]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4618      	mov	r0, r3
 800c442:	f7fe fd9b 	bl	800af7c <pvPortMalloc>
 800c446:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00e      	beq.n	800c46c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c44e:	2058      	movs	r0, #88	; 0x58
 800c450:	f7fe fd94 	bl	800af7c <pvPortMalloc>
 800c454:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	631a      	str	r2, [r3, #48]	; 0x30
 800c462:	e005      	b.n	800c470 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c464:	6978      	ldr	r0, [r7, #20]
 800c466:	f7fe fe4f 	bl	800b108 <vPortFree>
 800c46a:	e001      	b.n	800c470 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d017      	beq.n	800c4a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c47e:	88fa      	ldrh	r2, [r7, #6]
 800c480:	2300      	movs	r3, #0
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	9302      	str	r3, [sp, #8]
 800c488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	68b9      	ldr	r1, [r7, #8]
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 f80e 	bl	800c4b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c49a:	69f8      	ldr	r0, [r7, #28]
 800c49c:	f000 f894 	bl	800c5c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	61bb      	str	r3, [r7, #24]
 800c4a4:	e002      	b.n	800c4ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4ac:	69bb      	ldr	r3, [r7, #24]
	}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b088      	sub	sp, #32
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	607a      	str	r2, [r7, #4]
 800c4c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	21a5      	movs	r1, #165	; 0xa5
 800c4d0:	f005 f82d 	bl	801152e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	f023 0307 	bic.w	r3, r3, #7
 800c4ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	f003 0307 	and.w	r3, r3, #7
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <prvInitialiseNewTask+0x56>
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	617b      	str	r3, [r7, #20]
 800c50a:	e7fe      	b.n	800c50a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c50c:	2300      	movs	r3, #0
 800c50e:	61fb      	str	r3, [r7, #28]
 800c510:	e012      	b.n	800c538 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	4413      	add	r3, r2
 800c518:	7819      	ldrb	r1, [r3, #0]
 800c51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	3334      	adds	r3, #52	; 0x34
 800c522:	460a      	mov	r2, r1
 800c524:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	4413      	add	r3, r2
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d006      	beq.n	800c540 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	3301      	adds	r3, #1
 800c536:	61fb      	str	r3, [r7, #28]
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	2b0f      	cmp	r3, #15
 800c53c:	d9e9      	bls.n	800c512 <prvInitialiseNewTask+0x5c>
 800c53e:	e000      	b.n	800c542 <prvInitialiseNewTask+0x8c>
		{
			break;
 800c540:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	2200      	movs	r2, #0
 800c546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54c:	2b06      	cmp	r3, #6
 800c54e:	d901      	bls.n	800c554 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c550:	2306      	movs	r3, #6
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c558:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c55e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	2200      	movs	r2, #0
 800c564:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c568:	3304      	adds	r3, #4
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe ff00 	bl	800b370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	3318      	adds	r3, #24
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fefb 	bl	800b370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c57e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c582:	f1c3 0207 	rsb	r2, r3, #7
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c58e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	2200      	movs	r2, #0
 800c594:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c598:	2200      	movs	r2, #0
 800c59a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	2200      	movs	r2, #0
 800c5a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	68f9      	ldr	r1, [r7, #12]
 800c5a8:	69b8      	ldr	r0, [r7, #24]
 800c5aa:	f7fe ff75 	bl	800b498 <pxPortInitialiseStack>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d002      	beq.n	800c5c0 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5c0:	bf00      	nop
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5d0:	f7ff f88c 	bl	800b6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5d4:	4b2a      	ldr	r3, [pc, #168]	; (800c680 <prvAddNewTaskToReadyList+0xb8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	4a29      	ldr	r2, [pc, #164]	; (800c680 <prvAddNewTaskToReadyList+0xb8>)
 800c5dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5de:	4b29      	ldr	r3, [pc, #164]	; (800c684 <prvAddNewTaskToReadyList+0xbc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d109      	bne.n	800c5fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5e6:	4a27      	ldr	r2, [pc, #156]	; (800c684 <prvAddNewTaskToReadyList+0xbc>)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5ec:	4b24      	ldr	r3, [pc, #144]	; (800c680 <prvAddNewTaskToReadyList+0xb8>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d110      	bne.n	800c616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5f4:	f000 fc0e 	bl	800ce14 <prvInitialiseTaskLists>
 800c5f8:	e00d      	b.n	800c616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5fa:	4b23      	ldr	r3, [pc, #140]	; (800c688 <prvAddNewTaskToReadyList+0xc0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d109      	bne.n	800c616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c602:	4b20      	ldr	r3, [pc, #128]	; (800c684 <prvAddNewTaskToReadyList+0xbc>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d802      	bhi.n	800c616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c610:	4a1c      	ldr	r2, [pc, #112]	; (800c684 <prvAddNewTaskToReadyList+0xbc>)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c616:	4b1d      	ldr	r3, [pc, #116]	; (800c68c <prvAddNewTaskToReadyList+0xc4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3301      	adds	r3, #1
 800c61c:	4a1b      	ldr	r2, [pc, #108]	; (800c68c <prvAddNewTaskToReadyList+0xc4>)
 800c61e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c624:	2201      	movs	r2, #1
 800c626:	409a      	lsls	r2, r3
 800c628:	4b19      	ldr	r3, [pc, #100]	; (800c690 <prvAddNewTaskToReadyList+0xc8>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	4a18      	ldr	r2, [pc, #96]	; (800c690 <prvAddNewTaskToReadyList+0xc8>)
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c636:	4613      	mov	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4a15      	ldr	r2, [pc, #84]	; (800c694 <prvAddNewTaskToReadyList+0xcc>)
 800c640:	441a      	add	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3304      	adds	r3, #4
 800c646:	4619      	mov	r1, r3
 800c648:	4610      	mov	r0, r2
 800c64a:	f7fe fe9e 	bl	800b38a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c64e:	f7ff f87b 	bl	800b748 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c652:	4b0d      	ldr	r3, [pc, #52]	; (800c688 <prvAddNewTaskToReadyList+0xc0>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00e      	beq.n	800c678 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c65a:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <prvAddNewTaskToReadyList+0xbc>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c664:	429a      	cmp	r2, r3
 800c666:	d207      	bcs.n	800c678 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c668:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <prvAddNewTaskToReadyList+0xd0>)
 800c66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c678:	bf00      	nop
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20008374 	.word	0x20008374
 800c684:	20008274 	.word	0x20008274
 800c688:	20008380 	.word	0x20008380
 800c68c:	20008390 	.word	0x20008390
 800c690:	2000837c 	.word	0x2000837c
 800c694:	20008278 	.word	0x20008278
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d016      	beq.n	800c6dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <vTaskDelay+0x60>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d009      	beq.n	800c6ca <vTaskDelay+0x2e>
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60bb      	str	r3, [r7, #8]
 800c6c8:	e7fe      	b.n	800c6c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c6ca:	f000 f879 	bl	800c7c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fd01 	bl	800d0d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6d6:	f000 f881 	bl	800c7dc <xTaskResumeAll>
 800c6da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d107      	bne.n	800c6f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c6e2:	4b07      	ldr	r3, [pc, #28]	; (800c700 <vTaskDelay+0x64>)
 800c6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e8:	601a      	str	r2, [r3, #0]
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6f2:	bf00      	nop
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	2000839c 	.word	0x2000839c
 800c700:	e000ed04 	.word	0xe000ed04

0800c704 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	; 0x28
 800c708:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c70a:	2300      	movs	r3, #0
 800c70c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c70e:	2300      	movs	r3, #0
 800c710:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c712:	463a      	mov	r2, r7
 800c714:	1d39      	adds	r1, r7, #4
 800c716:	f107 0308 	add.w	r3, r7, #8
 800c71a:	4618      	mov	r0, r3
 800c71c:	f002 fdf0 	bl	800f300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	9202      	str	r2, [sp, #8]
 800c728:	9301      	str	r3, [sp, #4]
 800c72a:	2300      	movs	r3, #0
 800c72c:	9300      	str	r3, [sp, #0]
 800c72e:	2300      	movs	r3, #0
 800c730:	460a      	mov	r2, r1
 800c732:	491d      	ldr	r1, [pc, #116]	; (800c7a8 <vTaskStartScheduler+0xa4>)
 800c734:	481d      	ldr	r0, [pc, #116]	; (800c7ac <vTaskStartScheduler+0xa8>)
 800c736:	f7ff fe20 	bl	800c37a <xTaskCreateStatic>
 800c73a:	4602      	mov	r2, r0
 800c73c:	4b1c      	ldr	r3, [pc, #112]	; (800c7b0 <vTaskStartScheduler+0xac>)
 800c73e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c740:	4b1b      	ldr	r3, [pc, #108]	; (800c7b0 <vTaskStartScheduler+0xac>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c748:	2301      	movs	r3, #1
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	e001      	b.n	800c752 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c74e:	2300      	movs	r3, #0
 800c750:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d115      	bne.n	800c784 <vTaskStartScheduler+0x80>
 800c758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75c:	f383 8811 	msr	BASEPRI, r3
 800c760:	f3bf 8f6f 	isb	sy
 800c764:	f3bf 8f4f 	dsb	sy
 800c768:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c76a:	4b12      	ldr	r3, [pc, #72]	; (800c7b4 <vTaskStartScheduler+0xb0>)
 800c76c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c770:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c772:	4b11      	ldr	r3, [pc, #68]	; (800c7b8 <vTaskStartScheduler+0xb4>)
 800c774:	2201      	movs	r2, #1
 800c776:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c778:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <vTaskStartScheduler+0xb8>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c77e:	f7fe ff17 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c782:	e00d      	b.n	800c7a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c78a:	d109      	bne.n	800c7a0 <vTaskStartScheduler+0x9c>
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	60fb      	str	r3, [r7, #12]
 800c79e:	e7fe      	b.n	800c79e <vTaskStartScheduler+0x9a>
}
 800c7a0:	bf00      	nop
 800c7a2:	3718      	adds	r7, #24
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	080116cc 	.word	0x080116cc
 800c7ac:	0800cde1 	.word	0x0800cde1
 800c7b0:	20008398 	.word	0x20008398
 800c7b4:	20008394 	.word	0x20008394
 800c7b8:	20008380 	.word	0x20008380
 800c7bc:	20008378 	.word	0x20008378

0800c7c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c7c4:	4b04      	ldr	r3, [pc, #16]	; (800c7d8 <vTaskSuspendAll+0x18>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	4a03      	ldr	r2, [pc, #12]	; (800c7d8 <vTaskSuspendAll+0x18>)
 800c7cc:	6013      	str	r3, [r2, #0]
}
 800c7ce:	bf00      	nop
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	2000839c 	.word	0x2000839c

0800c7dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ea:	4b41      	ldr	r3, [pc, #260]	; (800c8f0 <xTaskResumeAll+0x114>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <xTaskResumeAll+0x2a>
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	e7fe      	b.n	800c804 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c806:	f7fe ff71 	bl	800b6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c80a:	4b39      	ldr	r3, [pc, #228]	; (800c8f0 <xTaskResumeAll+0x114>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3b01      	subs	r3, #1
 800c810:	4a37      	ldr	r2, [pc, #220]	; (800c8f0 <xTaskResumeAll+0x114>)
 800c812:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c814:	4b36      	ldr	r3, [pc, #216]	; (800c8f0 <xTaskResumeAll+0x114>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d161      	bne.n	800c8e0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c81c:	4b35      	ldr	r3, [pc, #212]	; (800c8f4 <xTaskResumeAll+0x118>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d05d      	beq.n	800c8e0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c824:	e02e      	b.n	800c884 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c826:	4b34      	ldr	r3, [pc, #208]	; (800c8f8 <xTaskResumeAll+0x11c>)
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3318      	adds	r3, #24
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fe06 	bl	800b444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3304      	adds	r3, #4
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fe01 	bl	800b444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c846:	2201      	movs	r2, #1
 800c848:	409a      	lsls	r2, r3
 800c84a:	4b2c      	ldr	r3, [pc, #176]	; (800c8fc <xTaskResumeAll+0x120>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4313      	orrs	r3, r2
 800c850:	4a2a      	ldr	r2, [pc, #168]	; (800c8fc <xTaskResumeAll+0x120>)
 800c852:	6013      	str	r3, [r2, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c858:	4613      	mov	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4413      	add	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4a27      	ldr	r2, [pc, #156]	; (800c900 <xTaskResumeAll+0x124>)
 800c862:	441a      	add	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3304      	adds	r3, #4
 800c868:	4619      	mov	r1, r3
 800c86a:	4610      	mov	r0, r2
 800c86c:	f7fe fd8d 	bl	800b38a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c874:	4b23      	ldr	r3, [pc, #140]	; (800c904 <xTaskResumeAll+0x128>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d302      	bcc.n	800c884 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c87e:	4b22      	ldr	r3, [pc, #136]	; (800c908 <xTaskResumeAll+0x12c>)
 800c880:	2201      	movs	r2, #1
 800c882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c884:	4b1c      	ldr	r3, [pc, #112]	; (800c8f8 <xTaskResumeAll+0x11c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1cc      	bne.n	800c826 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c892:	f000 fb59 	bl	800cf48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c896:	4b1d      	ldr	r3, [pc, #116]	; (800c90c <xTaskResumeAll+0x130>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d010      	beq.n	800c8c4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8a2:	f000 f859 	bl	800c958 <xTaskIncrementTick>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c8ac:	4b16      	ldr	r3, [pc, #88]	; (800c908 <xTaskResumeAll+0x12c>)
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1f1      	bne.n	800c8a2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <xTaskResumeAll+0x130>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8c4:	4b10      	ldr	r3, [pc, #64]	; (800c908 <xTaskResumeAll+0x12c>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d009      	beq.n	800c8e0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8d0:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <xTaskResumeAll+0x134>)
 800c8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8e0:	f7fe ff32 	bl	800b748 <vPortExitCritical>

	return xAlreadyYielded;
 800c8e4:	68bb      	ldr	r3, [r7, #8]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	2000839c 	.word	0x2000839c
 800c8f4:	20008374 	.word	0x20008374
 800c8f8:	20008334 	.word	0x20008334
 800c8fc:	2000837c 	.word	0x2000837c
 800c900:	20008278 	.word	0x20008278
 800c904:	20008274 	.word	0x20008274
 800c908:	20008388 	.word	0x20008388
 800c90c:	20008384 	.word	0x20008384
 800c910:	e000ed04 	.word	0xe000ed04

0800c914 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c91a:	4b05      	ldr	r3, [pc, #20]	; (800c930 <xTaskGetTickCount+0x1c>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c920:	687b      	ldr	r3, [r7, #4]
}
 800c922:	4618      	mov	r0, r3
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20008378 	.word	0x20008378

0800c934 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c93a:	f7fe ffb3 	bl	800b8a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c93e:	2300      	movs	r3, #0
 800c940:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c942:	4b04      	ldr	r3, [pc, #16]	; (800c954 <xTaskGetTickCountFromISR+0x20>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c948:	683b      	ldr	r3, [r7, #0]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	20008378 	.word	0x20008378

0800c958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c962:	4b50      	ldr	r3, [pc, #320]	; (800caa4 <xTaskIncrementTick+0x14c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	f040 808c 	bne.w	800ca84 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c96c:	4b4e      	ldr	r3, [pc, #312]	; (800caa8 <xTaskIncrementTick+0x150>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c974:	4a4c      	ldr	r2, [pc, #304]	; (800caa8 <xTaskIncrementTick+0x150>)
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d11f      	bne.n	800c9c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c980:	4b4a      	ldr	r3, [pc, #296]	; (800caac <xTaskIncrementTick+0x154>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d009      	beq.n	800c99e <xTaskIncrementTick+0x46>
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	603b      	str	r3, [r7, #0]
 800c99c:	e7fe      	b.n	800c99c <xTaskIncrementTick+0x44>
 800c99e:	4b43      	ldr	r3, [pc, #268]	; (800caac <xTaskIncrementTick+0x154>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	60fb      	str	r3, [r7, #12]
 800c9a4:	4b42      	ldr	r3, [pc, #264]	; (800cab0 <xTaskIncrementTick+0x158>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a40      	ldr	r2, [pc, #256]	; (800caac <xTaskIncrementTick+0x154>)
 800c9aa:	6013      	str	r3, [r2, #0]
 800c9ac:	4a40      	ldr	r2, [pc, #256]	; (800cab0 <xTaskIncrementTick+0x158>)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6013      	str	r3, [r2, #0]
 800c9b2:	4b40      	ldr	r3, [pc, #256]	; (800cab4 <xTaskIncrementTick+0x15c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	4a3e      	ldr	r2, [pc, #248]	; (800cab4 <xTaskIncrementTick+0x15c>)
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	f000 fac4 	bl	800cf48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9c0:	4b3d      	ldr	r3, [pc, #244]	; (800cab8 <xTaskIncrementTick+0x160>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d34d      	bcc.n	800ca66 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9ca:	4b38      	ldr	r3, [pc, #224]	; (800caac <xTaskIncrementTick+0x154>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <xTaskIncrementTick+0x80>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e000      	b.n	800c9da <xTaskIncrementTick+0x82>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d004      	beq.n	800c9e8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9de:	4b36      	ldr	r3, [pc, #216]	; (800cab8 <xTaskIncrementTick+0x160>)
 800c9e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9e4:	601a      	str	r2, [r3, #0]
					break;
 800c9e6:	e03e      	b.n	800ca66 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c9e8:	4b30      	ldr	r3, [pc, #192]	; (800caac <xTaskIncrementTick+0x154>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d203      	bcs.n	800ca08 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca00:	4a2d      	ldr	r2, [pc, #180]	; (800cab8 <xTaskIncrementTick+0x160>)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6013      	str	r3, [r2, #0]
						break;
 800ca06:	e02e      	b.n	800ca66 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7fe fd19 	bl	800b444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d004      	beq.n	800ca24 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	3318      	adds	r3, #24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fd10 	bl	800b444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca28:	2201      	movs	r2, #1
 800ca2a:	409a      	lsls	r2, r3
 800ca2c:	4b23      	ldr	r3, [pc, #140]	; (800cabc <xTaskIncrementTick+0x164>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	4a22      	ldr	r2, [pc, #136]	; (800cabc <xTaskIncrementTick+0x164>)
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4a1f      	ldr	r2, [pc, #124]	; (800cac0 <xTaskIncrementTick+0x168>)
 800ca44:	441a      	add	r2, r3
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f7fe fc9c 	bl	800b38a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca56:	4b1b      	ldr	r3, [pc, #108]	; (800cac4 <xTaskIncrementTick+0x16c>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d3b4      	bcc.n	800c9ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ca60:	2301      	movs	r3, #1
 800ca62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca64:	e7b1      	b.n	800c9ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca66:	4b17      	ldr	r3, [pc, #92]	; (800cac4 <xTaskIncrementTick+0x16c>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	4914      	ldr	r1, [pc, #80]	; (800cac0 <xTaskIncrementTick+0x168>)
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	440b      	add	r3, r1
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d907      	bls.n	800ca8e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
 800ca82:	e004      	b.n	800ca8e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ca84:	4b10      	ldr	r3, [pc, #64]	; (800cac8 <xTaskIncrementTick+0x170>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	4a0f      	ldr	r2, [pc, #60]	; (800cac8 <xTaskIncrementTick+0x170>)
 800ca8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <xTaskIncrementTick+0x174>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ca96:	2301      	movs	r3, #1
 800ca98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ca9a:	697b      	ldr	r3, [r7, #20]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3718      	adds	r7, #24
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	2000839c 	.word	0x2000839c
 800caa8:	20008378 	.word	0x20008378
 800caac:	2000832c 	.word	0x2000832c
 800cab0:	20008330 	.word	0x20008330
 800cab4:	2000838c 	.word	0x2000838c
 800cab8:	20008394 	.word	0x20008394
 800cabc:	2000837c 	.word	0x2000837c
 800cac0:	20008278 	.word	0x20008278
 800cac4:	20008274 	.word	0x20008274
 800cac8:	20008384 	.word	0x20008384
 800cacc:	20008388 	.word	0x20008388

0800cad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cad6:	4b39      	ldr	r3, [pc, #228]	; (800cbbc <vTaskSwitchContext+0xec>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cade:	4b38      	ldr	r3, [pc, #224]	; (800cbc0 <vTaskSwitchContext+0xf0>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cae4:	e065      	b.n	800cbb2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800cae6:	4b36      	ldr	r3, [pc, #216]	; (800cbc0 <vTaskSwitchContext+0xf0>)
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800caec:	4b35      	ldr	r3, [pc, #212]	; (800cbc4 <vTaskSwitchContext+0xf4>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf2:	61fb      	str	r3, [r7, #28]
 800caf4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800caf8:	61bb      	str	r3, [r7, #24]
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	69ba      	ldr	r2, [r7, #24]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d111      	bne.n	800cb28 <vTaskSwitchContext+0x58>
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	3304      	adds	r3, #4
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	69ba      	ldr	r2, [r7, #24]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d10b      	bne.n	800cb28 <vTaskSwitchContext+0x58>
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	3308      	adds	r3, #8
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	69ba      	ldr	r2, [r7, #24]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d105      	bne.n	800cb28 <vTaskSwitchContext+0x58>
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	330c      	adds	r3, #12
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d008      	beq.n	800cb3a <vTaskSwitchContext+0x6a>
 800cb28:	4b26      	ldr	r3, [pc, #152]	; (800cbc4 <vTaskSwitchContext+0xf4>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	4b25      	ldr	r3, [pc, #148]	; (800cbc4 <vTaskSwitchContext+0xf4>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3334      	adds	r3, #52	; 0x34
 800cb32:	4619      	mov	r1, r3
 800cb34:	4610      	mov	r0, r2
 800cb36:	f002 fbd0 	bl	800f2da <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800cb3a:	4b23      	ldr	r3, [pc, #140]	; (800cbc8 <vTaskSwitchContext+0xf8>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	fab3 f383 	clz	r3, r3
 800cb46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb48:	7afb      	ldrb	r3, [r7, #11]
 800cb4a:	f1c3 031f 	rsb	r3, r3, #31
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	491e      	ldr	r1, [pc, #120]	; (800cbcc <vTaskSwitchContext+0xfc>)
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	4613      	mov	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	440b      	add	r3, r1
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d109      	bne.n	800cb78 <vTaskSwitchContext+0xa8>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	607b      	str	r3, [r7, #4]
 800cb76:	e7fe      	b.n	800cb76 <vTaskSwitchContext+0xa6>
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4a12      	ldr	r2, [pc, #72]	; (800cbcc <vTaskSwitchContext+0xfc>)
 800cb84:	4413      	add	r3, r2
 800cb86:	613b      	str	r3, [r7, #16]
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	605a      	str	r2, [r3, #4]
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d104      	bne.n	800cba8 <vTaskSwitchContext+0xd8>
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	605a      	str	r2, [r3, #4]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	4a05      	ldr	r2, [pc, #20]	; (800cbc4 <vTaskSwitchContext+0xf4>)
 800cbb0:	6013      	str	r3, [r2, #0]
}
 800cbb2:	bf00      	nop
 800cbb4:	3720      	adds	r7, #32
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	2000839c 	.word	0x2000839c
 800cbc0:	20008388 	.word	0x20008388
 800cbc4:	20008274 	.word	0x20008274
 800cbc8:	2000837c 	.word	0x2000837c
 800cbcc:	20008278 	.word	0x20008278

0800cbd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d109      	bne.n	800cbf4 <vTaskPlaceOnEventList+0x24>
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	e7fe      	b.n	800cbf2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbf4:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <vTaskPlaceOnEventList+0x44>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	3318      	adds	r3, #24
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7fe fbe8 	bl	800b3d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc02:	2101      	movs	r1, #1
 800cc04:	6838      	ldr	r0, [r7, #0]
 800cc06:	f000 fa67 	bl	800d0d8 <prvAddCurrentTaskToDelayedList>
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20008274 	.word	0x20008274

0800cc18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d109      	bne.n	800cc42 <xTaskRemoveFromEventList+0x2a>
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e7fe      	b.n	800cc40 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	3318      	adds	r3, #24
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fbfc 	bl	800b444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc4c:	4b1d      	ldr	r3, [pc, #116]	; (800ccc4 <xTaskRemoveFromEventList+0xac>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d11c      	bne.n	800cc8e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	3304      	adds	r3, #4
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe fbf3 	bl	800b444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	2201      	movs	r2, #1
 800cc64:	409a      	lsls	r2, r3
 800cc66:	4b18      	ldr	r3, [pc, #96]	; (800ccc8 <xTaskRemoveFromEventList+0xb0>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	4a16      	ldr	r2, [pc, #88]	; (800ccc8 <xTaskRemoveFromEventList+0xb0>)
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4a13      	ldr	r2, [pc, #76]	; (800cccc <xTaskRemoveFromEventList+0xb4>)
 800cc7e:	441a      	add	r2, r3
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	3304      	adds	r3, #4
 800cc84:	4619      	mov	r1, r3
 800cc86:	4610      	mov	r0, r2
 800cc88:	f7fe fb7f 	bl	800b38a <vListInsertEnd>
 800cc8c:	e005      	b.n	800cc9a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	3318      	adds	r3, #24
 800cc92:	4619      	mov	r1, r3
 800cc94:	480e      	ldr	r0, [pc, #56]	; (800ccd0 <xTaskRemoveFromEventList+0xb8>)
 800cc96:	f7fe fb78 	bl	800b38a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	; (800ccd4 <xTaskRemoveFromEventList+0xbc>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d905      	bls.n	800ccb4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <xTaskRemoveFromEventList+0xc0>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	e001      	b.n	800ccb8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ccb8:	697b      	ldr	r3, [r7, #20]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3718      	adds	r7, #24
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	2000839c 	.word	0x2000839c
 800ccc8:	2000837c 	.word	0x2000837c
 800cccc:	20008278 	.word	0x20008278
 800ccd0:	20008334 	.word	0x20008334
 800ccd4:	20008274 	.word	0x20008274
 800ccd8:	20008388 	.word	0x20008388

0800ccdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <vTaskInternalSetTimeOutState+0x24>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ccec:	4b05      	ldr	r3, [pc, #20]	; (800cd04 <vTaskInternalSetTimeOutState+0x28>)
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	605a      	str	r2, [r3, #4]
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	2000838c 	.word	0x2000838c
 800cd04:	20008378 	.word	0x20008378

0800cd08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d109      	bne.n	800cd2c <xTaskCheckForTimeOut+0x24>
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	613b      	str	r3, [r7, #16]
 800cd2a:	e7fe      	b.n	800cd2a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d109      	bne.n	800cd46 <xTaskCheckForTimeOut+0x3e>
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e7fe      	b.n	800cd44 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cd46:	f7fe fcd1 	bl	800b6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd4a:	4b1d      	ldr	r3, [pc, #116]	; (800cdc0 <xTaskCheckForTimeOut+0xb8>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd62:	d102      	bne.n	800cd6a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd64:	2300      	movs	r3, #0
 800cd66:	61fb      	str	r3, [r7, #28]
 800cd68:	e023      	b.n	800cdb2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	4b15      	ldr	r3, [pc, #84]	; (800cdc4 <xTaskCheckForTimeOut+0xbc>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d007      	beq.n	800cd86 <xTaskCheckForTimeOut+0x7e>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	69ba      	ldr	r2, [r7, #24]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d302      	bcc.n	800cd86 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd80:	2301      	movs	r3, #1
 800cd82:	61fb      	str	r3, [r7, #28]
 800cd84:	e015      	b.n	800cdb2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d20b      	bcs.n	800cda8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	1ad2      	subs	r2, r2, r3
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f7ff ff9d 	bl	800ccdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	61fb      	str	r3, [r7, #28]
 800cda6:	e004      	b.n	800cdb2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdb2:	f7fe fcc9 	bl	800b748 <vPortExitCritical>

	return xReturn;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3720      	adds	r7, #32
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20008378 	.word	0x20008378
 800cdc4:	2000838c 	.word	0x2000838c

0800cdc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdc8:	b480      	push	{r7}
 800cdca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdcc:	4b03      	ldr	r3, [pc, #12]	; (800cddc <vTaskMissedYield+0x14>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
}
 800cdd2:	bf00      	nop
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	20008388 	.word	0x20008388

0800cde0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cde8:	f000 f854 	bl	800ce94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cdec:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <prvIdleTask+0x2c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d907      	bls.n	800ce04 <prvIdleTask+0x24>
			{
				taskYIELD();
 800cdf4:	4b06      	ldr	r3, [pc, #24]	; (800ce10 <prvIdleTask+0x30>)
 800cdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ce04:	f002 fa62 	bl	800f2cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ce08:	e7ee      	b.n	800cde8 <prvIdleTask+0x8>
 800ce0a:	bf00      	nop
 800ce0c:	20008278 	.word	0x20008278
 800ce10:	e000ed04 	.word	0xe000ed04

0800ce14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	607b      	str	r3, [r7, #4]
 800ce1e:	e00c      	b.n	800ce3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4a12      	ldr	r2, [pc, #72]	; (800ce74 <prvInitialiseTaskLists+0x60>)
 800ce2c:	4413      	add	r3, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fa7e 	bl	800b330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3301      	adds	r3, #1
 800ce38:	607b      	str	r3, [r7, #4]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b06      	cmp	r3, #6
 800ce3e:	d9ef      	bls.n	800ce20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce40:	480d      	ldr	r0, [pc, #52]	; (800ce78 <prvInitialiseTaskLists+0x64>)
 800ce42:	f7fe fa75 	bl	800b330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce46:	480d      	ldr	r0, [pc, #52]	; (800ce7c <prvInitialiseTaskLists+0x68>)
 800ce48:	f7fe fa72 	bl	800b330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce4c:	480c      	ldr	r0, [pc, #48]	; (800ce80 <prvInitialiseTaskLists+0x6c>)
 800ce4e:	f7fe fa6f 	bl	800b330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce52:	480c      	ldr	r0, [pc, #48]	; (800ce84 <prvInitialiseTaskLists+0x70>)
 800ce54:	f7fe fa6c 	bl	800b330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce58:	480b      	ldr	r0, [pc, #44]	; (800ce88 <prvInitialiseTaskLists+0x74>)
 800ce5a:	f7fe fa69 	bl	800b330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce5e:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <prvInitialiseTaskLists+0x78>)
 800ce60:	4a05      	ldr	r2, [pc, #20]	; (800ce78 <prvInitialiseTaskLists+0x64>)
 800ce62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce64:	4b0a      	ldr	r3, [pc, #40]	; (800ce90 <prvInitialiseTaskLists+0x7c>)
 800ce66:	4a05      	ldr	r2, [pc, #20]	; (800ce7c <prvInitialiseTaskLists+0x68>)
 800ce68:	601a      	str	r2, [r3, #0]
}
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20008278 	.word	0x20008278
 800ce78:	20008304 	.word	0x20008304
 800ce7c:	20008318 	.word	0x20008318
 800ce80:	20008334 	.word	0x20008334
 800ce84:	20008348 	.word	0x20008348
 800ce88:	20008360 	.word	0x20008360
 800ce8c:	2000832c 	.word	0x2000832c
 800ce90:	20008330 	.word	0x20008330

0800ce94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce9a:	e019      	b.n	800ced0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce9c:	f7fe fc26 	bl	800b6ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800cea0:	4b0f      	ldr	r3, [pc, #60]	; (800cee0 <prvCheckTasksWaitingTermination+0x4c>)
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fe fac9 	bl	800b444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ceb2:	4b0c      	ldr	r3, [pc, #48]	; (800cee4 <prvCheckTasksWaitingTermination+0x50>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	4a0a      	ldr	r2, [pc, #40]	; (800cee4 <prvCheckTasksWaitingTermination+0x50>)
 800ceba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	; (800cee8 <prvCheckTasksWaitingTermination+0x54>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	4a09      	ldr	r2, [pc, #36]	; (800cee8 <prvCheckTasksWaitingTermination+0x54>)
 800cec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cec6:	f7fe fc3f 	bl	800b748 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 f80e 	bl	800ceec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ced0:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <prvCheckTasksWaitingTermination+0x54>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e1      	bne.n	800ce9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ced8:	bf00      	nop
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	20008348 	.word	0x20008348
 800cee4:	20008374 	.word	0x20008374
 800cee8:	2000835c 	.word	0x2000835c

0800ceec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d108      	bne.n	800cf10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe f900 	bl	800b108 <vPortFree>
				vPortFree( pxTCB );
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7fe f8fd 	bl	800b108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf0e:	e017      	b.n	800cf40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d103      	bne.n	800cf22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7fe f8f4 	bl	800b108 <vPortFree>
	}
 800cf20:	e00e      	b.n	800cf40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf28:	2b02      	cmp	r3, #2
 800cf2a:	d009      	beq.n	800cf40 <prvDeleteTCB+0x54>
 800cf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	60fb      	str	r3, [r7, #12]
 800cf3e:	e7fe      	b.n	800cf3e <prvDeleteTCB+0x52>
	}
 800cf40:	bf00      	nop
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf4e:	4b0f      	ldr	r3, [pc, #60]	; (800cf8c <prvResetNextTaskUnblockTime+0x44>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <prvResetNextTaskUnblockTime+0x14>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e000      	b.n	800cf5e <prvResetNextTaskUnblockTime+0x16>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d004      	beq.n	800cf6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf62:	4b0b      	ldr	r3, [pc, #44]	; (800cf90 <prvResetNextTaskUnblockTime+0x48>)
 800cf64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf6a:	e008      	b.n	800cf7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cf6c:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <prvResetNextTaskUnblockTime+0x44>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	4a05      	ldr	r2, [pc, #20]	; (800cf90 <prvResetNextTaskUnblockTime+0x48>)
 800cf7c:	6013      	str	r3, [r2, #0]
}
 800cf7e:	bf00      	nop
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	2000832c 	.word	0x2000832c
 800cf90:	20008394 	.word	0x20008394

0800cf94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	; (800cfc8 <xTaskGetSchedulerState+0x34>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d102      	bne.n	800cfa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	e008      	b.n	800cfba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa8:	4b08      	ldr	r3, [pc, #32]	; (800cfcc <xTaskGetSchedulerState+0x38>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d102      	bne.n	800cfb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	607b      	str	r3, [r7, #4]
 800cfb4:	e001      	b.n	800cfba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfba:	687b      	ldr	r3, [r7, #4]
	}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	20008380 	.word	0x20008380
 800cfcc:	2000839c 	.word	0x2000839c

0800cfd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d06c      	beq.n	800d0c0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cfe6:	4b39      	ldr	r3, [pc, #228]	; (800d0cc <xTaskPriorityDisinherit+0xfc>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	693a      	ldr	r2, [r7, #16]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d009      	beq.n	800d004 <xTaskPriorityDisinherit+0x34>
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	e7fe      	b.n	800d002 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d109      	bne.n	800d020 <xTaskPriorityDisinherit+0x50>
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	60bb      	str	r3, [r7, #8]
 800d01e:	e7fe      	b.n	800d01e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d024:	1e5a      	subs	r2, r3, #1
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d032:	429a      	cmp	r2, r3
 800d034:	d044      	beq.n	800d0c0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d140      	bne.n	800d0c0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	3304      	adds	r3, #4
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe f9fe 	bl	800b444 <uxListRemove>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d115      	bne.n	800d07a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d052:	491f      	ldr	r1, [pc, #124]	; (800d0d0 <xTaskPriorityDisinherit+0x100>)
 800d054:	4613      	mov	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4413      	add	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	440b      	add	r3, r1
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10a      	bne.n	800d07a <xTaskPriorityDisinherit+0xaa>
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d068:	2201      	movs	r2, #1
 800d06a:	fa02 f303 	lsl.w	r3, r2, r3
 800d06e:	43da      	mvns	r2, r3
 800d070:	4b18      	ldr	r3, [pc, #96]	; (800d0d4 <xTaskPriorityDisinherit+0x104>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4013      	ands	r3, r2
 800d076:	4a17      	ldr	r2, [pc, #92]	; (800d0d4 <xTaskPriorityDisinherit+0x104>)
 800d078:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d086:	f1c3 0207 	rsb	r2, r3, #7
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d092:	2201      	movs	r2, #1
 800d094:	409a      	lsls	r2, r3
 800d096:	4b0f      	ldr	r3, [pc, #60]	; (800d0d4 <xTaskPriorityDisinherit+0x104>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	4a0d      	ldr	r2, [pc, #52]	; (800d0d4 <xTaskPriorityDisinherit+0x104>)
 800d09e:	6013      	str	r3, [r2, #0]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4a08      	ldr	r2, [pc, #32]	; (800d0d0 <xTaskPriorityDisinherit+0x100>)
 800d0ae:	441a      	add	r2, r3
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	4610      	mov	r0, r2
 800d0b8:	f7fe f967 	bl	800b38a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0c0:	697b      	ldr	r3, [r7, #20]
	}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3718      	adds	r7, #24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20008274 	.word	0x20008274
 800d0d0:	20008278 	.word	0x20008278
 800d0d4:	2000837c 	.word	0x2000837c

0800d0d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0e2:	4b29      	ldr	r3, [pc, #164]	; (800d188 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0e8:	4b28      	ldr	r3, [pc, #160]	; (800d18c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fe f9a8 	bl	800b444 <uxListRemove>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10b      	bne.n	800d112 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d0fa:	4b24      	ldr	r3, [pc, #144]	; (800d18c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	2201      	movs	r2, #1
 800d102:	fa02 f303 	lsl.w	r3, r2, r3
 800d106:	43da      	mvns	r2, r3
 800d108:	4b21      	ldr	r3, [pc, #132]	; (800d190 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4013      	ands	r3, r2
 800d10e:	4a20      	ldr	r2, [pc, #128]	; (800d190 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d110:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d118:	d10a      	bne.n	800d130 <prvAddCurrentTaskToDelayedList+0x58>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d120:	4b1a      	ldr	r3, [pc, #104]	; (800d18c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3304      	adds	r3, #4
 800d126:	4619      	mov	r1, r3
 800d128:	481a      	ldr	r0, [pc, #104]	; (800d194 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d12a:	f7fe f92e 	bl	800b38a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d12e:	e026      	b.n	800d17e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4413      	add	r3, r2
 800d136:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d138:	4b14      	ldr	r3, [pc, #80]	; (800d18c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	429a      	cmp	r2, r3
 800d146:	d209      	bcs.n	800d15c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d148:	4b13      	ldr	r3, [pc, #76]	; (800d198 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	4b0f      	ldr	r3, [pc, #60]	; (800d18c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3304      	adds	r3, #4
 800d152:	4619      	mov	r1, r3
 800d154:	4610      	mov	r0, r2
 800d156:	f7fe f93c 	bl	800b3d2 <vListInsert>
}
 800d15a:	e010      	b.n	800d17e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d15c:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3304      	adds	r3, #4
 800d166:	4619      	mov	r1, r3
 800d168:	4610      	mov	r0, r2
 800d16a:	f7fe f932 	bl	800b3d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d16e:	4b0c      	ldr	r3, [pc, #48]	; (800d1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	429a      	cmp	r2, r3
 800d176:	d202      	bcs.n	800d17e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d178:	4a09      	ldr	r2, [pc, #36]	; (800d1a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	6013      	str	r3, [r2, #0]
}
 800d17e:	bf00      	nop
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	20008378 	.word	0x20008378
 800d18c:	20008274 	.word	0x20008274
 800d190:	2000837c 	.word	0x2000837c
 800d194:	20008360 	.word	0x20008360
 800d198:	20008330 	.word	0x20008330
 800d19c:	2000832c 	.word	0x2000832c
 800d1a0:	20008394 	.word	0x20008394

0800d1a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b089      	sub	sp, #36	; 0x24
 800d1a8:	af04      	add	r7, sp, #16
 800d1aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800d1ac:	2302      	movs	r3, #2
 800d1ae:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	2102      	movs	r1, #2
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 fc8c 	bl	800dad4 <USBH_FindInterface>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800d1c0:	7bbb      	ldrb	r3, [r7, #14]
 800d1c2:	2bff      	cmp	r3, #255	; 0xff
 800d1c4:	f000 812a 	beq.w	800d41c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 fc65 	bl	800da9c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800d1d8:	2050      	movs	r0, #80	; 0x50
 800d1da:	f004 f98d 	bl	80114f8 <malloc>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d1ec:	7bbb      	ldrb	r3, [r7, #14]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	211a      	movs	r1, #26
 800d1f2:	fb01 f303 	mul.w	r3, r1, r3
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	b25b      	sxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	da15      	bge.n	800d230 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d204:	7bbb      	ldrb	r3, [r7, #14]
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	211a      	movs	r1, #26
 800d20a:	fb01 f303 	mul.w	r3, r1, r3
 800d20e:	4413      	add	r3, r2
 800d210:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d214:	781a      	ldrb	r2, [r3, #0]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d21a:	7bbb      	ldrb	r3, [r7, #14]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	211a      	movs	r1, #26
 800d220:	fb01 f303 	mul.w	r3, r1, r3
 800d224:	4413      	add	r3, r2
 800d226:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d22a:	881a      	ldrh	r2, [r3, #0]
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	785b      	ldrb	r3, [r3, #1]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 ff2f 	bl	800f09a <USBH_AllocPipe>
 800d23c:	4603      	mov	r3, r0
 800d23e:	461a      	mov	r2, r3
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	7819      	ldrb	r1, [r3, #0]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	7858      	ldrb	r0, [r3, #1]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d258:	68ba      	ldr	r2, [r7, #8]
 800d25a:	8952      	ldrh	r2, [r2, #10]
 800d25c:	9202      	str	r2, [sp, #8]
 800d25e:	2203      	movs	r2, #3
 800d260:	9201      	str	r2, [sp, #4]
 800d262:	9300      	str	r3, [sp, #0]
 800d264:	4623      	mov	r3, r4
 800d266:	4602      	mov	r2, r0
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 fee7 	bl	800f03c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	2200      	movs	r2, #0
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f004 f864 	bl	8011344 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800d27c:	2300      	movs	r3, #0
 800d27e:	2200      	movs	r2, #0
 800d280:	210a      	movs	r1, #10
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fc26 	bl	800dad4 <USBH_FindInterface>
 800d288:	4603      	mov	r3, r0
 800d28a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800d28c:	7bbb      	ldrb	r3, [r7, #14]
 800d28e:	2bff      	cmp	r3, #255	; 0xff
 800d290:	f000 80c4 	beq.w	800d41c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d294:	7bbb      	ldrb	r3, [r7, #14]
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	211a      	movs	r1, #26
 800d29a:	fb01 f303 	mul.w	r3, r1, r3
 800d29e:	4413      	add	r3, r2
 800d2a0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	b25b      	sxtb	r3, r3
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	da16      	bge.n	800d2da <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d2ac:	7bbb      	ldrb	r3, [r7, #14]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	211a      	movs	r1, #26
 800d2b2:	fb01 f303 	mul.w	r3, r1, r3
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d2bc:	781a      	ldrb	r2, [r3, #0]
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d2c2:	7bbb      	ldrb	r3, [r7, #14]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	211a      	movs	r1, #26
 800d2c8:	fb01 f303 	mul.w	r3, r1, r3
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d2d2:	881a      	ldrh	r2, [r3, #0]
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	835a      	strh	r2, [r3, #26]
 800d2d8:	e015      	b.n	800d306 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d2da:	7bbb      	ldrb	r3, [r7, #14]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	211a      	movs	r1, #26
 800d2e0:	fb01 f303 	mul.w	r3, r1, r3
 800d2e4:	4413      	add	r3, r2
 800d2e6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800d2ea:	781a      	ldrb	r2, [r3, #0]
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	211a      	movs	r1, #26
 800d2f6:	fb01 f303 	mul.w	r3, r1, r3
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800d300:	881a      	ldrh	r2, [r3, #0]
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	211a      	movs	r1, #26
 800d30c:	fb01 f303 	mul.w	r3, r1, r3
 800d310:	4413      	add	r3, r2
 800d312:	f203 3352 	addw	r3, r3, #850	; 0x352
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	b25b      	sxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	da16      	bge.n	800d34c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d31e:	7bbb      	ldrb	r3, [r7, #14]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	211a      	movs	r1, #26
 800d324:	fb01 f303 	mul.w	r3, r1, r3
 800d328:	4413      	add	r3, r2
 800d32a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800d32e:	781a      	ldrb	r2, [r3, #0]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	211a      	movs	r1, #26
 800d33a:	fb01 f303 	mul.w	r3, r1, r3
 800d33e:	4413      	add	r3, r2
 800d340:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d344:	881a      	ldrh	r2, [r3, #0]
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	835a      	strh	r2, [r3, #26]
 800d34a:	e015      	b.n	800d378 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d34c:	7bbb      	ldrb	r3, [r7, #14]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	211a      	movs	r1, #26
 800d352:	fb01 f303 	mul.w	r3, r1, r3
 800d356:	4413      	add	r3, r2
 800d358:	f203 3352 	addw	r3, r3, #850	; 0x352
 800d35c:	781a      	ldrb	r2, [r3, #0]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d362:	7bbb      	ldrb	r3, [r7, #14]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	211a      	movs	r1, #26
 800d368:	fb01 f303 	mul.w	r3, r1, r3
 800d36c:	4413      	add	r3, r2
 800d36e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800d372:	881a      	ldrh	r2, [r3, #0]
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	7b9b      	ldrb	r3, [r3, #14]
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 fe8b 	bl	800f09a <USBH_AllocPipe>
 800d384:	4603      	mov	r3, r0
 800d386:	461a      	mov	r2, r3
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	7bdb      	ldrb	r3, [r3, #15]
 800d390:	4619      	mov	r1, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f001 fe81 	bl	800f09a <USBH_AllocPipe>
 800d398:	4603      	mov	r3, r0
 800d39a:	461a      	mov	r2, r3
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	7b59      	ldrb	r1, [r3, #13]
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	7b98      	ldrb	r0, [r3, #14]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	8b12      	ldrh	r2, [r2, #24]
 800d3b8:	9202      	str	r2, [sp, #8]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	9201      	str	r2, [sp, #4]
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	4623      	mov	r3, r4
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f001 fe39 	bl	800f03c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	7b19      	ldrb	r1, [r3, #12]
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	7bd8      	ldrb	r0, [r3, #15]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	8b52      	ldrh	r2, [r2, #26]
 800d3e2:	9202      	str	r2, [sp, #8]
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	9201      	str	r2, [sp, #4]
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	4623      	mov	r3, r4
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 fe24 	bl	800f03c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	7b5b      	ldrb	r3, [r3, #13]
 800d400:	2200      	movs	r2, #0
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f003 ff9d 	bl	8011344 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	7b1b      	ldrb	r3, [r3, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	4619      	mov	r1, r3
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f003 ff96 	bl	8011344 <USBH_LL_SetToggle>
      status = USBH_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3714      	adds	r7, #20
 800d422:	46bd      	mov	sp, r7
 800d424:	bd90      	pop	{r4, r7, pc}

0800d426 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b084      	sub	sp, #16
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d434:	69db      	ldr	r3, [r3, #28]
 800d436:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00e      	beq.n	800d45e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f001 fe17 	bl	800f07a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f001 fe3f 	bl	800f0d6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	7b1b      	ldrb	r3, [r3, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00e      	beq.n	800d484 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	7b1b      	ldrb	r3, [r3, #12]
 800d46a:	4619      	mov	r1, r3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f001 fe04 	bl	800f07a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	7b1b      	ldrb	r3, [r3, #12]
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f001 fe2c 	bl	800f0d6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	7b5b      	ldrb	r3, [r3, #13]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00e      	beq.n	800d4aa <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	7b5b      	ldrb	r3, [r3, #13]
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f001 fdf1 	bl	800f07a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	7b5b      	ldrb	r3, [r3, #13]
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 fe19 	bl	800f0d6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00b      	beq.n	800d4ce <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d4bc:	69db      	ldr	r3, [r3, #28]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f004 f822 	bl	8011508 <free>
    phost->pActiveClass->pData = 0U;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	3340      	adds	r3, #64	; 0x40
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f8b2 	bl	800d65e <GetLineCoding>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800d4fe:	7bfb      	ldrb	r3, [r7, #15]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d105      	bne.n	800d510 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d50a:	2102      	movs	r1, #2
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	4798      	blx	r3
  }
  return status;
 800d510:	7bfb      	ldrb	r3, [r7, #15]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d524:	2301      	movs	r3, #1
 800d526:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d528:	2300      	movs	r3, #0
 800d52a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	d877      	bhi.n	800d630 <USBH_CDC_Process+0x114>
 800d540:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <USBH_CDC_Process+0x2c>)
 800d542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d546:	bf00      	nop
 800d548:	0800d55d 	.word	0x0800d55d
 800d54c:	0800d563 	.word	0x0800d563
 800d550:	0800d593 	.word	0x0800d593
 800d554:	0800d607 	.word	0x0800d607
 800d558:	0800d615 	.word	0x0800d615
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800d55c:	2300      	movs	r3, #0
 800d55e:	73fb      	strb	r3, [r7, #15]
    break;
 800d560:	e06d      	b.n	800d63e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f897 	bl	800d69c <SetLineCoding>
 800d56e:	4603      	mov	r3, r0
 800d570:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800d572:	7bbb      	ldrb	r3, [r7, #14]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d104      	bne.n	800d582 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800d580:	e058      	b.n	800d634 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d055      	beq.n	800d634 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	2204      	movs	r2, #4
 800d58c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800d590:	e050      	b.n	800d634 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	3340      	adds	r3, #64	; 0x40
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f860 	bl	800d65e <GetLineCoding>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800d5a2:	7bbb      	ldrb	r3, [r7, #14]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d126      	bne.n	800d5f6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ba:	791b      	ldrb	r3, [r3, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d13b      	bne.n	800d638 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ca:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d133      	bne.n	800d638 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5da:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d12b      	bne.n	800d638 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5e8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d124      	bne.n	800d638 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f984 	bl	800d8fc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800d5f4:	e020      	b.n	800d638 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d01d      	beq.n	800d638 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2204      	movs	r2, #4
 800d600:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800d604:	e018      	b.n	800d638 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f867 	bl	800d6da <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 f8f8 	bl	800d802 <CDC_ProcessReception>
    break;
 800d612:	e014      	b.n	800d63e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800d614:	2100      	movs	r1, #0
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fffa 	bl	800e610 <USBH_ClrFeature>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800d62e:	e005      	b.n	800d63c <USBH_CDC_Process+0x120>

  default:
    break;
 800d630:	bf00      	nop
 800d632:	e004      	b.n	800d63e <USBH_CDC_Process+0x122>
    break;
 800d634:	bf00      	nop
 800d636:	e002      	b.n	800d63e <USBH_CDC_Process+0x122>
    break;
 800d638:	bf00      	nop
 800d63a:	e000      	b.n	800d63e <USBH_CDC_Process+0x122>
    break;
 800d63c:	bf00      	nop

  }

  return status;
 800d63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	22a1      	movs	r2, #161	; 0xa1
 800d66c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2221      	movs	r2, #33	; 0x21
 800d672:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2207      	movs	r2, #7
 800d684:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2207      	movs	r2, #7
 800d68a:	4619      	mov	r1, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f001 f99f 	bl	800e9d0 <USBH_CtlReq>
 800d692:	4603      	mov	r3, r0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2221      	movs	r2, #33	; 0x21
 800d6aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2207      	movs	r2, #7
 800d6c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	2207      	movs	r2, #7
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f001 f980 	bl	800e9d0 <USBH_CtlReq>
 800d6d0:	4603      	mov	r3, r0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b086      	sub	sp, #24
 800d6de:	af02      	add	r7, sp, #8
 800d6e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d002      	beq.n	800d700 <CDC_ProcessTransmission+0x26>
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d025      	beq.n	800d74a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800d6fe:	e07c      	b.n	800d7fa <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	8b12      	ldrh	r2, [r2, #24]
 800d708:	4293      	cmp	r3, r2
 800d70a:	d90c      	bls.n	800d726 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	69d9      	ldr	r1, [r3, #28]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8b1a      	ldrh	r2, [r3, #24]
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	7b58      	ldrb	r0, [r3, #13]
 800d718:	2301      	movs	r3, #1
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4603      	mov	r3, r0
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f001 fc49 	bl	800efb6 <USBH_BulkSendData>
 800d724:	e00c      	b.n	800d740 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800d72e:	b29a      	uxth	r2, r3
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	7b58      	ldrb	r0, [r3, #13]
 800d734:	2301      	movs	r3, #1
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	4603      	mov	r3, r0
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f001 fc3b 	bl	800efb6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2202      	movs	r2, #2
 800d744:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800d748:	e057      	b.n	800d7fa <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	7b5b      	ldrb	r3, [r3, #13]
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f003 fdcd 	bl	80112f0 <USBH_LL_GetURBState>
 800d756:	4603      	mov	r3, r0
 800d758:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800d75a:	7afb      	ldrb	r3, [r7, #11]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d136      	bne.n	800d7ce <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	8b12      	ldrh	r2, [r2, #24]
 800d768:	4293      	cmp	r3, r2
 800d76a:	d90e      	bls.n	800d78a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	8b12      	ldrh	r2, [r2, #24]
 800d774:	1a9a      	subs	r2, r3, r2
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	69db      	ldr	r3, [r3, #28]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	8b12      	ldrh	r2, [r2, #24]
 800d782:	441a      	add	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	61da      	str	r2, [r3, #28]
 800d788:	e002      	b.n	800d790 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d7a0:	e006      	b.n	800d7b0 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f892 	bl	800d8d4 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2204      	movs	r2, #4
 800d7b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	f7fd fb24 	bl	800ae14 <osMessagePut>
    break;
 800d7cc:	e014      	b.n	800d7f8 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800d7ce:	7afb      	ldrb	r3, [r7, #11]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d111      	bne.n	800d7f8 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2204      	movs	r2, #4
 800d7e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	f7fd fb0e 	bl	800ae14 <osMessagePut>
    break;
 800d7f8:	bf00      	nop
  }
}
 800d7fa:	bf00      	nop
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b086      	sub	sp, #24
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d814:	2300      	movs	r3, #0
 800d816:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d002      	beq.n	800d828 <CDC_ProcessReception+0x26>
 800d822:	2b04      	cmp	r3, #4
 800d824:	d00e      	beq.n	800d844 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800d826:	e051      	b.n	800d8cc <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	6a19      	ldr	r1, [r3, #32]
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	8b5a      	ldrh	r2, [r3, #26]
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	7b1b      	ldrb	r3, [r3, #12]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f001 fbe3 	bl	800f000 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2204      	movs	r2, #4
 800d83e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800d842:	e043      	b.n	800d8cc <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	7b1b      	ldrb	r3, [r3, #12]
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f003 fd50 	bl	80112f0 <USBH_LL_GetURBState>
 800d850:	4603      	mov	r3, r0
 800d852:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800d854:	7cfb      	ldrb	r3, [r7, #19]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d137      	bne.n	800d8ca <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	7b1b      	ldrb	r3, [r3, #12]
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f003 fcb3 	bl	80111cc <USBH_LL_GetLastXferSize>
 800d866:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d016      	beq.n	800d8a0 <CDC_ProcessReception+0x9e>
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	8b5b      	ldrh	r3, [r3, #26]
 800d876:	461a      	mov	r2, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d910      	bls.n	800d8a0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	1ad2      	subs	r2, r2, r3
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	6a1a      	ldr	r2, [r3, #32]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	441a      	add	r2, r3
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	2203      	movs	r2, #3
 800d89a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d89e:	e006      	b.n	800d8ae <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f81d 	bl	800d8e8 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	f7fd faa5 	bl	800ae14 <osMessagePut>
    break;
 800d8ca:	bf00      	nop
  }
}
 800d8cc:	bf00      	nop
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]

}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]

}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]

}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800d910:	b5b0      	push	{r4, r5, r7, lr}
 800d912:	b090      	sub	sp, #64	; 0x40
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	4613      	mov	r3, r2
 800d91c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d924:	2302      	movs	r3, #2
 800d926:	e03d      	b.n	800d9a4 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	79fa      	ldrb	r2, [r7, #7]
 800d92c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f000 f837 	bl	800d9b4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800d954:	4b15      	ldr	r3, [pc, #84]	; (800d9ac <USBH_Init+0x9c>)
 800d956:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d95a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d95c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800d960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d964:	2100      	movs	r1, #0
 800d966:	4618      	mov	r0, r3
 800d968:	f7fd fa2a 	bl	800adc0 <osMessageCreate>
 800d96c:	4602      	mov	r2, r0
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800d974:	4b0e      	ldr	r3, [pc, #56]	; (800d9b0 <USBH_Init+0xa0>)
 800d976:	f107 0414 	add.w	r4, r7, #20
 800d97a:	461d      	mov	r5, r3
 800d97c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d97e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d980:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800d988:	f107 0314 	add.w	r3, r7, #20
 800d98c:	68f9      	ldr	r1, [r7, #12]
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fd f9b6 	bl	800ad00 <osThreadCreate>
 800d994:	4602      	mov	r2, r0
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f003 fb63 	bl	8011068 <USBH_LL_Init>

  return USBH_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3740      	adds	r7, #64	; 0x40
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bdb0      	pop	{r4, r5, r7, pc}
 800d9ac:	080116d8 	.word	0x080116d8
 800d9b0:	080116f4 	.word	0x080116f4

0800d9b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d9c0:	e008      	b.n	800d9d4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	32e0      	adds	r2, #224	; 0xe0
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b0e      	cmp	r3, #14
 800d9d8:	d9f3      	bls.n	800d9c2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d9da:	2300      	movs	r3, #0
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	e009      	b.n	800d9f4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9fa:	d3f1      	bcc.n	800d9e0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2240      	movs	r2, #64	; 0x40
 800da20:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800da46:	b480      	push	{r7}
 800da48:	b085      	sub	sp, #20
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d017      	beq.n	800da8a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10f      	bne.n	800da84 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da6a:	1c59      	adds	r1, r3, #1
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	33dc      	adds	r3, #220	; 0xdc
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4413      	add	r3, r2
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73fb      	strb	r3, [r7, #15]
 800da82:	e004      	b.n	800da8e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800da84:	2302      	movs	r3, #2
 800da86:	73fb      	strb	r3, [r7, #15]
 800da88:	e001      	b.n	800da8e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800da8a:	2302      	movs	r3, #2
 800da8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800dab2:	78fa      	ldrb	r2, [r7, #3]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d204      	bcs.n	800dac2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	78fa      	ldrb	r2, [r7, #3]
 800dabc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800dac0:	e001      	b.n	800dac6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800dac2:	2302      	movs	r3, #2
 800dac4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800dac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b087      	sub	sp, #28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	4608      	mov	r0, r1
 800dade:	4611      	mov	r1, r2
 800dae0:	461a      	mov	r2, r3
 800dae2:	4603      	mov	r3, r0
 800dae4:	70fb      	strb	r3, [r7, #3]
 800dae6:	460b      	mov	r3, r1
 800dae8:	70bb      	strb	r3, [r7, #2]
 800daea:	4613      	mov	r3, r2
 800daec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800daee:	2300      	movs	r3, #0
 800daf0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800dafc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dafe:	e025      	b.n	800db4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	221a      	movs	r2, #26
 800db04:	fb02 f303 	mul.w	r3, r2, r3
 800db08:	3308      	adds	r3, #8
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	4413      	add	r3, r2
 800db0e:	3302      	adds	r3, #2
 800db10:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	795b      	ldrb	r3, [r3, #5]
 800db16:	78fa      	ldrb	r2, [r7, #3]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d002      	beq.n	800db22 <USBH_FindInterface+0x4e>
 800db1c:	78fb      	ldrb	r3, [r7, #3]
 800db1e:	2bff      	cmp	r3, #255	; 0xff
 800db20:	d111      	bne.n	800db46 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800db26:	78ba      	ldrb	r2, [r7, #2]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d002      	beq.n	800db32 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800db2c:	78bb      	ldrb	r3, [r7, #2]
 800db2e:	2bff      	cmp	r3, #255	; 0xff
 800db30:	d109      	bne.n	800db46 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800db36:	787a      	ldrb	r2, [r7, #1]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d002      	beq.n	800db42 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800db3c:	787b      	ldrb	r3, [r7, #1]
 800db3e:	2bff      	cmp	r3, #255	; 0xff
 800db40:	d101      	bne.n	800db46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800db42:	7dfb      	ldrb	r3, [r7, #23]
 800db44:	e006      	b.n	800db54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	3301      	adds	r3, #1
 800db4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d9d6      	bls.n	800db00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800db52:	23ff      	movs	r3, #255	; 0xff
}
 800db54:	4618      	mov	r0, r3
 800db56:	371c      	adds	r7, #28
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f003 fab9 	bl	80110e0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800db6e:	2101      	movs	r1, #1
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f003 fbd0 	bl	8011316 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af04      	add	r7, sp, #16
 800db86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800db88:	2302      	movs	r3, #2
 800db8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800db8c:	2300      	movs	r3, #0
 800db8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 fb7e 	bl	800e292 <USBH_IsPortEnabled>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10c      	bne.n	800dbb6 <USBH_Process+0x36>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d007      	beq.n	800dbb6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	d002      	beq.n	800dbb6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2203      	movs	r2, #3
 800dbb4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b0b      	cmp	r3, #11
 800dbbe:	f200 81ab 	bhi.w	800df18 <USBH_Process+0x398>
 800dbc2:	a201      	add	r2, pc, #4	; (adr r2, 800dbc8 <USBH_Process+0x48>)
 800dbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc8:	0800dbf9 	.word	0x0800dbf9
 800dbcc:	0800dc37 	.word	0x0800dc37
 800dbd0:	0800dc4b 	.word	0x0800dc4b
 800dbd4:	0800def3 	.word	0x0800def3
 800dbd8:	0800df19 	.word	0x0800df19
 800dbdc:	0800dcf5 	.word	0x0800dcf5
 800dbe0:	0800de8d 	.word	0x0800de8d
 800dbe4:	0800dd25 	.word	0x0800dd25
 800dbe8:	0800dd61 	.word	0x0800dd61
 800dbec:	0800dd9b 	.word	0x0800dd9b
 800dbf0:	0800dde3 	.word	0x0800dde3
 800dbf4:	0800dedb 	.word	0x0800dedb
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 818b 	beq.w	800df1c <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800dc0c:	20c8      	movs	r0, #200	; 0xc8
 800dc0e:	f003 fbcc 	bl	80113aa <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f003 fabf 	bl	8011196 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f7fd f8f0 	bl	800ae14 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800dc34:	e172      	b.n	800df1c <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	f040 816f 	bne.w	800df20 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2202      	movs	r2, #2
 800dc46:	701a      	strb	r2, [r3, #0]
    }
    break;
 800dc48:	e16a      	b.n	800df20 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800dc4a:	2064      	movs	r0, #100	; 0x64
 800dc4c:	f003 fbad 	bl	80113aa <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f003 fa7b 	bl	801114c <USBH_LL_GetSpeed>
 800dc56:	4603      	mov	r3, r0
 800dc58:	461a      	mov	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2205      	movs	r2, #5
 800dc64:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800dc66:	2100      	movs	r1, #0
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f001 fa16 	bl	800f09a <USBH_AllocPipe>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	461a      	mov	r2, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800dc76:	2180      	movs	r1, #128	; 0x80
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f001 fa0e 	bl	800f09a <USBH_AllocPipe>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	461a      	mov	r2, r3
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	7919      	ldrb	r1, [r3, #4]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800dc9a:	b292      	uxth	r2, r2
 800dc9c:	9202      	str	r2, [sp, #8]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	9201      	str	r2, [sp, #4]
 800dca2:	9300      	str	r3, [sp, #0]
 800dca4:	4603      	mov	r3, r0
 800dca6:	2280      	movs	r2, #128	; 0x80
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f001 f9c7 	bl	800f03c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	7959      	ldrb	r1, [r3, #5]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800dcc2:	b292      	uxth	r2, r2
 800dcc4:	9202      	str	r2, [sp, #8]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	9201      	str	r2, [sp, #4]
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	4603      	mov	r3, r0
 800dcce:	2200      	movs	r2, #0
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f001 f9b3 	bl	800f03c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcea:	2200      	movs	r2, #0
 800dcec:	4619      	mov	r1, r3
 800dcee:	f7fd f891 	bl	800ae14 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800dcf2:	e120      	b.n	800df36 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 f923 	bl	800df40 <USBH_HandleEnum>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f040 8111 	bne.w	800df24 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d103      	bne.n	800dd1c <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2208      	movs	r2, #8
 800dd18:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800dd1a:	e103      	b.n	800df24 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2207      	movs	r2, #7
 800dd20:	701a      	strb	r2, [r3, #0]
    break;
 800dd22:	e0ff      	b.n	800df24 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 80fc 	beq.w	800df28 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dd36:	2101      	movs	r1, #1
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2208      	movs	r2, #8
 800dd40:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2205      	movs	r2, #5
 800dd46:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd56:	2200      	movs	r2, #0
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f7fd f85b 	bl	800ae14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dd5e:	e0e3      	b.n	800df28 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	4619      	mov	r1, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fc09 	bl	800e582 <USBH_SetCfg>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d102      	bne.n	800dd7c <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2209      	movs	r2, #9
 800dd7a:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd90:	2200      	movs	r2, #0
 800dd92:	4619      	mov	r1, r3
 800dd94:	f7fd f83e 	bl	800ae14 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800dd98:	e0cd      	b.n	800df36 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800dda0:	f003 0320 	and.w	r3, r3, #32
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00a      	beq.n	800ddbe <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800dda8:	2101      	movs	r1, #1
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 fc0c 	bl	800e5c8 <USBH_SetFeature>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d106      	bne.n	800ddc4 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	220a      	movs	r2, #10
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e002      	b.n	800ddc4 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	220a      	movs	r2, #10
 800ddc2:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4619      	mov	r1, r3
 800dddc:	f7fd f81a 	bl	800ae14 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800dde0:	e0a9      	b.n	800df36 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d040      	beq.n	800de6e <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
 800ddf8:	e017      	b.n	800de2a <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	33dc      	adds	r3, #220	; 0xdc
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	791a      	ldrb	r2, [r3, #4]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800de0e:	429a      	cmp	r2, r3
 800de10:	d108      	bne.n	800de24 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800de12:	7bfb      	ldrb	r3, [r7, #15]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	33dc      	adds	r3, #220	; 0xdc
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4413      	add	r3, r2
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800de24:	7bfb      	ldrb	r3, [r7, #15]
 800de26:	3301      	adds	r3, #1
 800de28:	73fb      	strb	r3, [r7, #15]
 800de2a:	7bfb      	ldrb	r3, [r7, #15]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0e4      	beq.n	800ddfa <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800de36:	2b00      	cmp	r3, #0
 800de38:	d016      	beq.n	800de68 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	4798      	blx	r3
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d109      	bne.n	800de60 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2206      	movs	r2, #6
 800de50:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800de58:	2103      	movs	r1, #3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	4798      	blx	r3
 800de5e:	e006      	b.n	800de6e <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	220d      	movs	r2, #13
 800de64:	701a      	strb	r2, [r3, #0]
 800de66:	e002      	b.n	800de6e <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	220d      	movs	r2, #13
 800de6c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2205      	movs	r2, #5
 800de72:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de82:	2200      	movs	r2, #0
 800de84:	4619      	mov	r1, r3
 800de86:	f7fc ffc5 	bl	800ae14 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800de8a:	e054      	b.n	800df36 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00f      	beq.n	800deb6 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	4798      	blx	r3
 800dea2:	4603      	mov	r3, r0
 800dea4:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800dea6:	7bbb      	ldrb	r3, [r7, #14]
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d13e      	bne.n	800df2c <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	220b      	movs	r2, #11
 800deb2:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800deb4:	e03a      	b.n	800df2c <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	220d      	movs	r2, #13
 800deba:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2205      	movs	r2, #5
 800dec0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ded0:	2200      	movs	r2, #0
 800ded2:	4619      	mov	r1, r3
 800ded4:	f7fc ff9e 	bl	800ae14 <osMessagePut>
    break;
 800ded8:	e028      	b.n	800df2c <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d025      	beq.n	800df30 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800deea:	695b      	ldr	r3, [r3, #20]
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	4798      	blx	r3
    }
    break;
 800def0:	e01e      	b.n	800df30 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f7ff fd5e 	bl	800d9b4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800defe:	2b00      	cmp	r3, #0
 800df00:	d018      	beq.n	800df34 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800df16:	e00d      	b.n	800df34 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800df18:	bf00      	nop
 800df1a:	e00c      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df1c:	bf00      	nop
 800df1e:	e00a      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df20:	bf00      	nop
 800df22:	e008      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df24:	bf00      	nop
 800df26:	e006      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df28:	bf00      	nop
 800df2a:	e004      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df2c:	bf00      	nop
 800df2e:	e002      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df30:	bf00      	nop
 800df32:	e000      	b.n	800df36 <USBH_Process+0x3b6>
    break;
 800df34:	bf00      	nop
  }
 return USBH_OK;
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b088      	sub	sp, #32
 800df44:	af04      	add	r7, sp, #16
 800df46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800df48:	2301      	movs	r3, #1
 800df4a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	2b07      	cmp	r3, #7
 800df52:	f200 8132 	bhi.w	800e1ba <USBH_HandleEnum+0x27a>
 800df56:	a201      	add	r2, pc, #4	; (adr r2, 800df5c <USBH_HandleEnum+0x1c>)
 800df58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5c:	0800df7d 	.word	0x0800df7d
 800df60:	0800dfef 	.word	0x0800dfef
 800df64:	0800e007 	.word	0x0800e007
 800df68:	0800e07d 	.word	0x0800e07d
 800df6c:	0800e095 	.word	0x0800e095
 800df70:	0800e0b3 	.word	0x0800e0b3
 800df74:	0800e11f 	.word	0x0800e11f
 800df78:	0800e16f 	.word	0x0800e16f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800df7c:	2108      	movs	r1, #8
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fa2f 	bl	800e3e2 <USBH_Get_DevDesc>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	f040 8119 	bne.w	800e1be <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2201      	movs	r2, #1
 800df9a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	7919      	ldrb	r1, [r3, #4]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800dfb0:	b292      	uxth	r2, r2
 800dfb2:	9202      	str	r2, [sp, #8]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	9201      	str	r2, [sp, #4]
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2280      	movs	r2, #128	; 0x80
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f001 f83c 	bl	800f03c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	7959      	ldrb	r1, [r3, #5]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800dfd8:	b292      	uxth	r2, r2
 800dfda:	9202      	str	r2, [sp, #8]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	9201      	str	r2, [sp, #4]
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f001 f828 	bl	800f03c <USBH_OpenPipe>

    }
    break;
 800dfec:	e0e7      	b.n	800e1be <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800dfee:	2112      	movs	r1, #18
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f9f6 	bl	800e3e2 <USBH_Get_DevDesc>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f040 80e2 	bne.w	800e1c2 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2202      	movs	r2, #2
 800e002:	705a      	strb	r2, [r3, #1]

    }
    break;
 800e004:	e0dd      	b.n	800e1c2 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800e006:	2101      	movs	r1, #1
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fa96 	bl	800e53a <USBH_SetAddress>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	f040 80d8 	bne.w	800e1c6 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800e016:	2002      	movs	r0, #2
 800e018:	f003 f9c7 	bl	80113aa <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2203      	movs	r2, #3
 800e028:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	7919      	ldrb	r1, [r3, #4]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800e03e:	b292      	uxth	r2, r2
 800e040:	9202      	str	r2, [sp, #8]
 800e042:	2200      	movs	r2, #0
 800e044:	9201      	str	r2, [sp, #4]
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	4603      	mov	r3, r0
 800e04a:	2280      	movs	r2, #128	; 0x80
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fff5 	bl	800f03c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	7959      	ldrb	r1, [r3, #5]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800e066:	b292      	uxth	r2, r2
 800e068:	9202      	str	r2, [sp, #8]
 800e06a:	2200      	movs	r2, #0
 800e06c:	9201      	str	r2, [sp, #4]
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	4603      	mov	r3, r0
 800e072:	2200      	movs	r2, #0
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 ffe1 	bl	800f03c <USBH_OpenPipe>
    }
    break;
 800e07a:	e0a4      	b.n	800e1c6 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800e07c:	2109      	movs	r1, #9
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 f9d7 	bl	800e432 <USBH_Get_CfgDesc>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	f040 809f 	bne.w	800e1ca <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2204      	movs	r2, #4
 800e090:	705a      	strb	r2, [r3, #1]
    }
    break;
 800e092:	e09a      	b.n	800e1ca <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800e09a:	4619      	mov	r1, r3
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f9c8 	bl	800e432 <USBH_Get_CfgDesc>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 8092 	bne.w	800e1ce <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2205      	movs	r2, #5
 800e0ae:	705a      	strb	r2, [r3, #1]
    }
    break;
 800e0b0:	e08d      	b.n	800e1ce <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01e      	beq.n	800e0fa <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800e0c8:	23ff      	movs	r3, #255	; 0xff
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f9d5 	bl	800e47a <USBH_Get_StringDesc>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d17d      	bne.n	800e1d2 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2206      	movs	r2, #6
 800e0da:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2205      	movs	r2, #5
 800e0e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f7fc fe8e 	bl	800ae14 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800e0f8:	e06b      	b.n	800e1d2 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2206      	movs	r2, #6
 800e0fe:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2205      	movs	r2, #5
 800e104:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e114:	2200      	movs	r2, #0
 800e116:	4619      	mov	r1, r3
 800e118:	f7fc fe7c 	bl	800ae14 <osMessagePut>
    break;
 800e11c:	e059      	b.n	800e1d2 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800e124:	2b00      	cmp	r3, #0
 800e126:	d010      	beq.n	800e14a <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800e134:	23ff      	movs	r3, #255	; 0xff
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f99f 	bl	800e47a <USBH_Get_StringDesc>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d149      	bne.n	800e1d6 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2207      	movs	r2, #7
 800e146:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800e148:	e045      	b.n	800e1d6 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2207      	movs	r2, #7
 800e14e:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2205      	movs	r2, #5
 800e154:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e164:	2200      	movs	r2, #0
 800e166:	4619      	mov	r1, r3
 800e168:	f7fc fe54 	bl	800ae14 <osMessagePut>
    break;
 800e16c:	e033      	b.n	800e1d6 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00f      	beq.n	800e198 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800e184:	23ff      	movs	r3, #255	; 0xff
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 f977 	bl	800e47a <USBH_Get_StringDesc>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d123      	bne.n	800e1da <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800e192:	2300      	movs	r3, #0
 800e194:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800e196:	e020      	b.n	800e1da <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2205      	movs	r2, #5
 800e1a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	f7fc fe2e 	bl	800ae14 <osMessagePut>
    break;
 800e1b8:	e00f      	b.n	800e1da <USBH_HandleEnum+0x29a>

  default:
    break;
 800e1ba:	bf00      	nop
 800e1bc:	e00e      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1be:	bf00      	nop
 800e1c0:	e00c      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1c2:	bf00      	nop
 800e1c4:	e00a      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1c6:	bf00      	nop
 800e1c8:	e008      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1ca:	bf00      	nop
 800e1cc:	e006      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1ce:	bf00      	nop
 800e1d0:	e004      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1d2:	bf00      	nop
 800e1d4:	e002      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1d6:	bf00      	nop
 800e1d8:	e000      	b.n	800e1dc <USBH_HandleEnum+0x29c>
    break;
 800e1da:	bf00      	nop
  }
  return Status;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop

0800e1e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800e1fa:	bf00      	nop
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr

0800e206 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800e206:	b580      	push	{r7, lr}
 800e208:	b082      	sub	sp, #8
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e214:	1c5a      	adds	r2, r3, #1
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 f804 	bl	800e22a <USBH_HandleSof>
}
 800e222:	bf00      	nop
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b0b      	cmp	r3, #11
 800e23a:	d10a      	bne.n	800e252 <USBH_HandleSof+0x28>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e242:	2b00      	cmp	r3, #0
 800e244:	d005      	beq.n	800e252 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	4798      	blx	r3
  }
}
 800e252:	bf00      	nop
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800e25a:	b480      	push	{r7}
 800e25c:	b083      	sub	sp, #12
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2201      	movs	r2, #1
 800e266:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800e26a:	bf00      	nop
}
 800e26c:	370c      	adds	r7, #12
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800e276:	b480      	push	{r7}
 800e278:	b083      	sub	sp, #12
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800e286:	bf00      	nop
}
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800e292:	b480      	push	{r7}
 800e294:	b083      	sub	sp, #12
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d10f      	bne.n	800e2de <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00e      	beq.n	800e2ee <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e2d6:	2104      	movs	r1, #4
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	4798      	blx	r3
 800e2dc:	e007      	b.n	800e2ee <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d102      	bne.n	800e2ee <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2202      	movs	r2, #2
 800e2ec:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e302:	2200      	movs	r2, #0
 800e304:	4619      	mov	r1, r3
 800e306:	f7fc fd85 	bl	800ae14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f002 fefa 	bl	8011116 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	791b      	ldrb	r3, [r3, #4]
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fed4 	bl	800f0d6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	795b      	ldrb	r3, [r3, #5]
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fece 	bl	800f0d6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d005      	beq.n	800e358 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e352:	2105      	movs	r1, #5
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f002 fec1 	bl	80110e0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2203      	movs	r2, #3
 800e362:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2201      	movs	r2, #1
 800e368:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e378:	2200      	movs	r2, #0
 800e37a:	4619      	mov	r1, r3
 800e37c:	f7fc fd4a 	bl	800ae14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b086      	sub	sp, #24
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800e398:	f107 030c 	add.w	r3, r7, #12
 800e39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fc fd77 	bl	800ae94 <osMessageGet>
    if(event.status == osEventMessage)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b10      	cmp	r3, #16
 800e3aa:	d1f2      	bne.n	800e392 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff fbe7 	bl	800db80 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800e3b2:	e7ee      	b.n	800e392 <USBH_Process_OS+0x8>

0800e3b4 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	f7fc fd1e 	bl	800ae14 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800e3d8:	2300      	movs	r3, #0
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3708      	adds	r7, #8
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b086      	sub	sp, #24
 800e3e6:	af02      	add	r7, sp, #8
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e400:	2100      	movs	r1, #0
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f864 	bl	800e4d0 <USBH_GetDescriptor>
 800e408:	4603      	mov	r3, r0
 800e40a:	73fb      	strb	r3, [r7, #15]
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10a      	bne.n	800e428 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f203 3022 	addw	r0, r3, #802	; 0x322
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e41e:	78fa      	ldrb	r2, [r7, #3]
 800e420:	b292      	uxth	r2, r2
 800e422:	4619      	mov	r1, r3
 800e424:	f000 f918 	bl	800e658 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800e428:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800e432:	b580      	push	{r7, lr}
 800e434:	b086      	sub	sp, #24
 800e436:	af02      	add	r7, sp, #8
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	460b      	mov	r3, r1
 800e43c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	331c      	adds	r3, #28
 800e442:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800e444:	887b      	ldrh	r3, [r7, #2]
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e44e:	2100      	movs	r1, #0
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f83d 	bl	800e4d0 <USBH_GetDescriptor>
 800e456:	4603      	mov	r3, r0
 800e458:	72fb      	strb	r3, [r7, #11]
 800e45a:	7afb      	ldrb	r3, [r7, #11]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d107      	bne.n	800e470 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e466:	887a      	ldrh	r2, [r7, #2]
 800e468:	68f9      	ldr	r1, [r7, #12]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f000 f964 	bl	800e738 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800e470:	7afb      	ldrb	r3, [r7, #11]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b088      	sub	sp, #32
 800e47e:	af02      	add	r7, sp, #8
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	461a      	mov	r2, r3
 800e486:	460b      	mov	r3, r1
 800e488:	72fb      	strb	r3, [r7, #11]
 800e48a:	4613      	mov	r3, r2
 800e48c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800e48e:	7afb      	ldrb	r3, [r7, #11]
 800e490:	b29b      	uxth	r3, r3
 800e492:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e496:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800e49e:	893b      	ldrh	r3, [r7, #8]
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 f812 	bl	800e4d0 <USBH_GetDescriptor>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	75fb      	strb	r3, [r7, #23]
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d107      	bne.n	800e4c6 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e4bc:	893a      	ldrh	r2, [r7, #8]
 800e4be:	6879      	ldr	r1, [r7, #4]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 fa37 	bl	800e934 <USBH_ParseStringDesc>
  }
  return status;
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	607b      	str	r3, [r7, #4]
 800e4da:	460b      	mov	r3, r1
 800e4dc:	72fb      	strb	r3, [r7, #11]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	789b      	ldrb	r3, [r3, #2]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d11c      	bne.n	800e524 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e4ea:	7afb      	ldrb	r3, [r7, #11]
 800e4ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2206      	movs	r2, #6
 800e4fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	893a      	ldrh	r2, [r7, #8]
 800e500:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e502:	893b      	ldrh	r3, [r7, #8]
 800e504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e50c:	d104      	bne.n	800e518 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f240 4209 	movw	r2, #1033	; 0x409
 800e514:	829a      	strh	r2, [r3, #20]
 800e516:	e002      	b.n	800e51e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	8b3a      	ldrh	r2, [r7, #24]
 800e522:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800e524:	8b3b      	ldrh	r3, [r7, #24]
 800e526:	461a      	mov	r2, r3
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f000 fa50 	bl	800e9d0 <USBH_CtlReq>
 800e530:	4603      	mov	r3, r0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b082      	sub	sp, #8
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	460b      	mov	r3, r1
 800e544:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	789b      	ldrb	r3, [r3, #2]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d10f      	bne.n	800e56e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2205      	movs	r2, #5
 800e558:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e55a:	78fb      	ldrb	r3, [r7, #3]
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e56e:	2200      	movs	r2, #0
 800e570:	2100      	movs	r1, #0
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 fa2c 	bl	800e9d0 <USBH_CtlReq>
 800e578:	4603      	mov	r3, r0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b082      	sub	sp, #8
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	460b      	mov	r3, r1
 800e58c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	789b      	ldrb	r3, [r3, #2]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d10e      	bne.n	800e5b4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2209      	movs	r2, #9
 800e5a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	887a      	ldrh	r2, [r7, #2]
 800e5a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f000 fa09 	bl	800e9d0 <USBH_CtlReq>
 800e5be:	4603      	mov	r3, r0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	789b      	ldrb	r3, [r3, #2]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d10f      	bne.n	800e5fc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2203      	movs	r2, #3
 800e5e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e5e8:	78fb      	ldrb	r3, [r7, #3]
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	2100      	movs	r1, #0
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f9e5 	bl	800e9d0 <USBH_CtlReq>
 800e606:	4603      	mov	r3, r0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	460b      	mov	r3, r1
 800e61a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	789b      	ldrb	r3, [r3, #2]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d10f      	bne.n	800e644 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2202      	movs	r2, #2
 800e628:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2201      	movs	r2, #1
 800e62e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e636:	78fb      	ldrb	r3, [r7, #3]
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800e644:	2200      	movs	r2, #0
 800e646:	2100      	movs	r1, #0
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f9c1 	bl	800e9d0 <USBH_CtlReq>
 800e64e:	4603      	mov	r3, r0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	4613      	mov	r3, r2
 800e664:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	781a      	ldrb	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	785a      	ldrb	r2, [r3, #1]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	3302      	adds	r3, #2
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	3303      	adds	r3, #3
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	b29b      	uxth	r3, r3
 800e686:	021b      	lsls	r3, r3, #8
 800e688:	b29b      	uxth	r3, r3
 800e68a:	4313      	orrs	r3, r2
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	791a      	ldrb	r2, [r3, #4]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	795a      	ldrb	r2, [r3, #5]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	799a      	ldrb	r2, [r3, #6]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	79da      	ldrb	r2, [r3, #7]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e6b2:	88fb      	ldrh	r3, [r7, #6]
 800e6b4:	2b08      	cmp	r3, #8
 800e6b6:	d939      	bls.n	800e72c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	3309      	adds	r3, #9
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	021b      	lsls	r3, r3, #8
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	330a      	adds	r3, #10
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	330b      	adds	r3, #11
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	021b      	lsls	r3, r3, #8
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	330c      	adds	r3, #12
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	b29a      	uxth	r2, r3
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	330d      	adds	r3, #13
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	021b      	lsls	r3, r3, #8
 800e702:	b29b      	uxth	r3, r3
 800e704:	4313      	orrs	r3, r2
 800e706:	b29a      	uxth	r2, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	7b9a      	ldrb	r2, [r3, #14]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	7bda      	ldrb	r2, [r3, #15]
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	7c1a      	ldrb	r2, [r3, #16]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	7c5a      	ldrb	r2, [r3, #17]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	745a      	strb	r2, [r3, #17]
  }
}
 800e72c:	bf00      	nop
 800e72e:	3714      	adds	r7, #20
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b08a      	sub	sp, #40	; 0x28
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	4613      	mov	r3, r2
 800e744:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e74a:	2300      	movs	r3, #0
 800e74c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e750:	2300      	movs	r3, #0
 800e752:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	781a      	ldrb	r2, [r3, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	785a      	ldrb	r2, [r3, #1]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	3302      	adds	r3, #2
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	b29a      	uxth	r2, r3
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	3303      	adds	r3, #3
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	b29b      	uxth	r3, r3
 800e77a:	021b      	lsls	r3, r3, #8
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	4313      	orrs	r3, r2
 800e780:	b29a      	uxth	r2, r3
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	791a      	ldrb	r2, [r3, #4]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	795a      	ldrb	r2, [r3, #5]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	799a      	ldrb	r2, [r3, #6]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	79da      	ldrb	r2, [r3, #7]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	7a1a      	ldrb	r2, [r3, #8]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e7ae:	88fb      	ldrh	r3, [r7, #6]
 800e7b0:	2b09      	cmp	r3, #9
 800e7b2:	d95f      	bls.n	800e874 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e7b4:	2309      	movs	r3, #9
 800e7b6:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e7bc:	e051      	b.n	800e862 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e7be:	f107 0316 	add.w	r3, r7, #22
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7c6:	f000 f8e8 	bl	800e99a <USBH_GetNextDesc>
 800e7ca:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	2b04      	cmp	r3, #4
 800e7d2:	d146      	bne.n	800e862 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e7d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7d8:	221a      	movs	r2, #26
 800e7da:	fb02 f303 	mul.w	r3, r2, r3
 800e7de:	3308      	adds	r3, #8
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	3302      	adds	r3, #2
 800e7e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800e7e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7ea:	69f8      	ldr	r0, [r7, #28]
 800e7ec:	f000 f846 	bl	800e87c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e7fa:	e022      	b.n	800e842 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800e7fc:	f107 0316 	add.w	r3, r7, #22
 800e800:	4619      	mov	r1, r3
 800e802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e804:	f000 f8c9 	bl	800e99a <USBH_GetNextDesc>
 800e808:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	785b      	ldrb	r3, [r3, #1]
 800e80e:	2b05      	cmp	r3, #5
 800e810:	d117      	bne.n	800e842 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e816:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e81a:	3201      	adds	r2, #1
 800e81c:	00d2      	lsls	r2, r2, #3
 800e81e:	211a      	movs	r1, #26
 800e820:	fb01 f303 	mul.w	r3, r1, r3
 800e824:	4413      	add	r3, r2
 800e826:	3308      	adds	r3, #8
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	4413      	add	r3, r2
 800e82c:	3304      	adds	r3, #4
 800e82e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800e830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e832:	69b8      	ldr	r0, [r7, #24]
 800e834:	f000 f851 	bl	800e8da <USBH_ParseEPDesc>
            ep_ix++;
 800e838:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e83c:	3301      	adds	r3, #1
 800e83e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	791b      	ldrb	r3, [r3, #4]
 800e846:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d204      	bcs.n	800e858 <USBH_ParseCfgDesc+0x120>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	885a      	ldrh	r2, [r3, #2]
 800e852:	8afb      	ldrh	r3, [r7, #22]
 800e854:	429a      	cmp	r2, r3
 800e856:	d8d1      	bhi.n	800e7fc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e85c:	3301      	adds	r3, #1
 800e85e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e866:	2b01      	cmp	r3, #1
 800e868:	d804      	bhi.n	800e874 <USBH_ParseCfgDesc+0x13c>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	885a      	ldrh	r2, [r3, #2]
 800e86e:	8afb      	ldrh	r3, [r7, #22]
 800e870:	429a      	cmp	r2, r3
 800e872:	d8a4      	bhi.n	800e7be <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e874:	bf00      	nop
 800e876:	3728      	adds	r7, #40	; 0x28
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	781a      	ldrb	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	785a      	ldrb	r2, [r3, #1]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	789a      	ldrb	r2, [r3, #2]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	78da      	ldrb	r2, [r3, #3]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	791a      	ldrb	r2, [r3, #4]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	795a      	ldrb	r2, [r3, #5]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	799a      	ldrb	r2, [r3, #6]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	79da      	ldrb	r2, [r3, #7]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	7a1a      	ldrb	r2, [r3, #8]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	721a      	strb	r2, [r3, #8]
}
 800e8ce:	bf00      	nop
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b083      	sub	sp, #12
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	781a      	ldrb	r2, [r3, #0]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	785a      	ldrb	r2, [r3, #1]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	789a      	ldrb	r2, [r3, #2]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	78da      	ldrb	r2, [r3, #3]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	3304      	adds	r3, #4
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	3305      	adds	r3, #5
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	b29b      	uxth	r3, r3
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	b29b      	uxth	r3, r3
 800e918:	4313      	orrs	r3, r2
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	799a      	ldrb	r2, [r3, #6]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	719a      	strb	r2, [r3, #6]
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800e934:	b480      	push	{r7}
 800e936:	b087      	sub	sp, #28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	4613      	mov	r3, r2
 800e940:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3301      	adds	r3, #1
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	2b03      	cmp	r3, #3
 800e94a:	d120      	bne.n	800e98e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	1e9a      	subs	r2, r3, #2
 800e952:	88fb      	ldrh	r3, [r7, #6]
 800e954:	4293      	cmp	r3, r2
 800e956:	bf28      	it	cs
 800e958:	4613      	movcs	r3, r2
 800e95a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3302      	adds	r3, #2
 800e960:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e962:	2300      	movs	r3, #0
 800e964:	82fb      	strh	r3, [r7, #22]
 800e966:	e00b      	b.n	800e980 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e968:	8afb      	ldrh	r3, [r7, #22]
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	4413      	add	r3, r2
 800e96e:	781a      	ldrb	r2, [r3, #0]
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	3301      	adds	r3, #1
 800e978:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e97a:	8afb      	ldrh	r3, [r7, #22]
 800e97c:	3302      	adds	r3, #2
 800e97e:	82fb      	strh	r3, [r7, #22]
 800e980:	8afa      	ldrh	r2, [r7, #22]
 800e982:	8abb      	ldrh	r3, [r7, #20]
 800e984:	429a      	cmp	r2, r3
 800e986:	d3ef      	bcc.n	800e968 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	2200      	movs	r2, #0
 800e98c:	701a      	strb	r2, [r3, #0]
  }
}
 800e98e:	bf00      	nop
 800e990:	371c      	adds	r7, #28
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800e99a:	b480      	push	{r7}
 800e99c:	b085      	sub	sp, #20
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	881a      	ldrh	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4413      	add	r3, r2
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4413      	add	r3, r2
 800e9c0:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	789b      	ldrb	r3, [r3, #2]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d002      	beq.n	800e9f0 <USBH_CtlReq+0x20>
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d01d      	beq.n	800ea2a <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800e9ee:	e042      	b.n	800ea76 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	88fa      	ldrh	r2, [r7, #6]
 800e9fa:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2202      	movs	r2, #2
 800ea06:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2203      	movs	r2, #3
 800ea10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ea20:	2200      	movs	r2, #0
 800ea22:	4619      	mov	r1, r3
 800ea24:	f7fc f9f6 	bl	800ae14 <osMessagePut>
    break;
 800ea28:	e025      	b.n	800ea76 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f000 f828 	bl	800ea80 <USBH_HandleControl>
 800ea30:	4603      	mov	r3, r0
 800ea32:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800ea34:	7dfb      	ldrb	r3, [r7, #23]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d108      	bne.n	800ea4c <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	75fb      	strb	r3, [r7, #23]
    break;
 800ea4a:	e013      	b.n	800ea74 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
 800ea4e:	2b03      	cmp	r3, #3
 800ea50:	d108      	bne.n	800ea64 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2201      	movs	r2, #1
 800ea56:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800ea5e:	2303      	movs	r3, #3
 800ea60:	75fb      	strb	r3, [r7, #23]
    break;
 800ea62:	e007      	b.n	800ea74 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800ea64:	7dfb      	ldrb	r3, [r7, #23]
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d104      	bne.n	800ea74 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ea70:	2302      	movs	r3, #2
 800ea72:	75fb      	strb	r3, [r7, #23]
    break;
 800ea74:	bf00      	nop
  }
  return status;
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3718      	adds	r7, #24
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7e1b      	ldrb	r3, [r3, #24]
 800ea94:	3b01      	subs	r3, #1
 800ea96:	2b0a      	cmp	r3, #10
 800ea98:	f200 821f 	bhi.w	800eeda <USBH_HandleControl+0x45a>
 800ea9c:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <USBH_HandleControl+0x24>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800ead1 	.word	0x0800ead1
 800eaa8:	0800eaeb 	.word	0x0800eaeb
 800eaac:	0800eb8d 	.word	0x0800eb8d
 800eab0:	0800ebb3 	.word	0x0800ebb3
 800eab4:	0800ec3f 	.word	0x0800ec3f
 800eab8:	0800ec6b 	.word	0x0800ec6b
 800eabc:	0800ed2d 	.word	0x0800ed2d
 800eac0:	0800ed4f 	.word	0x0800ed4f
 800eac4:	0800ede1 	.word	0x0800ede1
 800eac8:	0800ee09 	.word	0x0800ee09
 800eacc:	0800ee9b 	.word	0x0800ee9b
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f103 0110 	add.w	r1, r3, #16
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	795b      	ldrb	r3, [r3, #5]
 800eada:	461a      	mov	r2, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fa0d 	bl	800eefc <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2202      	movs	r2, #2
 800eae6:	761a      	strb	r2, [r3, #24]
    break;
 800eae8:	e202      	b.n	800eef0 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	795b      	ldrb	r3, [r3, #5]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f002 fbfd 	bl	80112f0 <USBH_LL_GetURBState>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800eafa:	7bbb      	ldrb	r3, [r7, #14]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d12c      	bne.n	800eb5a <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7c1b      	ldrb	r3, [r3, #16]
 800eb04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb08:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8adb      	ldrh	r3, [r3, #22]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00a      	beq.n	800eb28 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800eb12:	7b7b      	ldrb	r3, [r7, #13]
 800eb14:	2b80      	cmp	r3, #128	; 0x80
 800eb16:	d103      	bne.n	800eb20 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2203      	movs	r2, #3
 800eb1c:	761a      	strb	r2, [r3, #24]
 800eb1e:	e00d      	b.n	800eb3c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2205      	movs	r2, #5
 800eb24:	761a      	strb	r2, [r3, #24]
 800eb26:	e009      	b.n	800eb3c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800eb28:	7b7b      	ldrb	r3, [r7, #13]
 800eb2a:	2b80      	cmp	r3, #128	; 0x80
 800eb2c:	d103      	bne.n	800eb36 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2209      	movs	r2, #9
 800eb32:	761a      	strb	r2, [r3, #24]
 800eb34:	e002      	b.n	800eb3c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2207      	movs	r2, #7
 800eb3a:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2203      	movs	r2, #3
 800eb40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb50:	2200      	movs	r2, #0
 800eb52:	4619      	mov	r1, r3
 800eb54:	f7fc f95e 	bl	800ae14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800eb58:	e1c1      	b.n	800eede <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800eb5a:	7bbb      	ldrb	r3, [r7, #14]
 800eb5c:	2b04      	cmp	r3, #4
 800eb5e:	d003      	beq.n	800eb68 <USBH_HandleControl+0xe8>
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	f040 81bb 	bne.w	800eede <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220b      	movs	r2, #11
 800eb6c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2203      	movs	r2, #3
 800eb72:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb82:	2200      	movs	r2, #0
 800eb84:	4619      	mov	r1, r3
 800eb86:	f7fc f945 	bl	800ae14 <osMessagePut>
    break;
 800eb8a:	e1a8      	b.n	800eede <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6899      	ldr	r1, [r3, #8]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	899a      	ldrh	r2, [r3, #12]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	791b      	ldrb	r3, [r3, #4]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 f9e8 	bl	800ef7a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2204      	movs	r2, #4
 800ebae:	761a      	strb	r2, [r3, #24]
    break;
 800ebb0:	e19e      	b.n	800eef0 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	791b      	ldrb	r3, [r3, #4]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f002 fb99 	bl	80112f0 <USBH_LL_GetURBState>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800ebc2:	7bbb      	ldrb	r3, [r7, #14]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d110      	bne.n	800ebea <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2209      	movs	r2, #9
 800ebcc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2203      	movs	r2, #3
 800ebd2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	f7fc f915 	bl	800ae14 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800ebea:	7bbb      	ldrb	r3, [r7, #14]
 800ebec:	2b05      	cmp	r3, #5
 800ebee:	d110      	bne.n	800ec12 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2203      	movs	r2, #3
 800ebf8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f7fc f902 	bl	800ae14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ec10:	e167      	b.n	800eee2 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800ec12:	7bbb      	ldrb	r3, [r7, #14]
 800ec14:	2b04      	cmp	r3, #4
 800ec16:	f040 8164 	bne.w	800eee2 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	220b      	movs	r2, #11
 800ec1e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2203      	movs	r2, #3
 800ec24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec34:	2200      	movs	r2, #0
 800ec36:	4619      	mov	r1, r3
 800ec38:	f7fc f8ec 	bl	800ae14 <osMessagePut>
    break;
 800ec3c:	e151      	b.n	800eee2 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6899      	ldr	r1, [r3, #8]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	899a      	ldrh	r2, [r3, #12]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	7958      	ldrb	r0, [r3, #5]
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f96d 	bl	800ef30 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2206      	movs	r2, #6
 800ec66:	761a      	strb	r2, [r3, #24]
    break;
 800ec68:	e142      	b.n	800eef0 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	795b      	ldrb	r3, [r3, #5]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f002 fb3d 	bl	80112f0 <USBH_LL_GetURBState>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800ec7a:	7bbb      	ldrb	r3, [r7, #14]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d111      	bne.n	800eca4 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2207      	movs	r2, #7
 800ec84:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2203      	movs	r2, #3
 800ec8a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	4619      	mov	r1, r3
 800ec9e:	f7fc f8b9 	bl	800ae14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800eca2:	e120      	b.n	800eee6 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800eca4:	7bbb      	ldrb	r3, [r7, #14]
 800eca6:	2b05      	cmp	r3, #5
 800eca8:	d113      	bne.n	800ecd2 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	220c      	movs	r2, #12
 800ecae:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800ecb0:	2303      	movs	r3, #3
 800ecb2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2203      	movs	r2, #3
 800ecb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecc8:	2200      	movs	r2, #0
 800ecca:	4619      	mov	r1, r3
 800eccc:	f7fc f8a2 	bl	800ae14 <osMessagePut>
    break;
 800ecd0:	e109      	b.n	800eee6 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800ecd2:	7bbb      	ldrb	r3, [r7, #14]
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d111      	bne.n	800ecfc <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2205      	movs	r2, #5
 800ecdc:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2203      	movs	r2, #3
 800ece2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f7fc f88d 	bl	800ae14 <osMessagePut>
    break;
 800ecfa:	e0f4      	b.n	800eee6 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800ecfc:	7bbb      	ldrb	r3, [r7, #14]
 800ecfe:	2b04      	cmp	r3, #4
 800ed00:	f040 80f1 	bne.w	800eee6 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	220b      	movs	r2, #11
 800ed08:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2203      	movs	r2, #3
 800ed12:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed22:	2200      	movs	r2, #0
 800ed24:	4619      	mov	r1, r3
 800ed26:	f7fc f875 	bl	800ae14 <osMessagePut>
    break;
 800ed2a:	e0dc      	b.n	800eee6 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	791b      	ldrb	r3, [r3, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	2100      	movs	r1, #0
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 f920 	bl	800ef7a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2208      	movs	r2, #8
 800ed4a:	761a      	strb	r2, [r3, #24]

    break;
 800ed4c:	e0d0      	b.n	800eef0 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	791b      	ldrb	r3, [r3, #4]
 800ed52:	4619      	mov	r1, r3
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f002 facb 	bl	80112f0 <USBH_LL_GetURBState>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d113      	bne.n	800ed8c <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	220d      	movs	r2, #13
 800ed68:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2203      	movs	r2, #3
 800ed72:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed82:	2200      	movs	r2, #0
 800ed84:	4619      	mov	r1, r3
 800ed86:	f7fc f845 	bl	800ae14 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ed8a:	e0ae      	b.n	800eeea <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800ed8c:	7bbb      	ldrb	r3, [r7, #14]
 800ed8e:	2b04      	cmp	r3, #4
 800ed90:	d111      	bne.n	800edb6 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	220b      	movs	r2, #11
 800ed96:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2203      	movs	r2, #3
 800ed9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800edac:	2200      	movs	r2, #0
 800edae:	4619      	mov	r1, r3
 800edb0:	f7fc f830 	bl	800ae14 <osMessagePut>
    break;
 800edb4:	e099      	b.n	800eeea <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800edb6:	7bbb      	ldrb	r3, [r7, #14]
 800edb8:	2b05      	cmp	r3, #5
 800edba:	f040 8096 	bne.w	800eeea <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800edbe:	2303      	movs	r3, #3
 800edc0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2203      	movs	r2, #3
 800edc6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800edd6:	2200      	movs	r2, #0
 800edd8:	4619      	mov	r1, r3
 800edda:	f7fc f81b 	bl	800ae14 <osMessagePut>
    break;
 800edde:	e084      	b.n	800eeea <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	795a      	ldrb	r2, [r3, #5]
 800ede4:	2301      	movs	r3, #1
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	4613      	mov	r3, r2
 800edea:	2200      	movs	r2, #0
 800edec:	2100      	movs	r1, #0
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 f89e 	bl	800ef30 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	220a      	movs	r2, #10
 800ee04:	761a      	strb	r2, [r3, #24]
    break;
 800ee06:	e073      	b.n	800eef0 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	795b      	ldrb	r3, [r3, #5]
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f002 fa6e 	bl	80112f0 <USBH_LL_GetURBState>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800ee18:	7bbb      	ldrb	r3, [r7, #14]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d113      	bne.n	800ee46 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	220d      	movs	r2, #13
 800ee26:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2203      	movs	r2, #3
 800ee2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	4619      	mov	r1, r3
 800ee40:	f7fb ffe8 	bl	800ae14 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800ee44:	e053      	b.n	800eeee <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d111      	bne.n	800ee70 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2209      	movs	r2, #9
 800ee50:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2203      	movs	r2, #3
 800ee56:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee66:	2200      	movs	r2, #0
 800ee68:	4619      	mov	r1, r3
 800ee6a:	f7fb ffd3 	bl	800ae14 <osMessagePut>
    break;
 800ee6e:	e03e      	b.n	800eeee <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	2b04      	cmp	r3, #4
 800ee74:	d13b      	bne.n	800eeee <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	220b      	movs	r2, #11
 800ee7a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2203      	movs	r2, #3
 800ee80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee90:	2200      	movs	r2, #0
 800ee92:	4619      	mov	r1, r3
 800ee94:	f7fb ffbe 	bl	800ae14 <osMessagePut>
    break;
 800ee98:	e029      	b.n	800eeee <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	7e5b      	ldrb	r3, [r3, #25]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	765a      	strb	r2, [r3, #25]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7e5b      	ldrb	r3, [r3, #25]
 800eeaa:	2b02      	cmp	r3, #2
 800eeac:	d809      	bhi.n	800eec2 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f002 f931 	bl	8011116 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2201      	movs	r2, #1
 800eebe:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800eec0:	e016      	b.n	800eef0 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eec8:	2106      	movs	r1, #6
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800eed4:	2302      	movs	r3, #2
 800eed6:	73fb      	strb	r3, [r7, #15]
    break;
 800eed8:	e00a      	b.n	800eef0 <USBH_HandleControl+0x470>

  default:
    break;
 800eeda:	bf00      	nop
 800eedc:	e008      	b.n	800eef0 <USBH_HandleControl+0x470>
    break;
 800eede:	bf00      	nop
 800eee0:	e006      	b.n	800eef0 <USBH_HandleControl+0x470>
    break;
 800eee2:	bf00      	nop
 800eee4:	e004      	b.n	800eef0 <USBH_HandleControl+0x470>
    break;
 800eee6:	bf00      	nop
 800eee8:	e002      	b.n	800eef0 <USBH_HandleControl+0x470>
    break;
 800eeea:	bf00      	nop
 800eeec:	e000      	b.n	800eef0 <USBH_HandleControl+0x470>
    break;
 800eeee:	bf00      	nop
  }
  return status;
 800eef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop

0800eefc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b088      	sub	sp, #32
 800ef00:	af04      	add	r7, sp, #16
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	4613      	mov	r3, r2
 800ef08:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ef0a:	79f9      	ldrb	r1, [r7, #7]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9303      	str	r3, [sp, #12]
 800ef10:	2308      	movs	r3, #8
 800ef12:	9302      	str	r3, [sp, #8]
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	9301      	str	r3, [sp, #4]
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	2200      	movs	r2, #0
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f002 f9b4 	bl	801128e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b088      	sub	sp, #32
 800ef34:	af04      	add	r7, sp, #16
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	4611      	mov	r1, r2
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	460b      	mov	r3, r1
 800ef40:	80fb      	strh	r3, [r7, #6]
 800ef42:	4613      	mov	r3, r2
 800ef44:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ef50:	2300      	movs	r3, #0
 800ef52:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ef54:	7979      	ldrb	r1, [r7, #5]
 800ef56:	7e3b      	ldrb	r3, [r7, #24]
 800ef58:	9303      	str	r3, [sp, #12]
 800ef5a:	88fb      	ldrh	r3, [r7, #6]
 800ef5c:	9302      	str	r3, [sp, #8]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	2301      	movs	r3, #1
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	2300      	movs	r3, #0
 800ef68:	2200      	movs	r2, #0
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f002 f98f 	bl	801128e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b088      	sub	sp, #32
 800ef7e:	af04      	add	r7, sp, #16
 800ef80:	60f8      	str	r0, [r7, #12]
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	4611      	mov	r1, r2
 800ef86:	461a      	mov	r2, r3
 800ef88:	460b      	mov	r3, r1
 800ef8a:	80fb      	strh	r3, [r7, #6]
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800ef90:	7979      	ldrb	r1, [r7, #5]
 800ef92:	2300      	movs	r3, #0
 800ef94:	9303      	str	r3, [sp, #12]
 800ef96:	88fb      	ldrh	r3, [r7, #6]
 800ef98:	9302      	str	r3, [sp, #8]
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	2301      	movs	r3, #1
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	2300      	movs	r3, #0
 800efa4:	2201      	movs	r2, #1
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f002 f971 	bl	801128e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800efac:	2300      	movs	r3, #0

}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b088      	sub	sp, #32
 800efba:	af04      	add	r7, sp, #16
 800efbc:	60f8      	str	r0, [r7, #12]
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	4611      	mov	r1, r2
 800efc2:	461a      	mov	r2, r3
 800efc4:	460b      	mov	r3, r1
 800efc6:	80fb      	strh	r3, [r7, #6]
 800efc8:	4613      	mov	r3, r2
 800efca:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800efd6:	2300      	movs	r3, #0
 800efd8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800efda:	7979      	ldrb	r1, [r7, #5]
 800efdc:	7e3b      	ldrb	r3, [r7, #24]
 800efde:	9303      	str	r3, [sp, #12]
 800efe0:	88fb      	ldrh	r3, [r7, #6]
 800efe2:	9302      	str	r3, [sp, #8]
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	2301      	movs	r3, #1
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2302      	movs	r3, #2
 800efee:	2200      	movs	r2, #0
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f002 f94c 	bl	801128e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b088      	sub	sp, #32
 800f004:	af04      	add	r7, sp, #16
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	4611      	mov	r1, r2
 800f00c:	461a      	mov	r2, r3
 800f00e:	460b      	mov	r3, r1
 800f010:	80fb      	strh	r3, [r7, #6]
 800f012:	4613      	mov	r3, r2
 800f014:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800f016:	7979      	ldrb	r1, [r7, #5]
 800f018:	2300      	movs	r3, #0
 800f01a:	9303      	str	r3, [sp, #12]
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	9302      	str	r3, [sp, #8]
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	9301      	str	r3, [sp, #4]
 800f024:	2301      	movs	r3, #1
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	2302      	movs	r3, #2
 800f02a:	2201      	movs	r2, #1
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f002 f92e 	bl	801128e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af04      	add	r7, sp, #16
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	4608      	mov	r0, r1
 800f046:	4611      	mov	r1, r2
 800f048:	461a      	mov	r2, r3
 800f04a:	4603      	mov	r3, r0
 800f04c:	70fb      	strb	r3, [r7, #3]
 800f04e:	460b      	mov	r3, r1
 800f050:	70bb      	strb	r3, [r7, #2]
 800f052:	4613      	mov	r3, r2
 800f054:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800f056:	7878      	ldrb	r0, [r7, #1]
 800f058:	78ba      	ldrb	r2, [r7, #2]
 800f05a:	78f9      	ldrb	r1, [r7, #3]
 800f05c:	8b3b      	ldrh	r3, [r7, #24]
 800f05e:	9302      	str	r3, [sp, #8]
 800f060:	7d3b      	ldrb	r3, [r7, #20]
 800f062:	9301      	str	r3, [sp, #4]
 800f064:	7c3b      	ldrb	r3, [r7, #16]
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	4603      	mov	r3, r0
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f002 f8c1 	bl	80111f2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800f070:	2300      	movs	r3, #0

}
 800f072:	4618      	mov	r0, r3
 800f074:	3708      	adds	r7, #8
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b082      	sub	sp, #8
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	460b      	mov	r3, r1
 800f084:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800f086:	78fb      	ldrb	r3, [r7, #3]
 800f088:	4619      	mov	r1, r3
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f002 f8e0 	bl	8011250 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f090:	2300      	movs	r3, #0

}
 800f092:	4618      	mov	r0, r3
 800f094:	3708      	adds	r7, #8
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b084      	sub	sp, #16
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f831 	bl	800f10e <USBH_GetFreePipe>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f0b0:	89fb      	ldrh	r3, [r7, #14]
 800f0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d007      	beq.n	800f0ca <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800f0ba:	78fb      	ldrb	r3, [r7, #3]
 800f0bc:	89fa      	ldrh	r2, [r7, #14]
 800f0be:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	32e0      	adds	r2, #224	; 0xe0
 800f0c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800f0ca:	89fb      	ldrh	r3, [r7, #14]
 800f0cc:	b2db      	uxtb	r3, r3
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f0d6:	b480      	push	{r7}
 800f0d8:	b083      	sub	sp, #12
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	460b      	mov	r3, r1
 800f0e0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800f0e2:	78fb      	ldrb	r3, [r7, #3]
 800f0e4:	2b0a      	cmp	r3, #10
 800f0e6:	d80b      	bhi.n	800f100 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800f0e8:	78fa      	ldrb	r2, [r7, #3]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	32e0      	adds	r2, #224	; 0xe0
 800f0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f2:	78fa      	ldrb	r2, [r7, #3]
 800f0f4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	32e0      	adds	r2, #224	; 0xe0
 800f0fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800f10e:	b480      	push	{r7}
 800f110:	b085      	sub	sp, #20
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f116:	2300      	movs	r3, #0
 800f118:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f11a:	2300      	movs	r3, #0
 800f11c:	73fb      	strb	r3, [r7, #15]
 800f11e:	e00e      	b.n	800f13e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f120:	7bfa      	ldrb	r2, [r7, #15]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	32e0      	adds	r2, #224	; 0xe0
 800f126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f12a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d102      	bne.n	800f138 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800f132:	7bfb      	ldrb	r3, [r7, #15]
 800f134:	b29b      	uxth	r3, r3
 800f136:	e007      	b.n	800f148 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800f138:	7bfb      	ldrb	r3, [r7, #15]
 800f13a:	3301      	adds	r3, #1
 800f13c:	73fb      	strb	r3, [r7, #15]
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b0a      	cmp	r3, #10
 800f142:	d9ed      	bls.n	800f120 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800f144:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f15e:	f000 f87b 	bl	800f258 <BSP_SD_IsDetected>
 800f162:	4603      	mov	r3, r0
 800f164:	2b01      	cmp	r3, #1
 800f166:	d001      	beq.n	800f16c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f168:	2301      	movs	r3, #1
 800f16a:	e012      	b.n	800f192 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f16c:	480b      	ldr	r0, [pc, #44]	; (800f19c <BSP_SD_Init+0x48>)
 800f16e:	f7f8 f805 	bl	800717c <HAL_SD_Init>
 800f172:	4603      	mov	r3, r0
 800f174:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f176:	79fb      	ldrb	r3, [r7, #7]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d109      	bne.n	800f190 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f17c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f180:	4806      	ldr	r0, [pc, #24]	; (800f19c <BSP_SD_Init+0x48>)
 800f182:	f7f8 fc76 	bl	8007a72 <HAL_SD_ConfigWideBusOperation>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f18c:	2301      	movs	r3, #1
 800f18e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f190:	79fb      	ldrb	r3, [r7, #7]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	20008f80 	.word	0x20008f80

0800f1a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	68f9      	ldr	r1, [r7, #12]
 800f1b6:	4806      	ldr	r0, [pc, #24]	; (800f1d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f1b8:	f7f8 f868 	bl	800728c <HAL_SD_ReadBlocks_DMA>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800f1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3718      	adds	r7, #24
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	20008f80 	.word	0x20008f80

0800f1d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	68f9      	ldr	r1, [r7, #12]
 800f1ea:	4806      	ldr	r0, [pc, #24]	; (800f204 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f1ec:	f7f8 f918 	bl	8007420 <HAL_SD_WriteBlocks_DMA>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800f1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3718      	adds	r7, #24
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	20008f80 	.word	0x20008f80

0800f208 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f20c:	4805      	ldr	r0, [pc, #20]	; (800f224 <BSP_SD_GetCardState+0x1c>)
 800f20e:	f7f8 fcac 	bl	8007b6a <HAL_SD_GetCardState>
 800f212:	4603      	mov	r3, r0
 800f214:	2b04      	cmp	r3, #4
 800f216:	bf14      	ite	ne
 800f218:	2301      	movne	r3, #1
 800f21a:	2300      	moveq	r3, #0
 800f21c:	b2db      	uxtb	r3, r3
}
 800f21e:	4618      	mov	r0, r3
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20008f80 	.word	0x20008f80

0800f228 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	4803      	ldr	r0, [pc, #12]	; (800f240 <BSP_SD_GetCardInfo+0x18>)
 800f234:	f7f8 fbf1 	bl	8007a1a <HAL_SD_GetCardInfo>
}
 800f238:	bf00      	nop
 800f23a:	3708      	adds	r7, #8
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	20008f80 	.word	0x20008f80

0800f244 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f24c:	f001 f8cc 	bl	80103e8 <BSP_SD_ReadCpltCallback>
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f25e:	2301      	movs	r3, #1
 800f260:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800f262:	f000 f81d 	bl	800f2a0 <BSP_PlatformIsDetected>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f26c:	2300      	movs	r3, #0
 800f26e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	b2db      	uxtb	r3, r3
}
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f280:	4904      	ldr	r1, [pc, #16]	; (800f294 <MX_FATFS_Init+0x18>)
 800f282:	4805      	ldr	r0, [pc, #20]	; (800f298 <MX_FATFS_Init+0x1c>)
 800f284:	f7fb fce0 	bl	800ac48 <FATFS_LinkDriver>
 800f288:	4603      	mov	r3, r0
 800f28a:	461a      	mov	r2, r3
 800f28c:	4b03      	ldr	r3, [pc, #12]	; (800f29c <MX_FATFS_Init+0x20>)
 800f28e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800f290:	bf00      	nop
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20008920 	.word	0x20008920
 800f298:	0801341c 	.word	0x0801341c
 800f29c:	2000891c 	.word	0x2000891c

0800f2a0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f2aa:	2104      	movs	r1, #4
 800f2ac:	4806      	ldr	r0, [pc, #24]	; (800f2c8 <BSP_PlatformIsDetected+0x28>)
 800f2ae:	f7f4 fc0d 	bl	8003acc <HAL_GPIO_ReadPin>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d001      	beq.n	800f2bc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
}  
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	40021800 	.word	0x40021800

0800f2cc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800f2d0:	bf00      	nop
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
 800f2e2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800f2e4:	bf00      	nop
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800f2f4:	bf00      	nop
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr
	...

0800f300 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800f300:	b480      	push	{r7}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	4a07      	ldr	r2, [pc, #28]	; (800f32c <vApplicationGetIdleTaskMemory+0x2c>)
 800f310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	4a06      	ldr	r2, [pc, #24]	; (800f330 <vApplicationGetIdleTaskMemory+0x30>)
 800f316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2280      	movs	r2, #128	; 0x80
 800f31c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800f31e:	bf00      	nop
 800f320:	3714      	adds	r7, #20
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	200083a0 	.word	0x200083a0
 800f330:	200083f8 	.word	0x200083f8

0800f334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f334:	b5b0      	push	{r4, r5, r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f33a:	f7f2 f83b 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f33e:	f000 f843 	bl	800f3c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LCD_Init();
 800f342:	f7f1 f8e8 	bl	8000516 <BSP_LCD_Init>
  BSP_LCD_InitEx(0x01);
 800f346:	2001      	movs	r0, #1
 800f348:	f7f1 f8ee 	bl	8000528 <BSP_LCD_InitEx>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER_BACKGROUND, LCD_FB_START_ADDRESS);
 800f34c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800f350:	2000      	movs	r0, #0
 800f352:	f7f1 fa81 	bl	8000858 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(0xFFFF);
 800f356:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f35a:	f7f1 faf7 	bl	800094c <BSP_LCD_Clear>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f35e:	f000 fc8d 	bl	800fc7c <MX_GPIO_Init>
  MX_CRC_Init();
 800f362:	f000 f8cd 	bl	800f500 <MX_CRC_Init>
  MX_DMA2D_Init();
 800f366:	f000 f8df 	bl	800f528 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800f36a:	f000 f90f 	bl	800f58c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800f36e:	f000 fc35 	bl	800fbdc <MX_FMC_Init>
  MX_I2C1_Init();
 800f372:	f000 fa0b 	bl	800f78c <MX_I2C1_Init>
  MX_I2C2_Init();
 800f376:	f000 fa37 	bl	800f7e8 <MX_I2C2_Init>
  MX_LTDC_Init();
 800f37a:	f000 fa63 	bl	800f844 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800f37e:	f000 fadf 	bl	800f940 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800f382:	f000 fb09 	bl	800f998 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 800f386:	f000 fb65 	bl	800fa54 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800f38a:	f000 fb83 	bl	800fa94 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800f38e:	f000 fbd1 	bl	800fb34 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800f392:	f000 fbf9 	bl	800fb88 <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800f396:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <main+0x8c>)
 800f398:	1d3c      	adds	r4, r7, #4
 800f39a:	461d      	mov	r5, r3
 800f39c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f39e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f3a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800f3a8:	1d3b      	adds	r3, r7, #4
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fb fca7 	bl	800ad00 <osThreadCreate>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	4b03      	ldr	r3, [pc, #12]	; (800f3c4 <main+0x90>)
 800f3b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800f3b8:	f7fb fc7f 	bl	800acba <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800f3bc:	e7fe      	b.n	800f3bc <main+0x88>
 800f3be:	bf00      	nop
 800f3c0:	0801171c 	.word	0x0801171c
 800f3c4:	20008d88 	.word	0x20008d88

0800f3c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b0a4      	sub	sp, #144	; 0x90
 800f3cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f3ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f3d2:	2234      	movs	r2, #52	; 0x34
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f002 f8a9 	bl	801152e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f3dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	605a      	str	r2, [r3, #4]
 800f3e6:	609a      	str	r2, [r3, #8]
 800f3e8:	60da      	str	r2, [r3, #12]
 800f3ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f3ec:	f107 030c 	add.w	r3, r7, #12
 800f3f0:	223c      	movs	r2, #60	; 0x3c
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f002 f89a 	bl	801152e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	60bb      	str	r3, [r7, #8]
 800f3fe:	4b3e      	ldr	r3, [pc, #248]	; (800f4f8 <SystemClock_Config+0x130>)
 800f400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f402:	4a3d      	ldr	r2, [pc, #244]	; (800f4f8 <SystemClock_Config+0x130>)
 800f404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f408:	6413      	str	r3, [r2, #64]	; 0x40
 800f40a:	4b3b      	ldr	r3, [pc, #236]	; (800f4f8 <SystemClock_Config+0x130>)
 800f40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f412:	60bb      	str	r3, [r7, #8]
 800f414:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f416:	2300      	movs	r3, #0
 800f418:	607b      	str	r3, [r7, #4]
 800f41a:	4b38      	ldr	r3, [pc, #224]	; (800f4fc <SystemClock_Config+0x134>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a37      	ldr	r2, [pc, #220]	; (800f4fc <SystemClock_Config+0x134>)
 800f420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f424:	6013      	str	r3, [r2, #0]
 800f426:	4b35      	ldr	r3, [pc, #212]	; (800f4fc <SystemClock_Config+0x134>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f42e:	607b      	str	r3, [r7, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f432:	2301      	movs	r3, #1
 800f434:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f43a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f43c:	2302      	movs	r3, #2
 800f43e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f444:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 800f446:	2304      	movs	r3, #4
 800f448:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800f44a:	23b4      	movs	r3, #180	; 0xb4
 800f44c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f450:	2302      	movs	r3, #2
 800f452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800f456:	2306      	movs	r3, #6
 800f458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 800f45c:	2306      	movs	r3, #6
 800f45e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f462:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f466:	4618      	mov	r0, r3
 800f468:	f7f7 fa26 	bl	80068b8 <HAL_RCC_OscConfig>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800f472:	f000 fdad 	bl	800ffd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800f476:	f7f6 fca1 	bl	8005dbc <HAL_PWREx_EnableOverDrive>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800f480:	f000 fda6 	bl	800ffd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f484:	230f      	movs	r3, #15
 800f486:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f488:	2302      	movs	r3, #2
 800f48a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f48c:	2300      	movs	r3, #0
 800f48e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f490:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f494:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f49a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f49c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f4a0:	2105      	movs	r1, #5
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7f6 fdaa 	bl	8005ffc <HAL_RCC_ClockConfig>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d001      	beq.n	800f4b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800f4ae:	f000 fd8f 	bl	800ffd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800f4b2:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800f4b6:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 800f4b8:	2390      	movs	r3, #144	; 0x90
 800f4ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800f4bc:	2302      	movs	r3, #2
 800f4be:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f4c0:	2302      	movs	r3, #2
 800f4c2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 800f4c4:	2306      	movs	r3, #6
 800f4c6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800f4cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f4d0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800f4d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f4d6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f4dc:	f107 030c 	add.w	r3, r7, #12
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7f6 ffab 	bl	800643c <HAL_RCCEx_PeriphCLKConfig>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d001      	beq.n	800f4f0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800f4ec:	f000 fd70 	bl	800ffd0 <Error_Handler>
  }
}
 800f4f0:	bf00      	nop
 800f4f2:	3790      	adds	r7, #144	; 0x90
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	40023800 	.word	0x40023800
 800f4fc:	40007000 	.word	0x40007000

0800f500 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800f504:	4b06      	ldr	r3, [pc, #24]	; (800f520 <MX_CRC_Init+0x20>)
 800f506:	4a07      	ldr	r2, [pc, #28]	; (800f524 <MX_CRC_Init+0x24>)
 800f508:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f50a:	4805      	ldr	r0, [pc, #20]	; (800f520 <MX_CRC_Init+0x20>)
 800f50c:	f7f2 f8c8 	bl	80016a0 <HAL_CRC_Init>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800f516:	f000 fd5b 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800f51a:	bf00      	nop
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	20008e20 	.word	0x20008e20
 800f524:	40023000 	.word	0x40023000

0800f528 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800f52c:	4b15      	ldr	r3, [pc, #84]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f52e:	4a16      	ldr	r2, [pc, #88]	; (800f588 <MX_DMA2D_Init+0x60>)
 800f530:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800f532:	4b14      	ldr	r3, [pc, #80]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f534:	2200      	movs	r2, #0
 800f536:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800f538:	4b12      	ldr	r3, [pc, #72]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f53a:	2200      	movs	r2, #0
 800f53c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800f53e:	4b11      	ldr	r3, [pc, #68]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f540:	2200      	movs	r2, #0
 800f542:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800f544:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f546:	2200      	movs	r2, #0
 800f548:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800f54a:	4b0e      	ldr	r3, [pc, #56]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f54c:	2200      	movs	r2, #0
 800f54e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800f550:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f552:	2200      	movs	r2, #0
 800f554:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800f556:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f558:	2200      	movs	r2, #0
 800f55a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800f55c:	4809      	ldr	r0, [pc, #36]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f55e:	f7f2 fb09 	bl	8001b74 <HAL_DMA2D_Init>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d001      	beq.n	800f56c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800f568:	f000 fd32 	bl	800ffd0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800f56c:	2101      	movs	r1, #1
 800f56e:	4805      	ldr	r0, [pc, #20]	; (800f584 <MX_DMA2D_Init+0x5c>)
 800f570:	f7f2 fd6e 	bl	8002050 <HAL_DMA2D_ConfigLayer>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d001      	beq.n	800f57e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800f57a:	f000 fd29 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800f57e:	bf00      	nop
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20009044 	.word	0x20009044
 800f588:	4002b000 	.word	0x4002b000

0800f58c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b0aa      	sub	sp, #168	; 0xa8
 800f590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800f592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f596:	2200      	movs	r2, #0
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	605a      	str	r2, [r3, #4]
 800f59c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800f59e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f5a2:	2224      	movs	r2, #36	; 0x24
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f001 ffc1 	bl	801152e <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800f5ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	601a      	str	r2, [r3, #0]
 800f5b4:	605a      	str	r2, [r3, #4]
 800f5b6:	609a      	str	r2, [r3, #8]
 800f5b8:	60da      	str	r2, [r3, #12]
 800f5ba:	611a      	str	r2, [r3, #16]
 800f5bc:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800f5be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5c2:	2234      	movs	r2, #52	; 0x34
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f001 ffb1 	bl	801152e <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800f5cc:	463b      	mov	r3, r7
 800f5ce:	222c      	movs	r2, #44	; 0x2c
 800f5d0:	2100      	movs	r1, #0
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f001 ffab 	bl	801152e <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800f5d8:	4b6a      	ldr	r3, [pc, #424]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f5da:	4a6b      	ldr	r2, [pc, #428]	; (800f788 <MX_DSIHOST_DSI_Init+0x1fc>)
 800f5dc:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800f5de:	4b69      	ldr	r3, [pc, #420]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800f5e4:	4b67      	ldr	r3, [pc, #412]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f5e6:	2204      	movs	r2, #4
 800f5e8:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800f5ea:	4b66      	ldr	r3, [pc, #408]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 800f5f0:	237d      	movs	r3, #125	; 0x7d
 800f5f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800f5f6:	2302      	movs	r3, #2
 800f5f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800f602:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f606:	4619      	mov	r1, r3
 800f608:	485e      	ldr	r0, [pc, #376]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f60a:	f7f2 fe97 	bl	800233c <HAL_DSI_Init>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800f614:	f000 fcdc 	bl	800ffd0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800f618:	2301      	movs	r3, #1
 800f61a:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800f61c:	2300      	movs	r3, #0
 800f61e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800f626:	2300      	movs	r3, #0
 800f628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800f632:	2300      	movs	r3, #0
 800f634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800f638:	2300      	movs	r3, #0
 800f63a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800f63e:	2300      	movs	r3, #0
 800f640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800f644:	2300      	movs	r3, #0
 800f646:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800f64a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f64e:	4619      	mov	r1, r3
 800f650:	484c      	ldr	r0, [pc, #304]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f652:	f7f3 fd9d 	bl	8003190 <HAL_DSI_ConfigHostTimeouts>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800f65c:	f000 fcb8 	bl	800ffd0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800f660:	231c      	movs	r3, #28
 800f662:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800f664:	2321      	movs	r3, #33	; 0x21
 800f666:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800f668:	230f      	movs	r3, #15
 800f66a:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800f66c:	2319      	movs	r3, #25
 800f66e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 800f674:	230a      	movs	r3, #10
 800f676:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800f678:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f67c:	4619      	mov	r1, r3
 800f67e:	4841      	ldr	r0, [pc, #260]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f680:	f7f3 fd1c 	bl	80030bc <HAL_DSI_ConfigPhyTimer>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800f68a:	f000 fca1 	bl	800ffd0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800f68e:	2104      	movs	r1, #4
 800f690:	483c      	ldr	r0, [pc, #240]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f692:	f7f3 fceb 	bl	800306c <HAL_DSI_ConfigFlowControl>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800f69c:	f000 fc98 	bl	800ffd0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800f6a0:	f242 7110 	movw	r1, #10000	; 0x2710
 800f6a4:	4837      	ldr	r0, [pc, #220]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f6a6:	f7f3 ff2f 	bl	8003508 <HAL_DSI_SetLowPowerRXFilter>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800f6b0:	f000 fc8e 	bl	800ffd0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	4833      	ldr	r0, [pc, #204]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f6b8:	f7f2 ffce 	bl	8002658 <HAL_DSI_ConfigErrorMonitor>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800f6c2:	f000 fc85 	bl	800ffd0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800f6c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800f6cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f6d0:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800f6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6d6:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800f6d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6dc:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800f6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800f6e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f6e8:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800f6ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f6ee:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800f6f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f6f4:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800f6f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800f6fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f700:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800f702:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f706:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800f708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f70c:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800f70e:	2300      	movs	r3, #0
 800f710:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800f712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f716:	4619      	mov	r1, r3
 800f718:	481a      	ldr	r0, [pc, #104]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f71a:	f7f3 fc49 	bl	8002fb0 <HAL_DSI_ConfigCommand>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d001      	beq.n	800f728 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 800f724:	f000 fc54 	bl	800ffd0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800f72c:	2305      	movs	r3, #5
 800f72e:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 800f730:	23c8      	movs	r3, #200	; 0xc8
 800f732:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800f734:	2310      	movs	r3, #16
 800f736:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800f738:	2300      	movs	r3, #0
 800f73a:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800f73c:	2304      	movs	r3, #4
 800f73e:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800f740:	2302      	movs	r3, #2
 800f742:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800f744:	2300      	movs	r3, #0
 800f746:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800f748:	2300      	movs	r3, #0
 800f74a:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800f74c:	2340      	movs	r3, #64	; 0x40
 800f74e:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800f750:	2301      	movs	r3, #1
 800f752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800f754:	463b      	mov	r3, r7
 800f756:	4619      	mov	r1, r3
 800f758:	480a      	ldr	r0, [pc, #40]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f75a:	f7f3 fb51 	bl	8002e00 <HAL_DSI_ConfigAdaptedCommandMode>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 800f764:	f000 fc34 	bl	800ffd0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800f768:	2100      	movs	r1, #0
 800f76a:	4806      	ldr	r0, [pc, #24]	; (800f784 <MX_DSIHOST_DSI_Init+0x1f8>)
 800f76c:	f7f3 f918 	bl	80029a0 <HAL_DSI_SetGenericVCID>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 800f776:	f000 fc2b 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800f77a:	bf00      	nop
 800f77c:	37a8      	adds	r7, #168	; 0xa8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	20008e7c 	.word	0x20008e7c
 800f788:	40016c00 	.word	0x40016c00

0800f78c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800f790:	4b12      	ldr	r3, [pc, #72]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f792:	4a13      	ldr	r2, [pc, #76]	; (800f7e0 <MX_I2C1_Init+0x54>)
 800f794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800f796:	4b11      	ldr	r3, [pc, #68]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f798:	4a12      	ldr	r2, [pc, #72]	; (800f7e4 <MX_I2C1_Init+0x58>)
 800f79a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f79c:	4b0f      	ldr	r3, [pc, #60]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800f7a2:	4b0e      	ldr	r3, [pc, #56]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f7a8:	4b0c      	ldr	r3, [pc, #48]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f7ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f7b0:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800f7b6:	4b09      	ldr	r3, [pc, #36]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f7bc:	4b07      	ldr	r3, [pc, #28]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f7c2:	4b06      	ldr	r3, [pc, #24]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f7c8:	4804      	ldr	r0, [pc, #16]	; (800f7dc <MX_I2C1_Init+0x50>)
 800f7ca:	f7f5 fe17 	bl	80053fc <HAL_I2C_Init>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800f7d4:	f000 fbfc 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800f7d8:	bf00      	nop
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	20008dcc 	.word	0x20008dcc
 800f7e0:	40005400 	.word	0x40005400
 800f7e4:	000186a0 	.word	0x000186a0

0800f7e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800f7ec:	4b12      	ldr	r3, [pc, #72]	; (800f838 <MX_I2C2_Init+0x50>)
 800f7ee:	4a13      	ldr	r2, [pc, #76]	; (800f83c <MX_I2C2_Init+0x54>)
 800f7f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800f7f2:	4b11      	ldr	r3, [pc, #68]	; (800f838 <MX_I2C2_Init+0x50>)
 800f7f4:	4a12      	ldr	r2, [pc, #72]	; (800f840 <MX_I2C2_Init+0x58>)
 800f7f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f7f8:	4b0f      	ldr	r3, [pc, #60]	; (800f838 <MX_I2C2_Init+0x50>)
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800f7fe:	4b0e      	ldr	r3, [pc, #56]	; (800f838 <MX_I2C2_Init+0x50>)
 800f800:	2200      	movs	r2, #0
 800f802:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f804:	4b0c      	ldr	r3, [pc, #48]	; (800f838 <MX_I2C2_Init+0x50>)
 800f806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f80a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f80c:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <MX_I2C2_Init+0x50>)
 800f80e:	2200      	movs	r2, #0
 800f810:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800f812:	4b09      	ldr	r3, [pc, #36]	; (800f838 <MX_I2C2_Init+0x50>)
 800f814:	2200      	movs	r2, #0
 800f816:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f818:	4b07      	ldr	r3, [pc, #28]	; (800f838 <MX_I2C2_Init+0x50>)
 800f81a:	2200      	movs	r2, #0
 800f81c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f81e:	4b06      	ldr	r3, [pc, #24]	; (800f838 <MX_I2C2_Init+0x50>)
 800f820:	2200      	movs	r2, #0
 800f822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800f824:	4804      	ldr	r0, [pc, #16]	; (800f838 <MX_I2C2_Init+0x50>)
 800f826:	f7f5 fde9 	bl	80053fc <HAL_I2C_Init>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800f830:	f000 fbce 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800f834:	bf00      	nop
 800f836:	bd80      	pop	{r7, pc}
 800f838:	20008e28 	.word	0x20008e28
 800f83c:	40005800 	.word	0x40005800
 800f840:	000186a0 	.word	0x000186a0

0800f844 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08e      	sub	sp, #56	; 0x38
 800f848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800f84a:	1d3b      	adds	r3, r7, #4
 800f84c:	2234      	movs	r2, #52	; 0x34
 800f84e:	2100      	movs	r1, #0
 800f850:	4618      	mov	r0, r3
 800f852:	f001 fe6c 	bl	801152e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800f856:	4b38      	ldr	r3, [pc, #224]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f858:	4a38      	ldr	r2, [pc, #224]	; (800f93c <MX_LTDC_Init+0xf8>)
 800f85a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800f85c:	4b36      	ldr	r3, [pc, #216]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f85e:	2200      	movs	r2, #0
 800f860:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800f862:	4b35      	ldr	r3, [pc, #212]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f864:	2200      	movs	r2, #0
 800f866:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800f868:	4b33      	ldr	r3, [pc, #204]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f86a:	2200      	movs	r2, #0
 800f86c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800f86e:	4b32      	ldr	r3, [pc, #200]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f870:	2200      	movs	r2, #0
 800f872:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 800f874:	4b30      	ldr	r3, [pc, #192]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f876:	2200      	movs	r2, #0
 800f878:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800f87a:	4b2f      	ldr	r3, [pc, #188]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f87c:	2200      	movs	r2, #0
 800f87e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 800f880:	4b2d      	ldr	r3, [pc, #180]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f882:	2201      	movs	r2, #1
 800f884:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800f886:	4b2c      	ldr	r3, [pc, #176]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f888:	2201      	movs	r2, #1
 800f88a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 800f88c:	4b2a      	ldr	r3, [pc, #168]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f88e:	22c9      	movs	r2, #201	; 0xc9
 800f890:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 800f892:	4b29      	ldr	r3, [pc, #164]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f894:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f898:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 800f89a:	4b27      	ldr	r3, [pc, #156]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f89c:	22ca      	movs	r2, #202	; 0xca
 800f89e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 800f8a0:	4b25      	ldr	r3, [pc, #148]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f8a2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f8a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800f8a8:	4b23      	ldr	r3, [pc, #140]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800f8b0:	4b21      	ldr	r3, [pc, #132]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800f8b8:	4b1f      	ldr	r3, [pc, #124]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800f8c0:	481d      	ldr	r0, [pc, #116]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f8c2:	f7f5 fec3 	bl	800564c <HAL_LTDC_Init>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 800f8cc:	f000 fb80 	bl	800ffd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 800f8d4:	23c8      	movs	r3, #200	; 0xc8
 800f8d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800f8dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f8e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800f8e6:	23ff      	movs	r3, #255	; 0xff
 800f8e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800f8ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f8f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800f8f4:	2307      	movs	r3, #7
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800f8f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800f8fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 800f8fe:	23c8      	movs	r3, #200	; 0xc8
 800f900:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800f902:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800f906:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800f908:	2300      	movs	r3, #0
 800f90a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800f90e:	2300      	movs	r3, #0
 800f910:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800f91a:	1d3b      	adds	r3, r7, #4
 800f91c:	2200      	movs	r2, #0
 800f91e:	4619      	mov	r1, r3
 800f920:	4805      	ldr	r0, [pc, #20]	; (800f938 <MX_LTDC_Init+0xf4>)
 800f922:	f7f6 f825 	bl	8005970 <HAL_LTDC_ConfigLayer>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d001      	beq.n	800f930 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800f92c:	f000 fb50 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800f930:	bf00      	nop
 800f932:	3738      	adds	r7, #56	; 0x38
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	20008e98 	.word	0x20008e98
 800f93c:	40016800 	.word	0x40016800

0800f940 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800f944:	4b12      	ldr	r3, [pc, #72]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f946:	4a13      	ldr	r2, [pc, #76]	; (800f994 <MX_QUADSPI_Init+0x54>)
 800f948:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800f94a:	4b11      	ldr	r3, [pc, #68]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f94c:	22ff      	movs	r2, #255	; 0xff
 800f94e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800f950:	4b0f      	ldr	r3, [pc, #60]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f952:	2201      	movs	r2, #1
 800f954:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800f956:	4b0e      	ldr	r3, [pc, #56]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f958:	2200      	movs	r2, #0
 800f95a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800f95c:	4b0c      	ldr	r3, [pc, #48]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f95e:	2201      	movs	r2, #1
 800f960:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800f962:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f964:	2200      	movs	r2, #0
 800f966:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800f968:	4b09      	ldr	r3, [pc, #36]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f96a:	2200      	movs	r2, #0
 800f96c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800f96e:	4b08      	ldr	r3, [pc, #32]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f970:	2200      	movs	r2, #0
 800f972:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800f974:	4b06      	ldr	r3, [pc, #24]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f976:	2200      	movs	r2, #0
 800f978:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800f97a:	4805      	ldr	r0, [pc, #20]	; (800f990 <MX_QUADSPI_Init+0x50>)
 800f97c:	f7f6 fa6e 	bl	8005e5c <HAL_QSPI_Init>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800f986:	f000 fb23 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800f98a:	bf00      	nop
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20009140 	.word	0x20009140
 800f994:	a0001000 	.word	0xa0001000

0800f998 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800f99c:	4b2a      	ldr	r3, [pc, #168]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f99e:	4a2b      	ldr	r2, [pc, #172]	; (800fa4c <MX_SAI1_Init+0xb4>)
 800f9a0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800f9a2:	4b29      	ldr	r3, [pc, #164]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800f9a8:	4b27      	ldr	r3, [pc, #156]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800f9ae:	4b26      	ldr	r3, [pc, #152]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9b0:	2240      	movs	r2, #64	; 0x40
 800f9b2:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800f9b4:	4b24      	ldr	r3, [pc, #144]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800f9ba:	4b23      	ldr	r3, [pc, #140]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800f9c0:	4b21      	ldr	r3, [pc, #132]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800f9c6:	4b20      	ldr	r3, [pc, #128]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800f9cc:	4b1e      	ldr	r3, [pc, #120]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800f9d2:	4b1d      	ldr	r3, [pc, #116]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 800f9d8:	4b1b      	ldr	r3, [pc, #108]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800f9de:	4b1a      	ldr	r3, [pc, #104]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9e0:	4a1b      	ldr	r2, [pc, #108]	; (800fa50 <MX_SAI1_Init+0xb8>)
 800f9e2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800f9e4:	4b18      	ldr	r3, [pc, #96]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800f9ea:	4b17      	ldr	r3, [pc, #92]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800f9f0:	4b15      	ldr	r3, [pc, #84]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800f9f6:	4b14      	ldr	r3, [pc, #80]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800f9fc:	4b12      	ldr	r3, [pc, #72]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800f9fe:	2208      	movs	r2, #8
 800fa00:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800fa02:	4b11      	ldr	r3, [pc, #68]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa04:	2201      	movs	r2, #1
 800fa06:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800fa08:	4b0f      	ldr	r3, [pc, #60]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800fa0e:	4b0e      	ldr	r3, [pc, #56]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa10:	2200      	movs	r2, #0
 800fa12:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800fa14:	4b0c      	ldr	r3, [pc, #48]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa16:	2200      	movs	r2, #0
 800fa18:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800fa1a:	4b0b      	ldr	r3, [pc, #44]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800fa20:	4b09      	ldr	r3, [pc, #36]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa22:	2200      	movs	r2, #0
 800fa24:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800fa26:	4b08      	ldr	r3, [pc, #32]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800fa2c:	4b06      	ldr	r3, [pc, #24]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800fa32:	4805      	ldr	r0, [pc, #20]	; (800fa48 <MX_SAI1_Init+0xb0>)
 800fa34:	f7f7 f982 	bl	8006d3c <HAL_SAI_Init>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d001      	beq.n	800fa42 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 800fa3e:	f000 fac7 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800fa42:	bf00      	nop
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	20009084 	.word	0x20009084
 800fa4c:	40015804 	.word	0x40015804
 800fa50:	0002ee00 	.word	0x0002ee00

0800fa54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800fa54:	b480      	push	{r7}
 800fa56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800fa58:	4b0c      	ldr	r3, [pc, #48]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa5a:	4a0d      	ldr	r2, [pc, #52]	; (800fa90 <MX_SDIO_SD_Init+0x3c>)
 800fa5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800fa5e:	4b0b      	ldr	r3, [pc, #44]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa60:	2200      	movs	r2, #0
 800fa62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa66:	2200      	movs	r2, #0
 800fa68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800fa6a:	4b08      	ldr	r3, [pc, #32]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800fa70:	4b06      	ldr	r3, [pc, #24]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800fa76:	4b05      	ldr	r3, [pc, #20]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800fa7c:	4b03      	ldr	r3, [pc, #12]	; (800fa8c <MX_SDIO_SD_Init+0x38>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800fa82:	bf00      	nop
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	20008f80 	.word	0x20008f80
 800fa90:	40012c00 	.word	0x40012c00

0800fa94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa9a:	f107 0308 	add.w	r3, r7, #8
 800fa9e:	2200      	movs	r2, #0
 800faa0:	601a      	str	r2, [r3, #0]
 800faa2:	605a      	str	r2, [r3, #4]
 800faa4:	609a      	str	r2, [r3, #8]
 800faa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800faa8:	463b      	mov	r3, r7
 800faaa:	2200      	movs	r2, #0
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800fab0:	4b1e      	ldr	r3, [pc, #120]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fab2:	4a1f      	ldr	r2, [pc, #124]	; (800fb30 <MX_TIM1_Init+0x9c>)
 800fab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800fab6:	4b1d      	ldr	r3, [pc, #116]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fab8:	2200      	movs	r2, #0
 800faba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fabc:	4b1b      	ldr	r3, [pc, #108]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800fac2:	4b1a      	ldr	r3, [pc, #104]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fac8:	4b18      	ldr	r3, [pc, #96]	; (800fb2c <MX_TIM1_Init+0x98>)
 800faca:	2200      	movs	r2, #0
 800facc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800face:	4b17      	ldr	r3, [pc, #92]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fad0:	2200      	movs	r2, #0
 800fad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fad4:	4b15      	ldr	r3, [pc, #84]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800fada:	4814      	ldr	r0, [pc, #80]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fadc:	f7f8 fc78 	bl	80083d0 <HAL_TIM_Base_Init>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d001      	beq.n	800faea <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800fae6:	f000 fa73 	bl	800ffd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800faea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800faee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800faf0:	f107 0308 	add.w	r3, r7, #8
 800faf4:	4619      	mov	r1, r3
 800faf6:	480d      	ldr	r0, [pc, #52]	; (800fb2c <MX_TIM1_Init+0x98>)
 800faf8:	f7f8 fdc1 	bl	800867e <HAL_TIM_ConfigClockSource>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d001      	beq.n	800fb06 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800fb02:	f000 fa65 	bl	800ffd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb06:	2300      	movs	r3, #0
 800fb08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800fb0e:	463b      	mov	r3, r7
 800fb10:	4619      	mov	r1, r3
 800fb12:	4806      	ldr	r0, [pc, #24]	; (800fb2c <MX_TIM1_Init+0x98>)
 800fb14:	f7f8 ffcc 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d001      	beq.n	800fb22 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800fb1e:	f000 fa57 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800fb22:	bf00      	nop
 800fb24:	3718      	adds	r7, #24
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20008f40 	.word	0x20008f40
 800fb30:	40010000 	.word	0x40010000

0800fb34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800fb38:	4b11      	ldr	r3, [pc, #68]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb3a:	4a12      	ldr	r2, [pc, #72]	; (800fb84 <MX_USART3_UART_Init+0x50>)
 800fb3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800fb3e:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800fb44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800fb46:	4b0e      	ldr	r3, [pc, #56]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800fb4c:	4b0c      	ldr	r3, [pc, #48]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800fb52:	4b0b      	ldr	r3, [pc, #44]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800fb58:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb5a:	220c      	movs	r2, #12
 800fb5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fb5e:	4b08      	ldr	r3, [pc, #32]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800fb64:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800fb6a:	4805      	ldr	r0, [pc, #20]	; (800fb80 <MX_USART3_UART_Init+0x4c>)
 800fb6c:	f7f8 fff9 	bl	8008b62 <HAL_UART_Init>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800fb76:	f000 fa2b 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800fb7a:	bf00      	nop
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	20008d8c 	.word	0x20008d8c
 800fb84:	40004800 	.word	0x40004800

0800fb88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800fb8c:	4b11      	ldr	r3, [pc, #68]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fb8e:	4a12      	ldr	r2, [pc, #72]	; (800fbd8 <MX_USART6_UART_Init+0x50>)
 800fb90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800fb92:	4b10      	ldr	r3, [pc, #64]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fb94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800fb98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800fb9a:	4b0e      	ldr	r3, [pc, #56]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800fba0:	4b0c      	ldr	r3, [pc, #48]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800fba6:	4b0b      	ldr	r3, [pc, #44]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fba8:	2200      	movs	r2, #0
 800fbaa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800fbac:	4b09      	ldr	r3, [pc, #36]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fbae:	220c      	movs	r2, #12
 800fbb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800fbb2:	4b08      	ldr	r3, [pc, #32]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800fbb8:	4b06      	ldr	r3, [pc, #24]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800fbbe:	4805      	ldr	r0, [pc, #20]	; (800fbd4 <MX_USART6_UART_Init+0x4c>)
 800fbc0:	f7f8 ffcf 	bl	8008b62 <HAL_UART_Init>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d001      	beq.n	800fbce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800fbca:	f000 fa01 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800fbce:	bf00      	nop
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	20009004 	.word	0x20009004
 800fbd8:	40011400 	.word	0x40011400

0800fbdc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b088      	sub	sp, #32
 800fbe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800fbe2:	1d3b      	adds	r3, r7, #4
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	601a      	str	r2, [r3, #0]
 800fbe8:	605a      	str	r2, [r3, #4]
 800fbea:	609a      	str	r2, [r3, #8]
 800fbec:	60da      	str	r2, [r3, #12]
 800fbee:	611a      	str	r2, [r3, #16]
 800fbf0:	615a      	str	r2, [r3, #20]
 800fbf2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800fbf4:	4b1f      	ldr	r3, [pc, #124]	; (800fc74 <MX_FMC_Init+0x98>)
 800fbf6:	4a20      	ldr	r2, [pc, #128]	; (800fc78 <MX_FMC_Init+0x9c>)
 800fbf8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800fbfa:	4b1e      	ldr	r3, [pc, #120]	; (800fc74 <MX_FMC_Init+0x98>)
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800fc00:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800fc06:	4b1b      	ldr	r3, [pc, #108]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc08:	2204      	movs	r2, #4
 800fc0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800fc0c:	4b19      	ldr	r3, [pc, #100]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc0e:	2220      	movs	r2, #32
 800fc10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800fc12:	4b18      	ldr	r3, [pc, #96]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc14:	2240      	movs	r2, #64	; 0x40
 800fc16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800fc18:	4b16      	ldr	r3, [pc, #88]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800fc1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800fc20:	4b14      	ldr	r3, [pc, #80]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc22:	2200      	movs	r2, #0
 800fc24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800fc26:	4b13      	ldr	r3, [pc, #76]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800fc2e:	4b11      	ldr	r3, [pc, #68]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fc34:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800fc36:	4b0f      	ldr	r3, [pc, #60]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc38:	2200      	movs	r2, #0
 800fc3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800fc3c:	2302      	movs	r3, #2
 800fc3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800fc40:	2307      	movs	r3, #7
 800fc42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800fc44:	2304      	movs	r3, #4
 800fc46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800fc48:	2307      	movs	r3, #7
 800fc4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800fc4c:	2303      	movs	r3, #3
 800fc4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800fc50:	2302      	movs	r3, #2
 800fc52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800fc54:	2302      	movs	r3, #2
 800fc56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800fc58:	1d3b      	adds	r3, r7, #4
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	4805      	ldr	r0, [pc, #20]	; (800fc74 <MX_FMC_Init+0x98>)
 800fc5e:	f7f8 fb38 	bl	80082d2 <HAL_SDRAM_Init>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d001      	beq.n	800fc6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800fc68:	f000 f9b2 	bl	800ffd0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800fc6c:	bf00      	nop
 800fc6e:	3720      	adds	r7, #32
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	2000910c 	.word	0x2000910c
 800fc78:	a0000140 	.word	0xa0000140

0800fc7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b090      	sub	sp, #64	; 0x40
 800fc80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	605a      	str	r2, [r3, #4]
 800fc8c:	609a      	str	r2, [r3, #8]
 800fc8e:	60da      	str	r2, [r3, #12]
 800fc90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fc92:	2300      	movs	r3, #0
 800fc94:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc96:	4bad      	ldr	r3, [pc, #692]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9a:	4aac      	ldr	r2, [pc, #688]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fc9c:	f043 0310 	orr.w	r3, r3, #16
 800fca0:	6313      	str	r3, [r2, #48]	; 0x30
 800fca2:	4baa      	ldr	r3, [pc, #680]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca6:	f003 0310 	and.w	r3, r3, #16
 800fcaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fcae:	2300      	movs	r3, #0
 800fcb0:	627b      	str	r3, [r7, #36]	; 0x24
 800fcb2:	4ba6      	ldr	r3, [pc, #664]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb6:	4aa5      	ldr	r2, [pc, #660]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcbc:	6313      	str	r3, [r2, #48]	; 0x30
 800fcbe:	4ba3      	ldr	r3, [pc, #652]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcc6:	627b      	str	r3, [r7, #36]	; 0x24
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fcca:	2300      	movs	r3, #0
 800fccc:	623b      	str	r3, [r7, #32]
 800fcce:	4b9f      	ldr	r3, [pc, #636]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcd2:	4a9e      	ldr	r2, [pc, #632]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcd4:	f043 0302 	orr.w	r3, r3, #2
 800fcd8:	6313      	str	r3, [r2, #48]	; 0x30
 800fcda:	4b9c      	ldr	r3, [pc, #624]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcde:	f003 0302 	and.w	r3, r3, #2
 800fce2:	623b      	str	r3, [r7, #32]
 800fce4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fce6:	2300      	movs	r3, #0
 800fce8:	61fb      	str	r3, [r7, #28]
 800fcea:	4b98      	ldr	r3, [pc, #608]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcee:	4a97      	ldr	r2, [pc, #604]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcf0:	f043 0304 	orr.w	r3, r3, #4
 800fcf4:	6313      	str	r3, [r2, #48]	; 0x30
 800fcf6:	4b95      	ldr	r3, [pc, #596]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcfa:	f003 0304 	and.w	r3, r3, #4
 800fcfe:	61fb      	str	r3, [r7, #28]
 800fd00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd02:	2300      	movs	r3, #0
 800fd04:	61bb      	str	r3, [r7, #24]
 800fd06:	4b91      	ldr	r3, [pc, #580]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd0a:	4a90      	ldr	r2, [pc, #576]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd0c:	f043 0301 	orr.w	r3, r3, #1
 800fd10:	6313      	str	r3, [r2, #48]	; 0x30
 800fd12:	4b8e      	ldr	r3, [pc, #568]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd16:	f003 0301 	and.w	r3, r3, #1
 800fd1a:	61bb      	str	r3, [r7, #24]
 800fd1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fd1e:	2300      	movs	r3, #0
 800fd20:	617b      	str	r3, [r7, #20]
 800fd22:	4b8a      	ldr	r3, [pc, #552]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd26:	4a89      	ldr	r2, [pc, #548]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd28:	f043 0308 	orr.w	r3, r3, #8
 800fd2c:	6313      	str	r3, [r2, #48]	; 0x30
 800fd2e:	4b87      	ldr	r3, [pc, #540]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd32:	f003 0308 	and.w	r3, r3, #8
 800fd36:	617b      	str	r3, [r7, #20]
 800fd38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	613b      	str	r3, [r7, #16]
 800fd3e:	4b83      	ldr	r3, [pc, #524]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd42:	4a82      	ldr	r2, [pc, #520]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd48:	6313      	str	r3, [r2, #48]	; 0x30
 800fd4a:	4b80      	ldr	r3, [pc, #512]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd52:	613b      	str	r3, [r7, #16]
 800fd54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fd56:	2300      	movs	r3, #0
 800fd58:	60fb      	str	r3, [r7, #12]
 800fd5a:	4b7c      	ldr	r3, [pc, #496]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd5e:	4a7b      	ldr	r2, [pc, #492]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd60:	f043 0320 	orr.w	r3, r3, #32
 800fd64:	6313      	str	r3, [r2, #48]	; 0x30
 800fd66:	4b79      	ldr	r3, [pc, #484]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6a:	f003 0320 	and.w	r3, r3, #32
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800fd72:	2300      	movs	r3, #0
 800fd74:	60bb      	str	r3, [r7, #8]
 800fd76:	4b75      	ldr	r3, [pc, #468]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7a:	4a74      	ldr	r2, [pc, #464]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fd80:	6313      	str	r3, [r2, #48]	; 0x30
 800fd82:	4b72      	ldr	r3, [pc, #456]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd8a:	60bb      	str	r3, [r7, #8]
 800fd8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fd8e:	2300      	movs	r3, #0
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	4b6e      	ldr	r3, [pc, #440]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd96:	4a6d      	ldr	r2, [pc, #436]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fd98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd9c:	6313      	str	r3, [r2, #48]	; 0x30
 800fd9e:	4b6b      	ldr	r3, [pc, #428]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda6:	607b      	str	r3, [r7, #4]
 800fda8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800fdaa:	2300      	movs	r3, #0
 800fdac:	603b      	str	r3, [r7, #0]
 800fdae:	4b67      	ldr	r3, [pc, #412]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb2:	4a66      	ldr	r2, [pc, #408]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fdb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fdb8:	6313      	str	r3, [r2, #48]	; 0x30
 800fdba:	4b64      	ldr	r3, [pc, #400]	; (800ff4c <MX_GPIO_Init+0x2d0>)
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fdc2:	603b      	str	r3, [r7, #0]
 800fdc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	210c      	movs	r1, #12
 800fdca:	4861      	ldr	r0, [pc, #388]	; (800ff50 <MX_GPIO_Init+0x2d4>)
 800fdcc:	f7f3 fe96 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	2130      	movs	r1, #48	; 0x30
 800fdd4:	485f      	ldr	r0, [pc, #380]	; (800ff54 <MX_GPIO_Init+0x2d8>)
 800fdd6:	f7f3 fe91 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800fdda:	2200      	movs	r2, #0
 800fddc:	2108      	movs	r1, #8
 800fdde:	485e      	ldr	r0, [pc, #376]	; (800ff58 <MX_GPIO_Init+0x2dc>)
 800fde0:	f7f3 fe8c 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800fde4:	2200      	movs	r2, #0
 800fde6:	2140      	movs	r1, #64	; 0x40
 800fde8:	485c      	ldr	r0, [pc, #368]	; (800ff5c <MX_GPIO_Init+0x2e0>)
 800fdea:	f7f3 fe87 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800fdee:	2200      	movs	r2, #0
 800fdf0:	2105      	movs	r1, #5
 800fdf2:	485b      	ldr	r0, [pc, #364]	; (800ff60 <MX_GPIO_Init+0x2e4>)
 800fdf4:	f7f3 fe82 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	2180      	movs	r1, #128	; 0x80
 800fdfc:	4859      	ldr	r0, [pc, #356]	; (800ff64 <MX_GPIO_Init+0x2e8>)
 800fdfe:	f7f3 fe7d 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800fe02:	2200      	movs	r2, #0
 800fe04:	2108      	movs	r1, #8
 800fe06:	4858      	ldr	r0, [pc, #352]	; (800ff68 <MX_GPIO_Init+0x2ec>)
 800fe08:	f7f3 fe78 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800fe0c:	230c      	movs	r3, #12
 800fe0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe10:	2301      	movs	r3, #1
 800fe12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe14:	2300      	movs	r3, #0
 800fe16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800fe1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe20:	4619      	mov	r1, r3
 800fe22:	484b      	ldr	r0, [pc, #300]	; (800ff50 <MX_GPIO_Init+0x2d4>)
 800fe24:	f7f3 fb9e 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800fe28:	2308      	movs	r3, #8
 800fe2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe30:	2300      	movs	r3, #0
 800fe32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe34:	2300      	movs	r3, #0
 800fe36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800fe38:	2306      	movs	r3, #6
 800fe3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 800fe3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe40:	4619      	mov	r1, r3
 800fe42:	4847      	ldr	r0, [pc, #284]	; (800ff60 <MX_GPIO_Init+0x2e4>)
 800fe44:	f7f3 fb8e 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800fe48:	2380      	movs	r3, #128	; 0x80
 800fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800fe4c:	4b47      	ldr	r3, [pc, #284]	; (800ff6c <MX_GPIO_Init+0x2f0>)
 800fe4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800fe54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe58:	4619      	mov	r1, r3
 800fe5a:	4841      	ldr	r0, [pc, #260]	; (800ff60 <MX_GPIO_Init+0x2e4>)
 800fe5c:	f7f3 fb82 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800fe60:	2330      	movs	r3, #48	; 0x30
 800fe62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800fe64:	2311      	movs	r3, #17
 800fe66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fe70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe74:	4619      	mov	r1, r3
 800fe76:	4837      	ldr	r0, [pc, #220]	; (800ff54 <MX_GPIO_Init+0x2d8>)
 800fe78:	f7f3 fb74 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800fe7c:	2308      	movs	r3, #8
 800fe7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800fe80:	2311      	movs	r3, #17
 800fe82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe84:	2300      	movs	r3, #0
 800fe86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800fe8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe90:	4619      	mov	r1, r3
 800fe92:	4831      	ldr	r0, [pc, #196]	; (800ff58 <MX_GPIO_Init+0x2dc>)
 800fe94:	f7f3 fb66 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800fe98:	2340      	movs	r3, #64	; 0x40
 800fe9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800fe9c:	2311      	movs	r3, #17
 800fe9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fea0:	2300      	movs	r3, #0
 800fea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fea4:	2300      	movs	r3, #0
 800fea6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800fea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800feac:	4619      	mov	r1, r3
 800feae:	482b      	ldr	r0, [pc, #172]	; (800ff5c <MX_GPIO_Init+0x2e0>)
 800feb0:	f7f3 fb58 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800feb4:	2305      	movs	r3, #5
 800feb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800feb8:	2301      	movs	r3, #1
 800feba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800febc:	2300      	movs	r3, #0
 800febe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fec0:	2300      	movs	r3, #0
 800fec2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fec8:	4619      	mov	r1, r3
 800feca:	4825      	ldr	r0, [pc, #148]	; (800ff60 <MX_GPIO_Init+0x2e4>)
 800fecc:	f7f3 fb4a 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800fed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fed6:	2302      	movs	r3, #2
 800fed8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fede:	2300      	movs	r3, #0
 800fee0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800fee2:	2302      	movs	r3, #2
 800fee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 800fee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800feea:	4619      	mov	r1, r3
 800feec:	4819      	ldr	r0, [pc, #100]	; (800ff54 <MX_GPIO_Init+0x2d8>)
 800feee:	f7f3 fb39 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800fef2:	2304      	movs	r3, #4
 800fef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fef6:	2300      	movs	r3, #0
 800fef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fefa:	2300      	movs	r3, #0
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800fefe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff02:	4619      	mov	r1, r3
 800ff04:	4815      	ldr	r0, [pc, #84]	; (800ff5c <MX_GPIO_Init+0x2e0>)
 800ff06:	f7f3 fb2d 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800ff0a:	2320      	movs	r3, #32
 800ff0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ff0e:	4b17      	ldr	r3, [pc, #92]	; (800ff6c <MX_GPIO_Init+0x2f0>)
 800ff10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff12:	2300      	movs	r3, #0
 800ff14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800ff16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	4814      	ldr	r0, [pc, #80]	; (800ff70 <MX_GPIO_Init+0x2f4>)
 800ff1e:	f7f3 fb21 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800ff22:	2380      	movs	r3, #128	; 0x80
 800ff24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff26:	2301      	movs	r3, #1
 800ff28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ff32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff36:	4619      	mov	r1, r3
 800ff38:	480a      	ldr	r0, [pc, #40]	; (800ff64 <MX_GPIO_Init+0x2e8>)
 800ff3a:	f7f3 fb13 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800ff3e:	2308      	movs	r3, #8
 800ff40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ff42:	2301      	movs	r3, #1
 800ff44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff46:	2300      	movs	r3, #0
 800ff48:	e014      	b.n	800ff74 <MX_GPIO_Init+0x2f8>
 800ff4a:	bf00      	nop
 800ff4c:	40023800 	.word	0x40023800
 800ff50:	40021000 	.word	0x40021000
 800ff54:	40020c00 	.word	0x40020c00
 800ff58:	40022800 	.word	0x40022800
 800ff5c:	40021800 	.word	0x40021800
 800ff60:	40020400 	.word	0x40020400
 800ff64:	40021c00 	.word	0x40021c00
 800ff68:	40020000 	.word	0x40020000
 800ff6c:	10110000 	.word	0x10110000
 800ff70:	40022400 	.word	0x40022400
 800ff74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ff76:	2300      	movs	r3, #0
 800ff78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800ff7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4803      	ldr	r0, [pc, #12]	; (800ff90 <MX_GPIO_Init+0x314>)
 800ff82:	f7f3 faef 	bl	8003564 <HAL_GPIO_Init>

}
 800ff86:	bf00      	nop
 800ff88:	3740      	adds	r7, #64	; 0x40
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	40020000 	.word	0x40020000

0800ff94 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 800ff9c:	f7ff f96e 	bl	800f27c <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800ffa0:	f000 ff54 	bl	8010e4c <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ffa4:	2001      	movs	r0, #1
 800ffa6:	f7fa fef7 	bl	800ad98 <osDelay>
 800ffaa:	e7fb      	b.n	800ffa4 <StartDefaultTask+0x10>

0800ffac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a04      	ldr	r2, [pc, #16]	; (800ffcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d101      	bne.n	800ffc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ffbe:	f7f1 fa1b 	bl	80013f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ffc2:	bf00      	nop
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	40001000 	.word	0x40001000

0800ffd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ffd4:	bf00      	nop
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr

0800ffde <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b084      	sub	sp, #16
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800ffe6:	f7fa fe7b 	bl	800ace0 <osKernelSysTick>
 800ffea:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800ffec:	e006      	b.n	800fffc <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ffee:	f7ff f90b 	bl	800f208 <BSP_SD_GetCardState>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	e009      	b.n	8010010 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800fffc:	f7fa fe70 	bl	800ace0 <osKernelSysTick>
 8010000:	4602      	mov	r2, r0
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	429a      	cmp	r2, r3
 801000a:	d8f0      	bhi.n	800ffee <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801000c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010010:	4618      	mov	r0, r3
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010022:	4b0b      	ldr	r3, [pc, #44]	; (8010050 <SD_CheckStatus+0x38>)
 8010024:	2201      	movs	r2, #1
 8010026:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010028:	f7ff f8ee 	bl	800f208 <BSP_SD_GetCardState>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d107      	bne.n	8010042 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010032:	4b07      	ldr	r3, [pc, #28]	; (8010050 <SD_CheckStatus+0x38>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f023 0301 	bic.w	r3, r3, #1
 801003c:	b2da      	uxtb	r2, r3
 801003e:	4b04      	ldr	r3, [pc, #16]	; (8010050 <SD_CheckStatus+0x38>)
 8010040:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010042:	4b03      	ldr	r3, [pc, #12]	; (8010050 <SD_CheckStatus+0x38>)
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	b2db      	uxtb	r3, r3
}
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	20000038 	.word	0x20000038

08010054 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010054:	b590      	push	{r4, r7, lr}
 8010056:	b087      	sub	sp, #28
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 801005e:	4b1a      	ldr	r3, [pc, #104]	; (80100c8 <SD_initialize+0x74>)
 8010060:	2201      	movs	r2, #1
 8010062:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8010064:	f7fa fe30 	bl	800acc8 <osKernelRunning>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d024      	beq.n	80100b8 <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801006e:	f7ff f871 	bl	800f154 <BSP_SD_Init>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d107      	bne.n	8010088 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8010078:	79fb      	ldrb	r3, [r7, #7]
 801007a:	4618      	mov	r0, r3
 801007c:	f7ff ffcc 	bl	8010018 <SD_CheckStatus>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	4b10      	ldr	r3, [pc, #64]	; (80100c8 <SD_initialize+0x74>)
 8010086:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8010088:	4b0f      	ldr	r3, [pc, #60]	; (80100c8 <SD_initialize+0x74>)
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	b2db      	uxtb	r3, r3
 801008e:	2b01      	cmp	r3, #1
 8010090:	d012      	beq.n	80100b8 <SD_initialize+0x64>
 8010092:	4b0e      	ldr	r3, [pc, #56]	; (80100cc <SD_initialize+0x78>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d10e      	bne.n	80100b8 <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801009a:	4b0d      	ldr	r3, [pc, #52]	; (80100d0 <SD_initialize+0x7c>)
 801009c:	f107 0408 	add.w	r4, r7, #8
 80100a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80100a6:	f107 0308 	add.w	r3, r7, #8
 80100aa:	2100      	movs	r1, #0
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fa fe87 	bl	800adc0 <osMessageCreate>
 80100b2:	4602      	mov	r2, r0
 80100b4:	4b05      	ldr	r3, [pc, #20]	; (80100cc <SD_initialize+0x78>)
 80100b6:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 80100b8:	4b03      	ldr	r3, [pc, #12]	; (80100c8 <SD_initialize+0x74>)
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	b2db      	uxtb	r3, r3
}
 80100be:	4618      	mov	r0, r3
 80100c0:	371c      	adds	r7, #28
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd90      	pop	{r4, r7, pc}
 80100c6:	bf00      	nop
 80100c8:	20000038 	.word	0x20000038
 80100cc:	200087f8 	.word	0x200087f8
 80100d0:	08011738 	.word	0x08011738

080100d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	4603      	mov	r3, r0
 80100dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80100de:	79fb      	ldrb	r3, [r7, #7]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7ff ff99 	bl	8010018 <SD_CheckStatus>
 80100e6:	4603      	mov	r3, r0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08e      	sub	sp, #56	; 0x38
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	61b9      	str	r1, [r7, #24]
 80100f8:	617a      	str	r2, [r7, #20]
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	4603      	mov	r3, r0
 80100fe:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8010100:	2301      	movs	r3, #1
 8010102:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010106:	f247 5030 	movw	r0, #30000	; 0x7530
 801010a:	f7ff ff68 	bl	800ffde <SD_CheckStatusWithTimeout>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	da02      	bge.n	801011a <SD_read+0x2a>
  {
    return res;
 8010114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010118:	e06c      	b.n	80101f4 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	f003 0303 	and.w	r3, r3, #3
 8010120:	2b00      	cmp	r3, #0
 8010122:	d11e      	bne.n	8010162 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8010124:	693a      	ldr	r2, [r7, #16]
 8010126:	6979      	ldr	r1, [r7, #20]
 8010128:	69b8      	ldr	r0, [r7, #24]
 801012a:	f7ff f839 	bl	800f1a0 <BSP_SD_ReadBlocks_DMA>
 801012e:	4603      	mov	r3, r0
 8010130:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8010134:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010138:	2b00      	cmp	r3, #0
 801013a:	d159      	bne.n	80101f0 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801013c:	4b2f      	ldr	r3, [pc, #188]	; (80101fc <SD_read+0x10c>)
 801013e:	6819      	ldr	r1, [r3, #0]
 8010140:	f107 0320 	add.w	r3, r7, #32
 8010144:	f247 5230 	movw	r2, #30000	; 0x7530
 8010148:	4618      	mov	r0, r3
 801014a:	f7fa fea3 	bl	800ae94 <osMessageGet>
      if (event.status == osEventMessage) {
 801014e:	6a3b      	ldr	r3, [r7, #32]
 8010150:	2b10      	cmp	r3, #16
 8010152:	d14d      	bne.n	80101f0 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	2b01      	cmp	r3, #1
 8010158:	d14a      	bne.n	80101f0 <SD_read+0x100>
          res = RES_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010160:	e046      	b.n	80101f0 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8010162:	2300      	movs	r3, #0
 8010164:	633b      	str	r3, [r7, #48]	; 0x30
 8010166:	e032      	b.n	80101ce <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	1c5a      	adds	r2, r3, #1
 801016c:	617a      	str	r2, [r7, #20]
 801016e:	2201      	movs	r2, #1
 8010170:	4619      	mov	r1, r3
 8010172:	4823      	ldr	r0, [pc, #140]	; (8010200 <SD_read+0x110>)
 8010174:	f7ff f814 	bl	800f1a0 <BSP_SD_ReadBlocks_DMA>
 8010178:	4603      	mov	r3, r0
 801017a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 801017e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010182:	2b00      	cmp	r3, #0
 8010184:	d128      	bne.n	80101d8 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010186:	4b1d      	ldr	r3, [pc, #116]	; (80101fc <SD_read+0x10c>)
 8010188:	6819      	ldr	r1, [r3, #0]
 801018a:	463b      	mov	r3, r7
 801018c:	f247 5230 	movw	r2, #30000	; 0x7530
 8010190:	4618      	mov	r0, r3
 8010192:	f7fa fe7f 	bl	800ae94 <osMessageGet>
 8010196:	f107 0320 	add.w	r3, r7, #32
 801019a:	463a      	mov	r2, r7
 801019c:	ca07      	ldmia	r2, {r0, r1, r2}
 801019e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	2b10      	cmp	r3, #16
 80101a6:	d10f      	bne.n	80101c8 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d10c      	bne.n	80101c8 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	4a13      	ldr	r2, [pc, #76]	; (8010200 <SD_read+0x110>)
 80101b2:	4618      	mov	r0, r3
 80101b4:	4611      	mov	r1, r2
 80101b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101ba:	461a      	mov	r2, r3
 80101bc:	f001 f9ac 	bl	8011518 <memcpy>
            buff += BLOCKSIZE;
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80101c6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80101c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ca:	3301      	adds	r3, #1
 80101cc:	633b      	str	r3, [r7, #48]	; 0x30
 80101ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d0:	693a      	ldr	r2, [r7, #16]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d8c8      	bhi.n	8010168 <SD_read+0x78>
 80101d6:	e000      	b.n	80101da <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 80101d8:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	693a      	ldr	r2, [r7, #16]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d106      	bne.n	80101f0 <SD_read+0x100>
 80101e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d102      	bne.n	80101f0 <SD_read+0x100>
      res = RES_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 80101f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 80101f4:	4618      	mov	r0, r3
 80101f6:	3738      	adds	r7, #56	; 0x38
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	200087f8 	.word	0x200087f8
 8010200:	200085f8 	.word	0x200085f8

08010204 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b090      	sub	sp, #64	; 0x40
 8010208:	af00      	add	r7, sp, #0
 801020a:	61b9      	str	r1, [r7, #24]
 801020c:	617a      	str	r2, [r7, #20]
 801020e:	613b      	str	r3, [r7, #16]
 8010210:	4603      	mov	r3, r0
 8010212:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8010214:	2301      	movs	r3, #1
 8010216:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801021a:	f247 5030 	movw	r0, #30000	; 0x7530
 801021e:	f7ff fede 	bl	800ffde <SD_CheckStatusWithTimeout>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	da02      	bge.n	801022e <SD_write+0x2a>
  {
    return res;
 8010228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801022c:	e07c      	b.n	8010328 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801022e:	69bb      	ldr	r3, [r7, #24]
 8010230:	f003 0303 	and.w	r3, r3, #3
 8010234:	2b00      	cmp	r3, #0
 8010236:	d12e      	bne.n	8010296 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010238:	693a      	ldr	r2, [r7, #16]
 801023a:	6979      	ldr	r1, [r7, #20]
 801023c:	69b8      	ldr	r0, [r7, #24]
 801023e:	f7fe ffc9 	bl	800f1d4 <BSP_SD_WriteBlocks_DMA>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d16d      	bne.n	8010324 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010248:	4b39      	ldr	r3, [pc, #228]	; (8010330 <SD_write+0x12c>)
 801024a:	6819      	ldr	r1, [r3, #0]
 801024c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010250:	f247 5230 	movw	r2, #30000	; 0x7530
 8010254:	4618      	mov	r0, r3
 8010256:	f7fa fe1d 	bl	800ae94 <osMessageGet>

      if (event.status == osEventMessage)
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	2b10      	cmp	r3, #16
 801025e:	d161      	bne.n	8010324 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8010260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010262:	2b02      	cmp	r3, #2
 8010264:	d15e      	bne.n	8010324 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8010266:	f7fa fd3b 	bl	800ace0 <osKernelSysTick>
 801026a:	4603      	mov	r3, r0
 801026c:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8010270:	3330      	adds	r3, #48	; 0x30
 8010272:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 8010274:	e008      	b.n	8010288 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010276:	f7fe ffc7 	bl	800f208 <BSP_SD_GetCardState>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d103      	bne.n	8010288 <SD_write+0x84>
            {
              res = RES_OK;
 8010280:	2300      	movs	r3, #0
 8010282:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8010286:	e04d      	b.n	8010324 <SD_write+0x120>
          while(timer > osKernelSysTick())
 8010288:	f7fa fd2a 	bl	800ace0 <osKernelSysTick>
 801028c:	4602      	mov	r2, r0
 801028e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010290:	4293      	cmp	r3, r2
 8010292:	d8f0      	bhi.n	8010276 <SD_write+0x72>
 8010294:	e046      	b.n	8010324 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8010296:	2300      	movs	r3, #0
 8010298:	63bb      	str	r3, [r7, #56]	; 0x38
 801029a:	e032      	b.n	8010302 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	1c5a      	adds	r2, r3, #1
 80102a0:	617a      	str	r2, [r7, #20]
 80102a2:	2201      	movs	r2, #1
 80102a4:	4619      	mov	r1, r3
 80102a6:	4823      	ldr	r0, [pc, #140]	; (8010334 <SD_write+0x130>)
 80102a8:	f7fe ff94 	bl	800f1d4 <BSP_SD_WriteBlocks_DMA>
 80102ac:	4603      	mov	r3, r0
 80102ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 80102b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d128      	bne.n	801030c <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80102ba:	4b1d      	ldr	r3, [pc, #116]	; (8010330 <SD_write+0x12c>)
 80102bc:	6819      	ldr	r1, [r3, #0]
 80102be:	463b      	mov	r3, r7
 80102c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fa fde5 	bl	800ae94 <osMessageGet>
 80102ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102ce:	463a      	mov	r2, r7
 80102d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80102d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80102d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d8:	2b10      	cmp	r3, #16
 80102da:	d10f      	bne.n	80102fc <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 80102dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d10c      	bne.n	80102fc <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	4a13      	ldr	r2, [pc, #76]	; (8010334 <SD_write+0x130>)
 80102e6:	4618      	mov	r0, r3
 80102e8:	4611      	mov	r1, r2
 80102ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102ee:	461a      	mov	r2, r3
 80102f0:	f001 f912 	bl	8011518 <memcpy>
            buff += BLOCKSIZE;
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80102fa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80102fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fe:	3301      	adds	r3, #1
 8010300:	63bb      	str	r3, [r7, #56]	; 0x38
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	429a      	cmp	r2, r3
 8010308:	d8c8      	bhi.n	801029c <SD_write+0x98>
 801030a:	e000      	b.n	801030e <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 801030c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 801030e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010310:	693a      	ldr	r2, [r7, #16]
 8010312:	429a      	cmp	r2, r3
 8010314:	d106      	bne.n	8010324 <SD_write+0x120>
 8010316:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801031a:	2b00      	cmp	r3, #0
 801031c:	d102      	bne.n	8010324 <SD_write+0x120>
      res = RES_OK;
 801031e:	2300      	movs	r3, #0
 8010320:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8010324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8010328:	4618      	mov	r0, r3
 801032a:	3740      	adds	r7, #64	; 0x40
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	200087f8 	.word	0x200087f8
 8010334:	200085f8 	.word	0x200085f8

08010338 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b08c      	sub	sp, #48	; 0x30
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	603a      	str	r2, [r7, #0]
 8010342:	71fb      	strb	r3, [r7, #7]
 8010344:	460b      	mov	r3, r1
 8010346:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010348:	2301      	movs	r3, #1
 801034a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801034e:	4b25      	ldr	r3, [pc, #148]	; (80103e4 <SD_ioctl+0xac>)
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <SD_ioctl+0x28>
 801035c:	2303      	movs	r3, #3
 801035e:	e03c      	b.n	80103da <SD_ioctl+0xa2>

  switch (cmd)
 8010360:	79bb      	ldrb	r3, [r7, #6]
 8010362:	2b03      	cmp	r3, #3
 8010364:	d834      	bhi.n	80103d0 <SD_ioctl+0x98>
 8010366:	a201      	add	r2, pc, #4	; (adr r2, 801036c <SD_ioctl+0x34>)
 8010368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801036c:	0801037d 	.word	0x0801037d
 8010370:	08010385 	.word	0x08010385
 8010374:	0801039d 	.word	0x0801039d
 8010378:	080103b7 	.word	0x080103b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801037c:	2300      	movs	r3, #0
 801037e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010382:	e028      	b.n	80103d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010384:	f107 030c 	add.w	r3, r7, #12
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe ff4d 	bl	800f228 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801038e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010394:	2300      	movs	r3, #0
 8010396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801039a:	e01c      	b.n	80103d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801039c:	f107 030c 	add.w	r3, r7, #12
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7fe ff41 	bl	800f228 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80103a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80103ae:	2300      	movs	r3, #0
 80103b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103b4:	e00f      	b.n	80103d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103b6:	f107 030c 	add.w	r3, r7, #12
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe ff34 	bl	800f228 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	0a5a      	lsrs	r2, r3, #9
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103ce:	e002      	b.n	80103d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80103d0:	2304      	movs	r3, #4
 80103d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80103d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3730      	adds	r7, #48	; 0x30
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	20000038 	.word	0x20000038

080103e8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 80103ec:	4b04      	ldr	r3, [pc, #16]	; (8010400 <BSP_SD_ReadCpltCallback+0x18>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103f4:	2101      	movs	r1, #1
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fa fd0c 	bl	800ae14 <osMessagePut>
}
 80103fc:	bf00      	nop
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	200087f8 	.word	0x200087f8

08010404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801040a:	2300      	movs	r3, #0
 801040c:	607b      	str	r3, [r7, #4]
 801040e:	4b10      	ldr	r3, [pc, #64]	; (8010450 <HAL_MspInit+0x4c>)
 8010410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010412:	4a0f      	ldr	r2, [pc, #60]	; (8010450 <HAL_MspInit+0x4c>)
 8010414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010418:	6453      	str	r3, [r2, #68]	; 0x44
 801041a:	4b0d      	ldr	r3, [pc, #52]	; (8010450 <HAL_MspInit+0x4c>)
 801041c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801041e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010422:	607b      	str	r3, [r7, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010426:	2300      	movs	r3, #0
 8010428:	603b      	str	r3, [r7, #0]
 801042a:	4b09      	ldr	r3, [pc, #36]	; (8010450 <HAL_MspInit+0x4c>)
 801042c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801042e:	4a08      	ldr	r2, [pc, #32]	; (8010450 <HAL_MspInit+0x4c>)
 8010430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010434:	6413      	str	r3, [r2, #64]	; 0x40
 8010436:	4b06      	ldr	r3, [pc, #24]	; (8010450 <HAL_MspInit+0x4c>)
 8010438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801043e:	603b      	str	r3, [r7, #0]
 8010440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010442:	bf00      	nop
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	40023800 	.word	0x40023800

08010454 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a0b      	ldr	r2, [pc, #44]	; (8010490 <HAL_CRC_MspInit+0x3c>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d10d      	bne.n	8010482 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8010466:	2300      	movs	r3, #0
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	4b0a      	ldr	r3, [pc, #40]	; (8010494 <HAL_CRC_MspInit+0x40>)
 801046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801046e:	4a09      	ldr	r2, [pc, #36]	; (8010494 <HAL_CRC_MspInit+0x40>)
 8010470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010474:	6313      	str	r3, [r2, #48]	; 0x30
 8010476:	4b07      	ldr	r3, [pc, #28]	; (8010494 <HAL_CRC_MspInit+0x40>)
 8010478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801047a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801047e:	60fb      	str	r3, [r7, #12]
 8010480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8010482:	bf00      	nop
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr
 801048e:	bf00      	nop
 8010490:	40023000 	.word	0x40023000
 8010494:	40023800 	.word	0x40023800

08010498 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4a0e      	ldr	r2, [pc, #56]	; (80104e0 <HAL_DMA2D_MspInit+0x48>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d115      	bne.n	80104d6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80104aa:	2300      	movs	r3, #0
 80104ac:	60fb      	str	r3, [r7, #12]
 80104ae:	4b0d      	ldr	r3, [pc, #52]	; (80104e4 <HAL_DMA2D_MspInit+0x4c>)
 80104b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104b2:	4a0c      	ldr	r2, [pc, #48]	; (80104e4 <HAL_DMA2D_MspInit+0x4c>)
 80104b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80104b8:	6313      	str	r3, [r2, #48]	; 0x30
 80104ba:	4b0a      	ldr	r3, [pc, #40]	; (80104e4 <HAL_DMA2D_MspInit+0x4c>)
 80104bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80104c6:	2200      	movs	r2, #0
 80104c8:	2105      	movs	r1, #5
 80104ca:	205a      	movs	r0, #90	; 0x5a
 80104cc:	f7f1 f8b0 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80104d0:	205a      	movs	r0, #90	; 0x5a
 80104d2:	f7f1 f8c9 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80104d6:	bf00      	nop
 80104d8:	3710      	adds	r7, #16
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	4002b000 	.word	0x4002b000
 80104e4:	40023800 	.word	0x40023800

080104e8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b08a      	sub	sp, #40	; 0x28
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104f0:	f107 0314 	add.w	r3, r7, #20
 80104f4:	2200      	movs	r2, #0
 80104f6:	601a      	str	r2, [r3, #0]
 80104f8:	605a      	str	r2, [r3, #4]
 80104fa:	609a      	str	r2, [r3, #8]
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4a1d      	ldr	r2, [pc, #116]	; (801057c <HAL_DSI_MspInit+0x94>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d133      	bne.n	8010572 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 801050a:	2300      	movs	r3, #0
 801050c:	613b      	str	r3, [r7, #16]
 801050e:	4b1c      	ldr	r3, [pc, #112]	; (8010580 <HAL_DSI_MspInit+0x98>)
 8010510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010512:	4a1b      	ldr	r2, [pc, #108]	; (8010580 <HAL_DSI_MspInit+0x98>)
 8010514:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010518:	6453      	str	r3, [r2, #68]	; 0x44
 801051a:	4b19      	ldr	r3, [pc, #100]	; (8010580 <HAL_DSI_MspInit+0x98>)
 801051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801051e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010522:	613b      	str	r3, [r7, #16]
 8010524:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8010526:	2300      	movs	r3, #0
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	4b15      	ldr	r3, [pc, #84]	; (8010580 <HAL_DSI_MspInit+0x98>)
 801052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801052e:	4a14      	ldr	r2, [pc, #80]	; (8010580 <HAL_DSI_MspInit+0x98>)
 8010530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010534:	6313      	str	r3, [r2, #48]	; 0x30
 8010536:	4b12      	ldr	r3, [pc, #72]	; (8010580 <HAL_DSI_MspInit+0x98>)
 8010538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801053a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801053e:	60fb      	str	r3, [r7, #12]
 8010540:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8010542:	2304      	movs	r3, #4
 8010544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010546:	2302      	movs	r3, #2
 8010548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801054a:	2300      	movs	r3, #0
 801054c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801054e:	2303      	movs	r3, #3
 8010550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8010552:	230d      	movs	r3, #13
 8010554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8010556:	f107 0314 	add.w	r3, r7, #20
 801055a:	4619      	mov	r1, r3
 801055c:	4809      	ldr	r0, [pc, #36]	; (8010584 <HAL_DSI_MspInit+0x9c>)
 801055e:	f7f3 f801 	bl	8003564 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8010562:	2200      	movs	r2, #0
 8010564:	2105      	movs	r1, #5
 8010566:	205c      	movs	r0, #92	; 0x5c
 8010568:	f7f1 f862 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 801056c:	205c      	movs	r0, #92	; 0x5c
 801056e:	f7f1 f87b 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8010572:	bf00      	nop
 8010574:	3728      	adds	r7, #40	; 0x28
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	40016c00 	.word	0x40016c00
 8010580:	40023800 	.word	0x40023800
 8010584:	40022400 	.word	0x40022400

08010588 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a09      	ldr	r2, [pc, #36]	; (80105bc <HAL_DSI_MspDeInit+0x34>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d10c      	bne.n	80105b4 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 801059a:	4b09      	ldr	r3, [pc, #36]	; (80105c0 <HAL_DSI_MspDeInit+0x38>)
 801059c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801059e:	4a08      	ldr	r2, [pc, #32]	; (80105c0 <HAL_DSI_MspDeInit+0x38>)
 80105a0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80105a4:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(DSI_TE_GPIO_Port, DSI_TE_Pin);
 80105a6:	2104      	movs	r1, #4
 80105a8:	4806      	ldr	r0, [pc, #24]	; (80105c4 <HAL_DSI_MspDeInit+0x3c>)
 80105aa:	f7f3 f985 	bl	80038b8 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 80105ae:	205c      	movs	r0, #92	; 0x5c
 80105b0:	f7f1 f868 	bl	8001684 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 80105b4:	bf00      	nop
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	40016c00 	.word	0x40016c00
 80105c0:	40023800 	.word	0x40023800
 80105c4:	40022400 	.word	0x40022400

080105c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b08c      	sub	sp, #48	; 0x30
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105d0:	f107 031c 	add.w	r3, r7, #28
 80105d4:	2200      	movs	r2, #0
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	605a      	str	r2, [r3, #4]
 80105da:	609a      	str	r2, [r3, #8]
 80105dc:	60da      	str	r2, [r3, #12]
 80105de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4a32      	ldr	r2, [pc, #200]	; (80106b0 <HAL_I2C_MspInit+0xe8>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d12d      	bne.n	8010646 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80105ea:	2300      	movs	r3, #0
 80105ec:	61bb      	str	r3, [r7, #24]
 80105ee:	4b31      	ldr	r3, [pc, #196]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 80105f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f2:	4a30      	ldr	r2, [pc, #192]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 80105f4:	f043 0302 	orr.w	r3, r3, #2
 80105f8:	6313      	str	r3, [r2, #48]	; 0x30
 80105fa:	4b2e      	ldr	r3, [pc, #184]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 80105fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fe:	f003 0302 	and.w	r3, r3, #2
 8010602:	61bb      	str	r3, [r7, #24]
 8010604:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8010606:	f44f 7340 	mov.w	r3, #768	; 0x300
 801060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801060c:	2312      	movs	r3, #18
 801060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010610:	2301      	movs	r3, #1
 8010612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010614:	2303      	movs	r3, #3
 8010616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8010618:	2304      	movs	r3, #4
 801061a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801061c:	f107 031c 	add.w	r3, r7, #28
 8010620:	4619      	mov	r1, r3
 8010622:	4825      	ldr	r0, [pc, #148]	; (80106b8 <HAL_I2C_MspInit+0xf0>)
 8010624:	f7f2 ff9e 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8010628:	2300      	movs	r3, #0
 801062a:	617b      	str	r3, [r7, #20]
 801062c:	4b21      	ldr	r3, [pc, #132]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 801062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010630:	4a20      	ldr	r2, [pc, #128]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 8010632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010636:	6413      	str	r3, [r2, #64]	; 0x40
 8010638:	4b1e      	ldr	r3, [pc, #120]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 801063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801063c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010640:	617b      	str	r3, [r7, #20]
 8010642:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8010644:	e030      	b.n	80106a8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4a1c      	ldr	r2, [pc, #112]	; (80106bc <HAL_I2C_MspInit+0xf4>)
 801064c:	4293      	cmp	r3, r2
 801064e:	d12b      	bne.n	80106a8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8010650:	2300      	movs	r3, #0
 8010652:	613b      	str	r3, [r7, #16]
 8010654:	4b17      	ldr	r3, [pc, #92]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 8010656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010658:	4a16      	ldr	r2, [pc, #88]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 801065a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801065e:	6313      	str	r3, [r2, #48]	; 0x30
 8010660:	4b14      	ldr	r3, [pc, #80]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 8010662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010668:	613b      	str	r3, [r7, #16]
 801066a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 801066c:	2330      	movs	r3, #48	; 0x30
 801066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8010670:	2312      	movs	r3, #18
 8010672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010674:	2301      	movs	r3, #1
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010678:	2303      	movs	r3, #3
 801067a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801067c:	2304      	movs	r3, #4
 801067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010680:	f107 031c 	add.w	r3, r7, #28
 8010684:	4619      	mov	r1, r3
 8010686:	480e      	ldr	r0, [pc, #56]	; (80106c0 <HAL_I2C_MspInit+0xf8>)
 8010688:	f7f2 ff6c 	bl	8003564 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801068c:	2300      	movs	r3, #0
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	4b08      	ldr	r3, [pc, #32]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 8010692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010694:	4a07      	ldr	r2, [pc, #28]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 8010696:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801069a:	6413      	str	r3, [r2, #64]	; 0x40
 801069c:	4b05      	ldr	r3, [pc, #20]	; (80106b4 <HAL_I2C_MspInit+0xec>)
 801069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106a4:	60fb      	str	r3, [r7, #12]
 80106a6:	68fb      	ldr	r3, [r7, #12]
}
 80106a8:	bf00      	nop
 80106aa:	3730      	adds	r7, #48	; 0x30
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	40005400 	.word	0x40005400
 80106b4:	40023800 	.word	0x40023800
 80106b8:	40020400 	.word	0x40020400
 80106bc:	40005800 	.word	0x40005800
 80106c0:	40021c00 	.word	0x40021c00

080106c4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a0e      	ldr	r2, [pc, #56]	; (801070c <HAL_LTDC_MspInit+0x48>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d115      	bne.n	8010702 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80106d6:	2300      	movs	r3, #0
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	4b0d      	ldr	r3, [pc, #52]	; (8010710 <HAL_LTDC_MspInit+0x4c>)
 80106dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106de:	4a0c      	ldr	r2, [pc, #48]	; (8010710 <HAL_LTDC_MspInit+0x4c>)
 80106e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106e4:	6453      	str	r3, [r2, #68]	; 0x44
 80106e6:	4b0a      	ldr	r3, [pc, #40]	; (8010710 <HAL_LTDC_MspInit+0x4c>)
 80106e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80106ee:	60fb      	str	r3, [r7, #12]
 80106f0:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80106f2:	2200      	movs	r2, #0
 80106f4:	2105      	movs	r1, #5
 80106f6:	2058      	movs	r0, #88	; 0x58
 80106f8:	f7f0 ff9a 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80106fc:	2058      	movs	r0, #88	; 0x58
 80106fe:	f7f0 ffb3 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8010702:	bf00      	nop
 8010704:	3710      	adds	r7, #16
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	40016800 	.word	0x40016800
 8010710:	40023800 	.word	0x40023800

08010714 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b08a      	sub	sp, #40	; 0x28
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801071c:	f107 0314 	add.w	r3, r7, #20
 8010720:	2200      	movs	r2, #0
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	605a      	str	r2, [r3, #4]
 8010726:	609a      	str	r2, [r3, #8]
 8010728:	60da      	str	r2, [r3, #12]
 801072a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a31      	ldr	r2, [pc, #196]	; (80107f8 <HAL_QSPI_MspInit+0xe4>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d15b      	bne.n	80107ee <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8010736:	2300      	movs	r3, #0
 8010738:	613b      	str	r3, [r7, #16]
 801073a:	4b30      	ldr	r3, [pc, #192]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 801073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801073e:	4a2f      	ldr	r2, [pc, #188]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010740:	f043 0302 	orr.w	r3, r3, #2
 8010744:	6393      	str	r3, [r2, #56]	; 0x38
 8010746:	4b2d      	ldr	r3, [pc, #180]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074a:	f003 0302 	and.w	r3, r3, #2
 801074e:	613b      	str	r3, [r7, #16]
 8010750:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010752:	2300      	movs	r3, #0
 8010754:	60fb      	str	r3, [r7, #12]
 8010756:	4b29      	ldr	r3, [pc, #164]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801075a:	4a28      	ldr	r2, [pc, #160]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 801075c:	f043 0302 	orr.w	r3, r3, #2
 8010760:	6313      	str	r3, [r2, #48]	; 0x30
 8010762:	4b26      	ldr	r3, [pc, #152]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010766:	f003 0302 	and.w	r3, r3, #2
 801076a:	60fb      	str	r3, [r7, #12]
 801076c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801076e:	2300      	movs	r3, #0
 8010770:	60bb      	str	r3, [r7, #8]
 8010772:	4b22      	ldr	r3, [pc, #136]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010776:	4a21      	ldr	r2, [pc, #132]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010778:	f043 0320 	orr.w	r3, r3, #32
 801077c:	6313      	str	r3, [r2, #48]	; 0x30
 801077e:	4b1f      	ldr	r3, [pc, #124]	; (80107fc <HAL_QSPI_MspInit+0xe8>)
 8010780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010782:	f003 0320 	and.w	r3, r3, #32
 8010786:	60bb      	str	r3, [r7, #8]
 8010788:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 801078a:	2340      	movs	r3, #64	; 0x40
 801078c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801078e:	2302      	movs	r3, #2
 8010790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010792:	2300      	movs	r3, #0
 8010794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010796:	2303      	movs	r3, #3
 8010798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 801079a:	230a      	movs	r3, #10
 801079c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 801079e:	f107 0314 	add.w	r3, r7, #20
 80107a2:	4619      	mov	r1, r3
 80107a4:	4816      	ldr	r0, [pc, #88]	; (8010800 <HAL_QSPI_MspInit+0xec>)
 80107a6:	f7f2 fedd 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80107aa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80107ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107b0:	2302      	movs	r3, #2
 80107b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107b4:	2300      	movs	r3, #0
 80107b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107b8:	2303      	movs	r3, #3
 80107ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80107bc:	2309      	movs	r3, #9
 80107be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80107c0:	f107 0314 	add.w	r3, r7, #20
 80107c4:	4619      	mov	r1, r3
 80107c6:	480f      	ldr	r0, [pc, #60]	; (8010804 <HAL_QSPI_MspInit+0xf0>)
 80107c8:	f7f2 fecc 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80107cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80107d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107d2:	2302      	movs	r3, #2
 80107d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107da:	2303      	movs	r3, #3
 80107dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80107de:	230a      	movs	r3, #10
 80107e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80107e2:	f107 0314 	add.w	r3, r7, #20
 80107e6:	4619      	mov	r1, r3
 80107e8:	4806      	ldr	r0, [pc, #24]	; (8010804 <HAL_QSPI_MspInit+0xf0>)
 80107ea:	f7f2 febb 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80107ee:	bf00      	nop
 80107f0:	3728      	adds	r7, #40	; 0x28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	a0001000 	.word	0xa0001000
 80107fc:	40023800 	.word	0x40023800
 8010800:	40020400 	.word	0x40020400
 8010804:	40021400 	.word	0x40021400

08010808 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b08a      	sub	sp, #40	; 0x28
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010810:	f107 0314 	add.w	r3, r7, #20
 8010814:	2200      	movs	r2, #0
 8010816:	601a      	str	r2, [r3, #0]
 8010818:	605a      	str	r2, [r3, #4]
 801081a:	609a      	str	r2, [r3, #8]
 801081c:	60da      	str	r2, [r3, #12]
 801081e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4a28      	ldr	r2, [pc, #160]	; (80108c8 <HAL_SD_MspInit+0xc0>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d14a      	bne.n	80108c0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 801082a:	2300      	movs	r3, #0
 801082c:	613b      	str	r3, [r7, #16]
 801082e:	4b27      	ldr	r3, [pc, #156]	; (80108cc <HAL_SD_MspInit+0xc4>)
 8010830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010832:	4a26      	ldr	r2, [pc, #152]	; (80108cc <HAL_SD_MspInit+0xc4>)
 8010834:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010838:	6453      	str	r3, [r2, #68]	; 0x44
 801083a:	4b24      	ldr	r3, [pc, #144]	; (80108cc <HAL_SD_MspInit+0xc4>)
 801083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801083e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010842:	613b      	str	r3, [r7, #16]
 8010844:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010846:	2300      	movs	r3, #0
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	4b20      	ldr	r3, [pc, #128]	; (80108cc <HAL_SD_MspInit+0xc4>)
 801084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801084e:	4a1f      	ldr	r2, [pc, #124]	; (80108cc <HAL_SD_MspInit+0xc4>)
 8010850:	f043 0304 	orr.w	r3, r3, #4
 8010854:	6313      	str	r3, [r2, #48]	; 0x30
 8010856:	4b1d      	ldr	r3, [pc, #116]	; (80108cc <HAL_SD_MspInit+0xc4>)
 8010858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801085a:	f003 0304 	and.w	r3, r3, #4
 801085e:	60fb      	str	r3, [r7, #12]
 8010860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010862:	2300      	movs	r3, #0
 8010864:	60bb      	str	r3, [r7, #8]
 8010866:	4b19      	ldr	r3, [pc, #100]	; (80108cc <HAL_SD_MspInit+0xc4>)
 8010868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086a:	4a18      	ldr	r2, [pc, #96]	; (80108cc <HAL_SD_MspInit+0xc4>)
 801086c:	f043 0308 	orr.w	r3, r3, #8
 8010870:	6313      	str	r3, [r2, #48]	; 0x30
 8010872:	4b16      	ldr	r3, [pc, #88]	; (80108cc <HAL_SD_MspInit+0xc4>)
 8010874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010876:	f003 0308 	and.w	r3, r3, #8
 801087a:	60bb      	str	r3, [r7, #8]
 801087c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0 
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin 
 801087e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8010882:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010884:	2302      	movs	r3, #2
 8010886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010888:	2300      	movs	r3, #0
 801088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801088c:	2303      	movs	r3, #3
 801088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8010890:	230c      	movs	r3, #12
 8010892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010894:	f107 0314 	add.w	r3, r7, #20
 8010898:	4619      	mov	r1, r3
 801089a:	480d      	ldr	r0, [pc, #52]	; (80108d0 <HAL_SD_MspInit+0xc8>)
 801089c:	f7f2 fe62 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80108a0:	2304      	movs	r3, #4
 80108a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80108a4:	2302      	movs	r3, #2
 80108a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108a8:	2300      	movs	r3, #0
 80108aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80108ac:	2303      	movs	r3, #3
 80108ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80108b0:	230c      	movs	r3, #12
 80108b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80108b4:	f107 0314 	add.w	r3, r7, #20
 80108b8:	4619      	mov	r1, r3
 80108ba:	4806      	ldr	r0, [pc, #24]	; (80108d4 <HAL_SD_MspInit+0xcc>)
 80108bc:	f7f2 fe52 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80108c0:	bf00      	nop
 80108c2:	3728      	adds	r7, #40	; 0x28
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	40012c00 	.word	0x40012c00
 80108cc:	40023800 	.word	0x40023800
 80108d0:	40020800 	.word	0x40020800
 80108d4:	40020c00 	.word	0x40020c00

080108d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a0b      	ldr	r2, [pc, #44]	; (8010914 <HAL_TIM_Base_MspInit+0x3c>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d10d      	bne.n	8010906 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80108ea:	2300      	movs	r3, #0
 80108ec:	60fb      	str	r3, [r7, #12]
 80108ee:	4b0a      	ldr	r3, [pc, #40]	; (8010918 <HAL_TIM_Base_MspInit+0x40>)
 80108f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108f2:	4a09      	ldr	r2, [pc, #36]	; (8010918 <HAL_TIM_Base_MspInit+0x40>)
 80108f4:	f043 0301 	orr.w	r3, r3, #1
 80108f8:	6453      	str	r3, [r2, #68]	; 0x44
 80108fa:	4b07      	ldr	r3, [pc, #28]	; (8010918 <HAL_TIM_Base_MspInit+0x40>)
 80108fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108fe:	f003 0301 	and.w	r3, r3, #1
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8010906:	bf00      	nop
 8010908:	3714      	adds	r7, #20
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	40010000 	.word	0x40010000
 8010918:	40023800 	.word	0x40023800

0801091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b08c      	sub	sp, #48	; 0x30
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010924:	f107 031c 	add.w	r3, r7, #28
 8010928:	2200      	movs	r2, #0
 801092a:	601a      	str	r2, [r3, #0]
 801092c:	605a      	str	r2, [r3, #4]
 801092e:	609a      	str	r2, [r3, #8]
 8010930:	60da      	str	r2, [r3, #12]
 8010932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a33      	ldr	r2, [pc, #204]	; (8010a08 <HAL_UART_MspInit+0xec>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d12d      	bne.n	801099a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801093e:	2300      	movs	r3, #0
 8010940:	61bb      	str	r3, [r7, #24]
 8010942:	4b32      	ldr	r3, [pc, #200]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 8010944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010946:	4a31      	ldr	r2, [pc, #196]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 8010948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801094c:	6413      	str	r3, [r2, #64]	; 0x40
 801094e:	4b2f      	ldr	r3, [pc, #188]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 8010950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010956:	61bb      	str	r3, [r7, #24]
 8010958:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801095a:	2300      	movs	r3, #0
 801095c:	617b      	str	r3, [r7, #20]
 801095e:	4b2b      	ldr	r3, [pc, #172]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 8010960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010962:	4a2a      	ldr	r2, [pc, #168]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 8010964:	f043 0302 	orr.w	r3, r3, #2
 8010968:	6313      	str	r3, [r2, #48]	; 0x30
 801096a:	4b28      	ldr	r3, [pc, #160]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 801096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801096e:	f003 0302 	and.w	r3, r3, #2
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8010976:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801097c:	2302      	movs	r3, #2
 801097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010980:	2301      	movs	r3, #1
 8010982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010984:	2303      	movs	r3, #3
 8010986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010988:	2307      	movs	r3, #7
 801098a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801098c:	f107 031c 	add.w	r3, r7, #28
 8010990:	4619      	mov	r1, r3
 8010992:	481f      	ldr	r0, [pc, #124]	; (8010a10 <HAL_UART_MspInit+0xf4>)
 8010994:	f7f2 fde6 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8010998:	e031      	b.n	80109fe <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	4a1d      	ldr	r2, [pc, #116]	; (8010a14 <HAL_UART_MspInit+0xf8>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d12c      	bne.n	80109fe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80109a4:	2300      	movs	r3, #0
 80109a6:	613b      	str	r3, [r7, #16]
 80109a8:	4b18      	ldr	r3, [pc, #96]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 80109aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ac:	4a17      	ldr	r2, [pc, #92]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 80109ae:	f043 0320 	orr.w	r3, r3, #32
 80109b2:	6453      	str	r3, [r2, #68]	; 0x44
 80109b4:	4b15      	ldr	r3, [pc, #84]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 80109b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109b8:	f003 0320 	and.w	r3, r3, #32
 80109bc:	613b      	str	r3, [r7, #16]
 80109be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80109c0:	2300      	movs	r3, #0
 80109c2:	60fb      	str	r3, [r7, #12]
 80109c4:	4b11      	ldr	r3, [pc, #68]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 80109c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109c8:	4a10      	ldr	r2, [pc, #64]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 80109ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ce:	6313      	str	r3, [r2, #48]	; 0x30
 80109d0:	4b0e      	ldr	r3, [pc, #56]	; (8010a0c <HAL_UART_MspInit+0xf0>)
 80109d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d8:	60fb      	str	r3, [r7, #12]
 80109da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80109dc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80109e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109e2:	2302      	movs	r3, #2
 80109e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109e6:	2300      	movs	r3, #0
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109ea:	2303      	movs	r3, #3
 80109ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80109ee:	2308      	movs	r3, #8
 80109f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80109f2:	f107 031c 	add.w	r3, r7, #28
 80109f6:	4619      	mov	r1, r3
 80109f8:	4807      	ldr	r0, [pc, #28]	; (8010a18 <HAL_UART_MspInit+0xfc>)
 80109fa:	f7f2 fdb3 	bl	8003564 <HAL_GPIO_Init>
}
 80109fe:	bf00      	nop
 8010a00:	3730      	adds	r7, #48	; 0x30
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	40004800 	.word	0x40004800
 8010a0c:	40023800 	.word	0x40023800
 8010a10:	40020400 	.word	0x40020400
 8010a14:	40011400 	.word	0x40011400
 8010a18:	40021800 	.word	0x40021800

08010a1c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8010a22:	1d3b      	adds	r3, r7, #4
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	605a      	str	r2, [r3, #4]
 8010a2a:	609a      	str	r2, [r3, #8]
 8010a2c:	60da      	str	r2, [r3, #12]
 8010a2e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8010a30:	4b44      	ldr	r3, [pc, #272]	; (8010b44 <HAL_FMC_MspInit+0x128>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f040 8081 	bne.w	8010b3c <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8010a3a:	4b42      	ldr	r3, [pc, #264]	; (8010b44 <HAL_FMC_MspInit+0x128>)
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010a40:	2300      	movs	r3, #0
 8010a42:	603b      	str	r3, [r7, #0]
 8010a44:	4b40      	ldr	r3, [pc, #256]	; (8010b48 <HAL_FMC_MspInit+0x12c>)
 8010a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a48:	4a3f      	ldr	r2, [pc, #252]	; (8010b48 <HAL_FMC_MspInit+0x12c>)
 8010a4a:	f043 0301 	orr.w	r3, r3, #1
 8010a4e:	6393      	str	r3, [r2, #56]	; 0x38
 8010a50:	4b3d      	ldr	r3, [pc, #244]	; (8010b48 <HAL_FMC_MspInit+0x12c>)
 8010a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a54:	f003 0301 	and.w	r3, r3, #1
 8010a58:	603b      	str	r3, [r7, #0]
 8010a5a:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin 
 8010a5c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8010a60:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin 
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a62:	2302      	movs	r3, #2
 8010a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a66:	2300      	movs	r3, #0
 8010a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010a6e:	230c      	movs	r3, #12
 8010a70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010a72:	1d3b      	adds	r3, r7, #4
 8010a74:	4619      	mov	r1, r3
 8010a76:	4835      	ldr	r0, [pc, #212]	; (8010b4c <HAL_FMC_MspInit+0x130>)
 8010a78:	f7f2 fd74 	bl	8003564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin 
 8010a7c:	f248 1333 	movw	r3, #33075	; 0x8133
 8010a80:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a82:	2302      	movs	r3, #2
 8010a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a8a:	2303      	movs	r3, #3
 8010a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010a8e:	230c      	movs	r3, #12
 8010a90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010a92:	1d3b      	adds	r3, r7, #4
 8010a94:	4619      	mov	r1, r3
 8010a96:	482e      	ldr	r0, [pc, #184]	; (8010b50 <HAL_FMC_MspInit+0x134>)
 8010a98:	f7f2 fd64 	bl	8003564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin 
 8010a9c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8010aa0:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010aaa:	2303      	movs	r3, #3
 8010aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010aae:	230c      	movs	r3, #12
 8010ab0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010ab2:	1d3b      	adds	r3, r7, #4
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4827      	ldr	r0, [pc, #156]	; (8010b54 <HAL_FMC_MspInit+0x138>)
 8010ab8:	f7f2 fd54 	bl	8003564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8010abc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8010ac0:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ac2:	2302      	movs	r3, #2
 8010ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010aca:	2303      	movs	r3, #3
 8010acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010ace:	230c      	movs	r3, #12
 8010ad0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010ad2:	1d3b      	adds	r3, r7, #4
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4820      	ldr	r0, [pc, #128]	; (8010b58 <HAL_FMC_MspInit+0x13c>)
 8010ad8:	f7f2 fd44 	bl	8003564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8010adc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8010ae0:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin 
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010aea:	2303      	movs	r3, #3
 8010aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010aee:	230c      	movs	r3, #12
 8010af0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010af2:	1d3b      	adds	r3, r7, #4
 8010af4:	4619      	mov	r1, r3
 8010af6:	4819      	ldr	r0, [pc, #100]	; (8010b5c <HAL_FMC_MspInit+0x140>)
 8010af8:	f7f2 fd34 	bl	8003564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin 
 8010afc:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8010b00:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin 
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b02:	2302      	movs	r3, #2
 8010b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b06:	2300      	movs	r3, #0
 8010b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010b0e:	230c      	movs	r3, #12
 8010b10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010b12:	1d3b      	adds	r3, r7, #4
 8010b14:	4619      	mov	r1, r3
 8010b16:	4812      	ldr	r0, [pc, #72]	; (8010b60 <HAL_FMC_MspInit+0x144>)
 8010b18:	f7f2 fd24 	bl	8003564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b20:	2302      	movs	r3, #2
 8010b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b24:	2300      	movs	r3, #0
 8010b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b28:	2303      	movs	r3, #3
 8010b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8010b2c:	230c      	movs	r3, #12
 8010b2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8010b30:	1d3b      	adds	r3, r7, #4
 8010b32:	4619      	mov	r1, r3
 8010b34:	480b      	ldr	r0, [pc, #44]	; (8010b64 <HAL_FMC_MspInit+0x148>)
 8010b36:	f7f2 fd15 	bl	8003564 <HAL_GPIO_Init>
 8010b3a:	e000      	b.n	8010b3e <HAL_FMC_MspInit+0x122>
    return;
 8010b3c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8010b3e:	3718      	adds	r7, #24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	200087fc 	.word	0x200087fc
 8010b48:	40023800 	.word	0x40023800
 8010b4c:	40021000 	.word	0x40021000
 8010b50:	40021800 	.word	0x40021800
 8010b54:	40020c00 	.word	0x40020c00
 8010b58:	40022000 	.word	0x40022000
 8010b5c:	40021400 	.word	0x40021400
 8010b60:	40021c00 	.word	0x40021c00
 8010b64:	40020800 	.word	0x40020800

08010b68 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8010b70:	f7ff ff54 	bl	8010a1c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8010b74:	bf00      	nop
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a26      	ldr	r2, [pc, #152]	; (8010c24 <HAL_SAI_MspInit+0xa8>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d146      	bne.n	8010c1c <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8010b8e:	4b26      	ldr	r3, [pc, #152]	; (8010c28 <HAL_SAI_MspInit+0xac>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10d      	bne.n	8010bb2 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8010b96:	2300      	movs	r3, #0
 8010b98:	60bb      	str	r3, [r7, #8]
 8010b9a:	4b24      	ldr	r3, [pc, #144]	; (8010c2c <HAL_SAI_MspInit+0xb0>)
 8010b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b9e:	4a23      	ldr	r2, [pc, #140]	; (8010c2c <HAL_SAI_MspInit+0xb0>)
 8010ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8010ba6:	4b21      	ldr	r3, [pc, #132]	; (8010c2c <HAL_SAI_MspInit+0xb0>)
 8010ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010bae:	60bb      	str	r3, [r7, #8]
 8010bb0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8010bb2:	4b1d      	ldr	r3, [pc, #116]	; (8010c28 <HAL_SAI_MspInit+0xac>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	4a1b      	ldr	r2, [pc, #108]	; (8010c28 <HAL_SAI_MspInit+0xac>)
 8010bba:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8010bbc:	2330      	movs	r3, #48	; 0x30
 8010bbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8010bcc:	2306      	movs	r3, #6
 8010bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8010bd0:	f107 030c 	add.w	r3, r7, #12
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	4816      	ldr	r0, [pc, #88]	; (8010c30 <HAL_SAI_MspInit+0xb4>)
 8010bd8:	f7f2 fcc4 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8010bdc:	2340      	movs	r3, #64	; 0x40
 8010bde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010be0:	2302      	movs	r3, #2
 8010be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010be4:	2300      	movs	r3, #0
 8010be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010be8:	2300      	movs	r3, #0
 8010bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8010bec:	2306      	movs	r3, #6
 8010bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8010bf0:	f107 030c 	add.w	r3, r7, #12
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	480f      	ldr	r0, [pc, #60]	; (8010c34 <HAL_SAI_MspInit+0xb8>)
 8010bf8:	f7f2 fcb4 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8010bfc:	2380      	movs	r3, #128	; 0x80
 8010bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c00:	2302      	movs	r3, #2
 8010c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c04:	2300      	movs	r3, #0
 8010c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8010c0c:	2306      	movs	r3, #6
 8010c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8010c10:	f107 030c 	add.w	r3, r7, #12
 8010c14:	4619      	mov	r1, r3
 8010c16:	4808      	ldr	r0, [pc, #32]	; (8010c38 <HAL_SAI_MspInit+0xbc>)
 8010c18:	f7f2 fca4 	bl	8003564 <HAL_GPIO_Init>

    }
}
 8010c1c:	bf00      	nop
 8010c1e:	3720      	adds	r7, #32
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	40015804 	.word	0x40015804
 8010c28:	20008800 	.word	0x20008800
 8010c2c:	40023800 	.word	0x40023800
 8010c30:	40021000 	.word	0x40021000
 8010c34:	40020c00 	.word	0x40020c00
 8010c38:	40021800 	.word	0x40021800

08010c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b08c      	sub	sp, #48	; 0x30
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	6879      	ldr	r1, [r7, #4]
 8010c50:	2036      	movs	r0, #54	; 0x36
 8010c52:	f7f0 fced 	bl	8001630 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8010c56:	2036      	movs	r0, #54	; 0x36
 8010c58:	f7f0 fd06 	bl	8001668 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	4b1f      	ldr	r3, [pc, #124]	; (8010ce0 <HAL_InitTick+0xa4>)
 8010c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c64:	4a1e      	ldr	r2, [pc, #120]	; (8010ce0 <HAL_InitTick+0xa4>)
 8010c66:	f043 0310 	orr.w	r3, r3, #16
 8010c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8010c6c:	4b1c      	ldr	r3, [pc, #112]	; (8010ce0 <HAL_InitTick+0xa4>)
 8010c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c70:	f003 0310 	and.w	r3, r3, #16
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010c78:	f107 0210 	add.w	r2, r7, #16
 8010c7c:	f107 0314 	add.w	r3, r7, #20
 8010c80:	4611      	mov	r1, r2
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7f5 fba8 	bl	80063d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010c88:	f7f5 fb7e 	bl	8006388 <HAL_RCC_GetPCLK1Freq>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	005b      	lsls	r3, r3, #1
 8010c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c94:	4a13      	ldr	r2, [pc, #76]	; (8010ce4 <HAL_InitTick+0xa8>)
 8010c96:	fba2 2303 	umull	r2, r3, r2, r3
 8010c9a:	0c9b      	lsrs	r3, r3, #18
 8010c9c:	3b01      	subs	r3, #1
 8010c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <HAL_InitTick+0xac>)
 8010ca2:	4a12      	ldr	r2, [pc, #72]	; (8010cec <HAL_InitTick+0xb0>)
 8010ca4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8010ca6:	4b10      	ldr	r3, [pc, #64]	; (8010ce8 <HAL_InitTick+0xac>)
 8010ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010cac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8010cae:	4a0e      	ldr	r2, [pc, #56]	; (8010ce8 <HAL_InitTick+0xac>)
 8010cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8010cb4:	4b0c      	ldr	r3, [pc, #48]	; (8010ce8 <HAL_InitTick+0xac>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010cba:	4b0b      	ldr	r3, [pc, #44]	; (8010ce8 <HAL_InitTick+0xac>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8010cc0:	4809      	ldr	r0, [pc, #36]	; (8010ce8 <HAL_InitTick+0xac>)
 8010cc2:	f7f7 fb85 	bl	80083d0 <HAL_TIM_Base_Init>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d104      	bne.n	8010cd6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8010ccc:	4806      	ldr	r0, [pc, #24]	; (8010ce8 <HAL_InitTick+0xac>)
 8010cce:	f7f7 fbaa 	bl	8008426 <HAL_TIM_Base_Start_IT>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	e000      	b.n	8010cd8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8010cd6:	2301      	movs	r3, #1
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3730      	adds	r7, #48	; 0x30
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	40023800 	.word	0x40023800
 8010ce4:	431bde83 	.word	0x431bde83
 8010ce8:	2000918c 	.word	0x2000918c
 8010cec:	40001000 	.word	0x40001000

08010cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8010cf4:	bf00      	nop
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr

08010cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010cfe:	b480      	push	{r7}
 8010d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010d02:	e7fe      	b.n	8010d02 <HardFault_Handler+0x4>

08010d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010d04:	b480      	push	{r7}
 8010d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010d08:	e7fe      	b.n	8010d08 <MemManage_Handler+0x4>

08010d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010d0e:	e7fe      	b.n	8010d0e <BusFault_Handler+0x4>

08010d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010d10:	b480      	push	{r7}
 8010d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010d14:	e7fe      	b.n	8010d14 <UsageFault_Handler+0x4>

08010d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010d16:	b480      	push	{r7}
 8010d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010d1a:	bf00      	nop
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr

08010d24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010d28:	4802      	ldr	r0, [pc, #8]	; (8010d34 <TIM6_DAC_IRQHandler+0x10>)
 8010d2a:	f7f7 fba0 	bl	800846e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8010d2e:	bf00      	nop
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	2000918c 	.word	0x2000918c

08010d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8010d3c:	4802      	ldr	r0, [pc, #8]	; (8010d48 <OTG_FS_IRQHandler+0x10>)
 8010d3e:	f7f3 f97b 	bl	8004038 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8010d42:	bf00      	nop
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	200095a4 	.word	0x200095a4

08010d4c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8010d50:	4802      	ldr	r0, [pc, #8]	; (8010d5c <LTDC_IRQHandler+0x10>)
 8010d52:	f7f4 fd4b 	bl	80057ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8010d56:	bf00      	nop
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	20008e98 	.word	0x20008e98

08010d60 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8010d64:	4802      	ldr	r0, [pc, #8]	; (8010d70 <DMA2D_IRQHandler+0x10>)
 8010d66:	f7f1 f862 	bl	8001e2e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8010d6a:	bf00      	nop
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	20009044 	.word	0x20009044

08010d74 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8010d78:	4802      	ldr	r0, [pc, #8]	; (8010d84 <DSI_IRQHandler+0x10>)
 8010d7a:	f7f1 fd2a 	bl	80027d2 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8010d7e:	bf00      	nop
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	20008e7c 	.word	0x20008e7c

08010d88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010d90:	4b11      	ldr	r3, [pc, #68]	; (8010dd8 <_sbrk+0x50>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d102      	bne.n	8010d9e <_sbrk+0x16>
		heap_end = &end;
 8010d98:	4b0f      	ldr	r3, [pc, #60]	; (8010dd8 <_sbrk+0x50>)
 8010d9a:	4a10      	ldr	r2, [pc, #64]	; (8010ddc <_sbrk+0x54>)
 8010d9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010d9e:	4b0e      	ldr	r3, [pc, #56]	; (8010dd8 <_sbrk+0x50>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010da4:	4b0c      	ldr	r3, [pc, #48]	; (8010dd8 <_sbrk+0x50>)
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4413      	add	r3, r2
 8010dac:	466a      	mov	r2, sp
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d907      	bls.n	8010dc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010db2:	f000 fb77 	bl	80114a4 <__errno>
 8010db6:	4602      	mov	r2, r0
 8010db8:	230c      	movs	r3, #12
 8010dba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8010dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dc0:	e006      	b.n	8010dd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8010dc2:	4b05      	ldr	r3, [pc, #20]	; (8010dd8 <_sbrk+0x50>)
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4413      	add	r3, r2
 8010dca:	4a03      	ldr	r2, [pc, #12]	; (8010dd8 <_sbrk+0x50>)
 8010dcc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010dce:	68fb      	ldr	r3, [r7, #12]
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3710      	adds	r7, #16
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	20008804 	.word	0x20008804
 8010ddc:	20009870 	.word	0x20009870

08010de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010de0:	b480      	push	{r7}
 8010de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010de4:	4b16      	ldr	r3, [pc, #88]	; (8010e40 <SystemInit+0x60>)
 8010de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dea:	4a15      	ldr	r2, [pc, #84]	; (8010e40 <SystemInit+0x60>)
 8010dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010df4:	4b13      	ldr	r3, [pc, #76]	; (8010e44 <SystemInit+0x64>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4a12      	ldr	r2, [pc, #72]	; (8010e44 <SystemInit+0x64>)
 8010dfa:	f043 0301 	orr.w	r3, r3, #1
 8010dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010e00:	4b10      	ldr	r3, [pc, #64]	; (8010e44 <SystemInit+0x64>)
 8010e02:	2200      	movs	r2, #0
 8010e04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010e06:	4b0f      	ldr	r3, [pc, #60]	; (8010e44 <SystemInit+0x64>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a0e      	ldr	r2, [pc, #56]	; (8010e44 <SystemInit+0x64>)
 8010e0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8010e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010e16:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <SystemInit+0x64>)
 8010e18:	4a0b      	ldr	r2, [pc, #44]	; (8010e48 <SystemInit+0x68>)
 8010e1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010e1c:	4b09      	ldr	r3, [pc, #36]	; (8010e44 <SystemInit+0x64>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a08      	ldr	r2, [pc, #32]	; (8010e44 <SystemInit+0x64>)
 8010e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010e28:	4b06      	ldr	r3, [pc, #24]	; (8010e44 <SystemInit+0x64>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010e2e:	4b04      	ldr	r3, [pc, #16]	; (8010e40 <SystemInit+0x60>)
 8010e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010e34:	609a      	str	r2, [r3, #8]
#endif
}
 8010e36:	bf00      	nop
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3e:	4770      	bx	lr
 8010e40:	e000ed00 	.word	0xe000ed00
 8010e44:	40023800 	.word	0x40023800
 8010e48:	24003010 	.word	0x24003010

08010e4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010e50:	2201      	movs	r2, #1
 8010e52:	490e      	ldr	r1, [pc, #56]	; (8010e8c <MX_USB_HOST_Init+0x40>)
 8010e54:	480e      	ldr	r0, [pc, #56]	; (8010e90 <MX_USB_HOST_Init+0x44>)
 8010e56:	f7fc fd5b 	bl	800d910 <USBH_Init>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d001      	beq.n	8010e64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010e60:	f7ff f8b6 	bl	800ffd0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010e64:	490b      	ldr	r1, [pc, #44]	; (8010e94 <MX_USB_HOST_Init+0x48>)
 8010e66:	480a      	ldr	r0, [pc, #40]	; (8010e90 <MX_USB_HOST_Init+0x44>)
 8010e68:	f7fc fded 	bl	800da46 <USBH_RegisterClass>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d001      	beq.n	8010e76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010e72:	f7ff f8ad 	bl	800ffd0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010e76:	4806      	ldr	r0, [pc, #24]	; (8010e90 <MX_USB_HOST_Init+0x44>)
 8010e78:	f7fc fe72 	bl	800db60 <USBH_Start>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d001      	beq.n	8010e86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010e82:	f7ff f8a5 	bl	800ffd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010e86:	bf00      	nop
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	08010e99 	.word	0x08010e99
 8010e90:	200091cc 	.word	0x200091cc
 8010e94:	20000018 	.word	0x20000018

08010e98 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010ea4:	78fb      	ldrb	r3, [r7, #3]
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	2b04      	cmp	r3, #4
 8010eaa:	d819      	bhi.n	8010ee0 <USBH_UserProcess+0x48>
 8010eac:	a201      	add	r2, pc, #4	; (adr r2, 8010eb4 <USBH_UserProcess+0x1c>)
 8010eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb2:	bf00      	nop
 8010eb4:	08010ee1 	.word	0x08010ee1
 8010eb8:	08010ed1 	.word	0x08010ed1
 8010ebc:	08010ee1 	.word	0x08010ee1
 8010ec0:	08010ed9 	.word	0x08010ed9
 8010ec4:	08010ec9 	.word	0x08010ec9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010ec8:	4b09      	ldr	r3, [pc, #36]	; (8010ef0 <USBH_UserProcess+0x58>)
 8010eca:	2203      	movs	r2, #3
 8010ecc:	701a      	strb	r2, [r3, #0]
  break;
 8010ece:	e008      	b.n	8010ee2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010ed0:	4b07      	ldr	r3, [pc, #28]	; (8010ef0 <USBH_UserProcess+0x58>)
 8010ed2:	2202      	movs	r2, #2
 8010ed4:	701a      	strb	r2, [r3, #0]
  break;
 8010ed6:	e004      	b.n	8010ee2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010ed8:	4b05      	ldr	r3, [pc, #20]	; (8010ef0 <USBH_UserProcess+0x58>)
 8010eda:	2201      	movs	r2, #1
 8010edc:	701a      	strb	r2, [r3, #0]
  break;
 8010ede:	e000      	b.n	8010ee2 <USBH_UserProcess+0x4a>

  default:
  break;
 8010ee0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010ee2:	bf00      	nop
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop
 8010ef0:	20008808 	.word	0x20008808

08010ef4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b08a      	sub	sp, #40	; 0x28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010efc:	f107 0314 	add.w	r3, r7, #20
 8010f00:	2200      	movs	r2, #0
 8010f02:	601a      	str	r2, [r3, #0]
 8010f04:	605a      	str	r2, [r3, #4]
 8010f06:	609a      	str	r2, [r3, #8]
 8010f08:	60da      	str	r2, [r3, #12]
 8010f0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f14:	d147      	bne.n	8010fa6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f16:	2300      	movs	r3, #0
 8010f18:	613b      	str	r3, [r7, #16]
 8010f1a:	4b25      	ldr	r3, [pc, #148]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f1e:	4a24      	ldr	r2, [pc, #144]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f20:	f043 0301 	orr.w	r3, r3, #1
 8010f24:	6313      	str	r3, [r2, #48]	; 0x30
 8010f26:	4b22      	ldr	r3, [pc, #136]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f2a:	f003 0301 	and.w	r3, r3, #1
 8010f2e:	613b      	str	r3, [r7, #16]
 8010f30:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS 
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8010f32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f38:	2302      	movs	r3, #2
 8010f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f40:	2303      	movs	r3, #3
 8010f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010f44:	230a      	movs	r3, #10
 8010f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f48:	f107 0314 	add.w	r3, r7, #20
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	4819      	ldr	r0, [pc, #100]	; (8010fb4 <HAL_HCD_MspInit+0xc0>)
 8010f50:	f7f2 fb08 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8010f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f5a:	2302      	movs	r3, #2
 8010f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8010f62:	f107 0314 	add.w	r3, r7, #20
 8010f66:	4619      	mov	r1, r3
 8010f68:	4812      	ldr	r0, [pc, #72]	; (8010fb4 <HAL_HCD_MspInit+0xc0>)
 8010f6a:	f7f2 fafb 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010f6e:	4b10      	ldr	r3, [pc, #64]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f72:	4a0f      	ldr	r2, [pc, #60]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f78:	6353      	str	r3, [r2, #52]	; 0x34
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	4b0c      	ldr	r3, [pc, #48]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f82:	4a0b      	ldr	r2, [pc, #44]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f88:	6453      	str	r3, [r2, #68]	; 0x44
 8010f8a:	4b09      	ldr	r3, [pc, #36]	; (8010fb0 <HAL_HCD_MspInit+0xbc>)
 8010f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f92:	60fb      	str	r3, [r7, #12]
 8010f94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010f96:	2200      	movs	r2, #0
 8010f98:	2105      	movs	r1, #5
 8010f9a:	2043      	movs	r0, #67	; 0x43
 8010f9c:	f7f0 fb48 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010fa0:	2043      	movs	r0, #67	; 0x43
 8010fa2:	f7f0 fb61 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010fa6:	bf00      	nop
 8010fa8:	3728      	adds	r7, #40	; 0x28
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}
 8010fae:	bf00      	nop
 8010fb0:	40023800 	.word	0x40023800
 8010fb4:	40020000 	.word	0x40020000

08010fb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fd f91d 	bl	800e206 <USBH_LL_IncTimer>
}
 8010fcc:	bf00      	nop
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fd f962 	bl	800e2ac <USBH_LL_Connect>
}
 8010fe8:	bf00      	nop
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fd f988 	bl	800e314 <USBH_LL_Disconnect>
}
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	460b      	mov	r3, r1
 8011016:	70fb      	strb	r3, [r7, #3]
 8011018:	4613      	mov	r3, r2
 801101a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011022:	4618      	mov	r0, r3
 8011024:	f7fd f9c6 	bl	800e3b4 <USBH_LL_NotifyURBChange>
#endif
}
 8011028:	bf00      	nop
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801103e:	4618      	mov	r0, r3
 8011040:	f7fd f90b 	bl	800e25a <USBH_LL_PortEnabled>
} 
 8011044:	bf00      	nop
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801105a:	4618      	mov	r0, r3
 801105c:	f7fd f90b 	bl	800e276 <USBH_LL_PortDisabled>
} 
 8011060:	bf00      	nop
 8011062:	3708      	adds	r7, #8
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8011076:	2b01      	cmp	r3, #1
 8011078:	d12a      	bne.n	80110d0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801107a:	4a18      	ldr	r2, [pc, #96]	; (80110dc <USBH_LL_Init+0x74>)
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4a15      	ldr	r2, [pc, #84]	; (80110dc <USBH_LL_Init+0x74>)
 8011086:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801108a:	4b14      	ldr	r3, [pc, #80]	; (80110dc <USBH_LL_Init+0x74>)
 801108c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011090:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011092:	4b12      	ldr	r3, [pc, #72]	; (80110dc <USBH_LL_Init+0x74>)
 8011094:	2208      	movs	r2, #8
 8011096:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011098:	4b10      	ldr	r3, [pc, #64]	; (80110dc <USBH_LL_Init+0x74>)
 801109a:	2201      	movs	r2, #1
 801109c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801109e:	4b0f      	ldr	r3, [pc, #60]	; (80110dc <USBH_LL_Init+0x74>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80110a4:	4b0d      	ldr	r3, [pc, #52]	; (80110dc <USBH_LL_Init+0x74>)
 80110a6:	2202      	movs	r2, #2
 80110a8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80110aa:	4b0c      	ldr	r3, [pc, #48]	; (80110dc <USBH_LL_Init+0x74>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80110b0:	480a      	ldr	r0, [pc, #40]	; (80110dc <USBH_LL_Init+0x74>)
 80110b2:	f7f2 fd3c 	bl	8003b2e <HAL_HCD_Init>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80110bc:	f7fe ff88 	bl	800ffd0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80110c0:	4806      	ldr	r0, [pc, #24]	; (80110dc <USBH_LL_Init+0x74>)
 80110c2:	f7f3 f937 	bl	8004334 <HAL_HCD_GetCurrentFrame>
 80110c6:	4603      	mov	r3, r0
 80110c8:	4619      	mov	r1, r3
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7fd f88c 	bl	800e1e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	200095a4 	.word	0x200095a4

080110e0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b084      	sub	sp, #16
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110e8:	2300      	movs	r3, #0
 80110ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110ec:	2300      	movs	r3, #0
 80110ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7f3 f8a4 	bl	8004244 <HAL_HCD_Start>
 80110fc:	4603      	mov	r3, r0
 80110fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011100:	7bfb      	ldrb	r3, [r7, #15]
 8011102:	4618      	mov	r0, r3
 8011104:	f000 f95c 	bl	80113c0 <USBH_Get_USB_Status>
 8011108:	4603      	mov	r3, r0
 801110a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801110c:	7bbb      	ldrb	r3, [r7, #14]
}
 801110e:	4618      	mov	r0, r3
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b084      	sub	sp, #16
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801111e:	2300      	movs	r3, #0
 8011120:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011122:	2300      	movs	r3, #0
 8011124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801112c:	4618      	mov	r0, r3
 801112e:	f7f3 f8ac 	bl	800428a <HAL_HCD_Stop>
 8011132:	4603      	mov	r3, r0
 8011134:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011136:	7bfb      	ldrb	r3, [r7, #15]
 8011138:	4618      	mov	r0, r3
 801113a:	f000 f941 	bl	80113c0 <USBH_Get_USB_Status>
 801113e:	4603      	mov	r3, r0
 8011140:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8011142:	7bbb      	ldrb	r3, [r7, #14]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3710      	adds	r7, #16
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}

0801114c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011154:	2301      	movs	r3, #1
 8011156:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801115e:	4618      	mov	r0, r3
 8011160:	f7f3 f8f6 	bl	8004350 <HAL_HCD_GetCurrentSpeed>
 8011164:	4603      	mov	r3, r0
 8011166:	2b01      	cmp	r3, #1
 8011168:	d007      	beq.n	801117a <USBH_LL_GetSpeed+0x2e>
 801116a:	2b01      	cmp	r3, #1
 801116c:	d302      	bcc.n	8011174 <USBH_LL_GetSpeed+0x28>
 801116e:	2b02      	cmp	r3, #2
 8011170:	d006      	beq.n	8011180 <USBH_LL_GetSpeed+0x34>
 8011172:	e008      	b.n	8011186 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011174:	2300      	movs	r3, #0
 8011176:	73fb      	strb	r3, [r7, #15]
    break;
 8011178:	e008      	b.n	801118c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801117a:	2301      	movs	r3, #1
 801117c:	73fb      	strb	r3, [r7, #15]
    break;
 801117e:	e005      	b.n	801118c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011180:	2302      	movs	r3, #2
 8011182:	73fb      	strb	r3, [r7, #15]
    break;
 8011184:	e002      	b.n	801118c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011186:	2301      	movs	r3, #1
 8011188:	73fb      	strb	r3, [r7, #15]
    break;
 801118a:	bf00      	nop
  }
  return  speed;
 801118c:	7bfb      	ldrb	r3, [r7, #15]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b084      	sub	sp, #16
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801119e:	2300      	movs	r3, #0
 80111a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80111a2:	2300      	movs	r3, #0
 80111a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7f3 f889 	bl	80042c4 <HAL_HCD_ResetPort>
 80111b2:	4603      	mov	r3, r0
 80111b4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80111b6:	7bfb      	ldrb	r3, [r7, #15]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f000 f901 	bl	80113c0 <USBH_Get_USB_Status>
 80111be:	4603      	mov	r3, r0
 80111c0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80111c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	460b      	mov	r3, r1
 80111d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80111de:	78fa      	ldrb	r2, [r7, #3]
 80111e0:	4611      	mov	r1, r2
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7f3 f891 	bl	800430a <HAL_HCD_HC_GetXferCount>
 80111e8:	4603      	mov	r3, r0
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80111f2:	b590      	push	{r4, r7, lr}
 80111f4:	b089      	sub	sp, #36	; 0x24
 80111f6:	af04      	add	r7, sp, #16
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	4608      	mov	r0, r1
 80111fc:	4611      	mov	r1, r2
 80111fe:	461a      	mov	r2, r3
 8011200:	4603      	mov	r3, r0
 8011202:	70fb      	strb	r3, [r7, #3]
 8011204:	460b      	mov	r3, r1
 8011206:	70bb      	strb	r3, [r7, #2]
 8011208:	4613      	mov	r3, r2
 801120a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801121a:	787c      	ldrb	r4, [r7, #1]
 801121c:	78ba      	ldrb	r2, [r7, #2]
 801121e:	78f9      	ldrb	r1, [r7, #3]
 8011220:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011222:	9302      	str	r3, [sp, #8]
 8011224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011228:	9301      	str	r3, [sp, #4]
 801122a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	4623      	mov	r3, r4
 8011232:	f7f2 fcde 	bl	8003bf2 <HAL_HCD_HC_Init>
 8011236:	4603      	mov	r3, r0
 8011238:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801123a:	7bfb      	ldrb	r3, [r7, #15]
 801123c:	4618      	mov	r0, r3
 801123e:	f000 f8bf 	bl	80113c0 <USBH_Get_USB_Status>
 8011242:	4603      	mov	r3, r0
 8011244:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011246:	7bbb      	ldrb	r3, [r7, #14]
}
 8011248:	4618      	mov	r0, r3
 801124a:	3714      	adds	r7, #20
 801124c:	46bd      	mov	sp, r7
 801124e:	bd90      	pop	{r4, r7, pc}

08011250 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	460b      	mov	r3, r1
 801125a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801126a:	78fa      	ldrb	r2, [r7, #3]
 801126c:	4611      	mov	r1, r2
 801126e:	4618      	mov	r0, r3
 8011270:	f7f2 fd57 	bl	8003d22 <HAL_HCD_HC_Halt>
 8011274:	4603      	mov	r3, r0
 8011276:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011278:	7bfb      	ldrb	r3, [r7, #15]
 801127a:	4618      	mov	r0, r3
 801127c:	f000 f8a0 	bl	80113c0 <USBH_Get_USB_Status>
 8011280:	4603      	mov	r3, r0
 8011282:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8011284:	7bbb      	ldrb	r3, [r7, #14]
}
 8011286:	4618      	mov	r0, r3
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801128e:	b590      	push	{r4, r7, lr}
 8011290:	b089      	sub	sp, #36	; 0x24
 8011292:	af04      	add	r7, sp, #16
 8011294:	6078      	str	r0, [r7, #4]
 8011296:	4608      	mov	r0, r1
 8011298:	4611      	mov	r1, r2
 801129a:	461a      	mov	r2, r3
 801129c:	4603      	mov	r3, r0
 801129e:	70fb      	strb	r3, [r7, #3]
 80112a0:	460b      	mov	r3, r1
 80112a2:	70bb      	strb	r3, [r7, #2]
 80112a4:	4613      	mov	r3, r2
 80112a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112a8:	2300      	movs	r3, #0
 80112aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80112b6:	787c      	ldrb	r4, [r7, #1]
 80112b8:	78ba      	ldrb	r2, [r7, #2]
 80112ba:	78f9      	ldrb	r1, [r7, #3]
 80112bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80112c0:	9303      	str	r3, [sp, #12]
 80112c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80112c4:	9302      	str	r3, [sp, #8]
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	9301      	str	r3, [sp, #4]
 80112ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	4623      	mov	r3, r4
 80112d2:	f7f2 fd49 	bl	8003d68 <HAL_HCD_HC_SubmitRequest>
 80112d6:	4603      	mov	r3, r0
 80112d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80112da:	7bfb      	ldrb	r3, [r7, #15]
 80112dc:	4618      	mov	r0, r3
 80112de:	f000 f86f 	bl	80113c0 <USBH_Get_USB_Status>
 80112e2:	4603      	mov	r3, r0
 80112e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80112e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3714      	adds	r7, #20
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd90      	pop	{r4, r7, pc}

080112f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	460b      	mov	r3, r1
 80112fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011302:	78fa      	ldrb	r2, [r7, #3]
 8011304:	4611      	mov	r1, r2
 8011306:	4618      	mov	r0, r3
 8011308:	f7f2 ffea 	bl	80042e0 <HAL_HCD_HC_GetURBState>
 801130c:	4603      	mov	r3, r0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b082      	sub	sp, #8
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	460b      	mov	r3, r1
 8011320:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8011328:	2b01      	cmp	r3, #1
 801132a:	d103      	bne.n	8011334 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801132c:	78fb      	ldrb	r3, [r7, #3]
 801132e:	4618      	mov	r0, r3
 8011330:	f000 f872 	bl	8011418 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011334:	20c8      	movs	r0, #200	; 0xc8
 8011336:	f7f0 f87f 	bl	8001438 <HAL_Delay>
  return USBH_OK;
 801133a:	2300      	movs	r3, #0
}
 801133c:	4618      	mov	r0, r3
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	460b      	mov	r3, r1
 801134e:	70fb      	strb	r3, [r7, #3]
 8011350:	4613      	mov	r3, r2
 8011352:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801135a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801135c:	78fa      	ldrb	r2, [r7, #3]
 801135e:	68f9      	ldr	r1, [r7, #12]
 8011360:	4613      	mov	r3, r2
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4413      	add	r3, r2
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	440b      	add	r3, r1
 801136a:	333b      	adds	r3, #59	; 0x3b
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00a      	beq.n	8011388 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011372:	78fa      	ldrb	r2, [r7, #3]
 8011374:	68f9      	ldr	r1, [r7, #12]
 8011376:	4613      	mov	r3, r2
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	4413      	add	r3, r2
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	440b      	add	r3, r1
 8011380:	3350      	adds	r3, #80	; 0x50
 8011382:	78ba      	ldrb	r2, [r7, #2]
 8011384:	701a      	strb	r2, [r3, #0]
 8011386:	e009      	b.n	801139c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011388:	78fa      	ldrb	r2, [r7, #3]
 801138a:	68f9      	ldr	r1, [r7, #12]
 801138c:	4613      	mov	r3, r2
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	4413      	add	r3, r2
 8011392:	00db      	lsls	r3, r3, #3
 8011394:	440b      	add	r3, r1
 8011396:	3351      	adds	r3, #81	; 0x51
 8011398:	78ba      	ldrb	r2, [r7, #2]
 801139a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801139c:	2300      	movs	r3, #0
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3714      	adds	r7, #20
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr

080113aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b082      	sub	sp, #8
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f7f0 f840 	bl	8001438 <HAL_Delay>
}
 80113b8:	bf00      	nop
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b085      	sub	sp, #20
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80113ce:	79fb      	ldrb	r3, [r7, #7]
 80113d0:	2b03      	cmp	r3, #3
 80113d2:	d817      	bhi.n	8011404 <USBH_Get_USB_Status+0x44>
 80113d4:	a201      	add	r2, pc, #4	; (adr r2, 80113dc <USBH_Get_USB_Status+0x1c>)
 80113d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113da:	bf00      	nop
 80113dc:	080113ed 	.word	0x080113ed
 80113e0:	080113f3 	.word	0x080113f3
 80113e4:	080113f9 	.word	0x080113f9
 80113e8:	080113ff 	.word	0x080113ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80113ec:	2300      	movs	r3, #0
 80113ee:	73fb      	strb	r3, [r7, #15]
    break;
 80113f0:	e00b      	b.n	801140a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80113f2:	2302      	movs	r3, #2
 80113f4:	73fb      	strb	r3, [r7, #15]
    break;
 80113f6:	e008      	b.n	801140a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80113f8:	2301      	movs	r3, #1
 80113fa:	73fb      	strb	r3, [r7, #15]
    break;
 80113fc:	e005      	b.n	801140a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80113fe:	2302      	movs	r3, #2
 8011400:	73fb      	strb	r3, [r7, #15]
    break;
 8011402:	e002      	b.n	801140a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011404:	2302      	movs	r3, #2
 8011406:	73fb      	strb	r3, [r7, #15]
    break;
 8011408:	bf00      	nop
  }
  return usb_status;
 801140a:	7bfb      	ldrb	r3, [r7, #15]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3714      	adds	r7, #20
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	4603      	mov	r3, r0
 8011420:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011426:	79fb      	ldrb	r3, [r7, #7]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801142c:	2301      	movs	r3, #1
 801142e:	73fb      	strb	r3, [r7, #15]
 8011430:	e001      	b.n	8011436 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011432:	2300      	movs	r3, #0
 8011434:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 8011436:	7bfb      	ldrb	r3, [r7, #15]
 8011438:	461a      	mov	r2, r3
 801143a:	2104      	movs	r1, #4
 801143c:	4803      	ldr	r0, [pc, #12]	; (801144c <MX_DriverVbusFS+0x34>)
 801143e:	f7f2 fb5d 	bl	8003afc <HAL_GPIO_WritePin>
}
 8011442:	bf00      	nop
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	40020400 	.word	0x40020400

08011450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011456:	e003      	b.n	8011460 <LoopCopyDataInit>

08011458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011458:	4b0c      	ldr	r3, [pc, #48]	; (801148c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801145a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801145c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801145e:	3104      	adds	r1, #4

08011460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011460:	480b      	ldr	r0, [pc, #44]	; (8011490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011462:	4b0c      	ldr	r3, [pc, #48]	; (8011494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011468:	d3f6      	bcc.n	8011458 <CopyDataInit>
  ldr  r2, =_sbss
 801146a:	4a0b      	ldr	r2, [pc, #44]	; (8011498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801146c:	e002      	b.n	8011474 <LoopFillZerobss>

0801146e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801146e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011470:	f842 3b04 	str.w	r3, [r2], #4

08011474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011474:	4b09      	ldr	r3, [pc, #36]	; (801149c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011478:	d3f9      	bcc.n	801146e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801147a:	f7ff fcb1 	bl	8010de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801147e:	f000 f817 	bl	80114b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011482:	f7fd ff57 	bl	800f334 <main>
  bx  lr    
 8011486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011488:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 801148c:	08013458 	.word	0x08013458
  ldr  r0, =_sdata
 8011490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011494:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8011498:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 801149c:	2000986c 	.word	0x2000986c

080114a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80114a0:	e7fe      	b.n	80114a0 <ADC_IRQHandler>
	...

080114a4 <__errno>:
 80114a4:	4b01      	ldr	r3, [pc, #4]	; (80114ac <__errno+0x8>)
 80114a6:	6818      	ldr	r0, [r3, #0]
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	20000040 	.word	0x20000040

080114b0 <__libc_init_array>:
 80114b0:	b570      	push	{r4, r5, r6, lr}
 80114b2:	4e0d      	ldr	r6, [pc, #52]	; (80114e8 <__libc_init_array+0x38>)
 80114b4:	4c0d      	ldr	r4, [pc, #52]	; (80114ec <__libc_init_array+0x3c>)
 80114b6:	1ba4      	subs	r4, r4, r6
 80114b8:	10a4      	asrs	r4, r4, #2
 80114ba:	2500      	movs	r5, #0
 80114bc:	42a5      	cmp	r5, r4
 80114be:	d109      	bne.n	80114d4 <__libc_init_array+0x24>
 80114c0:	4e0b      	ldr	r6, [pc, #44]	; (80114f0 <__libc_init_array+0x40>)
 80114c2:	4c0c      	ldr	r4, [pc, #48]	; (80114f4 <__libc_init_array+0x44>)
 80114c4:	f000 f8f6 	bl	80116b4 <_init>
 80114c8:	1ba4      	subs	r4, r4, r6
 80114ca:	10a4      	asrs	r4, r4, #2
 80114cc:	2500      	movs	r5, #0
 80114ce:	42a5      	cmp	r5, r4
 80114d0:	d105      	bne.n	80114de <__libc_init_array+0x2e>
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80114d8:	4798      	blx	r3
 80114da:	3501      	adds	r5, #1
 80114dc:	e7ee      	b.n	80114bc <__libc_init_array+0xc>
 80114de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80114e2:	4798      	blx	r3
 80114e4:	3501      	adds	r5, #1
 80114e6:	e7f2      	b.n	80114ce <__libc_init_array+0x1e>
 80114e8:	08013450 	.word	0x08013450
 80114ec:	08013450 	.word	0x08013450
 80114f0:	08013450 	.word	0x08013450
 80114f4:	08013454 	.word	0x08013454

080114f8 <malloc>:
 80114f8:	4b02      	ldr	r3, [pc, #8]	; (8011504 <malloc+0xc>)
 80114fa:	4601      	mov	r1, r0
 80114fc:	6818      	ldr	r0, [r3, #0]
 80114fe:	f000 b86d 	b.w	80115dc <_malloc_r>
 8011502:	bf00      	nop
 8011504:	20000040 	.word	0x20000040

08011508 <free>:
 8011508:	4b02      	ldr	r3, [pc, #8]	; (8011514 <free+0xc>)
 801150a:	4601      	mov	r1, r0
 801150c:	6818      	ldr	r0, [r3, #0]
 801150e:	f000 b817 	b.w	8011540 <_free_r>
 8011512:	bf00      	nop
 8011514:	20000040 	.word	0x20000040

08011518 <memcpy>:
 8011518:	b510      	push	{r4, lr}
 801151a:	1e43      	subs	r3, r0, #1
 801151c:	440a      	add	r2, r1
 801151e:	4291      	cmp	r1, r2
 8011520:	d100      	bne.n	8011524 <memcpy+0xc>
 8011522:	bd10      	pop	{r4, pc}
 8011524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011528:	f803 4f01 	strb.w	r4, [r3, #1]!
 801152c:	e7f7      	b.n	801151e <memcpy+0x6>

0801152e <memset>:
 801152e:	4402      	add	r2, r0
 8011530:	4603      	mov	r3, r0
 8011532:	4293      	cmp	r3, r2
 8011534:	d100      	bne.n	8011538 <memset+0xa>
 8011536:	4770      	bx	lr
 8011538:	f803 1b01 	strb.w	r1, [r3], #1
 801153c:	e7f9      	b.n	8011532 <memset+0x4>
	...

08011540 <_free_r>:
 8011540:	b538      	push	{r3, r4, r5, lr}
 8011542:	4605      	mov	r5, r0
 8011544:	2900      	cmp	r1, #0
 8011546:	d045      	beq.n	80115d4 <_free_r+0x94>
 8011548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801154c:	1f0c      	subs	r4, r1, #4
 801154e:	2b00      	cmp	r3, #0
 8011550:	bfb8      	it	lt
 8011552:	18e4      	addlt	r4, r4, r3
 8011554:	f000 f8ac 	bl	80116b0 <__malloc_lock>
 8011558:	4a1f      	ldr	r2, [pc, #124]	; (80115d8 <_free_r+0x98>)
 801155a:	6813      	ldr	r3, [r2, #0]
 801155c:	4610      	mov	r0, r2
 801155e:	b933      	cbnz	r3, 801156e <_free_r+0x2e>
 8011560:	6063      	str	r3, [r4, #4]
 8011562:	6014      	str	r4, [r2, #0]
 8011564:	4628      	mov	r0, r5
 8011566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801156a:	f000 b8a2 	b.w	80116b2 <__malloc_unlock>
 801156e:	42a3      	cmp	r3, r4
 8011570:	d90c      	bls.n	801158c <_free_r+0x4c>
 8011572:	6821      	ldr	r1, [r4, #0]
 8011574:	1862      	adds	r2, r4, r1
 8011576:	4293      	cmp	r3, r2
 8011578:	bf04      	itt	eq
 801157a:	681a      	ldreq	r2, [r3, #0]
 801157c:	685b      	ldreq	r3, [r3, #4]
 801157e:	6063      	str	r3, [r4, #4]
 8011580:	bf04      	itt	eq
 8011582:	1852      	addeq	r2, r2, r1
 8011584:	6022      	streq	r2, [r4, #0]
 8011586:	6004      	str	r4, [r0, #0]
 8011588:	e7ec      	b.n	8011564 <_free_r+0x24>
 801158a:	4613      	mov	r3, r2
 801158c:	685a      	ldr	r2, [r3, #4]
 801158e:	b10a      	cbz	r2, 8011594 <_free_r+0x54>
 8011590:	42a2      	cmp	r2, r4
 8011592:	d9fa      	bls.n	801158a <_free_r+0x4a>
 8011594:	6819      	ldr	r1, [r3, #0]
 8011596:	1858      	adds	r0, r3, r1
 8011598:	42a0      	cmp	r0, r4
 801159a:	d10b      	bne.n	80115b4 <_free_r+0x74>
 801159c:	6820      	ldr	r0, [r4, #0]
 801159e:	4401      	add	r1, r0
 80115a0:	1858      	adds	r0, r3, r1
 80115a2:	4282      	cmp	r2, r0
 80115a4:	6019      	str	r1, [r3, #0]
 80115a6:	d1dd      	bne.n	8011564 <_free_r+0x24>
 80115a8:	6810      	ldr	r0, [r2, #0]
 80115aa:	6852      	ldr	r2, [r2, #4]
 80115ac:	605a      	str	r2, [r3, #4]
 80115ae:	4401      	add	r1, r0
 80115b0:	6019      	str	r1, [r3, #0]
 80115b2:	e7d7      	b.n	8011564 <_free_r+0x24>
 80115b4:	d902      	bls.n	80115bc <_free_r+0x7c>
 80115b6:	230c      	movs	r3, #12
 80115b8:	602b      	str	r3, [r5, #0]
 80115ba:	e7d3      	b.n	8011564 <_free_r+0x24>
 80115bc:	6820      	ldr	r0, [r4, #0]
 80115be:	1821      	adds	r1, r4, r0
 80115c0:	428a      	cmp	r2, r1
 80115c2:	bf04      	itt	eq
 80115c4:	6811      	ldreq	r1, [r2, #0]
 80115c6:	6852      	ldreq	r2, [r2, #4]
 80115c8:	6062      	str	r2, [r4, #4]
 80115ca:	bf04      	itt	eq
 80115cc:	1809      	addeq	r1, r1, r0
 80115ce:	6021      	streq	r1, [r4, #0]
 80115d0:	605c      	str	r4, [r3, #4]
 80115d2:	e7c7      	b.n	8011564 <_free_r+0x24>
 80115d4:	bd38      	pop	{r3, r4, r5, pc}
 80115d6:	bf00      	nop
 80115d8:	2000880c 	.word	0x2000880c

080115dc <_malloc_r>:
 80115dc:	b570      	push	{r4, r5, r6, lr}
 80115de:	1ccd      	adds	r5, r1, #3
 80115e0:	f025 0503 	bic.w	r5, r5, #3
 80115e4:	3508      	adds	r5, #8
 80115e6:	2d0c      	cmp	r5, #12
 80115e8:	bf38      	it	cc
 80115ea:	250c      	movcc	r5, #12
 80115ec:	2d00      	cmp	r5, #0
 80115ee:	4606      	mov	r6, r0
 80115f0:	db01      	blt.n	80115f6 <_malloc_r+0x1a>
 80115f2:	42a9      	cmp	r1, r5
 80115f4:	d903      	bls.n	80115fe <_malloc_r+0x22>
 80115f6:	230c      	movs	r3, #12
 80115f8:	6033      	str	r3, [r6, #0]
 80115fa:	2000      	movs	r0, #0
 80115fc:	bd70      	pop	{r4, r5, r6, pc}
 80115fe:	f000 f857 	bl	80116b0 <__malloc_lock>
 8011602:	4a21      	ldr	r2, [pc, #132]	; (8011688 <_malloc_r+0xac>)
 8011604:	6814      	ldr	r4, [r2, #0]
 8011606:	4621      	mov	r1, r4
 8011608:	b991      	cbnz	r1, 8011630 <_malloc_r+0x54>
 801160a:	4c20      	ldr	r4, [pc, #128]	; (801168c <_malloc_r+0xb0>)
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	b91b      	cbnz	r3, 8011618 <_malloc_r+0x3c>
 8011610:	4630      	mov	r0, r6
 8011612:	f000 f83d 	bl	8011690 <_sbrk_r>
 8011616:	6020      	str	r0, [r4, #0]
 8011618:	4629      	mov	r1, r5
 801161a:	4630      	mov	r0, r6
 801161c:	f000 f838 	bl	8011690 <_sbrk_r>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	d124      	bne.n	801166e <_malloc_r+0x92>
 8011624:	230c      	movs	r3, #12
 8011626:	6033      	str	r3, [r6, #0]
 8011628:	4630      	mov	r0, r6
 801162a:	f000 f842 	bl	80116b2 <__malloc_unlock>
 801162e:	e7e4      	b.n	80115fa <_malloc_r+0x1e>
 8011630:	680b      	ldr	r3, [r1, #0]
 8011632:	1b5b      	subs	r3, r3, r5
 8011634:	d418      	bmi.n	8011668 <_malloc_r+0x8c>
 8011636:	2b0b      	cmp	r3, #11
 8011638:	d90f      	bls.n	801165a <_malloc_r+0x7e>
 801163a:	600b      	str	r3, [r1, #0]
 801163c:	50cd      	str	r5, [r1, r3]
 801163e:	18cc      	adds	r4, r1, r3
 8011640:	4630      	mov	r0, r6
 8011642:	f000 f836 	bl	80116b2 <__malloc_unlock>
 8011646:	f104 000b 	add.w	r0, r4, #11
 801164a:	1d23      	adds	r3, r4, #4
 801164c:	f020 0007 	bic.w	r0, r0, #7
 8011650:	1ac3      	subs	r3, r0, r3
 8011652:	d0d3      	beq.n	80115fc <_malloc_r+0x20>
 8011654:	425a      	negs	r2, r3
 8011656:	50e2      	str	r2, [r4, r3]
 8011658:	e7d0      	b.n	80115fc <_malloc_r+0x20>
 801165a:	428c      	cmp	r4, r1
 801165c:	684b      	ldr	r3, [r1, #4]
 801165e:	bf16      	itet	ne
 8011660:	6063      	strne	r3, [r4, #4]
 8011662:	6013      	streq	r3, [r2, #0]
 8011664:	460c      	movne	r4, r1
 8011666:	e7eb      	b.n	8011640 <_malloc_r+0x64>
 8011668:	460c      	mov	r4, r1
 801166a:	6849      	ldr	r1, [r1, #4]
 801166c:	e7cc      	b.n	8011608 <_malloc_r+0x2c>
 801166e:	1cc4      	adds	r4, r0, #3
 8011670:	f024 0403 	bic.w	r4, r4, #3
 8011674:	42a0      	cmp	r0, r4
 8011676:	d005      	beq.n	8011684 <_malloc_r+0xa8>
 8011678:	1a21      	subs	r1, r4, r0
 801167a:	4630      	mov	r0, r6
 801167c:	f000 f808 	bl	8011690 <_sbrk_r>
 8011680:	3001      	adds	r0, #1
 8011682:	d0cf      	beq.n	8011624 <_malloc_r+0x48>
 8011684:	6025      	str	r5, [r4, #0]
 8011686:	e7db      	b.n	8011640 <_malloc_r+0x64>
 8011688:	2000880c 	.word	0x2000880c
 801168c:	20008810 	.word	0x20008810

08011690 <_sbrk_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	4c06      	ldr	r4, [pc, #24]	; (80116ac <_sbrk_r+0x1c>)
 8011694:	2300      	movs	r3, #0
 8011696:	4605      	mov	r5, r0
 8011698:	4608      	mov	r0, r1
 801169a:	6023      	str	r3, [r4, #0]
 801169c:	f7ff fb74 	bl	8010d88 <_sbrk>
 80116a0:	1c43      	adds	r3, r0, #1
 80116a2:	d102      	bne.n	80116aa <_sbrk_r+0x1a>
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	b103      	cbz	r3, 80116aa <_sbrk_r+0x1a>
 80116a8:	602b      	str	r3, [r5, #0]
 80116aa:	bd38      	pop	{r3, r4, r5, pc}
 80116ac:	20009868 	.word	0x20009868

080116b0 <__malloc_lock>:
 80116b0:	4770      	bx	lr

080116b2 <__malloc_unlock>:
 80116b2:	4770      	bx	lr

080116b4 <_init>:
 80116b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b6:	bf00      	nop
 80116b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ba:	bc08      	pop	{r3}
 80116bc:	469e      	mov	lr, r3
 80116be:	4770      	bx	lr

080116c0 <_fini>:
 80116c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116c2:	bf00      	nop
 80116c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c6:	bc08      	pop	{r3}
 80116c8:	469e      	mov	lr, r3
 80116ca:	4770      	bx	lr
