
TESTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d64  08009d64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d64  08009d64  00019d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d6c  08009d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d6c  08009d6c  00019d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d70  08009d70  00019d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  2000000c  08009d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  08009d80  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229eb  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d1d  00000000  00000000  00042a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020b8  00000000  00000000  00046748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ed8  00000000  00000000  00048800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033ab1  00000000  00000000  0004a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001af06  00000000  00000000  0007e189  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0013a298  00000000  00000000  0009908f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d3327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008df4  00000000  00000000  001d33a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08009d34 	.word	0x08009d34

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08009d34 	.word	0x08009d34

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fbbd 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f008 fb3a 	bl	8008bc0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fbd7 	bl	8000d26 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 fb9f 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000034 	.word	0x20000034

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000034 	.word	0x20000034

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e031      	b.n	80006b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	2b00      	cmp	r3, #0
 8000654:	d109      	bne.n	800066a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f008 fad6 	bl	8008c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2200      	movs	r2, #0
 8000660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 0310 	and.w	r3, r3, #16
 8000672:	2b00      	cmp	r3, #0
 8000674:	d116      	bne.n	80006a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_ADC_Init+0x84>)
 800067c:	4013      	ands	r3, r2
 800067e:	f043 0202 	orr.w	r2, r3, #2
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f94e 	bl	8000928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f023 0303 	bic.w	r3, r3, #3
 800069a:	f043 0201 	orr.w	r2, r3, #1
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40
 80006a2:	e001      	b.n	80006a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	ffffeefd 	.word	0xffffeefd

080006c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d101      	bne.n	80006dc <HAL_ADC_ConfigChannel+0x1c>
 80006d8:	2302      	movs	r3, #2
 80006da:	e115      	b.n	8000908 <HAL_ADC_ConfigChannel+0x248>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d935      	bls.n	8000758 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68d9      	ldr	r1, [r3, #12]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	3b1e      	subs	r3, #30
 8000702:	2207      	movs	r2, #7
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	43da      	mvns	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	400a      	ands	r2, r1
 8000710:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a7f      	ldr	r2, [pc, #508]	; (8000914 <HAL_ADC_ConfigChannel+0x254>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d10a      	bne.n	8000732 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	061a      	lsls	r2, r3, #24
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	430a      	orrs	r2, r1
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	e035      	b.n	800079e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68d9      	ldr	r1, [r3, #12]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	4603      	mov	r3, r0
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4403      	add	r3, r0
 800074a:	3b1e      	subs	r3, #30
 800074c:	409a      	lsls	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	430a      	orrs	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	e022      	b.n	800079e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6919      	ldr	r1, [r3, #16]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	2207      	movs	r2, #7
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	400a      	ands	r2, r1
 800077a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6919      	ldr	r1, [r3, #16]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	4603      	mov	r3, r0
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4403      	add	r3, r0
 8000794:	409a      	lsls	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	430a      	orrs	r2, r1
 800079c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d824      	bhi.n	80007f0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	3b05      	subs	r3, #5
 80007b8:	221f      	movs	r2, #31
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	400a      	ands	r2, r1
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	3b05      	subs	r3, #5
 80007e2:	fa00 f203 	lsl.w	r2, r0, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
 80007ee:	e04c      	b.n	800088a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b0c      	cmp	r3, #12
 80007f6:	d824      	bhi.n	8000842 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4413      	add	r3, r2
 8000808:	3b23      	subs	r3, #35	; 0x23
 800080a:	221f      	movs	r2, #31
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43da      	mvns	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	400a      	ands	r2, r1
 8000818:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	3b23      	subs	r3, #35	; 0x23
 8000834:	fa00 f203 	lsl.w	r2, r0, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	430a      	orrs	r2, r1
 800083e:	631a      	str	r2, [r3, #48]	; 0x30
 8000840:	e023      	b.n	800088a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	3b41      	subs	r3, #65	; 0x41
 8000854:	221f      	movs	r2, #31
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	400a      	ands	r2, r1
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	3b41      	subs	r3, #65	; 0x41
 800087e:	fa00 f203 	lsl.w	r2, r0, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	430a      	orrs	r2, r1
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a22      	ldr	r2, [pc, #136]	; (8000918 <HAL_ADC_ConfigChannel+0x258>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d109      	bne.n	80008a8 <HAL_ADC_ConfigChannel+0x1e8>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b12      	cmp	r3, #18
 800089a:	d105      	bne.n	80008a8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <HAL_ADC_ConfigChannel+0x25c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a1e      	ldr	r2, [pc, #120]	; (800091c <HAL_ADC_ConfigChannel+0x25c>)
 80008a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <HAL_ADC_ConfigChannel+0x258>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d125      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x23e>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_ADC_ConfigChannel+0x254>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d003      	beq.n	80008c4 <HAL_ADC_ConfigChannel+0x204>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b11      	cmp	r3, #17
 80008c2:	d11c      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_ADC_ConfigChannel+0x25c>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_ADC_ConfigChannel+0x25c>)
 80008ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008ce:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_ADC_ConfigChannel+0x254>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d111      	bne.n	80008fe <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_ADC_ConfigChannel+0x260>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <HAL_ADC_ConfigChannel+0x264>)
 80008e0:	fba2 2303 	umull	r2, r3, r2, r3
 80008e4:	0c9a      	lsrs	r2, r3, #18
 80008e6:	4613      	mov	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80008f0:	e002      	b.n	80008f8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1f9      	bne.n	80008f2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	10000012 	.word	0x10000012
 8000918:	40012000 	.word	0x40012000
 800091c:	40012300 	.word	0x40012300
 8000920:	20000008 	.word	0x20000008
 8000924:	431bde83 	.word	0x431bde83

08000928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000930:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <ADC_Init+0x1ec>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	4a77      	ldr	r2, [pc, #476]	; (8000b14 <ADC_Init+0x1ec>)
 8000936:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800093a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800093c:	4b75      	ldr	r3, [pc, #468]	; (8000b14 <ADC_Init+0x1ec>)
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4973      	ldr	r1, [pc, #460]	; (8000b14 <ADC_Init+0x1ec>)
 8000946:	4313      	orrs	r3, r2
 8000948:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	021a      	lsls	r2, r3, #8
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	430a      	orrs	r2, r1
 800096c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800097c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6859      	ldr	r1, [r3, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800099e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6899      	ldr	r1, [r3, #8]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	430a      	orrs	r2, r1
 80009b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b6:	4a58      	ldr	r2, [pc, #352]	; (8000b18 <ADC_Init+0x1f0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d022      	beq.n	8000a02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6899      	ldr	r1, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6899      	ldr	r1, [r3, #8]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	e00f      	b.n	8000a22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0202 	bic.w	r2, r2, #2
 8000a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6899      	ldr	r1, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	005a      	lsls	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d01b      	beq.n	8000a88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6859      	ldr	r1, [r3, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	035a      	lsls	r2, r3, #13
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	e007      	b.n	8000a98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	051a      	lsls	r2, r3, #20
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6899      	ldr	r1, [r3, #8]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ada:	025a      	lsls	r2, r3, #9
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6899      	ldr	r1, [r3, #8]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	029a      	lsls	r2, r3, #10
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	430a      	orrs	r2, r1
 8000b06:	609a      	str	r2, [r3, #8]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40012300 	.word	0x40012300
 8000b18:	0f000001 	.word	0x0f000001

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <__NVIC_SetPriorityGrouping+0x40>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4a:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <__NVIC_SetPriorityGrouping+0x40>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	60d3      	str	r3, [r2, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00
 8000b60:	05fa0000 	.word	0x05fa0000

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff29 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff3e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff31 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffa2 	bl	8000c78 <SysTick_Config>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000d50:	4ba9      	ldr	r3, [pc, #676]	; (8000ff8 <HAL_ETH_Init+0x2b8>)
 8000d52:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e183      	b.n	800106e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d106      	bne.n	8000d80 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f007 ffcc 	bl	8008d18 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d80:	4b9e      	ldr	r3, [pc, #632]	; (8000ffc <HAL_ETH_Init+0x2bc>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	4a9d      	ldr	r2, [pc, #628]	; (8000ffc <HAL_ETH_Init+0x2bc>)
 8000d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8c:	4b9b      	ldr	r3, [pc, #620]	; (8000ffc <HAL_ETH_Init+0x2bc>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d98:	4b99      	ldr	r3, [pc, #612]	; (8001000 <HAL_ETH_Init+0x2c0>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a98      	ldr	r2, [pc, #608]	; (8001000 <HAL_ETH_Init+0x2c0>)
 8000d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000da2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000da4:	4b96      	ldr	r3, [pc, #600]	; (8001000 <HAL_ETH_Init+0x2c0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	4994      	ldr	r1, [pc, #592]	; (8001000 <HAL_ETH_Init+0x2c0>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 0201 	orr.w	r2, r2, #1
 8000dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dc8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000dca:	f7ff fc07 	bl	80005dc <HAL_GetTick>
 8000dce:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000dd0:	e011      	b.n	8000df6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000dd2:	f7ff fc03 	bl	80005dc <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000de0:	d909      	bls.n	8000df6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2203      	movs	r2, #3
 8000de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e13b      	b.n	800106e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e4      	bne.n	8000dd2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f023 031c 	bic.w	r3, r3, #28
 8000e16:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000e18:	f003 f81a 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8000e1c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4a78      	ldr	r2, [pc, #480]	; (8001004 <HAL_ETH_Init+0x2c4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d908      	bls.n	8000e38 <HAL_ETH_Init+0xf8>
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4a77      	ldr	r2, [pc, #476]	; (8001008 <HAL_ETH_Init+0x2c8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d804      	bhi.n	8000e38 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e027      	b.n	8000e88 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4a73      	ldr	r2, [pc, #460]	; (8001008 <HAL_ETH_Init+0x2c8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d908      	bls.n	8000e52 <HAL_ETH_Init+0x112>
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	4a72      	ldr	r2, [pc, #456]	; (800100c <HAL_ETH_Init+0x2cc>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d804      	bhi.n	8000e52 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f043 030c 	orr.w	r3, r3, #12
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	e01a      	b.n	8000e88 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4a6d      	ldr	r2, [pc, #436]	; (800100c <HAL_ETH_Init+0x2cc>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d903      	bls.n	8000e62 <HAL_ETH_Init+0x122>
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4a6c      	ldr	r2, [pc, #432]	; (8001010 <HAL_ETH_Init+0x2d0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d911      	bls.n	8000e86 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4a6a      	ldr	r2, [pc, #424]	; (8001010 <HAL_ETH_Init+0x2d0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d908      	bls.n	8000e7c <HAL_ETH_Init+0x13c>
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4a69      	ldr	r2, [pc, #420]	; (8001014 <HAL_ETH_Init+0x2d4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d804      	bhi.n	8000e7c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e005      	b.n	8000e88 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	e000      	b.n	8000e88 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e86:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e94:	2100      	movs	r1, #0
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f956 	bl	8001148 <HAL_ETH_WritePHYRegister>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f9b3 	bl	8001214 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0d9      	b.n	800106e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000eba:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ebe:	f7ff fb99 	bl	80005f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a6 	beq.w	8001018 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ecc:	f7ff fb86 	bl	80005dc <HAL_GetTick>
 8000ed0:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f8cc 	bl	8001078 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000ee0:	f7ff fb7c 	bl	80005dc <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d90f      	bls.n	8000f12 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ef6:	6939      	ldr	r1, [r7, #16]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f98b 	bl	8001214 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e0ad      	b.n	800106e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0da      	beq.n	8000ed2 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f20:	2100      	movs	r1, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 f910 	bl	8001148 <HAL_ETH_WritePHYRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f96d 	bl	8001214 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f42:	2301      	movs	r3, #1
 8000f44:	e093      	b.n	800106e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f46:	f7ff fb49 	bl	80005dc <HAL_GetTick>
 8000f4a:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	461a      	mov	r2, r3
 8000f52:	2101      	movs	r1, #1
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f88f 	bl	8001078 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f5a:	f7ff fb3f 	bl	80005dc <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d90f      	bls.n	8000f8c <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f70:	6939      	ldr	r1, [r7, #16]
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f94e 	bl	8001214 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e070      	b.n	800106e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0da      	beq.n	8000f4c <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	211f      	movs	r1, #31
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f86a 	bl	8001078 <HAL_ETH_ReadPHYRegister>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f92f 	bl	8001214 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e055      	b.n	800106e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	e002      	b.n	8000fdc <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e036      	b.n	800105c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	e031      	b.n	800105c <HAL_ETH_Init+0x31c>
 8000ff8:	03938700 	.word	0x03938700
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	01312cff 	.word	0x01312cff
 8001008:	02160ebf 	.word	0x02160ebf
 800100c:	039386ff 	.word	0x039386ff
 8001010:	05f5e0ff 	.word	0x05f5e0ff
 8001014:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001028:	4313      	orrs	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f889 	bl	8001148 <HAL_ETH_WritePHYRegister>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f8e6 	bl	8001214 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e00c      	b.n	800106e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001054:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001058:	f7ff facc 	bl	80005f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f8d8 	bl	8001214 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3720      	adds	r7, #32
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop

08001078 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	460b      	mov	r3, r1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b82      	cmp	r3, #130	; 0x82
 8001098:	d101      	bne.n	800109e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800109a:	2302      	movs	r3, #2
 800109c:	e050      	b.n	8001140 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2282      	movs	r2, #130	; 0x82
 80010a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 031c 	and.w	r3, r3, #28
 80010b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8a1b      	ldrh	r3, [r3, #16]
 80010ba:	02db      	lsls	r3, r3, #11
 80010bc:	b29b      	uxth	r3, r3
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80010c4:	897b      	ldrh	r3, [r7, #10]
 80010c6:	019b      	lsls	r3, r3, #6
 80010c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f023 0302 	bic.w	r3, r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010ea:	f7ff fa77 	bl	80005dc <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80010f0:	e015      	b.n	800111e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80010f2:	f7ff fa73 	bl	80005dc <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d309      	bcc.n	8001116 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e014      	b.n	8001140 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1e4      	bne.n	80010f2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	460b      	mov	r3, r1
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b42      	cmp	r3, #66	; 0x42
 8001168:	d101      	bne.n	800116e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800116a:	2302      	movs	r3, #2
 800116c:	e04e      	b.n	800120c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2242      	movs	r2, #66	; 0x42
 8001172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 031c 	and.w	r3, r3, #28
 8001184:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8a1b      	ldrh	r3, [r3, #16]
 800118a:	02db      	lsls	r3, r3, #11
 800118c:	b29b      	uxth	r3, r3
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4313      	orrs	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001194:	897b      	ldrh	r3, [r7, #10]
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	4313      	orrs	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff fa0a 	bl	80005dc <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011ca:	e015      	b.n	80011f8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80011cc:	f7ff fa06 	bl	80005dc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d309      	bcc.n	80011f0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e00d      	b.n	800120c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1e4      	bne.n	80011cc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0b0      	sub	sp, #192	; 0xc0
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001230:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001238:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001242:	2300      	movs	r3, #0
 8001244:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
 8001260:	e001      	b.n	8001266 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001270:	2300      	movs	r3, #0
 8001272:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001280:	2340      	movs	r3, #64	; 0x40
 8001282:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80012e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80012ec:	4bab      	ldr	r3, [pc, #684]	; (800159c <ETH_MACDMAConfig+0x388>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80012f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80012f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80012f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80012fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80012fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80012fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001300:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001306:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800130a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800130c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800130e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001314:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001318:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800131a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800131c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800131e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001320:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001324:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001328:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800132a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800132e:	4313      	orrs	r3, r2
 8001330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800133c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff f953 	bl	80005f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001356:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001358:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800135a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800135c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800135e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001360:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001366:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800136c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800136e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001372:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001378:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800137c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001384:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001386:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff f92e 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013a0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013aa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013b4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80013c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013c4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013c8:	4013      	ands	r3, r2
 80013ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80013ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013d2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80013d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80013d8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80013da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80013de:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80013e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80013e4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80013e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80013ea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80013ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80013f0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80013f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013f6:	4313      	orrs	r3, r2
 80013f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001404:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff f8ef 	bl	80005f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800141e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001420:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001424:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff f8da 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001448:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800144e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001452:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001458:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800145c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800146e:	2304      	movs	r3, #4
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001478:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800147e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800148e:	2300      	movs	r3, #0
 8001490:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001492:	2300      	movs	r3, #0
 8001494:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f241 0318 	movw	r3, #4120	; 0x1018
 800149e:	4413      	add	r3, r2
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80014a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <ETH_MACDMAConfig+0x38c>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80014b2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80014b4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80014b6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80014b8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80014ba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80014bc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80014be:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80014c0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80014c2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80014c4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80014c6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80014c8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80014ca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80014ce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80014d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80014d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014d8:	4313      	orrs	r3, r2
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80014e6:	4413      	add	r3, r2
 80014e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80014f6:	4413      	add	r3, r2
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff f878 	bl	80005f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	f241 0318 	movw	r3, #4120	; 0x1018
 800150c:	4413      	add	r3, r2
 800150e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001512:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001518:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800151a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800151c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800151e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001520:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001524:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001528:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800152a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800152c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800152e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff f851 	bl	80005f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800155e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10d      	bne.n	8001584 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001570:	4413      	add	r3, r2
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6811      	ldr	r1, [r2, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <ETH_MACDMAConfig+0x390>)
 800157a:	431a      	orrs	r2, r3
 800157c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001580:	440b      	add	r3, r1
 8001582:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	461a      	mov	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f80b 	bl	80015a8 <ETH_MACAddressConfig>
}
 8001592:	bf00      	nop
 8001594:	37c0      	adds	r7, #192	; 0xc0
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	ff20810f 	.word	0xff20810f
 80015a0:	f8de3f23 	.word	0xf8de3f23
 80015a4:	00010040 	.word	0x00010040

080015a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3305      	adds	r3, #5
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	3204      	adds	r2, #4
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <ETH_MACAddressConfig+0x68>)
 80015ca:	4413      	add	r3, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3303      	adds	r3, #3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	061a      	lsls	r2, r3, #24
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3302      	adds	r3, #2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3301      	adds	r3, #1
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	4313      	orrs	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <ETH_MACAddressConfig+0x6c>)
 80015fa:	4413      	add	r3, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40028040 	.word	0x40028040
 8001614:	40028044 	.word	0x40028044

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e175      	b.n	8001924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001638:	2201      	movs	r2, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8164 	bne.w	800191e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x4e>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b12      	cmp	r3, #18
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0203 	and.w	r2, r3, #3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d00b      	beq.n	8001702 <HAL_GPIO_Init+0xea>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f6:	2b11      	cmp	r3, #17
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b12      	cmp	r3, #18
 8001700:	d130      	bne.n	8001764 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 0201 	and.w	r2, r3, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80be 	beq.w	800191e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_GPIO_Init+0x320>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a64      	ldr	r2, [pc, #400]	; (8001938 <HAL_GPIO_Init+0x320>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_GPIO_Init+0x320>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ba:	4a60      	ldr	r2, [pc, #384]	; (800193c <HAL_GPIO_Init+0x324>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a57      	ldr	r2, [pc, #348]	; (8001940 <HAL_GPIO_Init+0x328>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d037      	beq.n	8001856 <HAL_GPIO_Init+0x23e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a56      	ldr	r2, [pc, #344]	; (8001944 <HAL_GPIO_Init+0x32c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_GPIO_Init+0x23a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a55      	ldr	r2, [pc, #340]	; (8001948 <HAL_GPIO_Init+0x330>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d02b      	beq.n	800184e <HAL_GPIO_Init+0x236>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x334>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x232>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a53      	ldr	r2, [pc, #332]	; (8001950 <HAL_GPIO_Init+0x338>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x22e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_GPIO_Init+0x33c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x22a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a51      	ldr	r2, [pc, #324]	; (8001958 <HAL_GPIO_Init+0x340>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x226>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a50      	ldr	r2, [pc, #320]	; (800195c <HAL_GPIO_Init+0x344>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x222>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_GPIO_Init+0x348>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_GPIO_Init+0x34c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x21a>
 800182e:	2309      	movs	r3, #9
 8001830:	e012      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001832:	230a      	movs	r3, #10
 8001834:	e010      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001836:	2308      	movs	r3, #8
 8001838:	e00e      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800183a:	2307      	movs	r3, #7
 800183c:	e00c      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800183e:	2306      	movs	r3, #6
 8001840:	e00a      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001846:	2304      	movs	r3, #4
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x240>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x240>
 8001856:	2300      	movs	r3, #0
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f002 0203 	and.w	r2, r2, #3
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001868:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_GPIO_Init+0x324>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_GPIO_Init+0x350>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189a:	4a33      	ldr	r2, [pc, #204]	; (8001968 <HAL_GPIO_Init+0x350>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ee:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_GPIO_Init+0x350>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <HAL_GPIO_Init+0x350>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b0f      	cmp	r3, #15
 8001928:	f67f ae86 	bls.w	8001638 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800192c:	bf00      	nop
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40023800 	.word	0x40023800
 800193c:	40013800 	.word	0x40013800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020400 	.word	0x40020400
 8001948:	40020800 	.word	0x40020800
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40021000 	.word	0x40021000
 8001954:	40021400 	.word	0x40021400
 8001958:	40021800 	.word	0x40021800
 800195c:	40021c00 	.word	0x40021c00
 8001960:	40022000 	.word	0x40022000
 8001964:	40022400 	.word	0x40022400
 8001968:	40013c00 	.word	0x40013c00

0800196c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f007 fa58 	bl	8008e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2224      	movs	r2, #36	; 0x24
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d104      	bne.n	8001a06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_I2C_Init+0x11c>)
 8001a12:	430b      	orrs	r3, r1
 8001a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	ea42 0103 	orr.w	r1, r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	021a      	lsls	r2, r3, #8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69d9      	ldr	r1, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	02008000 	.word	0x02008000

08001a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d138      	bne.n	8001b14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e032      	b.n	8001b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ade:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d139      	bne.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e033      	b.n	8001bae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2224      	movs	r2, #36	; 0x24
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e038      	b.n	8001c3e <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001bd4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f245 5255 	movw	r2, #21845	; 0x5555
 8001bde:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6852      	ldr	r2, [r2, #4]
 8001be8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6892      	ldr	r2, [r2, #8]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001bf4:	f7fe fcf2 	bl	80005dc <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001bfa:	e008      	b.n	8001c0e <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001bfc:	f7fe fcee 	bl	80005dc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b30      	cmp	r3, #48	; 0x30
 8001c08:	d901      	bls.n	8001c0e <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e017      	b.n	8001c3e <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f1      	bne.n	8001bfc <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d005      	beq.n	8001c32 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68d2      	ldr	r2, [r2, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	e004      	b.n	8001c3c <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc Pointer to the MMC handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e01d      	b.n	8001c94 <HAL_MMC_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f007 fa4a 	bl	8009104 <HAL_MMC_MspInit>
#endif	
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2203      	movs	r2, #3
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_MMC_InitCard(hmmc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f80f 	bl	8001c9c <HAL_MMC_InitCard>

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8001c9c:	b5b0      	push	{r4, r5, r7, lr}
 8001c9e:	b08e      	sub	sp, #56	; 0x38
 8001ca0:	af04      	add	r7, sp, #16
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  MMC_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8001cbc:	2376      	movs	r3, #118	; 0x76
 8001cbe:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hmmc->Instance, Init);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681d      	ldr	r5, [r3, #0]
 8001cc4:	466c      	mov	r4, sp
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cd2:	f107 030c 	add.w	r3, r7, #12
 8001cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f004 fe8d 	bl	80069f8 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cec:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hmmc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 feac 	bl	8006a50 <SDMMC_PowerState_ON>
  
  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d06:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f7fe fc73 	bl	80005f4 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fbd4 	bl	80024bc <MMC_PowerON>
 8001d14:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00b      	beq.n	8001d34 <HAL_MMC_InitCard+0x98>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e013      	b.n	8001d5c <HAL_MMC_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fb05 	bl	8002344 <MMC_InitCard>
 8001d3a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_MMC_InitCard+0xbe>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_MMC_InitCard+0xc0>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}

08001d64 <HAL_MMC_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_MMC_CardInfoTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hmmc->CSD[0] & 0xFF000000U) >> 24;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	0e1b      	lsrs	r3, r3, #24
 8001d78:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hmmc->CSD[0] & 0x00FF0000) >> 16;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hmmc->CSD[0] & 0x0000FF00) >> 8;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hmmc->CSD[0] & 0x000000FF;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hmmc->CSD[1] & 0xFF000000U) >> 24;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001de0:	0e1b      	lsrs	r3, r3, #24
 8001de2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hmmc->CSD[1] & 0x00FF0000U) >> 16;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	88db      	ldrh	r3, [r3, #6]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hmmc->CSD[1] & 0x0000FF00U) >> 8;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	09db      	lsrs	r3, r3, #7
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	735a      	strb	r2, [r3, #13]
  
  pCSD->DeviceSize = (tmp & 0x03) << 10;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	611a      	str	r2, [r3, #16]
  
  /* Byte 7 */
  tmp = (uint8_t)(hmmc->CSD[1] & 0x000000FFU);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSize |= (tmp) << 2;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	611a      	str	r2, [r3, #16]
  
  /* Byte 8 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0xFF000000U) >> 24);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e98:	0e1b      	lsrs	r3, r3, #24
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	611a      	str	r2, [r3, #16]
  
  pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	751a      	strb	r2, [r3, #20]
  pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	755a      	strb	r2, [r3, #21]
  
  /* Byte 9 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0x00FF0000U) >> 16);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed2:	0c1b      	lsrs	r3, r3, #16
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	759a      	strb	r2, [r3, #22]
  pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	75da      	strb	r2, [r3, #23]
  pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f003 0306 	and.w	r3, r3, #6
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	761a      	strb	r2, [r3, #24]
  /* Byte 10 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0x0000FF00U) >> 8);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7e1b      	ldrb	r3, [r3, #24]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	09db      	lsrs	r3, r3, #7
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	761a      	strb	r2, [r3, #24]
  
  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	7e1b      	ldrb	r3, [r3, #24]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3302      	adds	r3, #2
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f48:	fb02 f203 	mul.w	r2, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	7a1b      	ldrb	r3, [r3, #8]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	4093      	lsls	r3, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
  
  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512); 
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f6a:	0a52      	lsrs	r2, r2, #9
 8001f6c:	fb02 f203 	mul.w	r2, r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hmmc->CSD[2] & 0x000000FF);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	7e9b      	ldrb	r3, [r3, #26]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	09db      	lsrs	r3, r3, #7
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0xFF000000U) >> 24);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd2:	0e1b      	lsrs	r3, r3, #24
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	09db      	lsrs	r3, r3, #7
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	b2da      	uxtb	r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f003 030c 	and.w	r3, r3, #12
 8002014:	b2da      	uxtb	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0x00FF0000) >> 16);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201e:	0c1b      	lsrs	r3, r3, #16
 8002020:	b2db      	uxtb	r3, r3
 8002022:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	7fdb      	ldrb	r3, [r3, #31]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0x0000FF00) >> 8);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	b2db      	uxtb	r3, r3
 8002070:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	09db      	lsrs	r3, r3, #7
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	b2da      	uxtb	r2, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	099b      	lsrs	r3, r3, #6
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	b2da      	uxtb	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hmmc->CSD[3] & 0x000000FF);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b090      	sub	sp, #64	; 0x40
 8002110:	af04      	add	r7, sp, #16
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t response = 0, busy = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
	
	/* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
	
  /* Chnage Satte */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Update Clock for Bus mode update */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  Init.BusWide             = WideMode;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002142:	2376      	movs	r3, #118	; 0x76
 8002144:	61fb      	str	r3, [r7, #28]
  /* Initialize SDMMC*/
  SDMMC_Init(hmmc->Instance, Init); 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681d      	ldr	r5, [r3, #0]
 800214a:	466c      	mov	r4, sp
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800215e:	4628      	mov	r0, r5
 8002160:	f004 fc4a 	bl	80069f8 <SDMMC_Init>
    
  if(WideMode == SDMMC_BUS_WIDE_8B)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216a:	d110      	bne.n	800218e <HAL_MMC_ConfigWideBusOperation+0x82>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4971      	ldr	r1, [pc, #452]	; (8002338 <HAL_MMC_ConfigWideBusOperation+0x22c>)
 8002172:	4618      	mov	r0, r3
 8002174:	f004 fdc2 	bl	8006cfc <SDMMC_CmdSwitch>
 8002178:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	2b00      	cmp	r3, #0
 800217e:	d06b      	beq.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
 800218c:	e064      	b.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else if(WideMode == SDMMC_BUS_WIDE_4B)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002194:	d110      	bne.n	80021b8 <HAL_MMC_ConfigWideBusOperation+0xac>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4968      	ldr	r1, [pc, #416]	; (800233c <HAL_MMC_ConfigWideBusOperation+0x230>)
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fdad 	bl	8006cfc <SDMMC_CmdSwitch>
 80021a2:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d056      	beq.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
 80021b6:	e04f      	b.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else if(WideMode == SDMMC_BUS_WIDE_1B)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d110      	bne.n	80021e0 <HAL_MMC_ConfigWideBusOperation+0xd4>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	495f      	ldr	r1, [pc, #380]	; (8002340 <HAL_MMC_ConfigWideBusOperation+0x234>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 fd99 	bl	8006cfc <SDMMC_CmdSwitch>
 80021ca:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d042      	beq.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
 80021de:	e03b      	b.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else
  {
    /* WideMode is not a valid argument*/
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check for switch error and violation of the trial number of sending CMD 13 */
  while(busy == 0)
 80021ec:	e034      	b.n	8002258 <HAL_MMC_ConfigWideBusOperation+0x14c>
  {
    if(count++ == SDMMC_MAX_TRIAL)
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	623a      	str	r2, [r7, #32]
 80021f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d10b      	bne.n	8002214 <HAL_MMC_ConfigWideBusOperation+0x108>
    {
      hmmc->State = HAL_MMC_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e08c      	b.n	800232e <HAL_MMC_ConfigWideBusOperation+0x222>
    }
    
    /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
    errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f004 fd26 	bl	8006c72 <SDMMC_CmdSendStatus>
 8002226:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_MMC_ConfigWideBusOperation+0x12e>
    {
      hmmc->ErrorCode |= errorstate;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f004 fc58 	bl	8006af6 <SDMMC_GetResponse>
 8002246:	62f8      	str	r0, [r7, #44]	; 0x2c
    
    /* Get operating voltage*/
    busy = (((response >> 7) == 1) ? 0 : 1);
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	09db      	lsrs	r3, r3, #7
 800224c:	2b01      	cmp	r3, #1
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  while(busy == 0)
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0c7      	beq.n	80021ee <HAL_MMC_ConfigWideBusOperation+0xe2>
  }
      
  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  count = SDMMC_DATATIMEOUT;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002262:	623b      	str	r3, [r7, #32]
  while((response & 0x00000100) == 0)
 8002264:	e02a      	b.n	80022bc <HAL_MMC_ConfigWideBusOperation+0x1b0>
  {
    if(count-- == 0)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	623a      	str	r2, [r7, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_MMC_ConfigWideBusOperation+0x17c>
    {
      hmmc->State = HAL_MMC_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e052      	b.n	800232e <HAL_MMC_ConfigWideBusOperation+0x222>
    }
    
    /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
    errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f004 fcec 	bl	8006c72 <SDMMC_CmdSendStatus>
 800229a:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_MMC_ConfigWideBusOperation+0x1a2>
    {
      hmmc->ErrorCode |= errorstate;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 fc1e 	bl	8006af6 <SDMMC_GetResponse>
 80022ba:	62f8      	str	r0, [r7, #44]	; 0x2c
  while((response & 0x00000100) == 0)
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0cf      	beq.n	8002266 <HAL_MMC_ConfigWideBusOperation+0x15a>
  }
  
  if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_MMC_ConfigWideBusOperation+0x1d8>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e024      	b.n	800232e <HAL_MMC_ConfigWideBusOperation+0x222>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hmmc->Init.ClockEdge;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hmmc->Init.ClockBypass;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hmmc->Init.ClockPowerSave;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hmmc->Init.HardwareFlowControl;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hmmc->Init.ClockDiv;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	61fb      	str	r3, [r7, #28]
    SDMMC_Init(hmmc->Instance, Init);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681d      	ldr	r5, [r3, #0]
 800230a:	466c      	mov	r4, sp
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231e:	4628      	mov	r0, r5
 8002320:	f004 fb6a 	bl	80069f8 <SDMMC_Init>
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3730      	adds	r7, #48	; 0x30
 8002332:	46bd      	mov	sp, r7
 8002334:	bdb0      	pop	{r4, r5, r7, pc}
 8002336:	bf00      	nop
 8002338:	03b70200 	.word	0x03b70200
 800233c:	03b70100 	.word	0x03b70100
 8002340:	03b70000 	.word	0x03b70000

08002344 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b094      	sub	sp, #80	; 0x50
 8002348:	af04      	add	r7, sp, #16
 800234a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 800234c:	2300      	movs	r3, #0
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t mmc_rca = 1;
 8002350:	2301      	movs	r3, #1
 8002352:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0) 
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f004 fb87 	bl	8006a6c <SDMMC_GetPowerState>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <MMC_InitCard+0x26>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002364:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002368:	e0a4      	b.n	80024b4 <MMC_InitCard+0x170>
  }
  
  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fc1b 	bl	8006baa <SDMMC_CmdSendCID>
 8002374:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MMC_InitCard+0x3c>
  {
    return errorstate;
 800237c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237e:	e099      	b.n	80024b4 <MMC_InitCard+0x170>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fbb5 	bl	8006af6 <SDMMC_GetResponse>
 800238c:	4602      	mov	r2, r0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2104      	movs	r1, #4
 8002398:	4618      	mov	r0, r3
 800239a:	f004 fbac 	bl	8006af6 <SDMMC_GetResponse>
 800239e:	4602      	mov	r2, r0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2108      	movs	r1, #8
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 fba3 	bl	8006af6 <SDMMC_GetResponse>
 80023b0:	4602      	mov	r2, r0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	210c      	movs	r1, #12
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 fb9a 	bl	8006af6 <SDMMC_GetResponse>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	67da      	str	r2, [r3, #124]	; 0x7c
  }
  
  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f107 020e 	add.w	r2, r7, #14
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fc2a 	bl	8006c2c <SDMMC_CmdSetRelAdd>
 80023d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MMC_InitCard+0xa0>
  {
    return errorstate;
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	e067      	b.n	80024b4 <MMC_InitCard+0x170>
  }
  
  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f004 fbf6 	bl	8006bea <SDMMC_CmdSendCSD>
 80023fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MMC_InitCard+0xc6>
  {
    return errorstate;
 8002406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002408:	e054      	b.n	80024b4 <MMC_InitCard+0x170>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fb70 	bl	8006af6 <SDMMC_GetResponse>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2104      	movs	r1, #4
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fb67 	bl	8006af6 <SDMMC_GetResponse>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2108      	movs	r1, #8
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fb5e 	bl	8006af6 <SDMMC_GetResponse>
 800243a:	4602      	mov	r2, r0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	210c      	movs	r1, #12
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fb55 	bl	8006af6 <SDMMC_GetResponse>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  
  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2104      	movs	r1, #4
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fb4c 	bl	8006af6 <SDMMC_GetResponse>
 800245e:	4603      	mov	r3, r0
 8002460:	0d1a      	lsrs	r2, r3, #20
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get CSD parameters */
  HAL_MMC_GetCardCSD(hmmc, &CSD);
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fc79 	bl	8001d64 <HAL_MMC_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	f04f 0400 	mov.w	r4, #0
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	4608      	mov	r0, r1
 8002486:	f004 fb4b 	bl	8006b20 <SDMMC_CmdSelDesel>
 800248a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800248c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MMC_InitCard+0x152>
  {
    return errorstate;
 8002492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002494:	e00e      	b.n	80024b4 <MMC_InitCard+0x170>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hmmc->Instance, hmmc->Init);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681d      	ldr	r5, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	466c      	mov	r4, sp
 800249e:	f103 0210 	add.w	r2, r3, #16
 80024a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024a8:	3304      	adds	r3, #4
 80024aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ac:	4628      	mov	r0, r5
 80024ae:	f004 faa3 	bl	80069f8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3740      	adds	r7, #64	; 0x40
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bdb0      	pop	{r4, r5, r7, pc}

080024bc <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 fb46 	bl	8006b6a <SDMMC_CmdGoIdleState>
 80024de:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d027      	beq.n	8002536 <MMC_PowerON+0x7a>
  {
    return errorstate;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	e036      	b.n	8002558 <MMC_PowerON+0x9c>
  }
  
  while(validvoltage == 0)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d102      	bne.n	80024fe <MMC_PowerON+0x42>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 80024f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024fc:	e02c      	b.n	8002558 <MMC_PowerON+0x9c>
    }
    
    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4917      	ldr	r1, [pc, #92]	; (8002560 <MMC_PowerON+0xa4>)
 8002504:	4618      	mov	r0, r3
 8002506:	f004 fbd8 	bl	8006cba <SDMMC_CmdOpCondition>
 800250a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <MMC_PowerON+0x5c>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002516:	e01f      	b.n	8002558 <MMC_PowerON+0x9c>
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fae9 	bl	8006af6 <SDMMC_GetResponse>
 8002524:	6178      	str	r0, [r7, #20]
    
    /* Get operating voltage*/
    validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	0fdb      	lsrs	r3, r3, #31
 800252a:	2b01      	cmp	r3, #1
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0d6      	beq.n	80024ea <MMC_PowerON+0x2e>
  }
  
  /* When power routine is finished and command returns valid voltage */
  if ((response & MMC_HIGH_VOLTAGE_RANGE) == MMC_HIGH_VOLTAGE_RANGE)
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MMC_PowerON+0xa8>)
 8002540:	4013      	ands	r3, r2
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <MMC_PowerON+0xa8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <MMC_PowerON+0x94>
  {
    /* When voltage range of the card is within 2.7V and 3.6V */
    hmmc->MmcCard.CardType = MMC_HIGH_VOLTAGE_CARD;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
 800254e:	e002      	b.n	8002556 <MMC_PowerON+0x9a>
  }
  else
  {
    /* When voltage range of the card is within 1.65V and 1.95V or 2.7V and 3.6V */
    hmmc->MmcCard.CardType = MMC_DUAL_VOLTAGE_CARD;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  return HAL_MMC_ERROR_NONE;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	c0ff8000 	.word	0xc0ff8000
 8002564:	80ff8000 	.word	0x80ff8000

08002568 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	b08f      	sub	sp, #60	; 0x3c
 800256c:	af0a      	add	r7, sp, #40	; 0x28
 800256e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e10a      	b.n	8002790 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f007 f8d4 	bl	800973c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 febb 	bl	800731c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	687e      	ldr	r6, [r7, #4]
 80025ae:	466d      	mov	r5, sp
 80025b0:	f106 0410 	add.w	r4, r6, #16
 80025b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c4:	1d33      	adds	r3, r6, #4
 80025c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c8:	6838      	ldr	r0, [r7, #0]
 80025ca:	f004 fdad 	bl	8007128 <USB_CoreInit>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0d7      	b.n	8002790 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fea9 	bl	800733e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e04a      	b.n	8002688 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	333d      	adds	r3, #61	; 0x3d
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	333c      	adds	r3, #60	; 0x3c
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	b298      	uxth	r0, r3
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3342      	adds	r3, #66	; 0x42
 800262e:	4602      	mov	r2, r0
 8002630:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	333f      	adds	r3, #63	; 0x3f
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3344      	adds	r3, #68	; 0x44
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	3348      	adds	r3, #72	; 0x48
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3350      	adds	r3, #80	; 0x50
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3301      	adds	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3af      	bcc.n	80025f2 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e044      	b.n	8002722 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	3301      	adds	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d3b5      	bcc.n	8002698 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	687e      	ldr	r6, [r7, #4]
 8002734:	466d      	mov	r5, sp
 8002736:	f106 0410 	add.w	r4, r6, #16
 800273a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002746:	e885 0003 	stmia.w	r5, {r0, r1}
 800274a:	1d33      	adds	r3, r6, #4
 800274c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f004 fe20 	bl	8007394 <USB_DevInit>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e014      	b.n	8002790 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b01      	cmp	r3, #1
 800277c:	d102      	bne.n	8002784 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fe4a 	bl	8003418 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f005 f863 	bl	8007854 <USB_DevDisconnect>

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002798 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b08d      	sub	sp, #52	; 0x34
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f005 f8f9 	bl	80079aa <USB_GetMode>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 83bd 	bne.w	8002f3a <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f005 f85d 	bl	8007884 <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 83b3 	beq.w	8002f38 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f005 f854 	bl	8007884 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f002 0202 	and.w	r2, r2, #2
 80027f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f005 f842 	bl	8007884 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002806:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800280a:	d17b      	bne.n	8002904 <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f005 f848 	bl	80078aa <USB_ReadDevAllOutEpInterrupt>
 800281a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800281c:	e06f      	b.n	80028fe <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d064      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f005 f86d 	bl	8007912 <USB_ReadDevOutEPInterrupt>
 8002838:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00c      	beq.n	800285e <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	2301      	movs	r3, #1
 8002854:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fc75 	bl	8003148 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fd74 	bl	8003358 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287c:	461a      	mov	r2, r3
 800287e:	2308      	movs	r3, #8
 8002880:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	461a      	mov	r2, r3
 800289a:	2310      	movs	r3, #16
 800289c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d108      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028ba:	461a      	mov	r2, r3
 80028bc:	2101      	movs	r1, #1
 80028be:	f005 f8b9 	bl	8007a34 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	461a      	mov	r2, r3
 80028d0:	2320      	movs	r3, #32
 80028d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ea:	461a      	mov	r2, r3
 80028ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d18c      	bne.n	800281e <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f004 ffbb 	bl	8007884 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002918:	f040 80c4 	bne.w	8002aa4 <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 ffdc 	bl	80078de <USB_ReadDevAllInEpInterrupt>
 8002926:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800292c:	e0b6      	b.n	8002a9c <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80ab 	beq.w	8002a90 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f005 f802 	bl	800794e <USB_ReadDevInEPInterrupt>
 800294a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d05b      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	2201      	movs	r2, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	43db      	mvns	r3, r3
 8002970:	69f9      	ldr	r1, [r7, #28]
 8002972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002976:	4013      	ands	r3, r2
 8002978:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	461a      	mov	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d11b      	bne.n	80029cc <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3348      	adds	r3, #72	; 0x48
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4403      	add	r3, r0
 80029b4:	3344      	adds	r3, #68	; 0x44
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4419      	add	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4403      	add	r3, r0
 80029c8:	3348      	adds	r3, #72	; 0x48
 80029ca:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fac0 	bl	8002f58 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d116      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x276>
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3350      	adds	r3, #80	; 0x50
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a06:	461a      	mov	r2, r3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f005 f813 	bl	8007a34 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a24:	461a      	mov	r2, r3
 8002a26:	2308      	movs	r3, #8
 8002a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a40:	461a      	mov	r2, r3
 8002a42:	2310      	movs	r3, #16
 8002a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2340      	movs	r3, #64	; 0x40
 8002a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 face 	bl	800302c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	3301      	adds	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f47f af45 	bne.w	800292e <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 feeb 	bl	8007884 <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab8:	d122      	bne.n	8002b00 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d108      	bne.n	8002aea <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fcbc 	bl	8003460 <HAL_PCDEx_LPM_Callback>
 8002ae8:	e002      	b.n	8002af0 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa68 	bl	8002fc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f004 febd 	bl	8007884 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b14:	d112      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fa40 	bl	8002fac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b3a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fe9f 	bl	8007884 <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b50:	d121      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002b60:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d111      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	f003 020f 	and.w	r2, r3, #15
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b86:	2101      	movs	r1, #1
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fc69 	bl	8003460 <HAL_PCDEx_LPM_Callback>
 8002b8e:	e002      	b.n	8002b96 <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa0b 	bl	8002fac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fe72 	bl	8007884 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	f040 80a7 	bne.w	8002cfc <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 fd5f 	bl	800768c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd2:	e036      	b.n	8002c42 <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be0:	461a      	mov	r2, r3
 8002be2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002be6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf8:	0151      	lsls	r1, r2, #5
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	440a      	add	r2, r1
 8002bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2c:	0151      	lsls	r1, r2, #5
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	440a      	add	r2, r1
 8002c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	3301      	adds	r3, #1
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3c3      	bcc.n	8002bd4 <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d016      	beq.n	8002c96 <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c78:	f043 030b 	orr.w	r3, r3, #11
 8002c7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8e:	f043 030b 	orr.w	r3, r3, #11
 8002c92:	6453      	str	r3, [r2, #68]	; 0x44
 8002c94:	e015      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f242 032b 	movw	r3, #8235	; 0x202b
 8002caa:	4313      	orrs	r3, r2
 8002cac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cbc:	f043 030b 	orr.w	r3, r3, #11
 8002cc0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cd4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f004 fea4 	bl	8007a34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 fdbf 	bl	8007884 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	d12a      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 fe56 	bl	80079c8 <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 fd14 	bl	800774e <USB_GetDevSpeed>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e002      	b.n	8002d3a <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2203      	movs	r2, #3
 8002d38:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681c      	ldr	r4, [r3, #0]
 8002d3e:	f001 f887 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8002d42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f004 fa43 	bl	80071d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f920 	bl	8002f98 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fd89 	bl	8007884 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d161      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0210 	bic.w	r2, r2, #16
 8002d8a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	0c5b      	lsrs	r3, r3, #17
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d124      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d035      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6a38      	ldr	r0, [r7, #32]
 8002dd8:	f004 fd13 	bl	8007802 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	619a      	str	r2, [r3, #24]
 8002e00:	e016      	b.n	8002e30 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	0c5b      	lsrs	r3, r3, #17
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d110      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e14:	2208      	movs	r2, #8
 8002e16:	4619      	mov	r1, r3
 8002e18:	6a38      	ldr	r0, [r7, #32]
 8002e1a:	f004 fcf2 	bl	8007802 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	441a      	add	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0210 	orr.w	r2, r2, #16
 8002e3e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f004 fd1d 	bl	8007884 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d10a      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f895 	bl	8002f84 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f002 0208 	and.w	r2, r2, #8
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fd08 	bl	8007884 <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7e:	d10d      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f8b0 	bl	8002fec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fcef 	bl	8007884 <USB_ReadInterrupts>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb0:	d10d      	bne.n	8002ece <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f88b 	bl	8002fd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fcd6 	bl	8007884 <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d10a      	bne.n	8002efa <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f88d 	bl	8003004 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 fcc0 	bl	8007884 <USB_ReadInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d115      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f879 	bl	8003018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e000      	b.n	8002f3a <HAL_PCD_IRQHandler+0x7a2>
      return;
 8002f38:	bf00      	nop
    }
  }
}
 8002f3a:	3734      	adds	r7, #52	; 0x34
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	3338      	adds	r3, #56	; 0x38
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4413      	add	r3, r2
 8003050:	3304      	adds	r3, #4
 8003052:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	d901      	bls.n	8003064 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e06c      	b.n	800313e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	429a      	cmp	r2, r3
 8003078:	d902      	bls.n	8003080 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3303      	adds	r3, #3
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003088:	e02b      	b.n	80030e2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d902      	bls.n	80030a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3303      	adds	r3, #3
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4603      	mov	r3, r0
 80030c4:	6978      	ldr	r0, [r7, #20]
 80030c6:	f004 fb67 	bl	8007798 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	441a      	add	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	441a      	add	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d809      	bhi.n	800310c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003100:	429a      	cmp	r2, r3
 8003102:	d203      	bcs.n	800310c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1be      	bne.n	800308a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	429a      	cmp	r2, r3
 8003116:	d811      	bhi.n	800313c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	2201      	movs	r2, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	43db      	mvns	r3, r3
 8003132:	6939      	ldr	r1, [r7, #16]
 8003134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003138:	4013      	ands	r3, r2
 800313a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	333c      	adds	r3, #60	; 0x3c
 8003160:	3304      	adds	r3, #4
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b01      	cmp	r3, #1
 800317c:	f040 80b3 	bne.w	80032e6 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d028      	beq.n	80031dc <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a70      	ldr	r2, [pc, #448]	; (8003350 <PCD_EP_OutXfrComplete_int+0x208>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d90e      	bls.n	80031b0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003198:	2b00      	cmp	r3, #0
 800319a:	d009      	beq.n	80031b0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	461a      	mov	r2, r3
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fedd 	bl	8002f70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f004 fc36 	bl	8007a34 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	461a      	mov	r2, r3
 80031d6:	2308      	movs	r3, #8
 80031d8:	6093      	str	r3, [r2, #8]
 80031da:	e0b3      	b.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	2320      	movs	r3, #32
 80031f6:	6093      	str	r3, [r2, #8]
 80031f8:	e0a4      	b.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 809f 	bne.w	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a51      	ldr	r2, [pc, #324]	; (8003350 <PCD_EP_OutXfrComplete_int+0x208>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d90f      	bls.n	800322e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	6093      	str	r3, [r2, #8]
 800322c:	e08a      	b.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003240:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	0159      	lsls	r1, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	440b      	add	r3, r1
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003254:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4403      	add	r3, r0
 8003264:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003268:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800327c:	6819      	ldr	r1, [r3, #0]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4403      	add	r3, r0
 800328c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4419      	add	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4403      	add	r3, r0
 80032a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032a6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fe46 	bl	8002f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d144      	bne.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d138      	bne.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032dc:	461a      	mov	r2, r3
 80032de:	2101      	movs	r1, #1
 80032e0:	f004 fba8 	bl	8007a34 <USB_EP0_OutStart>
 80032e4:	e02e      	b.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <PCD_EP_OutXfrComplete_int+0x20c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d124      	bne.n	8003338 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003304:	461a      	mov	r2, r3
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	6093      	str	r3, [r2, #8]
 800330c:	e01a      	b.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	2320      	movs	r3, #32
 8003328:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4619      	mov	r1, r3
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fe05 	bl	8002f40 <HAL_PCD_DataOutStageCallback>
 8003336:	e005      	b.n	8003344 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fdfe 	bl	8002f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	4f54300a 	.word	0x4f54300a
 8003354:	4f54310a 	.word	0x4f54310a

08003358 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	333c      	adds	r3, #60	; 0x3c
 8003370:	3304      	adds	r3, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d113      	bne.n	80033b6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d922      	bls.n	80033dc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01d      	beq.n	80033dc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ac:	461a      	mov	r2, r3
 80033ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b2:	6093      	str	r3, [r2, #8]
 80033b4:	e012      	b.n	80033dc <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <PCD_EP_OutSetupPacket_int+0xbc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10e      	bne.n	80033dc <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	461a      	mov	r2, r3
 80033d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fdc7 	bl	8002f70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <PCD_EP_OutSetupPacket_int+0xb8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d90c      	bls.n	8003404 <PCD_EP_OutSetupPacket_int+0xac>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d108      	bne.n	8003404 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033fc:	461a      	mov	r2, r3
 80033fe:	2101      	movs	r1, #1
 8003400:	f004 fb18 	bl	8007a34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	4f54300a 	.word	0x4f54300a
 8003414:	4f54310a 	.word	0x4f54310a

08003418 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_PCDEx_ActivateLPM+0x44>)
 8003448:	4313      	orrs	r3, r2
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	10000003 	.word	0x10000003

08003460 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a04      	ldr	r2, [pc, #16]	; (8003494 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40007000 	.word	0x40007000

08003498 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7fd f89a 	bl	80005dc <HAL_GetTick>
 80034a8:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e073      	b.n	800359c <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_QSPI_Init+0x2c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e06b      	b.n	800359c <HAL_QSPI_Init+0x104>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f005 fd45 	bl	8008f70 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80034e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f85e 	bl	80035ac <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	3b01      	subs	r3, #1
 8003500:	021a      	lsls	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2200      	movs	r2, #0
 8003514:	2120      	movs	r1, #32
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f856 	bl	80035c8 <QSPI_WaitFlagStateUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d135      	bne.n	8003592 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_QSPI_Init+0x10c>)
 800352e:	4013      	ands	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6852      	ldr	r2, [r2, #4]
 8003534:	0611      	lsls	r1, r2, #24
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	69d2      	ldr	r2, [r2, #28]
 8003540:	4311      	orrs	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a12      	ldr	r2, [r2, #32]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_QSPI_Init+0x110>)
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6912      	ldr	r2, [r2, #16]
 800355e:	0411      	lsls	r1, r2, #16
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6952      	ldr	r2, [r2, #20]
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6992      	ldr	r2, [r2, #24]
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	430b      	orrs	r3, r1
 8003572:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	00ffff2f 	.word	0x00ffff2f
 80035a8:	ffe0f8fe 	.word	0xffe0f8fe

080035ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	649a      	str	r2, [r3, #72]	; 0x48
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80035d8:	e01a      	b.n	8003610 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e0:	d016      	beq.n	8003610 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80035e8:	f7fc fff8 	bl	80005dc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d20b      	bcs.n	8003610 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2204      	movs	r2, #4
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f043 0201 	orr.w	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e00e      	b.n	800362e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d1d6      	bne.n	80035da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003640:	2300      	movs	r3, #0
 8003642:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e25e      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8087 	beq.w	800376a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800365c:	4b96      	ldr	r3, [pc, #600]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b04      	cmp	r3, #4
 8003666:	d00c      	beq.n	8003682 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003668:	4b93      	ldr	r3, [pc, #588]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	d112      	bne.n	800369a <HAL_RCC_OscConfig+0x62>
 8003674:	4b90      	ldr	r3, [pc, #576]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003680:	d10b      	bne.n	800369a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003682:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d06c      	beq.n	8003768 <HAL_RCC_OscConfig+0x130>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d168      	bne.n	8003768 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e238      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x7a>
 80036a4:	4b84      	ldr	r3, [pc, #528]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a83      	ldr	r2, [pc, #524]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e02e      	b.n	8003710 <HAL_RCC_OscConfig+0xd8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x9c>
 80036ba:	4b7f      	ldr	r3, [pc, #508]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7e      	ldr	r2, [pc, #504]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b7c      	ldr	r3, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a7b      	ldr	r2, [pc, #492]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e01d      	b.n	8003710 <HAL_RCC_OscConfig+0xd8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0xc0>
 80036de:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a75      	ldr	r2, [pc, #468]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b73      	ldr	r3, [pc, #460]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a72      	ldr	r2, [pc, #456]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e00b      	b.n	8003710 <HAL_RCC_OscConfig+0xd8>
 80036f8:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6e      	ldr	r2, [pc, #440]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b6c      	ldr	r3, [pc, #432]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a6b      	ldr	r2, [pc, #428]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800370a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fc ff60 	bl	80005dc <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003720:	f7fc ff5c 	bl	80005dc <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1ec      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0xe8>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fc ff4c 	bl	80005dc <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003748:	f7fc ff48 	bl	80005dc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1d8      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x110>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d069      	beq.n	800384a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003776:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d11c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x190>
 800378e:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379a:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x17a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1ac      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b41      	ldr	r3, [pc, #260]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	493d      	ldr	r1, [pc, #244]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	e040      	b.n	800384a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d023      	beq.n	8003818 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d0:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fc fefe 	bl	80005dc <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fc fefa 	bl	80005dc <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e18a      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4929      	ldr	r1, [pc, #164]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
 8003816:	e018      	b.n	800384a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fc feda 	bl	80005dc <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800382c:	f7fc fed6 	bl	80005dc <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e166      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d038      	beq.n	80038c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fc feb7 	bl	80005dc <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003872:	f7fc feb3 	bl	80005dc <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e143      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x23a>
 8003890:	e01a      	b.n	80038c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <HAL_RCC_OscConfig+0x280>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fc fe9d 	bl	80005dc <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fc fe99 	bl	80005dc <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d903      	bls.n	80038bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e129      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
 80038b8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b95      	ldr	r3, [pc, #596]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80038be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ee      	bne.n	80038a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a4 	beq.w	8003a1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d6:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	4a8b      	ldr	r2, [pc, #556]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
 80038ee:	4b89      	ldr	r3, [pc, #548]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038fa:	2301      	movs	r3, #1
 80038fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4b86      	ldr	r3, [pc, #536]	; (8003b18 <HAL_RCC_OscConfig+0x4e0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d118      	bne.n	800393c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800390a:	4b83      	ldr	r3, [pc, #524]	; (8003b18 <HAL_RCC_OscConfig+0x4e0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a82      	ldr	r2, [pc, #520]	; (8003b18 <HAL_RCC_OscConfig+0x4e0>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003916:	f7fc fe61 	bl	80005dc <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fc fe5d 	bl	80005dc <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b64      	cmp	r3, #100	; 0x64
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0ed      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003930:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <HAL_RCC_OscConfig+0x4e0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d106      	bne.n	8003952 <HAL_RCC_OscConfig+0x31a>
 8003944:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	4a72      	ldr	r2, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	6713      	str	r3, [r2, #112]	; 0x70
 8003950:	e02d      	b.n	80039ae <HAL_RCC_OscConfig+0x376>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x33c>
 800395a:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a6d      	ldr	r2, [pc, #436]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
 8003966:	4b6b      	ldr	r3, [pc, #428]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	e01c      	b.n	80039ae <HAL_RCC_OscConfig+0x376>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b05      	cmp	r3, #5
 800397a:	d10c      	bne.n	8003996 <HAL_RCC_OscConfig+0x35e>
 800397c:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a64      	ldr	r2, [pc, #400]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
 8003988:	4b62      	ldr	r3, [pc, #392]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	4a61      	ldr	r2, [pc, #388]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	; 0x70
 8003994:	e00b      	b.n	80039ae <HAL_RCC_OscConfig+0x376>
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a5e      	ldr	r2, [pc, #376]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a5b      	ldr	r2, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d015      	beq.n	80039e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7fc fe11 	bl	80005dc <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fc fe0d 	bl	80005dc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e09b      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0ee      	beq.n	80039be <HAL_RCC_OscConfig+0x386>
 80039e0:	e014      	b.n	8003a0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fc fdfb 	bl	80005dc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	e00a      	b.n	8003a00 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fc fdf7 	bl	80005dc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e085      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a00:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ee      	bne.n	80039ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d071      	beq.n	8003b0a <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d069      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d14b      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a35      	ldr	r2, [pc, #212]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fc fdc9 	bl	80005dc <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fc fdc5 	bl	80005dc <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e055      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a60:	4b2c      	ldr	r3, [pc, #176]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	019b      	lsls	r3, r3, #6
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	071b      	lsls	r3, r3, #28
 8003a98:	491e      	ldr	r1, [pc, #120]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fc fd97 	bl	80005dc <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fc fd93 	bl	80005dc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e023      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x47a>
 8003ad0:	e01b      	b.n	8003b0a <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fc fd7d 	bl	80005dc <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fc fd79 	bl	80005dc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e009      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x4dc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4ae>
 8003b04:	e001      	b.n	8003b0a <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000

08003b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0ce      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b69      	ldr	r3, [pc, #420]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d910      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b66      	ldr	r3, [pc, #408]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4964      	ldr	r1, [pc, #400]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b62      	ldr	r3, [pc, #392]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b6      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d020      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b7c:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b94:	4b52      	ldr	r3, [pc, #328]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a51      	ldr	r2, [pc, #324]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	494c      	ldr	r1, [pc, #304]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d040      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e07d      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e071      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3c      	ldr	r3, [pc, #240]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e069      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4935      	ldr	r1, [pc, #212]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fc fce4 	bl	80005dc <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fc fce0 	bl	80005dc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e051      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d210      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 020f 	bic.w	r2, r3, #15
 8003c56:	4921      	ldr	r1, [pc, #132]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e030      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4915      	ldr	r1, [pc, #84]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490d      	ldr	r1, [pc, #52]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cae:	f000 f81d 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	5cd3      	ldrb	r3, [r2, r3]
 8003cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fc fc42 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023c00 	.word	0x40023c00
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	08009d4c 	.word	0x08009d4c
 8003ce8:	20000008 	.word	0x20000008

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d02:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d007      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x32>
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d008      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x38>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 808d 	bne.w	8003e32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b4b      	ldr	r3, [pc, #300]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d1a:	60bb      	str	r3, [r7, #8]
       break;
 8003d1c:	e08c      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d20:	60bb      	str	r3, [r7, #8]
      break;
 8003d22:	e089      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d2e:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d023      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	ea03 0501 	and.w	r5, r3, r1
 8003d50:	ea04 0602 	and.w	r6, r4, r2
 8003d54:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d56:	fb02 f106 	mul.w	r1, r2, r6
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	fb02 f205 	mul.w	r2, r2, r5
 8003d60:	440a      	add	r2, r1
 8003d62:	493a      	ldr	r1, [pc, #232]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d64:	fba5 0101 	umull	r0, r1, r5, r1
 8003d68:	1853      	adds	r3, r2, r1
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f04f 0400 	mov.w	r4, #0
 8003d72:	461a      	mov	r2, r3
 8003d74:	4623      	mov	r3, r4
 8003d76:	f7fc fa5f 	bl	8000238 <__aeabi_uldivmod>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e049      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	ea03 0501 	and.w	r5, r3, r1
 8003d98:	ea04 0602 	and.w	r6, r4, r2
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4632      	mov	r2, r6
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	0154      	lsls	r4, r2, #5
 8003daa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dae:	014b      	lsls	r3, r1, #5
 8003db0:	4619      	mov	r1, r3
 8003db2:	4622      	mov	r2, r4
 8003db4:	1b49      	subs	r1, r1, r5
 8003db6:	eb62 0206 	sbc.w	r2, r2, r6
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	0194      	lsls	r4, r2, #6
 8003dc4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dc8:	018b      	lsls	r3, r1, #6
 8003dca:	1a5b      	subs	r3, r3, r1
 8003dcc:	eb64 0402 	sbc.w	r4, r4, r2
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	00e2      	lsls	r2, r4, #3
 8003dda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dde:	00d9      	lsls	r1, r3, #3
 8003de0:	460b      	mov	r3, r1
 8003de2:	4614      	mov	r4, r2
 8003de4:	195b      	adds	r3, r3, r5
 8003de6:	eb44 0406 	adc.w	r4, r4, r6
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	02a2      	lsls	r2, r4, #10
 8003df4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003df8:	0299      	lsls	r1, r3, #10
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4621      	mov	r1, r4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f04f 0400 	mov.w	r4, #0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	f7fc fa14 	bl	8000238 <__aeabi_uldivmod>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	3301      	adds	r3, #1
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	60bb      	str	r3, [r7, #8]
      break;
 8003e30:	e002      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e34:	60bb      	str	r3, [r7, #8]
      break;
 8003e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e38:	68bb      	ldr	r3, [r7, #8]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	017d7840 	.word	0x017d7840

08003e50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000008 	.word	0x20000008

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e70:	4601      	mov	r1, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0a9b      	lsrs	r3, r3, #10
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	08009d5c 	.word	0x08009d5c

08003e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e94:	f7ff ffdc 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e98:	4601      	mov	r1, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0b5b      	lsrs	r3, r3, #13
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08009d5c 	.word	0x08009d5c

08003eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d012      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ee0:	4b69      	ldr	r3, [pc, #420]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a68      	ldr	r2, [pc, #416]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eea:	6093      	str	r3, [r2, #8]
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	4964      	ldr	r1, [pc, #400]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d017      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f12:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	4959      	ldr	r1, [pc, #356]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d101      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d017      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f4e:	4b4e      	ldr	r3, [pc, #312]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	494a      	ldr	r1, [pc, #296]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 808b 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f9c:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	4a39      	ldr	r2, [pc, #228]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa8:	4b37      	ldr	r3, [pc, #220]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fc fb0c 	bl	80005dc <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fc fb08 	bl	80005dc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e38d      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fda:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe6:	4b28      	ldr	r3, [pc, #160]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d035      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	429a      	cmp	r2, r3
 8004002:	d02e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004004:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800401a:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004024:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800402c:	4b16      	ldr	r3, [pc, #88]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d114      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fc fad0 	bl	80005dc <HAL_GetTick>
 800403c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fc facc 	bl	80005dc <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e34f      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406e:	d111      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800407e:	400b      	ands	r3, r1
 8004080:	4901      	ldr	r1, [pc, #4]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
 8004086:	e00b      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000
 8004090:	0ffffcff 	.word	0x0ffffcff
 8004094:	4bb3      	ldr	r3, [pc, #716]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4ab2      	ldr	r2, [pc, #712]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800409e:	6093      	str	r3, [r2, #8]
 80040a0:	4bb0      	ldr	r3, [pc, #704]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	49ad      	ldr	r1, [pc, #692]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040be:	4ba9      	ldr	r3, [pc, #676]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c4:	4aa7      	ldr	r2, [pc, #668]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040ce:	4ba5      	ldr	r3, [pc, #660]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	49a2      	ldr	r1, [pc, #648]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ec:	4b9d      	ldr	r3, [pc, #628]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fa:	499a      	ldr	r1, [pc, #616]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800410e:	4b95      	ldr	r3, [pc, #596]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411c:	4991      	ldr	r1, [pc, #580]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004130:	4b8c      	ldr	r3, [pc, #560]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	4989      	ldr	r1, [pc, #548]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004152:	4b84      	ldr	r3, [pc, #528]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4980      	ldr	r1, [pc, #512]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004174:	4b7b      	ldr	r3, [pc, #492]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f023 0203 	bic.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	4978      	ldr	r1, [pc, #480]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004196:	4b73      	ldr	r3, [pc, #460]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f023 020c 	bic.w	r2, r3, #12
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	496f      	ldr	r1, [pc, #444]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b8:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	4967      	ldr	r1, [pc, #412]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041da:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	495e      	ldr	r1, [pc, #376]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041fc:	4b59      	ldr	r3, [pc, #356]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	4956      	ldr	r1, [pc, #344]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800421e:	4b51      	ldr	r3, [pc, #324]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	494d      	ldr	r1, [pc, #308]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004240:	4b48      	ldr	r3, [pc, #288]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	4945      	ldr	r1, [pc, #276]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004262:	4b40      	ldr	r3, [pc, #256]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	493c      	ldr	r1, [pc, #240]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004284:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004292:	4934      	ldr	r1, [pc, #208]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d011      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042a6:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b4:	492b      	ldr	r1, [pc, #172]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	491b      	ldr	r1, [pc, #108]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004308:	4b16      	ldr	r3, [pc, #88]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004318:	4912      	ldr	r1, [pc, #72]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	4909      	ldr	r1, [pc, #36]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00f      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004356:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	4985      	ldr	r1, [pc, #532]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800437c:	4b80      	ldr	r3, [pc, #512]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004382:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438c:	497c      	ldr	r1, [pc, #496]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d005      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043a2:	f040 80d6 	bne.w	8004552 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a6:	4b76      	ldr	r3, [pc, #472]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a75      	ldr	r2, [pc, #468]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b2:	f7fc f913 	bl	80005dc <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ba:	f7fc f90f 	bl	80005dc <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b64      	cmp	r3, #100	; 0x64
 80043c6:	d901      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e194      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043cc:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d021      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11d      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ec:	4b64      	ldr	r3, [pc, #400]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043fa:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004400:	0e1b      	lsrs	r3, r3, #24
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	019a      	lsls	r2, r3, #6
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	071b      	lsls	r3, r3, #28
 8004420:	4957      	ldr	r1, [pc, #348]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004446:	2b00      	cmp	r3, #0
 8004448:	d02e      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004452:	d129      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004454:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004468:	0f1b      	lsrs	r3, r3, #28
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	019a      	lsls	r2, r3, #6
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	071b      	lsls	r3, r3, #28
 8004488:	493d      	ldr	r1, [pc, #244]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004496:	f023 021f 	bic.w	r2, r3, #31
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	3b01      	subs	r3, #1
 80044a0:	4937      	ldr	r1, [pc, #220]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01d      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044b4:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ba:	0e1b      	lsrs	r3, r3, #24
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044c2:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c8:	0f1b      	lsrs	r3, r3, #28
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	019a      	lsls	r2, r3, #6
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	071b      	lsls	r3, r3, #28
 80044e8:	4925      	ldr	r1, [pc, #148]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d011      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	019a      	lsls	r2, r3, #6
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	071b      	lsls	r3, r3, #28
 8004518:	4919      	ldr	r1, [pc, #100]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fc f856 	bl	80005dc <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004534:	f7fc f852 	bl	80005dc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e0d7      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 80cd 	bne.w	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a08      	ldr	r2, [pc, #32]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004566:	f7fc f839 	bl	80005dc <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800456c:	e00a      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800456e:	f7fc f835 	bl	80005dc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b64      	cmp	r3, #100	; 0x64
 800457a:	d903      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0ba      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004584:	4b5e      	ldr	r3, [pc, #376]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004590:	d0ed      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d02e      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d12a      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ba:	4b51      	ldr	r3, [pc, #324]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045c8:	4b4d      	ldr	r3, [pc, #308]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	0f1b      	lsrs	r3, r3, #28
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	019a      	lsls	r2, r3, #6
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	061b      	lsls	r3, r3, #24
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	071b      	lsls	r3, r3, #28
 80045ee:	4944      	ldr	r1, [pc, #272]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045f6:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	493d      	ldr	r1, [pc, #244]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d022      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004624:	d11d      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004626:	4b36      	ldr	r3, [pc, #216]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	0e1b      	lsrs	r3, r3, #24
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004634:	4b32      	ldr	r3, [pc, #200]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	019a      	lsls	r2, r3, #6
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	431a      	orrs	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	071b      	lsls	r3, r3, #28
 800465a:	4929      	ldr	r1, [pc, #164]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d028      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	019a      	lsls	r2, r3, #6
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	041b      	lsls	r3, r3, #16
 8004694:	431a      	orrs	r2, r3
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	061b      	lsls	r3, r3, #24
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	071b      	lsls	r3, r3, #28
 80046a2:	4917      	ldr	r1, [pc, #92]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	4911      	ldr	r1, [pc, #68]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fb ff86 	bl	80005dc <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046d4:	f7fb ff82 	bl	80005dc <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e007      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f2:	d1ef      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800

08004704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004722:	f040 8099 	bne.w	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004726:	4ba0      	ldr	r3, [pc, #640]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004734:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473c:	d045      	beq.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004742:	d802      	bhi.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004748:	e087      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
    switch (saiclocksource)
 800474a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800474e:	d074      	beq.n	800483a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8004750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004754:	d074      	beq.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8004756:	e080      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004758:	4b93      	ldr	r3, [pc, #588]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004764:	4b90      	ldr	r3, [pc, #576]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800476c:	4a8f      	ldr	r2, [pc, #572]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	e007      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004776:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477e:	4a8c      	ldr	r2, [pc, #560]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004786:	4b88      	ldr	r3, [pc, #544]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004794:	4b84      	ldr	r3, [pc, #528]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	fb02 f203 	mul.w	r2, r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047ae:	4b7e      	ldr	r3, [pc, #504]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	617b      	str	r3, [r7, #20]
        break;
 80047c8:	e047      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047ca:	4b77      	ldr	r3, [pc, #476]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047d6:	4b74      	ldr	r3, [pc, #464]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047de:	4a73      	ldr	r2, [pc, #460]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e007      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047e8:	4b6f      	ldr	r3, [pc, #444]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	4a6f      	ldr	r2, [pc, #444]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80047f8:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fe:	0e1b      	lsrs	r3, r3, #24
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004806:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	fb02 f203 	mul.w	r2, r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	617b      	str	r3, [r7, #20]
        break;
 8004838:	e00f      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        frequency = EXTERNAL_CLOCK_VALUE;
 800483a:	4b5e      	ldr	r3, [pc, #376]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800483c:	617b      	str	r3, [r7, #20]
        break;
 800483e:	e00c      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004840:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          frequency = HSI_VALUE;
 800484c:	4b57      	ldr	r3, [pc, #348]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800484e:	617b      	str	r3, [r7, #20]
        break;
 8004850:	e003      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = HSE_VALUE;
 8004852:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004854:	617b      	str	r3, [r7, #20]
        break;
 8004856:	e000      	b.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      }
    }
  }
 8004858:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004860:	f040 8099 	bne.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004864:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004872:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487a:	d045      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800487c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004880:	d802      	bhi.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004886:	e087      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    switch (saiclocksource)
 8004888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800488c:	d074      	beq.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800488e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004892:	d074      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        break;
 8004894:	e080      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004896:	4b44      	ldr	r3, [pc, #272]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d108      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048a2:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048aa:	4a40      	ldr	r2, [pc, #256]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e007      	b.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048bc:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80048c4:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	0e1b      	lsrs	r3, r3, #24
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80048d2:	4b35      	ldr	r3, [pc, #212]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	fb02 f203 	mul.w	r2, r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80048ec:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80048ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	3301      	adds	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]
        break;
 8004906:	e047      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004908:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004914:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	4a23      	ldr	r2, [pc, #140]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	e007      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492e:	4a20      	ldr	r2, [pc, #128]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004944:	4b18      	ldr	r3, [pc, #96]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	fb02 f203 	mul.w	r2, r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800495e:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
        break;
 8004976:	e00f      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800497a:	617b      	str	r3, [r7, #20]
        break;
 800497c:	e00c      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
          frequency = HSI_VALUE;
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800498c:	617b      	str	r3, [r7, #20]
        break;
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = HSE_VALUE;
 8004990:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004992:	617b      	str	r3, [r7, #20]
        break;
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      }
    }
  }
 8004996:	bf00      	nop

  return frequency;
 8004998:	697b      	ldr	r3, [r7, #20]
}
 800499a:	4618      	mov	r0, r3
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	017d7840 	.word	0x017d7840
 80049b4:	00bb8000 	.word	0x00bb8000

080049b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e06b      	b.n	8004aa2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	7f5b      	ldrb	r3, [r3, #29]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f004 fb78 	bl	80090d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	22ca      	movs	r2, #202	; 0xca
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2253      	movs	r2, #83	; 0x53
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fb00 	bl	8004ffc <RTC_EnterInitMode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	22ff      	movs	r2, #255	; 0xff
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e046      	b.n	8004aa2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b23      	ldr	r3, [pc, #140]	; (8004aac <HAL_RTC_Init+0xf4>)
 8004a20:	400b      	ands	r3, r1
 8004a22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	041a      	lsls	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a6e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0208 	bic.w	r2, r2, #8
 8004a7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	22ff      	movs	r2, #255	; 0xff
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	ff8fffbf 	.word	0xff8fffbf

08004ab0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	7f1b      	ldrb	r3, [r3, #28]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_RTC_SetTime+0x1c>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0a8      	b.n	8004c1e <HAL_RTC_SetTime+0x16e>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d126      	bne.n	8004b2c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 faac 	bl	8005054 <RTC_ByteToBcd2>
 8004afc:	4603      	mov	r3, r0
 8004afe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 faa5 	bl	8005054 <RTC_ByteToBcd2>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004b0e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa9d 	bl	8005054 <RTC_ByteToBcd2>
 8004b1a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004b1c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	7b1b      	ldrb	r3, [r3, #12]
 8004b24:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e018      	b.n	8004b5e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b4c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004b52:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	7b1b      	ldrb	r3, [r3, #12]
 8004b58:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	22ca      	movs	r2, #202	; 0xca
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2253      	movs	r2, #83	; 0x53
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fa44 	bl	8004ffc <RTC_EnterInitMode>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	22ff      	movs	r2, #255	; 0xff
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2204      	movs	r2, #4
 8004b86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e045      	b.n	8004c1e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RTC_SetTime+0x178>)
 8004b9a:	400b      	ands	r3, r1
 8004b9c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d111      	bne.n	8004c08 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f9e1 	bl	8004fac <HAL_RTC_WaitForSynchro>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	22ff      	movs	r2, #255	; 0xff
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e00a      	b.n	8004c1e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd90      	pop	{r4, r7, pc}
 8004c26:	bf00      	nop
 8004c28:	007f7f7f 	.word	0x007f7f7f

08004c2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	7f1b      	ldrb	r3, [r3, #28]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_RTC_SetDate+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e092      	b.n	8004d6e <HAL_RTC_SetDate+0x142>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2202      	movs	r2, #2
 8004c52:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10e      	bne.n	8004c78 <HAL_RTC_SetDate+0x4c>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	330a      	adds	r3, #10
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	78db      	ldrb	r3, [r3, #3]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f9e6 	bl	8005054 <RTC_ByteToBcd2>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 f9df 	bl	8005054 <RTC_ByteToBcd2>
 8004c96:	4603      	mov	r3, r0
 8004c98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004c9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	789b      	ldrb	r3, [r3, #2]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 f9d7 	bl	8005054 <RTC_ByteToBcd2>
 8004ca6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004ca8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e00e      	b.n	8004cd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	78db      	ldrb	r3, [r3, #3]
 8004cbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004cc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8004cca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	22ca      	movs	r2, #202	; 0xca
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2253      	movs	r2, #83	; 0x53
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f988 	bl	8004ffc <RTC_EnterInitMode>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e031      	b.n	8004d6e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	6979      	ldr	r1, [r7, #20]
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RTC_SetDate+0x14c>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f939 	bl	8004fac <HAL_RTC_WaitForSynchro>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	22ff      	movs	r2, #255	; 0xff
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e00a      	b.n	8004d6e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	22ff      	movs	r2, #255	; 0xff
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	00ffff3f 	.word	0x00ffff3f

08004d7c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	7f1b      	ldrb	r3, [r3, #28]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_RTC_SetAlarm+0x24>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e101      	b.n	8004fa4 <HAL_RTC_SetAlarm+0x228>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2202      	movs	r2, #2
 8004daa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d137      	bne.n	8004e22 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f942 	bl	8005054 <RTC_ByteToBcd2>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f93b 	bl	8005054 <RTC_ByteToBcd2>
 8004dde:	4603      	mov	r3, r0
 8004de0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004de2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	789b      	ldrb	r3, [r3, #2]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f933 	bl	8005054 <RTC_ByteToBcd2>
 8004dee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004df0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	7b1b      	ldrb	r3, [r3, #12]
 8004df8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004dfa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f925 	bl	8005054 <RTC_ByteToBcd2>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004e0e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004e16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	e023      	b.n	8004e6a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004e42:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8004e48:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	7b1b      	ldrb	r3, [r3, #12]
 8004e4e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004e50:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e58:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004e5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004e60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	22ca      	movs	r2, #202	; 0xca
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2253      	movs	r2, #83	; 0x53
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d13f      	bne.n	8004f10 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e9e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb0:	f7fb fb94 	bl	80005dc <HAL_GetTick>
 8004eb4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004eb6:	e013      	b.n	8004ee0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004eb8:	f7fb fb90 	bl	80005dc <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec6:	d90b      	bls.n	8004ee0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e061      	b.n	8004fa4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0e4      	beq.n	8004eb8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	e03e      	b.n	8004f8e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f1e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f2e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f30:	f7fb fb54 	bl	80005dc <HAL_GetTick>
 8004f34:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004f36:	e013      	b.n	8004f60 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f38:	f7fb fb50 	bl	80005dc <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f46:	d90b      	bls.n	8004f60 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	22ff      	movs	r2, #255	; 0xff
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2203      	movs	r2, #3
 8004f54:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e021      	b.n	8004fa4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0e4      	beq.n	8004f38 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3724      	adds	r7, #36	; 0x24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}

08004fac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fb fb08 	bl	80005dc <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004fce:	e009      	b.n	8004fe4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fd0:	f7fb fb04 	bl	80005dc <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fde:	d901      	bls.n	8004fe4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e007      	b.n	8004ff4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ee      	beq.n	8004fd0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d119      	bne.n	800504a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800501e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005020:	f7fb fadc 	bl	80005dc <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005026:	e009      	b.n	800503c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005028:	f7fb fad8 	bl	80005dc <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005036:	d901      	bls.n	800503c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e007      	b.n	800504c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ee      	beq.n	8005028 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005062:	e005      	b.n	8005070 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	3b0a      	subs	r3, #10
 800506e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b09      	cmp	r3, #9
 8005074:	d8f6      	bhi.n	8005064 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	b2da      	uxtb	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	4313      	orrs	r3, r2
 8005082:	b2db      	uxtb	r3, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e149      	b.n	8005342 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f004 fcc8 	bl	8009a58 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f94f 	bl	8005374 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d007      	beq.n	80050ee <HAL_SAI_Init+0x5e>
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d302      	bcc.n	80050e8 <HAL_SAI_Init+0x58>
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d006      	beq.n	80050f4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80050e6:	e008      	b.n	80050fa <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
      break;
 80050ec:	e005      	b.n	80050fa <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80050ee:	2310      	movs	r3, #16
 80050f0:	61fb      	str	r3, [r7, #28]
      break;
 80050f2:	e002      	b.n	80050fa <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80050f4:	2320      	movs	r3, #32
 80050f6:	61fb      	str	r3, [r7, #28]
      break;
 80050f8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d81d      	bhi.n	800513e <HAL_SAI_Init+0xae>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_SAI_Init+0x78>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005119 	.word	0x08005119
 800510c:	0800511f 	.word	0x0800511f
 8005110:	08005127 	.word	0x08005127
 8005114:	0800512f 	.word	0x0800512f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
      }
      break;
 800511c:	e010      	b.n	8005140 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800511e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005122:	617b      	str	r3, [r7, #20]
      }
      break;
 8005124:	e00c      	b.n	8005140 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800512a:	617b      	str	r3, [r7, #20]
      }
      break;
 800512c:	e008      	b.n	8005140 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800512e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005132:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800513c:	e000      	b.n	8005140 <HAL_SAI_Init+0xb0>
  default:
    break;
 800513e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a81      	ldr	r2, [pc, #516]	; (800534c <HAL_SAI_Init+0x2bc>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_SAI_Init+0xc4>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a80      	ldr	r2, [pc, #512]	; (8005350 <HAL_SAI_Init+0x2c0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d103      	bne.n	800515c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8005154:	4a7f      	ldr	r2, [pc, #508]	; (8005354 <HAL_SAI_Init+0x2c4>)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e002      	b.n	8005162 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800515c:	4a7e      	ldr	r2, [pc, #504]	; (8005358 <HAL_SAI_Init+0x2c8>)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d043      	beq.n	80051f2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a76      	ldr	r2, [pc, #472]	; (800534c <HAL_SAI_Init+0x2bc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_SAI_Init+0xf2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a74      	ldr	r2, [pc, #464]	; (8005350 <HAL_SAI_Init+0x2c0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d104      	bne.n	800518c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005182:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005186:	f7ff fabd 	bl	8004704 <HAL_RCCEx_GetPeriphCLKFreq>
 800518a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a72      	ldr	r2, [pc, #456]	; (800535c <HAL_SAI_Init+0x2cc>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_SAI_Init+0x110>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a71      	ldr	r2, [pc, #452]	; (8005360 <HAL_SAI_Init+0x2d0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d104      	bne.n	80051aa <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80051a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80051a4:	f7ff faae 	bl	8004704 <HAL_RCCEx_GetPeriphCLKFreq>
 80051a8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	461a      	mov	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	025b      	lsls	r3, r3, #9
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4a67      	ldr	r2, [pc, #412]	; (8005364 <HAL_SAI_Init+0x2d4>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	08da      	lsrs	r2, r3, #3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80051d0:	68f9      	ldr	r1, [r7, #12]
 80051d2:	4b64      	ldr	r3, [pc, #400]	; (8005364 <HAL_SAI_Init+0x2d4>)
 80051d4:	fba3 2301 	umull	r2, r3, r3, r1
 80051d8:	08da      	lsrs	r2, r3, #3
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	1aca      	subs	r2, r1, r3
 80051e4:	2a08      	cmp	r2, #8
 80051e6:	d904      	bls.n	80051f2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_SAI_Init+0x172>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d109      	bne.n	8005216 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_SAI_Init+0x17e>
 800520a:	2300      	movs	r3, #0
 800520c:	e001      	b.n	8005212 <HAL_SAI_Init+0x182>
 800520e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e008      	b.n	8005228 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d102      	bne.n	8005224 <HAL_SAI_Init+0x194>
 800521e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005222:	e000      	b.n	8005226 <HAL_SAI_Init+0x196>
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b4d      	ldr	r3, [pc, #308]	; (8005368 <HAL_SAI_Init+0x2d8>)
 8005234:	400b      	ands	r3, r1
 8005236:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6819      	ldr	r1, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800524c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	431a      	orrs	r2, r3
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005260:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800526c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	051b      	lsls	r3, r3, #20
 8005274:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b38      	ldr	r3, [pc, #224]	; (800536c <HAL_SAI_Init+0x2dc>)
 800528a:	400b      	ands	r3, r1
 800528c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <HAL_SAI_Init+0x2e0>)
 80052b8:	400b      	ands	r3, r1
 80052ba:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6899      	ldr	r1, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80052cc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80052d2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80052d8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	3b01      	subs	r3, #1
 80052e0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80052e2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68d9      	ldr	r1, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80052fa:	400b      	ands	r3, r1
 80052fc:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68d9      	ldr	r1, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	3b01      	subs	r3, #1
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40015804 	.word	0x40015804
 8005350:	40015824 	.word	0x40015824
 8005354:	40015800 	.word	0x40015800
 8005358:	40015c00 	.word	0x40015c00
 800535c:	40015c04 	.word	0x40015c04
 8005360:	40015c24 	.word	0x40015c24
 8005364:	cccccccd 	.word	0xcccccccd
 8005368:	ff05c010 	.word	0xff05c010
 800536c:	ffff1ff0 	.word	0xffff1ff0
 8005370:	fff88000 	.word	0xfff88000

08005374 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005374:	b490      	push	{r4, r7}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800537c:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <SAI_Disable+0x64>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	; (80053dc <SAI_Disable+0x68>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	0b1b      	lsrs	r3, r3, #12
 8005388:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800539c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800539e:	4623      	mov	r3, r4
 80053a0:	1e5c      	subs	r4, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ba:	e006      	b.n	80053ca <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e9      	bne.n	800539e <SAI_Disable+0x2a>

  return status;
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc90      	pop	{r4, r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000008 	.word	0x20000008
 80053dc:	95cbec1b 	.word	0x95cbec1b

080053e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e025      	b.n	8005440 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f004 fb1b 	bl	8009a44 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f001 f9f7 	bl	8006814 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	461a      	mov	r2, r3
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	f001 fa61 	bl	80068f8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e04c      	b.n	80054f4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f003 fec8 	bl	8009204 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0203 	bic.w	r2, r2, #3
 800548a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_SPDIFRX_Init+0xb4>)
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80054a4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80054aa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80054b0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80054b6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80054bc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80054c2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80054c8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80054ce:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80054d4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	fff88407 	.word	0xfff88407

08005500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e084      	b.n	800561c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f003 feab 	bl	8009288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005548:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005552:	d902      	bls.n	800555a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005554:	2300      	movs	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e002      	b.n	8005560 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800555a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005568:	d007      	beq.n	800557a <HAL_SPI_Init+0x7a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005572:	d002      	beq.n	800557a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800558a:	d903      	bls.n	8005594 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
 8005592:	e002      	b.n	800559a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	ea42 0103 	orr.w	r1, r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	f003 0204 	and.w	r2, r3, #4
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	ea42 0103 	orr.w	r1, r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69da      	ldr	r2, [r3, #28]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e01d      	b.n	8005672 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f003 fec4 	bl	80093d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 f94c 	bl	8005900 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e01d      	b.n	80056c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f003 fe65 	bl	8009370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f000 f921 	bl	8005900 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e105      	b.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b14      	cmp	r3, #20
 80056fe:	f200 80f0 	bhi.w	80058e2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	0800575d 	.word	0x0800575d
 800570c:	080058e3 	.word	0x080058e3
 8005710:	080058e3 	.word	0x080058e3
 8005714:	080058e3 	.word	0x080058e3
 8005718:	0800579d 	.word	0x0800579d
 800571c:	080058e3 	.word	0x080058e3
 8005720:	080058e3 	.word	0x080058e3
 8005724:	080058e3 	.word	0x080058e3
 8005728:	080057df 	.word	0x080057df
 800572c:	080058e3 	.word	0x080058e3
 8005730:	080058e3 	.word	0x080058e3
 8005734:	080058e3 	.word	0x080058e3
 8005738:	0800581f 	.word	0x0800581f
 800573c:	080058e3 	.word	0x080058e3
 8005740:	080058e3 	.word	0x080058e3
 8005744:	080058e3 	.word	0x080058e3
 8005748:	08005861 	.word	0x08005861
 800574c:	080058e3 	.word	0x080058e3
 8005750:	080058e3 	.word	0x080058e3
 8005754:	080058e3 	.word	0x080058e3
 8005758:	080058a1 	.word	0x080058a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f96c 	bl	8005a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0208 	orr.w	r2, r2, #8
 8005776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6999      	ldr	r1, [r3, #24]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	619a      	str	r2, [r3, #24]
      break;
 800579a:	e0a3      	b.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f9be 	bl	8005b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6999      	ldr	r1, [r3, #24]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	021a      	lsls	r2, r3, #8
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	619a      	str	r2, [r3, #24]
      break;
 80057dc:	e082      	b.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fa15 	bl	8005c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0208 	orr.w	r2, r2, #8
 80057f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69da      	ldr	r2, [r3, #28]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0204 	bic.w	r2, r2, #4
 8005808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69d9      	ldr	r1, [r3, #28]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	61da      	str	r2, [r3, #28]
      break;
 800581c:	e062      	b.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fa6b 	bl	8005d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69da      	ldr	r2, [r3, #28]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69d9      	ldr	r1, [r3, #28]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	021a      	lsls	r2, r3, #8
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	61da      	str	r2, [r3, #28]
      break;
 800585e:	e041      	b.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 faa2 	bl	8005db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0208 	orr.w	r2, r2, #8
 800587a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0204 	bic.w	r2, r2, #4
 800588a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800589e:	e021      	b.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fad4 	bl	8005e54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	021a      	lsls	r2, r3, #8
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058e0:	e000      	b.n	80058e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80058e2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop

08005900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <TIM_Base_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591e:	d00f      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a3d      	ldr	r2, [pc, #244]	; (8005a18 <TIM_Base_SetConfig+0x118>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3c      	ldr	r2, [pc, #240]	; (8005a1c <TIM_Base_SetConfig+0x11c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3b      	ldr	r2, [pc, #236]	; (8005a20 <TIM_Base_SetConfig+0x120>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3a      	ldr	r2, [pc, #232]	; (8005a24 <TIM_Base_SetConfig+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d108      	bne.n	8005952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2f      	ldr	r2, [pc, #188]	; (8005a14 <TIM_Base_SetConfig+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d02b      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d027      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <TIM_Base_SetConfig+0x118>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d023      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2b      	ldr	r2, [pc, #172]	; (8005a1c <TIM_Base_SetConfig+0x11c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01f      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <TIM_Base_SetConfig+0x120>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01b      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <TIM_Base_SetConfig+0x124>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d017      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <TIM_Base_SetConfig+0x128>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a27      	ldr	r2, [pc, #156]	; (8005a2c <TIM_Base_SetConfig+0x12c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00f      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <TIM_Base_SetConfig+0x130>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00b      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <TIM_Base_SetConfig+0x134>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <TIM_Base_SetConfig+0x138>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d003      	beq.n	80059b2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <TIM_Base_SetConfig+0x13c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d108      	bne.n	80059c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <TIM_Base_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_Base_SetConfig+0xf8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0c      	ldr	r2, [pc, #48]	; (8005a24 <TIM_Base_SetConfig+0x124>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d103      	bne.n	8005a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	615a      	str	r2, [r3, #20]
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40014400 	.word	0x40014400
 8005a30:	40014800 	.word	0x40014800
 8005a34:	40001800 	.word	0x40001800
 8005a38:	40001c00 	.word	0x40001c00
 8005a3c:	40002000 	.word	0x40002000

08005a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <TIM_OC1_SetConfig+0xd8>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 0302 	bic.w	r3, r3, #2
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a21      	ldr	r2, [pc, #132]	; (8005b1c <TIM_OC1_SetConfig+0xdc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC1_SetConfig+0x64>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a20      	ldr	r2, [pc, #128]	; (8005b20 <TIM_OC1_SetConfig+0xe0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0308 	bic.w	r3, r3, #8
 8005aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <TIM_OC1_SetConfig+0xdc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC1_SetConfig+0x8e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <TIM_OC1_SetConfig+0xe0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	fffeff8f 	.word	0xfffeff8f
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0210 	bic.w	r2, r3, #16
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <TIM_OC2_SetConfig+0xe4>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	021b      	lsls	r3, r3, #8
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0320 	bic.w	r3, r3, #32
 8005b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a23      	ldr	r2, [pc, #140]	; (8005c0c <TIM_OC2_SetConfig+0xe8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC2_SetConfig+0x68>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <TIM_OC2_SetConfig+0xec>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10d      	bne.n	8005ba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a18      	ldr	r2, [pc, #96]	; (8005c0c <TIM_OC2_SetConfig+0xe8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_OC2_SetConfig+0x94>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a17      	ldr	r2, [pc, #92]	; (8005c10 <TIM_OC2_SetConfig+0xec>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d113      	bne.n	8005be0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	feff8fff 	.word	0xfeff8fff
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4b2d      	ldr	r3, [pc, #180]	; (8005cf4 <TIM_OC3_SetConfig+0xe0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC3_SetConfig+0x66>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <TIM_OC3_SetConfig+0xe8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10d      	bne.n	8005c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x92>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <TIM_OC3_SetConfig+0xe8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d113      	bne.n	8005cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	fffeff8f 	.word	0xfffeff8f
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010400 	.word	0x40010400

08005d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <TIM_OC4_SetConfig+0xa4>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	031b      	lsls	r3, r3, #12
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <TIM_OC4_SetConfig+0xa8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC4_SetConfig+0x68>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a12      	ldr	r2, [pc, #72]	; (8005dac <TIM_OC4_SetConfig+0xac>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d109      	bne.n	8005d7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	019b      	lsls	r3, r3, #6
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	feff8fff 	.word	0xfeff8fff
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400

08005db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <TIM_OC5_SetConfig+0x98>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <TIM_OC5_SetConfig+0x9c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d003      	beq.n	8005e0e <TIM_OC5_SetConfig+0x5e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <TIM_OC5_SetConfig+0xa0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d109      	bne.n	8005e22 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	021b      	lsls	r3, r3, #8
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	fffeff8f 	.word	0xfffeff8f
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <TIM_OC6_SetConfig+0x9c>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	051b      	lsls	r3, r3, #20
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <TIM_OC6_SetConfig+0xa0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC6_SetConfig+0x60>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a12      	ldr	r2, [pc, #72]	; (8005ef8 <TIM_OC6_SetConfig+0xa4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d109      	bne.n	8005ec8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	621a      	str	r2, [r3, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	feff8fff 	.word	0xfeff8fff
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40010400 	.word	0x40010400

08005efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e045      	b.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d108      	bne.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f72:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e040      	b.n	8006048 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f003 fada 	bl	8009590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2224      	movs	r2, #36	; 0x24
 8005fe0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f82c 	bl	8006050 <UART_SetConfig>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e022      	b.n	8006048 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fac4 	bl	8006598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800601e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800602e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb4b 	bl	80066dc <UART_CheckIdleState>
 8006046:	4603      	mov	r3, r0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006058:	2300      	movs	r3, #0
 800605a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4bb1      	ldr	r3, [pc, #708]	; (8006344 <UART_SetConfig+0x2f4>)
 8006080:	4013      	ands	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	6939      	ldr	r1, [r7, #16]
 8006088:	430b      	orrs	r3, r1
 800608a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a9f      	ldr	r2, [pc, #636]	; (8006348 <UART_SetConfig+0x2f8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d121      	bne.n	8006114 <UART_SetConfig+0xc4>
 80060d0:	4b9e      	ldr	r3, [pc, #632]	; (800634c <UART_SetConfig+0x2fc>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d816      	bhi.n	800610c <UART_SetConfig+0xbc>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x94>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	08006101 	.word	0x08006101
 80060ec:	080060fb 	.word	0x080060fb
 80060f0:	08006107 	.word	0x08006107
 80060f4:	2301      	movs	r3, #1
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e151      	b.n	800639e <UART_SetConfig+0x34e>
 80060fa:	2302      	movs	r3, #2
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e14e      	b.n	800639e <UART_SetConfig+0x34e>
 8006100:	2304      	movs	r3, #4
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e14b      	b.n	800639e <UART_SetConfig+0x34e>
 8006106:	2308      	movs	r3, #8
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e148      	b.n	800639e <UART_SetConfig+0x34e>
 800610c:	2310      	movs	r3, #16
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	bf00      	nop
 8006112:	e144      	b.n	800639e <UART_SetConfig+0x34e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a8d      	ldr	r2, [pc, #564]	; (8006350 <UART_SetConfig+0x300>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d134      	bne.n	8006188 <UART_SetConfig+0x138>
 800611e:	4b8b      	ldr	r3, [pc, #556]	; (800634c <UART_SetConfig+0x2fc>)
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b0c      	cmp	r3, #12
 800612a:	d829      	bhi.n	8006180 <UART_SetConfig+0x130>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0xe4>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006169 	.word	0x08006169
 8006138:	08006181 	.word	0x08006181
 800613c:	08006181 	.word	0x08006181
 8006140:	08006181 	.word	0x08006181
 8006144:	08006175 	.word	0x08006175
 8006148:	08006181 	.word	0x08006181
 800614c:	08006181 	.word	0x08006181
 8006150:	08006181 	.word	0x08006181
 8006154:	0800616f 	.word	0x0800616f
 8006158:	08006181 	.word	0x08006181
 800615c:	08006181 	.word	0x08006181
 8006160:	08006181 	.word	0x08006181
 8006164:	0800617b 	.word	0x0800617b
 8006168:	2300      	movs	r3, #0
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e117      	b.n	800639e <UART_SetConfig+0x34e>
 800616e:	2302      	movs	r3, #2
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e114      	b.n	800639e <UART_SetConfig+0x34e>
 8006174:	2304      	movs	r3, #4
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e111      	b.n	800639e <UART_SetConfig+0x34e>
 800617a:	2308      	movs	r3, #8
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e10e      	b.n	800639e <UART_SetConfig+0x34e>
 8006180:	2310      	movs	r3, #16
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	bf00      	nop
 8006186:	e10a      	b.n	800639e <UART_SetConfig+0x34e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a71      	ldr	r2, [pc, #452]	; (8006354 <UART_SetConfig+0x304>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d120      	bne.n	80061d4 <UART_SetConfig+0x184>
 8006192:	4b6e      	ldr	r3, [pc, #440]	; (800634c <UART_SetConfig+0x2fc>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800619c:	2b10      	cmp	r3, #16
 800619e:	d00f      	beq.n	80061c0 <UART_SetConfig+0x170>
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d802      	bhi.n	80061aa <UART_SetConfig+0x15a>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <UART_SetConfig+0x164>
 80061a8:	e010      	b.n	80061cc <UART_SetConfig+0x17c>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d005      	beq.n	80061ba <UART_SetConfig+0x16a>
 80061ae:	2b30      	cmp	r3, #48	; 0x30
 80061b0:	d009      	beq.n	80061c6 <UART_SetConfig+0x176>
 80061b2:	e00b      	b.n	80061cc <UART_SetConfig+0x17c>
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e0f1      	b.n	800639e <UART_SetConfig+0x34e>
 80061ba:	2302      	movs	r3, #2
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e0ee      	b.n	800639e <UART_SetConfig+0x34e>
 80061c0:	2304      	movs	r3, #4
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e0eb      	b.n	800639e <UART_SetConfig+0x34e>
 80061c6:	2308      	movs	r3, #8
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e0e8      	b.n	800639e <UART_SetConfig+0x34e>
 80061cc:	2310      	movs	r3, #16
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	bf00      	nop
 80061d2:	e0e4      	b.n	800639e <UART_SetConfig+0x34e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a5f      	ldr	r2, [pc, #380]	; (8006358 <UART_SetConfig+0x308>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d120      	bne.n	8006220 <UART_SetConfig+0x1d0>
 80061de:	4b5b      	ldr	r3, [pc, #364]	; (800634c <UART_SetConfig+0x2fc>)
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d00f      	beq.n	800620c <UART_SetConfig+0x1bc>
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d802      	bhi.n	80061f6 <UART_SetConfig+0x1a6>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <UART_SetConfig+0x1b0>
 80061f4:	e010      	b.n	8006218 <UART_SetConfig+0x1c8>
 80061f6:	2b80      	cmp	r3, #128	; 0x80
 80061f8:	d005      	beq.n	8006206 <UART_SetConfig+0x1b6>
 80061fa:	2bc0      	cmp	r3, #192	; 0xc0
 80061fc:	d009      	beq.n	8006212 <UART_SetConfig+0x1c2>
 80061fe:	e00b      	b.n	8006218 <UART_SetConfig+0x1c8>
 8006200:	2300      	movs	r3, #0
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e0cb      	b.n	800639e <UART_SetConfig+0x34e>
 8006206:	2302      	movs	r3, #2
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e0c8      	b.n	800639e <UART_SetConfig+0x34e>
 800620c:	2304      	movs	r3, #4
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e0c5      	b.n	800639e <UART_SetConfig+0x34e>
 8006212:	2308      	movs	r3, #8
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e0c2      	b.n	800639e <UART_SetConfig+0x34e>
 8006218:	2310      	movs	r3, #16
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	bf00      	nop
 800621e:	e0be      	b.n	800639e <UART_SetConfig+0x34e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a4d      	ldr	r2, [pc, #308]	; (800635c <UART_SetConfig+0x30c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d124      	bne.n	8006274 <UART_SetConfig+0x224>
 800622a:	4b48      	ldr	r3, [pc, #288]	; (800634c <UART_SetConfig+0x2fc>)
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006238:	d012      	beq.n	8006260 <UART_SetConfig+0x210>
 800623a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623e:	d802      	bhi.n	8006246 <UART_SetConfig+0x1f6>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <UART_SetConfig+0x204>
 8006244:	e012      	b.n	800626c <UART_SetConfig+0x21c>
 8006246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624a:	d006      	beq.n	800625a <UART_SetConfig+0x20a>
 800624c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006250:	d009      	beq.n	8006266 <UART_SetConfig+0x216>
 8006252:	e00b      	b.n	800626c <UART_SetConfig+0x21c>
 8006254:	2300      	movs	r3, #0
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e0a1      	b.n	800639e <UART_SetConfig+0x34e>
 800625a:	2302      	movs	r3, #2
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e09e      	b.n	800639e <UART_SetConfig+0x34e>
 8006260:	2304      	movs	r3, #4
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e09b      	b.n	800639e <UART_SetConfig+0x34e>
 8006266:	2308      	movs	r3, #8
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e098      	b.n	800639e <UART_SetConfig+0x34e>
 800626c:	2310      	movs	r3, #16
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	bf00      	nop
 8006272:	e094      	b.n	800639e <UART_SetConfig+0x34e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a39      	ldr	r2, [pc, #228]	; (8006360 <UART_SetConfig+0x310>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d124      	bne.n	80062c8 <UART_SetConfig+0x278>
 800627e:	4b33      	ldr	r3, [pc, #204]	; (800634c <UART_SetConfig+0x2fc>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006284:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628c:	d012      	beq.n	80062b4 <UART_SetConfig+0x264>
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006292:	d802      	bhi.n	800629a <UART_SetConfig+0x24a>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <UART_SetConfig+0x258>
 8006298:	e012      	b.n	80062c0 <UART_SetConfig+0x270>
 800629a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629e:	d006      	beq.n	80062ae <UART_SetConfig+0x25e>
 80062a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a4:	d009      	beq.n	80062ba <UART_SetConfig+0x26a>
 80062a6:	e00b      	b.n	80062c0 <UART_SetConfig+0x270>
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e077      	b.n	800639e <UART_SetConfig+0x34e>
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e074      	b.n	800639e <UART_SetConfig+0x34e>
 80062b4:	2304      	movs	r3, #4
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e071      	b.n	800639e <UART_SetConfig+0x34e>
 80062ba:	2308      	movs	r3, #8
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e06e      	b.n	800639e <UART_SetConfig+0x34e>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	bf00      	nop
 80062c6:	e06a      	b.n	800639e <UART_SetConfig+0x34e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a25      	ldr	r2, [pc, #148]	; (8006364 <UART_SetConfig+0x314>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d124      	bne.n	800631c <UART_SetConfig+0x2cc>
 80062d2:	4b1e      	ldr	r3, [pc, #120]	; (800634c <UART_SetConfig+0x2fc>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e0:	d012      	beq.n	8006308 <UART_SetConfig+0x2b8>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e6:	d802      	bhi.n	80062ee <UART_SetConfig+0x29e>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <UART_SetConfig+0x2ac>
 80062ec:	e012      	b.n	8006314 <UART_SetConfig+0x2c4>
 80062ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f2:	d006      	beq.n	8006302 <UART_SetConfig+0x2b2>
 80062f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f8:	d009      	beq.n	800630e <UART_SetConfig+0x2be>
 80062fa:	e00b      	b.n	8006314 <UART_SetConfig+0x2c4>
 80062fc:	2300      	movs	r3, #0
 80062fe:	77fb      	strb	r3, [r7, #31]
 8006300:	e04d      	b.n	800639e <UART_SetConfig+0x34e>
 8006302:	2302      	movs	r3, #2
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e04a      	b.n	800639e <UART_SetConfig+0x34e>
 8006308:	2304      	movs	r3, #4
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e047      	b.n	800639e <UART_SetConfig+0x34e>
 800630e:	2308      	movs	r3, #8
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e044      	b.n	800639e <UART_SetConfig+0x34e>
 8006314:	2310      	movs	r3, #16
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	bf00      	nop
 800631a:	e040      	b.n	800639e <UART_SetConfig+0x34e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a11      	ldr	r2, [pc, #68]	; (8006368 <UART_SetConfig+0x318>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d139      	bne.n	800639a <UART_SetConfig+0x34a>
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <UART_SetConfig+0x2fc>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006334:	d027      	beq.n	8006386 <UART_SetConfig+0x336>
 8006336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633a:	d817      	bhi.n	800636c <UART_SetConfig+0x31c>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01c      	beq.n	800637a <UART_SetConfig+0x32a>
 8006340:	e027      	b.n	8006392 <UART_SetConfig+0x342>
 8006342:	bf00      	nop
 8006344:	efff69f3 	.word	0xefff69f3
 8006348:	40011000 	.word	0x40011000
 800634c:	40023800 	.word	0x40023800
 8006350:	40004400 	.word	0x40004400
 8006354:	40004800 	.word	0x40004800
 8006358:	40004c00 	.word	0x40004c00
 800635c:	40005000 	.word	0x40005000
 8006360:	40011400 	.word	0x40011400
 8006364:	40007800 	.word	0x40007800
 8006368:	40007c00 	.word	0x40007c00
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006370:	d006      	beq.n	8006380 <UART_SetConfig+0x330>
 8006372:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006376:	d009      	beq.n	800638c <UART_SetConfig+0x33c>
 8006378:	e00b      	b.n	8006392 <UART_SetConfig+0x342>
 800637a:	2300      	movs	r3, #0
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e00e      	b.n	800639e <UART_SetConfig+0x34e>
 8006380:	2302      	movs	r3, #2
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e00b      	b.n	800639e <UART_SetConfig+0x34e>
 8006386:	2304      	movs	r3, #4
 8006388:	77fb      	strb	r3, [r7, #31]
 800638a:	e008      	b.n	800639e <UART_SetConfig+0x34e>
 800638c:	2308      	movs	r3, #8
 800638e:	77fb      	strb	r3, [r7, #31]
 8006390:	e005      	b.n	800639e <UART_SetConfig+0x34e>
 8006392:	2310      	movs	r3, #16
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	bf00      	nop
 8006398:	e001      	b.n	800639e <UART_SetConfig+0x34e>
 800639a:	2310      	movs	r3, #16
 800639c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d17c      	bne.n	80064a2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d859      	bhi.n	8006462 <UART_SetConfig+0x412>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0x364>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063f7 	.word	0x080063f7
 80063bc:	08006415 	.word	0x08006415
 80063c0:	08006463 	.word	0x08006463
 80063c4:	0800642d 	.word	0x0800642d
 80063c8:	08006463 	.word	0x08006463
 80063cc:	08006463 	.word	0x08006463
 80063d0:	08006463 	.word	0x08006463
 80063d4:	0800644b 	.word	0x0800644b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80063d8:	f7fd fd46 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 80063dc:	4603      	mov	r3, r0
 80063de:	005a      	lsls	r2, r3, #1
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	441a      	add	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	61bb      	str	r3, [r7, #24]
        break;
 80063f4:	e038      	b.n	8006468 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80063f6:	f7fd fd4b 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 80063fa:	4603      	mov	r3, r0
 80063fc:	005a      	lsls	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	fbb2 f3f3 	udiv	r3, r2, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	61bb      	str	r3, [r7, #24]
        break;
 8006412:	e029      	b.n	8006468 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	085a      	lsrs	r2, r3, #1
 800641a:	4b5d      	ldr	r3, [pc, #372]	; (8006590 <UART_SetConfig+0x540>)
 800641c:	4413      	add	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6852      	ldr	r2, [r2, #4]
 8006422:	fbb3 f3f2 	udiv	r3, r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	61bb      	str	r3, [r7, #24]
        break;
 800642a:	e01d      	b.n	8006468 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800642c:	f7fd fc5e 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006430:	4603      	mov	r3, r0
 8006432:	005a      	lsls	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	085b      	lsrs	r3, r3, #1
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	b29b      	uxth	r3, r3
 8006446:	61bb      	str	r3, [r7, #24]
        break;
 8006448:	e00e      	b.n	8006468 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	085b      	lsrs	r3, r3, #1
 8006450:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	b29b      	uxth	r3, r3
 800645e:	61bb      	str	r3, [r7, #24]
        break;
 8006460:	e002      	b.n	8006468 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	75fb      	strb	r3, [r7, #23]
        break;
 8006466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b0f      	cmp	r3, #15
 800646c:	d916      	bls.n	800649c <UART_SetConfig+0x44c>
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d212      	bcs.n	800649c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f023 030f 	bic.w	r3, r3, #15
 800647e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	b29b      	uxth	r3, r3
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	b29a      	uxth	r2, r3
 800648c:	89fb      	ldrh	r3, [r7, #14]
 800648e:	4313      	orrs	r3, r2
 8006490:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	89fa      	ldrh	r2, [r7, #14]
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	e06e      	b.n	800657a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	75fb      	strb	r3, [r7, #23]
 80064a0:	e06b      	b.n	800657a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80064a2:	7ffb      	ldrb	r3, [r7, #31]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d857      	bhi.n	8006558 <UART_SetConfig+0x508>
 80064a8:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x460>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064f1 	.word	0x080064f1
 80064b8:	0800650d 	.word	0x0800650d
 80064bc:	08006559 	.word	0x08006559
 80064c0:	08006525 	.word	0x08006525
 80064c4:	08006559 	.word	0x08006559
 80064c8:	08006559 	.word	0x08006559
 80064cc:	08006559 	.word	0x08006559
 80064d0:	08006541 	.word	0x08006541
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80064d4:	f7fd fcc8 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 80064d8:	4602      	mov	r2, r0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	61bb      	str	r3, [r7, #24]
        break;
 80064ee:	e036      	b.n	800655e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80064f0:	f7fd fcce 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	fbb2 f3f3 	udiv	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	61bb      	str	r3, [r7, #24]
        break;
 800650a:	e028      	b.n	800655e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	085a      	lsrs	r2, r3, #1
 8006512:	4b20      	ldr	r3, [pc, #128]	; (8006594 <UART_SetConfig+0x544>)
 8006514:	4413      	add	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6852      	ldr	r2, [r2, #4]
 800651a:	fbb3 f3f2 	udiv	r3, r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	61bb      	str	r3, [r7, #24]
        break;
 8006522:	e01c      	b.n	800655e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006524:	f7fd fbe2 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	441a      	add	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	b29b      	uxth	r3, r3
 800653c:	61bb      	str	r3, [r7, #24]
        break;
 800653e:	e00e      	b.n	800655e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	085b      	lsrs	r3, r3, #1
 8006546:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006552:	b29b      	uxth	r3, r3
 8006554:	61bb      	str	r3, [r7, #24]
        break;
 8006556:	e002      	b.n	800655e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
        break;
 800655c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b0f      	cmp	r3, #15
 8006562:	d908      	bls.n	8006576 <UART_SetConfig+0x526>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656a:	d204      	bcs.n	8006576 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	60da      	str	r2, [r3, #12]
 8006574:	e001      	b.n	800657a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006586:	7dfb      	ldrb	r3, [r7, #23]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	01e84800 	.word	0x01e84800
 8006594:	00f42400 	.word	0x00f42400

08006598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01a      	beq.n	80066ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006696:	d10a      	bne.n	80066ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80066ea:	f7f9 ff77 	bl	80005dc <HAL_GetTick>
 80066ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d10e      	bne.n	800671c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f814 	bl	800673a <UART_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e00a      	b.n	8006732 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674a:	e02a      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006752:	d026      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006754:	f7f9 ff42 	bl	80005dc <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <UART_WaitOnFlagUntilTimeout+0x30>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d11b      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006778:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e00f      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d0c5      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e016      	b.n	800680a <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f003 f87f 	bl	80098e0 <HAL_WWDG_MspInit>
#endif

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067ee:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	ea42 0103 	orr.w	r1, r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d027      	beq.n	800687e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <FMC_SDRAM_Init+0xe0>)
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006844:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800684a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006850:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006856:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800685c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006862:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006868:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800686e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	e032      	b.n	80068e4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800688a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006894:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800689a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <FMC_SDRAM_Init+0xe0>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068b8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80068be:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80068c4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80068ca:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80068d0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	ffff8000 	.word	0xffff8000

080068f8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d02e      	beq.n	8006970 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800691e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	3b01      	subs	r3, #1
 800692c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800692e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	3b01      	subs	r3, #1
 8006936:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006938:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	3b01      	subs	r3, #1
 8006940:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006942:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	3b01      	subs	r3, #1
 800694a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800694c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	3b01      	subs	r3, #1
 8006954:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006956:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	3b01      	subs	r3, #1
 800695e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006960:	4313      	orrs	r3, r2
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	609a      	str	r2, [r3, #8]
 800696e:	e039      	b.n	80069e4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <FMC_SDRAM_Timing_Init+0xfc>)
 800697a:	4013      	ands	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	3b01      	subs	r3, #1
 8006984:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	3b01      	subs	r3, #1
 800698c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800698e:	4313      	orrs	r3, r2
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069a2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80069b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80069bc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80069c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80069d0:	4313      	orrs	r3, r2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	ff0f0fff 	.word	0xff0f0fff

080069f8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80069f8:	b084      	sub	sp, #16
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	f107 001c 	add.w	r0, r7, #28
 8006a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006a0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006a10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006a12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006a16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006a1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006a1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006a22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <SDMMC_Init+0x54>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	b004      	add	sp, #16
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	ffff8100 	.word	0xffff8100

08006a50 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0303 	and.w	r3, r3, #3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006aa6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006aac:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006ab2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <SDMMC_SendCommand+0x50>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	fffff000 	.word	0xfffff000

08006adc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	b2db      	uxtb	r3, r3
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3314      	adds	r3, #20
 8006b08:	461a      	mov	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
}  
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	; 0x28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b34:	2307      	movs	r3, #7
 8006b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b38:	2340      	movs	r3, #64	; 0x40
 8006b3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b44:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b46:	f107 0310 	add.w	r3, r7, #16
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff ff9b 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b56:	2107      	movs	r1, #7
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f91d 	bl	8006d98 <SDMMC_GetCmdResp1>
 8006b5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3728      	adds	r7, #40	; 0x28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b088      	sub	sp, #32
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b8a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ff78 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8d3 	bl	8006d44 <SDMMC_GetCmdError>
 8006b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b088      	sub	sp, #32
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006bbe:	23c0      	movs	r3, #192	; 0xc0
 8006bc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006bcc:	f107 0308 	add.w	r3, r7, #8
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ff58 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f9c3 	bl	8006f64 <SDMMC_GetCmdResp2>
 8006bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006be0:	69fb      	ldr	r3, [r7, #28]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006bfc:	2309      	movs	r3, #9
 8006bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006c00:	23c0      	movs	r3, #192	; 0xc0
 8006c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c0c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff37 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f9a2 	bl	8006f64 <SDMMC_GetCmdResp2>
 8006c20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c22:	69fb      	ldr	r3, [r7, #28]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c42:	2340      	movs	r3, #64	; 0x40
 8006c44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c4e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c50:	f107 0308 	add.w	r3, r7, #8
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ff16 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	2103      	movs	r1, #3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9f3 	bl	800704c <SDMMC_GetCmdResp6>
 8006c66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c68:	69fb      	ldr	r3, [r7, #28]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b088      	sub	sp, #32
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006c84:	230d      	movs	r3, #13
 8006c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c94:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c96:	f107 0308 	add.w	r3, r7, #8
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff fef3 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca6:	210d      	movs	r1, #13
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f875 	bl	8006d98 <SDMMC_GetCmdResp1>
 8006cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <SDMMC_CmdOpCondition>:
  * @param  SDIOx Pointer to SDIO register base 
  * @parame Argument Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = Argument;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cd0:	2340      	movs	r3, #64	; 0x40
 8006cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cdc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff fecf 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f97a 	bl	8006fe4 <SDMMC_GetCmdResp3>
 8006cf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3720      	adds	r7, #32
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <SDMMC_CmdSwitch>:
  * @param  SDIOx Pointer to SDIO register base 
  * @parame Argument Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = Argument;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8006d0e:	2306      	movs	r3, #6
 8006d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d1e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d20:	f107 0308 	add.w	r3, r7, #8
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff feae 	bl	8006a88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8006d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d30:	2106      	movs	r1, #6
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f830 	bl	8006d98 <SDMMC_GetCmdResp1>
 8006d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006d44:	b490      	push	{r4, r7}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006d4c:	4b10      	ldr	r3, [pc, #64]	; (8006d90 <SDMMC_GetCmdError+0x4c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <SDMMC_GetCmdError+0x50>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	0a5b      	lsrs	r3, r3, #9
 8006d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006d60:	4623      	mov	r3, r4
 8006d62:	1e5c      	subs	r4, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d6c:	e00a      	b.n	8006d84 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f2      	beq.n	8006d60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc90      	pop	{r4, r7}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000008 	.word	0x20000008
 8006d94:	10624dd3 	.word	0x10624dd3

08006d98 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d98:	b590      	push	{r4, r7, lr}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	460b      	mov	r3, r1
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8006da6:	4b6c      	ldr	r3, [pc, #432]	; (8006f58 <SDMMC_GetCmdResp1+0x1c0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a6c      	ldr	r2, [pc, #432]	; (8006f5c <SDMMC_GetCmdResp1+0x1c4>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	0a5b      	lsrs	r3, r3, #9
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006db8:	4623      	mov	r3, r4
 8006dba:	1e5c      	subs	r4, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006dc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dc4:	e0c3      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f2      	beq.n	8006db8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2204      	movs	r2, #4
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006de4:	2304      	movs	r3, #4
 8006de6:	e0b2      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e0a7      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f7ff fe6c 	bl	8006adc <SDMMC_GetCommandResponse>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d001      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e09d      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff fe6a 	bl	8006af6 <SDMMC_GetResponse>
 8006e22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4b4e      	ldr	r3, [pc, #312]	; (8006f60 <SDMMC_GetCmdResp1+0x1c8>)
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e08d      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da02      	bge.n	8006e3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e3c:	e087      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	e080      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006e56:	2380      	movs	r3, #128	; 0x80
 8006e58:	e079      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e68:	e071      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e78:	e069      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e88:	e061      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e98:	e059      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ea8:	e051      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eb8:	e049      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ec8:	e041      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8006ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed8:	e039      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ee8:	e031      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006ef4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ef8:	e029      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006f04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f08:	e021      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f18:	e019      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f28:	e011      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f38:	e009      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f48:	e001      	b.n	8006f4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd90      	pop	{r4, r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000008 	.word	0x20000008
 8006f5c:	10624dd3 	.word	0x10624dd3
 8006f60:	fdffe008 	.word	0xfdffe008

08006f64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006f64:	b490      	push	{r4, r7}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <SDMMC_GetCmdResp2+0x78>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <SDMMC_GetCmdResp2+0x7c>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	0a5b      	lsrs	r3, r3, #9
 8006f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006f80:	4623      	mov	r3, r4
 8006f82:	1e5c      	subs	r4, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f8c:	e020      	b.n	8006fd0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f2      	beq.n	8006f80 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2204      	movs	r2, #4
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fac:	2304      	movs	r3, #4
 8006fae:	e00f      	b.n	8006fd0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e004      	b.n	8006fd0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc90      	pop	{r4, r7}
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000008 	.word	0x20000008
 8006fe0:	10624dd3 	.word	0x10624dd3

08006fe4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006fe4:	b490      	push	{r4, r7}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006fec:	4b15      	ldr	r3, [pc, #84]	; (8007044 <SDMMC_GetCmdResp3+0x60>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a15      	ldr	r2, [pc, #84]	; (8007048 <SDMMC_GetCmdResp3+0x64>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	0a5b      	lsrs	r3, r3, #9
 8006ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8007000:	4623      	mov	r3, r4
 8007002:	1e5c      	subs	r4, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800700c:	e015      	b.n	800703a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f2      	beq.n	8007000 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2204      	movs	r2, #4
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800702c:	2304      	movs	r3, #4
 800702e:	e004      	b.n	800703a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bc90      	pop	{r4, r7}
 8007042:	4770      	bx	lr
 8007044:	20000008 	.word	0x20000008
 8007048:	10624dd3 	.word	0x10624dd3

0800704c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800705a:	4b31      	ldr	r3, [pc, #196]	; (8007120 <SDMMC_GetCmdResp6+0xd4>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a31      	ldr	r2, [pc, #196]	; (8007124 <SDMMC_GetCmdResp6+0xd8>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	0a5b      	lsrs	r3, r3, #9
 8007066:	f241 3288 	movw	r2, #5000	; 0x1388
 800706a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800706e:	4623      	mov	r3, r4
 8007070:	1e5c      	subs	r4, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d102      	bne.n	800707c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007076:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800707a:	e04c      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f2      	beq.n	800706e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2204      	movs	r2, #4
 8007098:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800709a:	2304      	movs	r3, #4
 800709c:	e03b      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e030      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff fd11 	bl	8006adc <SDMMC_GetCommandResponse>
 80070ba:	4603      	mov	r3, r0
 80070bc:	461a      	mov	r2, r3
 80070be:	7afb      	ldrb	r3, [r7, #11]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d001      	beq.n	80070c8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e026      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80070d0:	2100      	movs	r1, #0
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f7ff fd0f 	bl	8006af6 <SDMMC_GetResponse>
 80070d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e011      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007100:	e009      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800710c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007110:	e001      	b.n	8007116 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007116:	4618      	mov	r0, r3
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}
 800711e:	bf00      	nop
 8007120:	20000008 	.word	0x20000008
 8007124:	10624dd3 	.word	0x10624dd3

08007128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007128:	b084      	sub	sp, #16
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	f107 001c 	add.w	r0, r7, #28
 8007136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	2b01      	cmp	r3, #1
 800713e:	d120      	bne.n	8007182 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	4b20      	ldr	r3, [pc, #128]	; (80071d4 <USB_CoreInit+0xac>)
 8007152:	4013      	ands	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007166:	2b01      	cmp	r3, #1
 8007168:	d105      	bne.n	8007176 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fcba 	bl	8007af0 <USB_CoreReset>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
 8007180:	e010      	b.n	80071a4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fcae 	bl	8007af0 <USB_CoreReset>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10b      	bne.n	80071c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f043 0206 	orr.w	r2, r3, #6
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f043 0220 	orr.w	r2, r3, #32
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071ce:	b004      	add	sp, #16
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	ffbdffbf 	.word	0xffbdffbf

080071d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d165      	bne.n	80072b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4a41      	ldr	r2, [pc, #260]	; (80072f4 <USB_SetTurnaroundTime+0x11c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d906      	bls.n	8007202 <USB_SetTurnaroundTime+0x2a>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4a40      	ldr	r2, [pc, #256]	; (80072f8 <USB_SetTurnaroundTime+0x120>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d802      	bhi.n	8007202 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80071fc:	230f      	movs	r3, #15
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e062      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	4a3c      	ldr	r2, [pc, #240]	; (80072f8 <USB_SetTurnaroundTime+0x120>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d906      	bls.n	8007218 <USB_SetTurnaroundTime+0x40>
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	4a3b      	ldr	r2, [pc, #236]	; (80072fc <USB_SetTurnaroundTime+0x124>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d802      	bhi.n	8007218 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007212:	230e      	movs	r3, #14
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	e057      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4a38      	ldr	r2, [pc, #224]	; (80072fc <USB_SetTurnaroundTime+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d906      	bls.n	800722e <USB_SetTurnaroundTime+0x56>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4a37      	ldr	r2, [pc, #220]	; (8007300 <USB_SetTurnaroundTime+0x128>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d802      	bhi.n	800722e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007228:	230d      	movs	r3, #13
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	e04c      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4a33      	ldr	r2, [pc, #204]	; (8007300 <USB_SetTurnaroundTime+0x128>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d906      	bls.n	8007244 <USB_SetTurnaroundTime+0x6c>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4a32      	ldr	r2, [pc, #200]	; (8007304 <USB_SetTurnaroundTime+0x12c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d802      	bhi.n	8007244 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800723e:	230c      	movs	r3, #12
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	e041      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <USB_SetTurnaroundTime+0x12c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d906      	bls.n	800725a <USB_SetTurnaroundTime+0x82>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a2e      	ldr	r2, [pc, #184]	; (8007308 <USB_SetTurnaroundTime+0x130>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d802      	bhi.n	800725a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007254:	230b      	movs	r3, #11
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e036      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <USB_SetTurnaroundTime+0x130>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d906      	bls.n	8007270 <USB_SetTurnaroundTime+0x98>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4a29      	ldr	r2, [pc, #164]	; (800730c <USB_SetTurnaroundTime+0x134>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d802      	bhi.n	8007270 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800726a:	230a      	movs	r3, #10
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e02b      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4a26      	ldr	r2, [pc, #152]	; (800730c <USB_SetTurnaroundTime+0x134>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d906      	bls.n	8007286 <USB_SetTurnaroundTime+0xae>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4a25      	ldr	r2, [pc, #148]	; (8007310 <USB_SetTurnaroundTime+0x138>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d802      	bhi.n	8007286 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007280:	2309      	movs	r3, #9
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e020      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4a21      	ldr	r2, [pc, #132]	; (8007310 <USB_SetTurnaroundTime+0x138>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d906      	bls.n	800729c <USB_SetTurnaroundTime+0xc4>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4a20      	ldr	r2, [pc, #128]	; (8007314 <USB_SetTurnaroundTime+0x13c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d802      	bhi.n	800729c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007296:	2308      	movs	r3, #8
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	e015      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <USB_SetTurnaroundTime+0x13c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d906      	bls.n	80072b2 <USB_SetTurnaroundTime+0xda>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <USB_SetTurnaroundTime+0x140>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d802      	bhi.n	80072b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072ac:	2307      	movs	r3, #7
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e00a      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072b2:	2306      	movs	r3, #6
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e007      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072be:	2309      	movs	r3, #9
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e001      	b.n	80072c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072c4:	2309      	movs	r3, #9
 80072c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80072e0:	431a      	orrs	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	00d8acbf 	.word	0x00d8acbf
 80072f8:	00e4e1bf 	.word	0x00e4e1bf
 80072fc:	00f423ff 	.word	0x00f423ff
 8007300:	0106737f 	.word	0x0106737f
 8007304:	011a499f 	.word	0x011a499f
 8007308:	01312cff 	.word	0x01312cff
 800730c:	014ca43f 	.word	0x014ca43f
 8007310:	016e35ff 	.word	0x016e35ff
 8007314:	01a6ab1f 	.word	0x01a6ab1f
 8007318:	01e847ff 	.word	0x01e847ff

0800731c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f023 0201 	bic.w	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d106      	bne.n	800736a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
 8007368:	e00b      	b.n	8007382 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
 800737c:	e001      	b.n	8007382 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e003      	b.n	800738a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007382:	2032      	movs	r0, #50	; 0x32
 8007384:	f7f9 f936 	bl	80005f4 <HAL_Delay>

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007394:	b084      	sub	sp, #16
 8007396:	b580      	push	{r7, lr}
 8007398:	b086      	sub	sp, #24
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073ae:	2300      	movs	r3, #0
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	e009      	b.n	80073c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	3340      	adds	r3, #64	; 0x40
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b0e      	cmp	r3, #14
 80073cc:	d9f2      	bls.n	80073b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d112      	bne.n	80073fa <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e005      	b.n	8007406 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800740c:	461a      	mov	r2, r3
 800740e:	2300      	movs	r3, #0
 8007410:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007418:	4619      	mov	r1, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007420:	461a      	mov	r2, r3
 8007422:	680b      	ldr	r3, [r1, #0]
 8007424:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	2b01      	cmp	r3, #1
 800742a:	d10c      	bne.n	8007446 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007432:	2100      	movs	r1, #0
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f971 	bl	800771c <USB_SetDevSpeed>
 800743a:	e018      	b.n	800746e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800743c:	2101      	movs	r1, #1
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f96c 	bl	800771c <USB_SetDevSpeed>
 8007444:	e013      	b.n	800746e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	2b03      	cmp	r3, #3
 800744a:	d10c      	bne.n	8007466 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007452:	2100      	movs	r1, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f961 	bl	800771c <USB_SetDevSpeed>
 800745a:	e008      	b.n	800746e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800745c:	2101      	movs	r1, #1
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f95c 	bl	800771c <USB_SetDevSpeed>
 8007464:	e003      	b.n	800746e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007466:	2103      	movs	r1, #3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f957 	bl	800771c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800746e:	2110      	movs	r1, #16
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f90b 	bl	800768c <USB_FlushTxFifo>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f929 	bl	80076d8 <USB_FlushRxFifo>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007496:	461a      	mov	r2, r3
 8007498:	2300      	movs	r3, #0
 800749a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	461a      	mov	r2, r3
 80074a4:	2300      	movs	r3, #0
 80074a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	461a      	mov	r2, r3
 80074b0:	2300      	movs	r3, #0
 80074b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	e043      	b.n	8007542 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d0:	d118      	bne.n	8007504 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10a      	bne.n	80074ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	461a      	mov	r2, r3
 80074e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	e013      	b.n	8007516 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	461a      	mov	r2, r3
 80074fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e008      	b.n	8007516 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	461a      	mov	r2, r3
 8007512:	2300      	movs	r3, #0
 8007514:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4413      	add	r3, r2
 800751e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007522:	461a      	mov	r2, r3
 8007524:	2300      	movs	r3, #0
 8007526:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	461a      	mov	r2, r3
 8007536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800753a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	3301      	adds	r3, #1
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	d3b7      	bcc.n	80074ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800754a:	2300      	movs	r3, #0
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	e043      	b.n	80075d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007566:	d118      	bne.n	800759a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	461a      	mov	r2, r3
 800757c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	e013      	b.n	80075ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	461a      	mov	r2, r3
 8007592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	e008      	b.n	80075ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a6:	461a      	mov	r2, r3
 80075a8:	2300      	movs	r3, #0
 80075aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	461a      	mov	r2, r3
 80075ba:	2300      	movs	r3, #0
 80075bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	461a      	mov	r2, r3
 80075cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	3301      	adds	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d3b7      	bcc.n	8007550 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d110      	bne.n	800761c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007600:	461a      	mov	r2, r3
 8007602:	4b1e      	ldr	r3, [pc, #120]	; (800767c <USB_DevInit+0x2e8>)
 8007604:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	4619      	mov	r1, r3
 8007616:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <USB_DevInit+0x2ec>)
 8007618:	4313      	orrs	r3, r2
 800761a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007628:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2b00      	cmp	r3, #0
 800762e:	d105      	bne.n	800763c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f043 0210 	orr.w	r2, r3, #16
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699a      	ldr	r2, [r3, #24]
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <USB_DevInit+0x2f0>)
 8007642:	4313      	orrs	r3, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	f043 0208 	orr.w	r2, r3, #8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d105      	bne.n	800766c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	4b08      	ldr	r3, [pc, #32]	; (8007688 <USB_DevInit+0x2f4>)
 8007666:	4313      	orrs	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007678:	b004      	add	sp, #16
 800767a:	4770      	bx	lr
 800767c:	00800100 	.word	0x00800100
 8007680:	00010003 	.word	0x00010003
 8007684:	803c3800 	.word	0x803c3800
 8007688:	40000004 	.word	0x40000004

0800768c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	019b      	lsls	r3, r3, #6
 800769e:	f043 0220 	orr.w	r2, r3, #32
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a09      	ldr	r2, [pc, #36]	; (80076d4 <USB_FlushTxFifo+0x48>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d901      	bls.n	80076b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e006      	b.n	80076c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f003 0320 	and.w	r3, r3, #32
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d0f0      	beq.n	80076a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	00030d40 	.word	0x00030d40

080076d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2210      	movs	r2, #16
 80076e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a09      	ldr	r2, [pc, #36]	; (8007718 <USB_FlushRxFifo+0x40>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d901      	bls.n	80076fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e006      	b.n	800770a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b10      	cmp	r3, #16
 8007706:	d0f0      	beq.n	80076ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	00030d40 	.word	0x00030d40

0800771c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800773c:	4313      	orrs	r3, r2
 800773e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800774e:	b480      	push	{r7}
 8007750:	b087      	sub	sp, #28
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 0306 	and.w	r3, r3, #6
 8007766:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]
 8007772:	e00a      	b.n	800778a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d002      	beq.n	8007780 <USB_GetDevSpeed+0x32>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b06      	cmp	r3, #6
 800777e:	d102      	bne.n	8007786 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8007780:	2303      	movs	r3, #3
 8007782:	75fb      	strb	r3, [r7, #23]
 8007784:	e001      	b.n	800778a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007798:	b480      	push	{r7}
 800779a:	b089      	sub	sp, #36	; 0x24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	460b      	mov	r3, r1
 80077a8:	71fb      	strb	r3, [r7, #7]
 80077aa:	4613      	mov	r3, r2
 80077ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80077b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d11a      	bne.n	80077f4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80077be:	88bb      	ldrh	r3, [r7, #4]
 80077c0:	3303      	adds	r3, #3
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
 80077ca:	e00f      	b.n	80077ec <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	031a      	lsls	r2, r3, #12
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077d8:	461a      	mov	r2, r3
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	3304      	adds	r3, #4
 80077e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	3301      	adds	r3, #1
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d3eb      	bcc.n	80077cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3724      	adds	r7, #36	; 0x24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007802:	b480      	push	{r7}
 8007804:	b089      	sub	sp, #36	; 0x24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	4613      	mov	r3, r2
 800780e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	3303      	adds	r3, #3
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	e00b      	b.n	800783e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	601a      	str	r2, [r3, #0]
    pDest++;
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	3304      	adds	r3, #4
 8007836:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	3301      	adds	r3, #1
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	d3ef      	bcc.n	8007826 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007846:	69fb      	ldr	r3, [r7, #28]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3724      	adds	r7, #36	; 0x24
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800786e:	f043 0302 	orr.w	r3, r3, #2
 8007872:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007874:	2003      	movs	r0, #3
 8007876:	f7f8 febd 	bl	80005f4 <HAL_Delay>

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	4013      	ands	r3, r2
 80078cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	0c1b      	lsrs	r3, r3, #16
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	4013      	ands	r3, r2
 8007900:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	b29b      	uxth	r3, r3
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007912:	b480      	push	{r7}
 8007914:	b085      	sub	sp, #20
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007940:	68bb      	ldr	r3, [r7, #8]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800794e:	b480      	push	{r7}
 8007950:	b087      	sub	sp, #28
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	01db      	lsls	r3, r3, #7
 8007980:	b2db      	uxtb	r3, r3
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4013      	ands	r3, r2
 800799a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800799c:	68bb      	ldr	r3, [r7, #8]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b083      	sub	sp, #12
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f003 0301 	and.w	r3, r3, #1
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e2:	4619      	mov	r1, r3
 80079e4:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <USB_ActivateSetup+0x68>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0306 	and.w	r3, r3, #6
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d109      	bne.n	8007a0e <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a08:	f043 0303 	orr.w	r3, r3, #3
 8007a0c:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	fffff800 	.word	0xfffff800

08007a34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	333c      	adds	r3, #60	; 0x3c
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4a26      	ldr	r2, [pc, #152]	; (8007aec <USB_EP0_OutStart+0xb8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d90a      	bls.n	8007a6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a68:	d101      	bne.n	8007a6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e037      	b.n	8007ade <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	461a      	mov	r2, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a9c:	f043 0318 	orr.w	r3, r3, #24
 8007aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ab4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d10f      	bne.n	8007adc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	4f54300a 	.word	0x4f54300a

08007af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4a13      	ldr	r2, [pc, #76]	; (8007b54 <USB_CoreReset+0x64>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d901      	bls.n	8007b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e01b      	b.n	8007b46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	daf2      	bge.n	8007afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f043 0201 	orr.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <USB_CoreReset+0x64>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d901      	bls.n	8007b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e006      	b.n	8007b46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d0f0      	beq.n	8007b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	00030d40 	.word	0x00030d40

08007b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b5c:	f7f8 fcec 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b60:	f000 f836 	bl	8007bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b64:	f000 ff06 	bl	8008974 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007b68:	f000 f8ec 	bl	8007d44 <MX_ADC1_Init>
  MX_ADC3_Init();
 8007b6c:	f000 f93c 	bl	8007de8 <MX_ADC3_Init>
  MX_ETH_Init();
 8007b70:	f000 f98c 	bl	8007e8c <MX_ETH_Init>
  MX_FMC_Init();
 8007b74:	f000 feb0 	bl	80088d8 <MX_FMC_Init>
  MX_I2C1_Init();
 8007b78:	f000 f9be 	bl	8007ef8 <MX_I2C1_Init>
  MX_I2C4_Init();
 8007b7c:	f000 f9fc 	bl	8007f78 <MX_I2C4_Init>
  MX_IWDG_Init();
 8007b80:	f000 fa3a 	bl	8007ff8 <MX_IWDG_Init>
  MX_QUADSPI_Init();
 8007b84:	f000 fa56 	bl	8008034 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8007b88:	f000 fa80 	bl	800808c <MX_RTC_Init>
  MX_SAI1_Init();
 8007b8c:	f000 fb1e 	bl	80081cc <MX_SAI1_Init>
  MX_SAI2_Init();
 8007b90:	f000 fbc4 	bl	800831c <MX_SAI2_Init>
  MX_SDMMC2_MMC_Init();
 8007b94:	f000 fbee 	bl	8008374 <MX_SDMMC2_MMC_Init>
  MX_SPDIFRX_Init();
 8007b98:	f000 fc1c 	bl	80083d4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8007b9c:	f000 fc4c 	bl	8008438 <MX_SPI2_Init>
  MX_TIM3_Init();
 8007ba0:	f000 fc86 	bl	80084b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8007ba4:	f000 fcde 	bl	8008564 <MX_TIM10_Init>
  MX_TIM11_Init();
 8007ba8:	f000 fd28 	bl	80085fc <MX_TIM11_Init>
  MX_TIM12_Init();
 8007bac:	f000 fd72 	bl	8008694 <MX_TIM12_Init>
  MX_UART5_Init();
 8007bb0:	f000 fdb4 	bl	800871c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8007bb4:	f000 fde2 	bl	800877c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8007bb8:	f000 fe10 	bl	80087dc <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8007bbc:	f000 fe3e 	bl	800883c <MX_USB_OTG_HS_PCD_Init>
  MX_WWDG_Init();
 8007bc0:	f000 fe6a 	bl	8008898 <MX_WWDG_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_Delay(500);
 8007bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007bc8:	f7f8 fd14 	bl	80005f4 <HAL_Delay>
 8007bcc:	e7fa      	b.n	8007bc4 <main+0x6c>
	...

08007bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b0b8      	sub	sp, #224	; 0xe0
 8007bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007bd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007bda:	2234      	movs	r2, #52	; 0x34
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f002 f8a0 	bl	8009d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007be4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	605a      	str	r2, [r3, #4]
 8007bee:	609a      	str	r2, [r3, #8]
 8007bf0:	60da      	str	r2, [r3, #12]
 8007bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007bf4:	f107 0308 	add.w	r3, r7, #8
 8007bf8:	2290      	movs	r2, #144	; 0x90
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f002 f891 	bl	8009d24 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8007c02:	f7fb fc39 	bl	8003478 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c06:	4b4c      	ldr	r3, [pc, #304]	; (8007d38 <SystemClock_Config+0x168>)
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	4a4b      	ldr	r2, [pc, #300]	; (8007d38 <SystemClock_Config+0x168>)
 8007c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c10:	6413      	str	r3, [r2, #64]	; 0x40
 8007c12:	4b49      	ldr	r3, [pc, #292]	; (8007d38 <SystemClock_Config+0x168>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8007c1e:	4b47      	ldr	r3, [pc, #284]	; (8007d3c <SystemClock_Config+0x16c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007c26:	4a45      	ldr	r2, [pc, #276]	; (8007d3c <SystemClock_Config+0x16c>)
 8007c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	4b43      	ldr	r3, [pc, #268]	; (8007d3c <SystemClock_Config+0x16c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007c3a:	2309      	movs	r3, #9
 8007c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8007c5c:	2319      	movs	r3, #25
 8007c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8007c62:	23c0      	movs	r3, #192	; 0xc0
 8007c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007c68:	2304      	movs	r3, #4
 8007c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007c6e:	2304      	movs	r3, #4
 8007c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fb fcdd 	bl	8003638 <HAL_RCC_OscConfig>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8007c84:	f000 ff94 	bl	8008bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c88:	230f      	movs	r3, #15
 8007c8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c94:	2300      	movs	r3, #0
 8007c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007c9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007caa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007cae:	2101      	movs	r1, #1
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fb ff33 	bl	8003b1c <HAL_RCC_ClockConfig>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8007cbc:	f000 ff78 	bl	8008bb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_RTC
 8007cc0:	4b1f      	ldr	r3, [pc, #124]	; (8007d40 <SystemClock_Config+0x170>)
 8007cc2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_SDMMC2;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007cc4:	23c0      	movs	r3, #192	; 0xc0
 8007cc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8007cd4:	23c0      	movs	r3, #192	; 0xc0
 8007cd6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007cec:	2300      	movs	r3, #0
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8007d02:	2300      	movs	r3, #0
 8007d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8007d06:	2300      	movs	r3, #0
 8007d08:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_SYSCLK;
 8007d12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d1a:	f107 0308 	add.w	r3, r7, #8
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fc f8ca 	bl	8003eb8 <HAL_RCCEx_PeriphCLKConfig>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d001      	beq.n	8007d2e <SystemClock_Config+0x15e>
  {
    Error_Handler();
 8007d2a:	f000 ff41 	bl	8008bb0 <Error_Handler>
  }
}
 8007d2e:	bf00      	nop
 8007d30:	37e0      	adds	r7, #224	; 0xe0
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	40007000 	.word	0x40007000
 8007d40:	051a4c60 	.word	0x051a4c60

08007d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	605a      	str	r2, [r3, #4]
 8007d52:	609a      	str	r2, [r3, #8]
 8007d54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007d56:	4b21      	ldr	r3, [pc, #132]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d58:	4a21      	ldr	r2, [pc, #132]	; (8007de0 <MX_ADC1_Init+0x9c>)
 8007d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007d5c:	4b1f      	ldr	r3, [pc, #124]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007d68:	4b1c      	ldr	r3, [pc, #112]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007d6e:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d7c:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <MX_ADC1_Init+0xa0>)
 8007d86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d88:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007d8e:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d90:	2201      	movs	r2, #1
 8007d92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007d94:	4b11      	ldr	r3, [pc, #68]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007da2:	480e      	ldr	r0, [pc, #56]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007da4:	f7f8 fc48 	bl	8000638 <HAL_ADC_Init>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8007dae:	f000 feff 	bl	8008bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007db2:	230c      	movs	r3, #12
 8007db4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4806      	ldr	r0, [pc, #24]	; (8007ddc <MX_ADC1_Init+0x98>)
 8007dc4:	f7f8 fc7c 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8007dce:	f000 feef 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	2000081c 	.word	0x2000081c
 8007de0:	40012000 	.word	0x40012000
 8007de4:	0f000001 	.word	0x0f000001

08007de8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007dee:	463b      	mov	r3, r7
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	605a      	str	r2, [r3, #4]
 8007df6:	609a      	str	r2, [r3, #8]
 8007df8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8007dfa:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007dfc:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <MX_ADC3_Init+0x9c>)
 8007dfe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007e00:	4b1f      	ldr	r3, [pc, #124]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007e06:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8007e0c:	4b1c      	ldr	r3, [pc, #112]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007e12:	4b1b      	ldr	r3, [pc, #108]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007e18:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007e20:	4b17      	ldr	r3, [pc, #92]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007e26:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e28:	4a17      	ldr	r2, [pc, #92]	; (8007e88 <MX_ADC3_Init+0xa0>)
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007e2c:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007e40:	4b0f      	ldr	r3, [pc, #60]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e42:	2201      	movs	r2, #1
 8007e44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007e46:	480e      	ldr	r0, [pc, #56]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e48:	f7f8 fbf6 	bl	8000638 <HAL_ADC_Init>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8007e52:	f000 fead 	bl	8008bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8007e56:	2306      	movs	r3, #6
 8007e58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007e62:	463b      	mov	r3, r7
 8007e64:	4619      	mov	r1, r3
 8007e66:	4806      	ldr	r0, [pc, #24]	; (8007e80 <MX_ADC3_Init+0x98>)
 8007e68:	f7f8 fc2a 	bl	80006c0 <HAL_ADC_ConfigChannel>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8007e72:	f000 fe9d 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000864 	.word	0x20000864
 8007e84:	40012200 	.word	0x40012200
 8007e88:	0f000001 	.word	0x0f000001

08007e8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007e94:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <MX_ETH_Init+0x68>)
 8007e96:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007e9e:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8007ea8:	2380      	movs	r3, #128	; 0x80
 8007eaa:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8007eac:	23e1      	movs	r3, #225	; 0xe1
 8007eae:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8007ebc:	4a0c      	ldr	r2, [pc, #48]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007ec8:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007ece:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007ed0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007ed4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8007ed6:	4806      	ldr	r0, [pc, #24]	; (8007ef0 <MX_ETH_Init+0x64>)
 8007ed8:	f7f8 ff32 	bl	8000d40 <HAL_ETH_Init>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 8007ee2:	f000 fe65 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000b18 	.word	0x20000b18
 8007ef4:	40028000 	.word	0x40028000

08007ef8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007efc:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007efe:	4a1c      	ldr	r2, [pc, #112]	; (8007f70 <MX_I2C1_Init+0x78>)
 8007f00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 8007f02:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f04:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <MX_I2C1_Init+0x7c>)
 8007f06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007f08:	4b18      	ldr	r3, [pc, #96]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007f20:	4b12      	ldr	r3, [pc, #72]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f2c:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f32:	480e      	ldr	r0, [pc, #56]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f34:	f7f9 fd1a 	bl	800196c <HAL_I2C_Init>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007f3e:	f000 fe37 	bl	8008bb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007f42:	2100      	movs	r1, #0
 8007f44:	4809      	ldr	r0, [pc, #36]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f46:	f7f9 fda1 	bl	8001a8c <HAL_I2CEx_ConfigAnalogFilter>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007f50:	f000 fe2e 	bl	8008bb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007f54:	2100      	movs	r1, #0
 8007f56:	4805      	ldr	r0, [pc, #20]	; (8007f6c <MX_I2C1_Init+0x74>)
 8007f58:	f7f9 fde3 	bl	8001b22 <HAL_I2CEx_ConfigDigitalFilter>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007f62:	f000 fe25 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	2000063c 	.word	0x2000063c
 8007f70:	40005400 	.word	0x40005400
 8007f74:	40000a0b 	.word	0x40000a0b

08007f78 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8007f7c:	4b1b      	ldr	r3, [pc, #108]	; (8007fec <MX_I2C4_Init+0x74>)
 8007f7e:	4a1c      	ldr	r2, [pc, #112]	; (8007ff0 <MX_I2C4_Init+0x78>)
 8007f80:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 8007f82:	4b1a      	ldr	r3, [pc, #104]	; (8007fec <MX_I2C4_Init+0x74>)
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <MX_I2C4_Init+0x7c>)
 8007f86:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8007f88:	4b18      	ldr	r3, [pc, #96]	; (8007fec <MX_I2C4_Init+0x74>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f8e:	4b17      	ldr	r3, [pc, #92]	; (8007fec <MX_I2C4_Init+0x74>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f94:	4b15      	ldr	r3, [pc, #84]	; (8007fec <MX_I2C4_Init+0x74>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8007f9a:	4b14      	ldr	r3, [pc, #80]	; (8007fec <MX_I2C4_Init+0x74>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007fa0:	4b12      	ldr	r3, [pc, #72]	; (8007fec <MX_I2C4_Init+0x74>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <MX_I2C4_Init+0x74>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <MX_I2C4_Init+0x74>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8007fb2:	480e      	ldr	r0, [pc, #56]	; (8007fec <MX_I2C4_Init+0x74>)
 8007fb4:	f7f9 fcda 	bl	800196c <HAL_I2C_Init>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8007fbe:	f000 fdf7 	bl	8008bb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	4809      	ldr	r0, [pc, #36]	; (8007fec <MX_I2C4_Init+0x74>)
 8007fc6:	f7f9 fd61 	bl	8001a8c <HAL_I2CEx_ConfigAnalogFilter>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8007fd0:	f000 fdee 	bl	8008bb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4805      	ldr	r0, [pc, #20]	; (8007fec <MX_I2C4_Init+0x74>)
 8007fd8:	f7f9 fda3 	bl	8001b22 <HAL_I2CEx_ConfigDigitalFilter>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8007fe2:	f000 fde5 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200000b8 	.word	0x200000b8
 8007ff0:	40006000 	.word	0x40006000
 8007ff4:	00303d5b 	.word	0x00303d5b

08007ff8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <MX_IWDG_Init+0x34>)
 8007ffe:	4a0c      	ldr	r2, [pc, #48]	; (8008030 <MX_IWDG_Init+0x38>)
 8008000:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <MX_IWDG_Init+0x34>)
 8008004:	2200      	movs	r2, #0
 8008006:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8008008:	4b08      	ldr	r3, [pc, #32]	; (800802c <MX_IWDG_Init+0x34>)
 800800a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800800e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8008010:	4b06      	ldr	r3, [pc, #24]	; (800802c <MX_IWDG_Init+0x34>)
 8008012:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008016:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008018:	4804      	ldr	r0, [pc, #16]	; (800802c <MX_IWDG_Init+0x34>)
 800801a:	f7f9 fdce 	bl	8001bba <HAL_IWDG_Init>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8008024:	f000 fdc4 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8008028:	bf00      	nop
 800802a:	bd80      	pop	{r7, pc}
 800802c:	200006c8 	.word	0x200006c8
 8008030:	40003000 	.word	0x40003000

08008034 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8008038:	4b12      	ldr	r3, [pc, #72]	; (8008084 <MX_QUADSPI_Init+0x50>)
 800803a:	4a13      	ldr	r2, [pc, #76]	; (8008088 <MX_QUADSPI_Init+0x54>)
 800803c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <MX_QUADSPI_Init+0x50>)
 8008040:	22ff      	movs	r2, #255	; 0xff
 8008042:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8008044:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <MX_QUADSPI_Init+0x50>)
 8008046:	2201      	movs	r2, #1
 8008048:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800804a:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <MX_QUADSPI_Init+0x50>)
 800804c:	2200      	movs	r2, #0
 800804e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <MX_QUADSPI_Init+0x50>)
 8008052:	2201      	movs	r2, #1
 8008054:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <MX_QUADSPI_Init+0x50>)
 8008058:	2200      	movs	r2, #0
 800805a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <MX_QUADSPI_Init+0x50>)
 800805e:	2200      	movs	r2, #0
 8008060:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <MX_QUADSPI_Init+0x50>)
 8008064:	2200      	movs	r2, #0
 8008066:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8008068:	4b06      	ldr	r3, [pc, #24]	; (8008084 <MX_QUADSPI_Init+0x50>)
 800806a:	2200      	movs	r2, #0
 800806c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800806e:	4805      	ldr	r0, [pc, #20]	; (8008084 <MX_QUADSPI_Init+0x50>)
 8008070:	f7fb fa12 	bl	8003498 <HAL_QSPI_Init>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800807a:	f000 fd99 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800807e:	bf00      	nop
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000b60 	.word	0x20000b60
 8008088:	a0001000 	.word	0xa0001000

0800808c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b092      	sub	sp, #72	; 0x48
 8008090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	605a      	str	r2, [r3, #4]
 800809c:	609a      	str	r2, [r3, #8]
 800809e:	60da      	str	r2, [r3, #12]
 80080a0:	611a      	str	r2, [r3, #16]
 80080a2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80080a4:	2300      	movs	r3, #0
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80080a8:	463b      	mov	r3, r7
 80080aa:	222c      	movs	r2, #44	; 0x2c
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 fe38 	bl	8009d24 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80080b4:	4b43      	ldr	r3, [pc, #268]	; (80081c4 <MX_RTC_Init+0x138>)
 80080b6:	4a44      	ldr	r2, [pc, #272]	; (80081c8 <MX_RTC_Init+0x13c>)
 80080b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80080ba:	4b42      	ldr	r3, [pc, #264]	; (80081c4 <MX_RTC_Init+0x138>)
 80080bc:	2200      	movs	r2, #0
 80080be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80080c0:	4b40      	ldr	r3, [pc, #256]	; (80081c4 <MX_RTC_Init+0x138>)
 80080c2:	227f      	movs	r2, #127	; 0x7f
 80080c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80080c6:	4b3f      	ldr	r3, [pc, #252]	; (80081c4 <MX_RTC_Init+0x138>)
 80080c8:	22ff      	movs	r2, #255	; 0xff
 80080ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 80080cc:	4b3d      	ldr	r3, [pc, #244]	; (80081c4 <MX_RTC_Init+0x138>)
 80080ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80080d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80080d4:	4b3b      	ldr	r3, [pc, #236]	; (80081c4 <MX_RTC_Init+0x138>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80080da:	4b3a      	ldr	r3, [pc, #232]	; (80081c4 <MX_RTC_Init+0x138>)
 80080dc:	2200      	movs	r2, #0
 80080de:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080e0:	4838      	ldr	r0, [pc, #224]	; (80081c4 <MX_RTC_Init+0x138>)
 80080e2:	f7fc fc69 	bl	80049b8 <HAL_RTC_Init>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 80080ec:	f000 fd60 	bl	8008bb0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008102:	2300      	movs	r3, #0
 8008104:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008106:	2300      	movs	r3, #0
 8008108:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800810a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800810e:	2201      	movs	r2, #1
 8008110:	4619      	mov	r1, r3
 8008112:	482c      	ldr	r0, [pc, #176]	; (80081c4 <MX_RTC_Init+0x138>)
 8008114:	f7fc fccc 	bl	8004ab0 <HAL_RTC_SetTime>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800811e:	f000 fd47 	bl	8008bb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8008128:	2301      	movs	r3, #1
 800812a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8008134:	2300      	movs	r3, #0
 8008136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800813a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800813e:	2201      	movs	r2, #1
 8008140:	4619      	mov	r1, r3
 8008142:	4820      	ldr	r0, [pc, #128]	; (80081c4 <MX_RTC_Init+0x138>)
 8008144:	f7fc fd72 	bl	8004c2c <HAL_RTC_SetDate>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800814e:	f000 fd2f 	bl	8008bb0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8008152:	2300      	movs	r3, #0
 8008154:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8008156:	2300      	movs	r3, #0
 8008158:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800815a:	2300      	movs	r3, #0
 800815c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800816a:	2300      	movs	r3, #0
 800816c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008172:	2300      	movs	r3, #0
 8008174:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800817c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8008182:	463b      	mov	r3, r7
 8008184:	2201      	movs	r2, #1
 8008186:	4619      	mov	r1, r3
 8008188:	480e      	ldr	r0, [pc, #56]	; (80081c4 <MX_RTC_Init+0x138>)
 800818a:	f7fc fdf7 	bl	8004d7c <HAL_RTC_SetAlarm>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8008194:	f000 fd0c 	bl	8008bb0 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800819e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80081a4:	463b      	mov	r3, r7
 80081a6:	2201      	movs	r2, #1
 80081a8:	4619      	mov	r1, r3
 80081aa:	4806      	ldr	r0, [pc, #24]	; (80081c4 <MX_RTC_Init+0x138>)
 80081ac:	f7fc fde6 	bl	8004d7c <HAL_RTC_SetAlarm>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 80081b6:	f000 fcfb 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80081ba:	bf00      	nop
 80081bc:	3748      	adds	r7, #72	; 0x48
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	2000096c 	.word	0x2000096c
 80081c8:	40002800 	.word	0x40002800

080081cc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80081d0:	4b4d      	ldr	r3, [pc, #308]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081d2:	4a4e      	ldr	r2, [pc, #312]	; (800830c <MX_SAI1_Init+0x140>)
 80081d4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80081d6:	4b4c      	ldr	r3, [pc, #304]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081d8:	2200      	movs	r2, #0
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80081dc:	4b4a      	ldr	r3, [pc, #296]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081de:	2200      	movs	r2, #0
 80081e0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80081e2:	4b49      	ldr	r3, [pc, #292]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081e4:	2240      	movs	r2, #64	; 0x40
 80081e6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80081e8:	4b47      	ldr	r3, [pc, #284]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80081ee:	4b46      	ldr	r3, [pc, #280]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80081f4:	4b44      	ldr	r3, [pc, #272]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80081fa:	4b43      	ldr	r3, [pc, #268]	; (8008308 <MX_SAI1_Init+0x13c>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008200:	4b41      	ldr	r3, [pc, #260]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008202:	2200      	movs	r2, #0
 8008204:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008206:	4b40      	ldr	r3, [pc, #256]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008208:	2200      	movs	r2, #0
 800820a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800820c:	4b3e      	ldr	r3, [pc, #248]	; (8008308 <MX_SAI1_Init+0x13c>)
 800820e:	4a40      	ldr	r2, [pc, #256]	; (8008310 <MX_SAI1_Init+0x144>)
 8008210:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008212:	4b3d      	ldr	r3, [pc, #244]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008214:	2200      	movs	r2, #0
 8008216:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8008218:	4b3b      	ldr	r3, [pc, #236]	; (8008308 <MX_SAI1_Init+0x13c>)
 800821a:	2200      	movs	r2, #0
 800821c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800821e:	4b3a      	ldr	r3, [pc, #232]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008220:	2200      	movs	r2, #0
 8008222:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008224:	4b38      	ldr	r3, [pc, #224]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008226:	2200      	movs	r2, #0
 8008228:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800822a:	4b37      	ldr	r3, [pc, #220]	; (8008308 <MX_SAI1_Init+0x13c>)
 800822c:	2208      	movs	r2, #8
 800822e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8008230:	4b35      	ldr	r3, [pc, #212]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008232:	2201      	movs	r2, #1
 8008234:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8008236:	4b34      	ldr	r3, [pc, #208]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008238:	2200      	movs	r2, #0
 800823a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800823c:	4b32      	ldr	r3, [pc, #200]	; (8008308 <MX_SAI1_Init+0x13c>)
 800823e:	2200      	movs	r2, #0
 8008240:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8008242:	4b31      	ldr	r3, [pc, #196]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008244:	2200      	movs	r2, #0
 8008246:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8008248:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <MX_SAI1_Init+0x13c>)
 800824a:	2200      	movs	r2, #0
 800824c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800824e:	4b2e      	ldr	r3, [pc, #184]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008250:	2200      	movs	r2, #0
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8008254:	4b2c      	ldr	r3, [pc, #176]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008256:	2201      	movs	r2, #1
 8008258:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800825a:	4b2b      	ldr	r3, [pc, #172]	; (8008308 <MX_SAI1_Init+0x13c>)
 800825c:	2200      	movs	r2, #0
 800825e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8008260:	4829      	ldr	r0, [pc, #164]	; (8008308 <MX_SAI1_Init+0x13c>)
 8008262:	f7fc ff15 	bl	8005090 <HAL_SAI_Init>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800826c:	f000 fca0 	bl	8008bb0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <MX_SAI1_Init+0x148>)
 8008272:	4a29      	ldr	r2, [pc, #164]	; (8008318 <MX_SAI1_Init+0x14c>)
 8008274:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8008276:	4b27      	ldr	r3, [pc, #156]	; (8008314 <MX_SAI1_Init+0x148>)
 8008278:	2200      	movs	r2, #0
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800827c:	4b25      	ldr	r3, [pc, #148]	; (8008314 <MX_SAI1_Init+0x148>)
 800827e:	2203      	movs	r2, #3
 8008280:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8008282:	4b24      	ldr	r3, [pc, #144]	; (8008314 <MX_SAI1_Init+0x148>)
 8008284:	2240      	movs	r2, #64	; 0x40
 8008286:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8008288:	4b22      	ldr	r3, [pc, #136]	; (8008314 <MX_SAI1_Init+0x148>)
 800828a:	2200      	movs	r2, #0
 800828c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <MX_SAI1_Init+0x148>)
 8008290:	2200      	movs	r2, #0
 8008292:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <MX_SAI1_Init+0x148>)
 8008296:	2201      	movs	r2, #1
 8008298:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800829a:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <MX_SAI1_Init+0x148>)
 800829c:	2200      	movs	r2, #0
 800829e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80082a0:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <MX_SAI1_Init+0x148>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80082a6:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <MX_SAI1_Init+0x148>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80082ac:	4b19      	ldr	r3, [pc, #100]	; (8008314 <MX_SAI1_Init+0x148>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80082b2:	4b18      	ldr	r3, [pc, #96]	; (8008314 <MX_SAI1_Init+0x148>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80082b8:	4b16      	ldr	r3, [pc, #88]	; (8008314 <MX_SAI1_Init+0x148>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 80082be:	4b15      	ldr	r3, [pc, #84]	; (8008314 <MX_SAI1_Init+0x148>)
 80082c0:	2218      	movs	r2, #24
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80082c4:	4b13      	ldr	r3, [pc, #76]	; (8008314 <MX_SAI1_Init+0x148>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80082ca:	4b12      	ldr	r3, [pc, #72]	; (8008314 <MX_SAI1_Init+0x148>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80082d0:	4b10      	ldr	r3, [pc, #64]	; (8008314 <MX_SAI1_Init+0x148>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <MX_SAI1_Init+0x148>)
 80082d8:	2200      	movs	r2, #0
 80082da:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <MX_SAI1_Init+0x148>)
 80082de:	2200      	movs	r2, #0
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <MX_SAI1_Init+0x148>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <MX_SAI1_Init+0x148>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <MX_SAI1_Init+0x148>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80082f4:	4807      	ldr	r0, [pc, #28]	; (8008314 <MX_SAI1_Init+0x148>)
 80082f6:	f7fc fecb 	bl	8005090 <HAL_SAI_Init>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8008300:	f000 fc56 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8008304:	bf00      	nop
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000a20 	.word	0x20000a20
 800830c:	40015804 	.word	0x40015804
 8008310:	0002ee00 	.word	0x0002ee00
 8008314:	20000718 	.word	0x20000718
 8008318:	40015824 	.word	0x40015824

0800831c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <MX_SAI2_Init+0x50>)
 8008322:	4a13      	ldr	r2, [pc, #76]	; (8008370 <MX_SAI2_Init+0x54>)
 8008324:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8008326:	4b11      	ldr	r3, [pc, #68]	; (800836c <MX_SAI2_Init+0x50>)
 8008328:	2204      	movs	r2, #4
 800832a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800832c:	4b0f      	ldr	r3, [pc, #60]	; (800836c <MX_SAI2_Init+0x50>)
 800832e:	2200      	movs	r2, #0
 8008330:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8008332:	4b0e      	ldr	r3, [pc, #56]	; (800836c <MX_SAI2_Init+0x50>)
 8008334:	2200      	movs	r2, #0
 8008336:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <MX_SAI2_Init+0x50>)
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <MX_SAI2_Init+0x50>)
 8008340:	2200      	movs	r2, #0
 8008342:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8008344:	4b09      	ldr	r3, [pc, #36]	; (800836c <MX_SAI2_Init+0x50>)
 8008346:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800834a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <MX_SAI2_Init+0x50>)
 800834e:	2200      	movs	r2, #0
 8008350:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <MX_SAI2_Init+0x50>)
 8008354:	2200      	movs	r2, #0
 8008356:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8008358:	4804      	ldr	r0, [pc, #16]	; (800836c <MX_SAI2_Init+0x50>)
 800835a:	f7fc fe99 	bl	8005090 <HAL_SAI_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 8008364:	f000 fc24 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200001b4 	.word	0x200001b4
 8008370:	40015c04 	.word	0x40015c04

08008374 <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 800837a:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <MX_SDMMC2_MMC_Init+0x5c>)
 800837c:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 8008380:	2200      	movs	r2, #0
 8008382:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8008384:	4b11      	ldr	r3, [pc, #68]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 8008386:	2200      	movs	r2, #0
 8008388:	609a      	str	r2, [r3, #8]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800838a:	4b10      	ldr	r3, [pc, #64]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 800838c:	2200      	movs	r2, #0
 800838e:	60da      	str	r2, [r3, #12]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 8008392:	2200      	movs	r2, #0
 8008394:	611a      	str	r2, [r3, #16]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008396:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 8008398:	2200      	movs	r2, #0
 800839a:	615a      	str	r2, [r3, #20]
  hmmc2.Init.ClockDiv = 0;
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 800839e:	2200      	movs	r2, #0
 80083a0:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 80083a2:	480a      	ldr	r0, [pc, #40]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 80083a4:	f7f9 fc4f 	bl	8001c46 <HAL_MMC_Init>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <MX_SDMMC2_MMC_Init+0x3e>
  {
    Error_Handler();
 80083ae:	f000 fbff 	bl	8008bb0 <Error_Handler>
  }
  if (HAL_MMC_ConfigWideBusOperation(&hmmc2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80083b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083b6:	4805      	ldr	r0, [pc, #20]	; (80083cc <MX_SDMMC2_MMC_Init+0x58>)
 80083b8:	f7f9 fea8 	bl	800210c <HAL_MMC_ConfigWideBusOperation>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <MX_SDMMC2_MMC_Init+0x52>
  {
    Error_Handler();
 80083c2:	f000 fbf5 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80083c6:	bf00      	nop
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000038 	.word	0x20000038
 80083d0:	40011c00 	.word	0x40011c00

080083d4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80083d8:	4b16      	ldr	r3, [pc, #88]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 80083da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80083de:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 80083e0:	4b14      	ldr	r3, [pc, #80]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 80083e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80083e6:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80083e8:	4b12      	ldr	r3, [pc, #72]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80083f4:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80083fa:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 8008402:	2200      	movs	r2, #0
 8008404:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8008406:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 8008408:	2200      	movs	r2, #0
 800840a:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800840c:	4b09      	ldr	r3, [pc, #36]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 800840e:	2200      	movs	r2, #0
 8008410:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8008412:	4b08      	ldr	r3, [pc, #32]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 8008414:	2200      	movs	r2, #0
 8008416:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 800841a:	2200      	movs	r2, #0
 800841c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <MX_SPDIFRX_Init+0x60>)
 8008420:	f7fd f812 	bl	8005448 <HAL_SPDIFRX_Init>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 800842a:	f000 fbc1 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000168 	.word	0x20000168

08008438 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800843c:	4b1a      	ldr	r3, [pc, #104]	; (80084a8 <MX_SPI2_Init+0x70>)
 800843e:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <MX_SPI2_Init+0x74>)
 8008440:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008442:	4b19      	ldr	r3, [pc, #100]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008448:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800844a:	4b17      	ldr	r3, [pc, #92]	; (80084a8 <MX_SPI2_Init+0x70>)
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8008450:	4b15      	ldr	r3, [pc, #84]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008452:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008456:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008458:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <MX_SPI2_Init+0x70>)
 800845a:	2200      	movs	r2, #0
 800845c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800845e:	4b12      	ldr	r3, [pc, #72]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008460:	2200      	movs	r2, #0
 8008462:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8008464:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008466:	2200      	movs	r2, #0
 8008468:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800846a:	4b0f      	ldr	r3, [pc, #60]	; (80084a8 <MX_SPI2_Init+0x70>)
 800846c:	2200      	movs	r2, #0
 800846e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008472:	2200      	movs	r2, #0
 8008474:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008478:	2200      	movs	r2, #0
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800847c:	4b0a      	ldr	r3, [pc, #40]	; (80084a8 <MX_SPI2_Init+0x70>)
 800847e:	2200      	movs	r2, #0
 8008480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008484:	2207      	movs	r2, #7
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <MX_SPI2_Init+0x70>)
 800848a:	2200      	movs	r2, #0
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800848e:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008490:	2208      	movs	r2, #8
 8008492:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008494:	4804      	ldr	r0, [pc, #16]	; (80084a8 <MX_SPI2_Init+0x70>)
 8008496:	f7fd f833 	bl	8005500 <HAL_SPI_Init>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 80084a0:	f000 fb86 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80084a4:	bf00      	nop
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000104 	.word	0x20000104
 80084ac:	40003800 	.word	0x40003800

080084b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084b6:	f107 031c 	add.w	r3, r7, #28
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	605a      	str	r2, [r3, #4]
 80084c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80084c2:	463b      	mov	r3, r7
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	611a      	str	r2, [r3, #16]
 80084d0:	615a      	str	r2, [r3, #20]
 80084d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80084d4:	4b21      	ldr	r3, [pc, #132]	; (800855c <MX_TIM3_Init+0xac>)
 80084d6:	4a22      	ldr	r2, [pc, #136]	; (8008560 <MX_TIM3_Init+0xb0>)
 80084d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80084da:	4b20      	ldr	r3, [pc, #128]	; (800855c <MX_TIM3_Init+0xac>)
 80084dc:	2200      	movs	r2, #0
 80084de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084e0:	4b1e      	ldr	r3, [pc, #120]	; (800855c <MX_TIM3_Init+0xac>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80084e6:	4b1d      	ldr	r3, [pc, #116]	; (800855c <MX_TIM3_Init+0xac>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084ec:	4b1b      	ldr	r3, [pc, #108]	; (800855c <MX_TIM3_Init+0xac>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084f2:	4b1a      	ldr	r3, [pc, #104]	; (800855c <MX_TIM3_Init+0xac>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80084f8:	4818      	ldr	r0, [pc, #96]	; (800855c <MX_TIM3_Init+0xac>)
 80084fa:	f7fd f8be 	bl	800567a <HAL_TIM_PWM_Init>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008504:	f000 fb54 	bl	8008bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800850c:	2300      	movs	r3, #0
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008510:	f107 031c 	add.w	r3, r7, #28
 8008514:	4619      	mov	r1, r3
 8008516:	4811      	ldr	r0, [pc, #68]	; (800855c <MX_TIM3_Init+0xac>)
 8008518:	f7fd fcf0 	bl	8005efc <HAL_TIMEx_MasterConfigSynchronization>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8008522:	f000 fb45 	bl	8008bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008526:	2360      	movs	r3, #96	; 0x60
 8008528:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008536:	463b      	mov	r3, r7
 8008538:	2208      	movs	r2, #8
 800853a:	4619      	mov	r1, r3
 800853c:	4807      	ldr	r0, [pc, #28]	; (800855c <MX_TIM3_Init+0xac>)
 800853e:	f7fd f8c7 	bl	80056d0 <HAL_TIM_PWM_ConfigChannel>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8008548:	f000 fb32 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800854c:	4803      	ldr	r0, [pc, #12]	; (800855c <MX_TIM3_Init+0xac>)
 800854e:	f000 ff77 	bl	8009440 <HAL_TIM_MspPostInit>

}
 8008552:	bf00      	nop
 8008554:	3728      	adds	r7, #40	; 0x28
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200006d8 	.word	0x200006d8
 8008560:	40000400 	.word	0x40000400

08008564 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	605a      	str	r2, [r3, #4]
 8008572:	609a      	str	r2, [r3, #8]
 8008574:	60da      	str	r2, [r3, #12]
 8008576:	611a      	str	r2, [r3, #16]
 8008578:	615a      	str	r2, [r3, #20]
 800857a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800857c:	4b1d      	ldr	r3, [pc, #116]	; (80085f4 <MX_TIM10_Init+0x90>)
 800857e:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <MX_TIM10_Init+0x94>)
 8008580:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8008582:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <MX_TIM10_Init+0x90>)
 8008584:	2200      	movs	r2, #0
 8008586:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008588:	4b1a      	ldr	r3, [pc, #104]	; (80085f4 <MX_TIM10_Init+0x90>)
 800858a:	2200      	movs	r2, #0
 800858c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <MX_TIM10_Init+0x90>)
 8008590:	2200      	movs	r2, #0
 8008592:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008594:	4b17      	ldr	r3, [pc, #92]	; (80085f4 <MX_TIM10_Init+0x90>)
 8008596:	2200      	movs	r2, #0
 8008598:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800859a:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <MX_TIM10_Init+0x90>)
 800859c:	2200      	movs	r2, #0
 800859e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80085a0:	4814      	ldr	r0, [pc, #80]	; (80085f4 <MX_TIM10_Init+0x90>)
 80085a2:	f7fd f83f 	bl	8005624 <HAL_TIM_Base_Init>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 80085ac:	f000 fb00 	bl	8008bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80085b0:	4810      	ldr	r0, [pc, #64]	; (80085f4 <MX_TIM10_Init+0x90>)
 80085b2:	f7fd f862 	bl	800567a <HAL_TIM_PWM_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 80085bc:	f000 faf8 	bl	8008bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085c0:	2360      	movs	r3, #96	; 0x60
 80085c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085d0:	1d3b      	adds	r3, r7, #4
 80085d2:	2200      	movs	r2, #0
 80085d4:	4619      	mov	r1, r3
 80085d6:	4807      	ldr	r0, [pc, #28]	; (80085f4 <MX_TIM10_Init+0x90>)
 80085d8:	f7fd f87a 	bl	80056d0 <HAL_TIM_PWM_ConfigChannel>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 80085e2:	f000 fae5 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80085e6:	4803      	ldr	r0, [pc, #12]	; (80085f4 <MX_TIM10_Init+0x90>)
 80085e8:	f000 ff2a 	bl	8009440 <HAL_TIM_MspPostInit>

}
 80085ec:	bf00      	nop
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000688 	.word	0x20000688
 80085f8:	40014400 	.word	0x40014400

080085fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8008602:	1d3b      	adds	r3, r7, #4
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	611a      	str	r2, [r3, #16]
 8008610:	615a      	str	r2, [r3, #20]
 8008612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8008614:	4b1d      	ldr	r3, [pc, #116]	; (800868c <MX_TIM11_Init+0x90>)
 8008616:	4a1e      	ldr	r2, [pc, #120]	; (8008690 <MX_TIM11_Init+0x94>)
 8008618:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800861a:	4b1c      	ldr	r3, [pc, #112]	; (800868c <MX_TIM11_Init+0x90>)
 800861c:	2200      	movs	r2, #0
 800861e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <MX_TIM11_Init+0x90>)
 8008622:	2200      	movs	r2, #0
 8008624:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 8008626:	4b19      	ldr	r3, [pc, #100]	; (800868c <MX_TIM11_Init+0x90>)
 8008628:	2200      	movs	r2, #0
 800862a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800862c:	4b17      	ldr	r3, [pc, #92]	; (800868c <MX_TIM11_Init+0x90>)
 800862e:	2200      	movs	r2, #0
 8008630:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008632:	4b16      	ldr	r3, [pc, #88]	; (800868c <MX_TIM11_Init+0x90>)
 8008634:	2200      	movs	r2, #0
 8008636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008638:	4814      	ldr	r0, [pc, #80]	; (800868c <MX_TIM11_Init+0x90>)
 800863a:	f7fc fff3 	bl	8005624 <HAL_TIM_Base_Init>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8008644:	f000 fab4 	bl	8008bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8008648:	4810      	ldr	r0, [pc, #64]	; (800868c <MX_TIM11_Init+0x90>)
 800864a:	f7fd f816 	bl	800567a <HAL_TIM_PWM_Init>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8008654:	f000 faac 	bl	8008bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008658:	2360      	movs	r3, #96	; 0x60
 800865a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008668:	1d3b      	adds	r3, r7, #4
 800866a:	2200      	movs	r2, #0
 800866c:	4619      	mov	r1, r3
 800866e:	4807      	ldr	r0, [pc, #28]	; (800868c <MX_TIM11_Init+0x90>)
 8008670:	f7fd f82e 	bl	80056d0 <HAL_TIM_PWM_ConfigChannel>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 800867a:	f000 fa99 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800867e:	4803      	ldr	r0, [pc, #12]	; (800868c <MX_TIM11_Init+0x90>)
 8008680:	f000 fede 	bl	8009440 <HAL_TIM_MspPostInit>

}
 8008684:	bf00      	nop
 8008686:	3720      	adds	r7, #32
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	2000092c 	.word	0x2000092c
 8008690:	40014800 	.word	0x40014800

08008694 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800869a:	1d3b      	adds	r3, r7, #4
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	609a      	str	r2, [r3, #8]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	611a      	str	r2, [r3, #16]
 80086a8:	615a      	str	r2, [r3, #20]
 80086aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80086ac:	4b19      	ldr	r3, [pc, #100]	; (8008714 <MX_TIM12_Init+0x80>)
 80086ae:	4a1a      	ldr	r2, [pc, #104]	; (8008718 <MX_TIM12_Init+0x84>)
 80086b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80086b2:	4b18      	ldr	r3, [pc, #96]	; (8008714 <MX_TIM12_Init+0x80>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086b8:	4b16      	ldr	r3, [pc, #88]	; (8008714 <MX_TIM12_Init+0x80>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <MX_TIM12_Init+0x80>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086c4:	4b13      	ldr	r3, [pc, #76]	; (8008714 <MX_TIM12_Init+0x80>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <MX_TIM12_Init+0x80>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80086d0:	4810      	ldr	r0, [pc, #64]	; (8008714 <MX_TIM12_Init+0x80>)
 80086d2:	f7fc ffd2 	bl	800567a <HAL_TIM_PWM_Init>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80086dc:	f000 fa68 	bl	8008bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80086e0:	2360      	movs	r3, #96	; 0x60
 80086e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80086f0:	1d3b      	adds	r3, r7, #4
 80086f2:	2200      	movs	r2, #0
 80086f4:	4619      	mov	r1, r3
 80086f6:	4807      	ldr	r0, [pc, #28]	; (8008714 <MX_TIM12_Init+0x80>)
 80086f8:	f7fc ffea 	bl	80056d0 <HAL_TIM_PWM_ConfigChannel>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d001      	beq.n	8008706 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8008702:	f000 fa55 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8008706:	4803      	ldr	r0, [pc, #12]	; (8008714 <MX_TIM12_Init+0x80>)
 8008708:	f000 fe9a 	bl	8009440 <HAL_TIM_MspPostInit>

}
 800870c:	bf00      	nop
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20000aa4 	.word	0x20000aa4
 8008718:	40001800 	.word	0x40001800

0800871c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <MX_UART5_Init+0x58>)
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <MX_UART5_Init+0x5c>)
 8008724:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8008726:	4b13      	ldr	r3, [pc, #76]	; (8008774 <MX_UART5_Init+0x58>)
 8008728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800872c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <MX_UART5_Init+0x58>)
 8008730:	2200      	movs	r2, #0
 8008732:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <MX_UART5_Init+0x58>)
 8008736:	2200      	movs	r2, #0
 8008738:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <MX_UART5_Init+0x58>)
 800873c:	2200      	movs	r2, #0
 800873e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008740:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <MX_UART5_Init+0x58>)
 8008742:	220c      	movs	r2, #12
 8008744:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <MX_UART5_Init+0x58>)
 8008748:	2200      	movs	r2, #0
 800874a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800874c:	4b09      	ldr	r3, [pc, #36]	; (8008774 <MX_UART5_Init+0x58>)
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008752:	4b08      	ldr	r3, [pc, #32]	; (8008774 <MX_UART5_Init+0x58>)
 8008754:	2200      	movs	r2, #0
 8008756:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <MX_UART5_Init+0x58>)
 800875a:	2200      	movs	r2, #0
 800875c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800875e:	4805      	ldr	r0, [pc, #20]	; (8008774 <MX_UART5_Init+0x58>)
 8008760:	f7fd fc28 	bl	8005fb4 <HAL_UART_Init>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800876a:	f000 fa21 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800876e:	bf00      	nop
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	2000079c 	.word	0x2000079c
 8008778:	40005000 	.word	0x40005000

0800877c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008780:	4b14      	ldr	r3, [pc, #80]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 8008782:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <MX_USART1_UART_Init+0x5c>)
 8008784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008786:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 8008788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800878c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008794:	4b0f      	ldr	r3, [pc, #60]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 8008796:	2200      	movs	r2, #0
 8008798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800879a:	4b0e      	ldr	r3, [pc, #56]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 800879c:	2200      	movs	r2, #0
 800879e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087a0:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 80087a2:	220c      	movs	r2, #12
 80087a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087a6:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087b2:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087be:	4805      	ldr	r0, [pc, #20]	; (80087d4 <MX_USART1_UART_Init+0x58>)
 80087c0:	f7fd fbf8 	bl	8005fb4 <HAL_UART_Init>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80087ca:	f000 f9f1 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200008ac 	.word	0x200008ac
 80087d8:	40011000 	.word	0x40011000

080087dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80087e0:	4b14      	ldr	r3, [pc, #80]	; (8008834 <MX_USART6_UART_Init+0x58>)
 80087e2:	4a15      	ldr	r2, [pc, #84]	; (8008838 <MX_USART6_UART_Init+0x5c>)
 80087e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80087e6:	4b13      	ldr	r3, [pc, #76]	; (8008834 <MX_USART6_UART_Init+0x58>)
 80087e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80087ee:	4b11      	ldr	r3, [pc, #68]	; (8008834 <MX_USART6_UART_Init+0x58>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80087f4:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <MX_USART6_UART_Init+0x58>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80087fa:	4b0e      	ldr	r3, [pc, #56]	; (8008834 <MX_USART6_UART_Init+0x58>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <MX_USART6_UART_Init+0x58>)
 8008802:	220c      	movs	r2, #12
 8008804:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <MX_USART6_UART_Init+0x58>)
 8008808:	2200      	movs	r2, #0
 800880a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800880c:	4b09      	ldr	r3, [pc, #36]	; (8008834 <MX_USART6_UART_Init+0x58>)
 800880e:	2200      	movs	r2, #0
 8008810:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <MX_USART6_UART_Init+0x58>)
 8008814:	2200      	movs	r2, #0
 8008816:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008818:	4b06      	ldr	r3, [pc, #24]	; (8008834 <MX_USART6_UART_Init+0x58>)
 800881a:	2200      	movs	r2, #0
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800881e:	4805      	ldr	r0, [pc, #20]	; (8008834 <MX_USART6_UART_Init+0x58>)
 8008820:	f7fd fbc8 	bl	8005fb4 <HAL_UART_Init>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800882a:	f000 f9c1 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200009a0 	.word	0x200009a0
 8008838:	40011400 	.word	0x40011400

0800883c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008840:	4b13      	ldr	r3, [pc, #76]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008842:	4a14      	ldr	r2, [pc, #80]	; (8008894 <MX_USB_OTG_HS_PCD_Init+0x58>)
 8008844:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008848:	2209      	movs	r2, #9
 800884a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800884c:	4b10      	ldr	r3, [pc, #64]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800884e:	2200      	movs	r2, #0
 8008850:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8008852:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008854:	2201      	movs	r2, #1
 8008856:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008858:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800885a:	2200      	movs	r2, #0
 800885c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800885e:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008860:	2200      	movs	r2, #0
 8008862:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008866:	2200      	movs	r2, #0
 8008868:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800886c:	2200      	movs	r2, #0
 800886e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008872:	2200      	movs	r2, #0
 8008874:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008876:	4b06      	ldr	r3, [pc, #24]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8008878:	2200      	movs	r2, #0
 800887a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800887c:	4804      	ldr	r0, [pc, #16]	; (8008890 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800887e:	f7f9 fe73 	bl	8002568 <HAL_PCD_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8008888:	f000 f992 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800888c:	bf00      	nop
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20000238 	.word	0x20000238
 8008894:	40040000 	.word	0x40040000

08008898 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800889c:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <MX_WWDG_Init+0x38>)
 800889e:	4a0d      	ldr	r2, [pc, #52]	; (80088d4 <MX_WWDG_Init+0x3c>)
 80088a0:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <MX_WWDG_Init+0x38>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80088a8:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <MX_WWDG_Init+0x38>)
 80088aa:	2240      	movs	r2, #64	; 0x40
 80088ac:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 128;
 80088ae:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <MX_WWDG_Init+0x38>)
 80088b0:	2280      	movs	r2, #128	; 0x80
 80088b2:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80088b4:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <MX_WWDG_Init+0x38>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80088ba:	4805      	ldr	r0, [pc, #20]	; (80088d0 <MX_WWDG_Init+0x38>)
 80088bc:	f7fd ff85 	bl	80067ca <HAL_WWDG_Init>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 80088c6:	f000 f973 	bl	8008bb0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80088ca:	bf00      	nop
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	2000098c 	.word	0x2000098c
 80088d4:	40002c00 	.word	0x40002c00

080088d8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80088de:	1d3b      	adds	r3, r7, #4
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	605a      	str	r2, [r3, #4]
 80088e6:	609a      	str	r2, [r3, #8]
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	611a      	str	r2, [r3, #16]
 80088ec:	615a      	str	r2, [r3, #20]
 80088ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80088f0:	4b1e      	ldr	r3, [pc, #120]	; (800896c <MX_FMC_Init+0x94>)
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <MX_FMC_Init+0x98>)
 80088f4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80088f6:	4b1d      	ldr	r3, [pc, #116]	; (800896c <MX_FMC_Init+0x94>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80088fc:	4b1b      	ldr	r3, [pc, #108]	; (800896c <MX_FMC_Init+0x94>)
 80088fe:	2200      	movs	r2, #0
 8008900:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008902:	4b1a      	ldr	r3, [pc, #104]	; (800896c <MX_FMC_Init+0x94>)
 8008904:	2208      	movs	r2, #8
 8008906:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008908:	4b18      	ldr	r3, [pc, #96]	; (800896c <MX_FMC_Init+0x94>)
 800890a:	2220      	movs	r2, #32
 800890c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800890e:	4b17      	ldr	r3, [pc, #92]	; (800896c <MX_FMC_Init+0x94>)
 8008910:	2240      	movs	r2, #64	; 0x40
 8008912:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <MX_FMC_Init+0x94>)
 8008916:	2280      	movs	r2, #128	; 0x80
 8008918:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800891a:	4b14      	ldr	r3, [pc, #80]	; (800896c <MX_FMC_Init+0x94>)
 800891c:	2200      	movs	r2, #0
 800891e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008920:	4b12      	ldr	r3, [pc, #72]	; (800896c <MX_FMC_Init+0x94>)
 8008922:	2200      	movs	r2, #0
 8008924:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008926:	4b11      	ldr	r3, [pc, #68]	; (800896c <MX_FMC_Init+0x94>)
 8008928:	2200      	movs	r2, #0
 800892a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <MX_FMC_Init+0x94>)
 800892e:	2200      	movs	r2, #0
 8008930:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8008932:	2310      	movs	r3, #16
 8008934:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008936:	2310      	movs	r3, #16
 8008938:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800893a:	2310      	movs	r3, #16
 800893c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800893e:	2310      	movs	r3, #16
 8008940:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008942:	2310      	movs	r3, #16
 8008944:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8008946:	2310      	movs	r3, #16
 8008948:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800894a:	2310      	movs	r3, #16
 800894c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800894e:	1d3b      	adds	r3, r7, #4
 8008950:	4619      	mov	r1, r3
 8008952:	4806      	ldr	r0, [pc, #24]	; (800896c <MX_FMC_Init+0x94>)
 8008954:	f7fc fd44 	bl	80053e0 <HAL_SDRAM_Init>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800895e:	f000 f927 	bl	8008bb0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8008962:	bf00      	nop
 8008964:	3720      	adds	r7, #32
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000ae4 	.word	0x20000ae4
 8008970:	a0000140 	.word	0xa0000140

08008974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b090      	sub	sp, #64	; 0x40
 8008978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800897a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	605a      	str	r2, [r3, #4]
 8008984:	609a      	str	r2, [r3, #8]
 8008986:	60da      	str	r2, [r3, #12]
 8008988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800898a:	4b7f      	ldr	r3, [pc, #508]	; (8008b88 <MX_GPIO_Init+0x214>)
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	4a7e      	ldr	r2, [pc, #504]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008990:	f043 0310 	orr.w	r3, r3, #16
 8008994:	6313      	str	r3, [r2, #48]	; 0x30
 8008996:	4b7c      	ldr	r3, [pc, #496]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	f003 0310 	and.w	r3, r3, #16
 800899e:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80089a2:	4b79      	ldr	r3, [pc, #484]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a6:	4a78      	ldr	r2, [pc, #480]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ac:	6313      	str	r3, [r2, #48]	; 0x30
 80089ae:	4b76      	ldr	r3, [pc, #472]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089ba:	4b73      	ldr	r3, [pc, #460]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	4a72      	ldr	r2, [pc, #456]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089c0:	f043 0302 	orr.w	r3, r3, #2
 80089c4:	6313      	str	r3, [r2, #48]	; 0x30
 80089c6:	4b70      	ldr	r3, [pc, #448]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	623b      	str	r3, [r7, #32]
 80089d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80089d2:	4b6d      	ldr	r3, [pc, #436]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	4a6c      	ldr	r2, [pc, #432]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089d8:	f043 0308 	orr.w	r3, r3, #8
 80089dc:	6313      	str	r3, [r2, #48]	; 0x30
 80089de:	4b6a      	ldr	r3, [pc, #424]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e2:	f003 0308 	and.w	r3, r3, #8
 80089e6:	61fb      	str	r3, [r7, #28]
 80089e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80089ea:	4b67      	ldr	r3, [pc, #412]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	4a66      	ldr	r2, [pc, #408]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089f0:	f043 0304 	orr.w	r3, r3, #4
 80089f4:	6313      	str	r3, [r2, #48]	; 0x30
 80089f6:	4b64      	ldr	r3, [pc, #400]	; (8008b88 <MX_GPIO_Init+0x214>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a02:	4b61      	ldr	r3, [pc, #388]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	4a60      	ldr	r2, [pc, #384]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0e:	4b5e      	ldr	r3, [pc, #376]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	617b      	str	r3, [r7, #20]
 8008a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008a1a:	4b5b      	ldr	r3, [pc, #364]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	4a5a      	ldr	r2, [pc, #360]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a24:	6313      	str	r3, [r2, #48]	; 0x30
 8008a26:	4b58      	ldr	r3, [pc, #352]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008a32:	4b55      	ldr	r3, [pc, #340]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	4a54      	ldr	r2, [pc, #336]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a3e:	4b52      	ldr	r3, [pc, #328]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8008a4a:	4b4f      	ldr	r3, [pc, #316]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	4a4e      	ldr	r2, [pc, #312]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a54:	6313      	str	r3, [r2, #48]	; 0x30
 8008a56:	4b4c      	ldr	r3, [pc, #304]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a5e:	60bb      	str	r3, [r7, #8]
 8008a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008a62:	4b49      	ldr	r3, [pc, #292]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	4a48      	ldr	r2, [pc, #288]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a68:	f043 0320 	orr.w	r3, r3, #32
 8008a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6e:	4b46      	ldr	r3, [pc, #280]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	607b      	str	r3, [r7, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008a7a:	4b43      	ldr	r3, [pc, #268]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7e:	4a42      	ldr	r2, [pc, #264]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	6313      	str	r3, [r2, #48]	; 0x30
 8008a86:	4b40      	ldr	r3, [pc, #256]	; (8008b88 <MX_GPIO_Init+0x214>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 8008a92:	f247 033b 	movw	r3, #28731	; 0x703b
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4839      	ldr	r0, [pc, #228]	; (8008b8c <MX_GPIO_Init+0x218>)
 8008aa8:	f7f8 fdb6 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8008aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aba:	2300      	movs	r3, #0
 8008abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8008ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4831      	ldr	r0, [pc, #196]	; (8008b90 <MX_GPIO_Init+0x21c>)
 8008aca:	f7f8 fda5 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8008ace:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	482c      	ldr	r0, [pc, #176]	; (8008b94 <MX_GPIO_Init+0x220>)
 8008ae4:	f7f8 fd98 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8008ae8:	23f8      	movs	r3, #248	; 0xf8
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008aec:	2300      	movs	r3, #0
 8008aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8008af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008af8:	4619      	mov	r1, r3
 8008afa:	4827      	ldr	r0, [pc, #156]	; (8008b98 <MX_GPIO_Init+0x224>)
 8008afc:	f7f8 fd8c 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8008b00:	2330      	movs	r3, #48	; 0x30
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b04:	2300      	movs	r3, #0
 8008b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b10:	4619      	mov	r1, r3
 8008b12:	4822      	ldr	r0, [pc, #136]	; (8008b9c <MX_GPIO_Init+0x228>)
 8008b14:	f7f8 fd80 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8008b18:	2308      	movs	r3, #8
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8008b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b30:	4619      	mov	r1, r3
 8008b32:	481a      	ldr	r0, [pc, #104]	; (8008b9c <MX_GPIO_Init+0x228>)
 8008b34:	f7f8 fd70 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8008b38:	2348      	movs	r3, #72	; 0x48
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4815      	ldr	r0, [pc, #84]	; (8008ba0 <MX_GPIO_Init+0x22c>)
 8008b4c:	f7f8 fd64 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8008b50:	2301      	movs	r3, #1
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008b54:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <MX_GPIO_Init+0x230>)
 8008b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8008b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b60:	4619      	mov	r1, r3
 8008b62:	4811      	ldr	r0, [pc, #68]	; (8008ba8 <MX_GPIO_Init+0x234>)
 8008b64:	f7f8 fd58 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b78:	4619      	mov	r1, r3
 8008b7a:	480c      	ldr	r0, [pc, #48]	; (8008bac <MX_GPIO_Init+0x238>)
 8008b7c:	f7f8 fd4c 	bl	8001618 <HAL_GPIO_Init>

}
 8008b80:	bf00      	nop
 8008b82:	3740      	adds	r7, #64	; 0x40
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	40022400 	.word	0x40022400
 8008b90:	40020800 	.word	0x40020800
 8008b94:	40022000 	.word	0x40022000
 8008b98:	40022800 	.word	0x40022800
 8008b9c:	40020c00 	.word	0x40020c00
 8008ba0:	40021800 	.word	0x40021800
 8008ba4:	10110000 	.word	0x10110000
 8008ba8:	40020000 	.word	0x40020000
 8008bac:	40021c00 	.word	0x40021c00

08008bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
	...

08008bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <HAL_MspInit+0x44>)
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bca:	4a0e      	ldr	r2, [pc, #56]	; (8008c04 <HAL_MspInit+0x44>)
 8008bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8008bd2:	4b0c      	ldr	r3, [pc, #48]	; (8008c04 <HAL_MspInit+0x44>)
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <HAL_MspInit+0x44>)
 8008be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <HAL_MspInit+0x44>)
 8008be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008be8:	6453      	str	r3, [r2, #68]	; 0x44
 8008bea:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <HAL_MspInit+0x44>)
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40023800 	.word	0x40023800

08008c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	; 0x30
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c10:	f107 031c 	add.w	r3, r7, #28
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	605a      	str	r2, [r3, #4]
 8008c1a:	609a      	str	r2, [r3, #8]
 8008c1c:	60da      	str	r2, [r3, #12]
 8008c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a36      	ldr	r2, [pc, #216]	; (8008d00 <HAL_ADC_MspInit+0xf8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d13c      	bne.n	8008ca4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008c2a:	4b36      	ldr	r3, [pc, #216]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2e:	4a35      	ldr	r2, [pc, #212]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c34:	6453      	str	r3, [r2, #68]	; 0x44
 8008c36:	4b33      	ldr	r3, [pc, #204]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3e:	61bb      	str	r3, [r7, #24]
 8008c40:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c42:	4b30      	ldr	r3, [pc, #192]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c46:	4a2f      	ldr	r2, [pc, #188]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c48:	f043 0304 	orr.w	r3, r3, #4
 8008c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c4e:	4b2d      	ldr	r3, [pc, #180]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c5a:	4b2a      	ldr	r3, [pc, #168]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	4a29      	ldr	r2, [pc, #164]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c60:	f043 0301 	orr.w	r3, r3, #1
 8008c64:	6313      	str	r3, [r2, #48]	; 0x30
 8008c66:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8008c72:	2304      	movs	r3, #4
 8008c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c76:	2303      	movs	r3, #3
 8008c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8008c7e:	f107 031c 	add.w	r3, r7, #28
 8008c82:	4619      	mov	r1, r3
 8008c84:	4820      	ldr	r0, [pc, #128]	; (8008d08 <HAL_ADC_MspInit+0x100>)
 8008c86:	f7f8 fcc7 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8008c8a:	2350      	movs	r3, #80	; 0x50
 8008c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c96:	f107 031c 	add.w	r3, r7, #28
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	481b      	ldr	r0, [pc, #108]	; (8008d0c <HAL_ADC_MspInit+0x104>)
 8008c9e:	f7f8 fcbb 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8008ca2:	e029      	b.n	8008cf8 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a19      	ldr	r2, [pc, #100]	; (8008d10 <HAL_ADC_MspInit+0x108>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d124      	bne.n	8008cf8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008cae:	4b15      	ldr	r3, [pc, #84]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb2:	4a14      	ldr	r2, [pc, #80]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cba:	4b12      	ldr	r3, [pc, #72]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008cc6:	4b0f      	ldr	r3, [pc, #60]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	4a0e      	ldr	r2, [pc, #56]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008ccc:	f043 0320 	orr.w	r3, r3, #32
 8008cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	; (8008d04 <HAL_ADC_MspInit+0xfc>)
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	60bb      	str	r3, [r7, #8]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8008cde:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008cec:	f107 031c 	add.w	r3, r7, #28
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4808      	ldr	r0, [pc, #32]	; (8008d14 <HAL_ADC_MspInit+0x10c>)
 8008cf4:	f7f8 fc90 	bl	8001618 <HAL_GPIO_Init>
}
 8008cf8:	bf00      	nop
 8008cfa:	3730      	adds	r7, #48	; 0x30
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40012000 	.word	0x40012000
 8008d04:	40023800 	.word	0x40023800
 8008d08:	40020800 	.word	0x40020800
 8008d0c:	40020000 	.word	0x40020000
 8008d10:	40012200 	.word	0x40012200
 8008d14:	40021400 	.word	0x40021400

08008d18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08e      	sub	sp, #56	; 0x38
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d24:	2200      	movs	r2, #0
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	605a      	str	r2, [r3, #4]
 8008d2a:	609a      	str	r2, [r3, #8]
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a3f      	ldr	r2, [pc, #252]	; (8008e34 <HAL_ETH_MspInit+0x11c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d178      	bne.n	8008e2c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008d3a:	4b3f      	ldr	r3, [pc, #252]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	4a3e      	ldr	r2, [pc, #248]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d44:	6313      	str	r3, [r2, #48]	; 0x30
 8008d46:	4b3c      	ldr	r3, [pc, #240]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d4e:	623b      	str	r3, [r7, #32]
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	4a38      	ldr	r2, [pc, #224]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d5e:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4b33      	ldr	r3, [pc, #204]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	4a32      	ldr	r2, [pc, #200]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d74:	6313      	str	r3, [r2, #48]	; 0x30
 8008d76:	4b30      	ldr	r3, [pc, #192]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d7e:	61bb      	str	r3, [r7, #24]
 8008d80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008d82:	4b2d      	ldr	r3, [pc, #180]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	4a2c      	ldr	r2, [pc, #176]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d8e:	4b2a      	ldr	r3, [pc, #168]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d9a:	4b27      	ldr	r3, [pc, #156]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9e:	4a26      	ldr	r2, [pc, #152]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008da0:	f043 0304 	orr.w	r3, r3, #4
 8008da4:	6313      	str	r3, [r2, #48]	; 0x30
 8008da6:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008db2:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	; (8008e38 <HAL_ETH_MspInit+0x120>)
 8008dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8008dca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ddc:	230b      	movs	r3, #11
 8008dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de4:	4619      	mov	r1, r3
 8008de6:	4815      	ldr	r0, [pc, #84]	; (8008e3c <HAL_ETH_MspInit+0x124>)
 8008de8:	f7f8 fc16 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008dec:	2332      	movs	r3, #50	; 0x32
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008df0:	2302      	movs	r3, #2
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008dfc:	230b      	movs	r3, #11
 8008dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e04:	4619      	mov	r1, r3
 8008e06:	480e      	ldr	r0, [pc, #56]	; (8008e40 <HAL_ETH_MspInit+0x128>)
 8008e08:	f7f8 fc06 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008e0c:	2386      	movs	r3, #134	; 0x86
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e10:	2302      	movs	r3, #2
 8008e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008e1c:	230b      	movs	r3, #11
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e24:	4619      	mov	r1, r3
 8008e26:	4807      	ldr	r0, [pc, #28]	; (8008e44 <HAL_ETH_MspInit+0x12c>)
 8008e28:	f7f8 fbf6 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8008e2c:	bf00      	nop
 8008e2e:	3738      	adds	r7, #56	; 0x38
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40028000 	.word	0x40028000
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	40021800 	.word	0x40021800
 8008e40:	40020800 	.word	0x40020800
 8008e44:	40020000 	.word	0x40020000

08008e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08c      	sub	sp, #48	; 0x30
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e50:	f107 031c 	add.w	r3, r7, #28
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	605a      	str	r2, [r3, #4]
 8008e5a:	609a      	str	r2, [r3, #8]
 8008e5c:	60da      	str	r2, [r3, #12]
 8008e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a3d      	ldr	r2, [pc, #244]	; (8008f5c <HAL_I2C_MspInit+0x114>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d129      	bne.n	8008ebe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e6a:	4b3d      	ldr	r3, [pc, #244]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6e:	4a3c      	ldr	r2, [pc, #240]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008e70:	f043 0302 	orr.w	r3, r3, #2
 8008e74:	6313      	str	r3, [r2, #48]	; 0x30
 8008e76:	4b3a      	ldr	r3, [pc, #232]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	61bb      	str	r3, [r7, #24]
 8008e80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8008e82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008e88:	2312      	movs	r3, #18
 8008e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e90:	2300      	movs	r3, #0
 8008e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008e94:	2304      	movs	r3, #4
 8008e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e98:	f107 031c 	add.w	r3, r7, #28
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4831      	ldr	r0, [pc, #196]	; (8008f64 <HAL_I2C_MspInit+0x11c>)
 8008ea0:	f7f8 fbba 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ea4:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea8:	4a2d      	ldr	r2, [pc, #180]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008eaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eae:	6413      	str	r3, [r2, #64]	; 0x40
 8008eb0:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8008ebc:	e049      	b.n	8008f52 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C4)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a29      	ldr	r2, [pc, #164]	; (8008f68 <HAL_I2C_MspInit+0x120>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d144      	bne.n	8008f52 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ec8:	4b25      	ldr	r3, [pc, #148]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	4a24      	ldr	r2, [pc, #144]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008ece:	f043 0302 	orr.w	r3, r3, #2
 8008ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8008ed4:	4b22      	ldr	r3, [pc, #136]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	613b      	str	r3, [r7, #16]
 8008ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ee0:	4b1f      	ldr	r3, [pc, #124]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee4:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008ee6:	f043 0308 	orr.w	r3, r3, #8
 8008eea:	6313      	str	r3, [r2, #48]	; 0x30
 8008eec:	4b1c      	ldr	r3, [pc, #112]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8008ef8:	2380      	movs	r3, #128	; 0x80
 8008efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008efc:	2312      	movs	r3, #18
 8008efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f00:	2301      	movs	r3, #1
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f04:	2303      	movs	r3, #3
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8008f08:	230b      	movs	r3, #11
 8008f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8008f0c:	f107 031c 	add.w	r3, r7, #28
 8008f10:	4619      	mov	r1, r3
 8008f12:	4814      	ldr	r0, [pc, #80]	; (8008f64 <HAL_I2C_MspInit+0x11c>)
 8008f14:	f7f8 fb80 	bl	8001618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8008f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f1e:	2312      	movs	r3, #18
 8008f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f22:	2301      	movs	r3, #1
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f26:	2303      	movs	r3, #3
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8008f2a:	2304      	movs	r3, #4
 8008f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8008f2e:	f107 031c 	add.w	r3, r7, #28
 8008f32:	4619      	mov	r1, r3
 8008f34:	480d      	ldr	r0, [pc, #52]	; (8008f6c <HAL_I2C_MspInit+0x124>)
 8008f36:	f7f8 fb6f 	bl	8001618 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3e:	4a08      	ldr	r2, [pc, #32]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f44:	6413      	str	r3, [r2, #64]	; 0x40
 8008f46:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <HAL_I2C_MspInit+0x118>)
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f4e:	60bb      	str	r3, [r7, #8]
 8008f50:	68bb      	ldr	r3, [r7, #8]
}
 8008f52:	bf00      	nop
 8008f54:	3730      	adds	r7, #48	; 0x30
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	40005400 	.word	0x40005400
 8008f60:	40023800 	.word	0x40023800
 8008f64:	40020400 	.word	0x40020400
 8008f68:	40006000 	.word	0x40006000
 8008f6c:	40020c00 	.word	0x40020c00

08008f70 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08c      	sub	sp, #48	; 0x30
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f78:	f107 031c 	add.w	r3, r7, #28
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	605a      	str	r2, [r3, #4]
 8008f82:	609a      	str	r2, [r3, #8]
 8008f84:	60da      	str	r2, [r3, #12]
 8008f86:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a4a      	ldr	r2, [pc, #296]	; (80090b8 <HAL_QSPI_MspInit+0x148>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f040 808e 	bne.w	80090b0 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008f94:	4b49      	ldr	r3, [pc, #292]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f98:	4a48      	ldr	r2, [pc, #288]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008f9a:	f043 0302 	orr.w	r3, r3, #2
 8008f9e:	6393      	str	r3, [r2, #56]	; 0x38
 8008fa0:	4b46      	ldr	r3, [pc, #280]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	61bb      	str	r3, [r7, #24]
 8008faa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008fac:	4b43      	ldr	r3, [pc, #268]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb0:	4a42      	ldr	r2, [pc, #264]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fb2:	f043 0310 	orr.w	r3, r3, #16
 8008fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8008fb8:	4b40      	ldr	r3, [pc, #256]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fc4:	4b3d      	ldr	r3, [pc, #244]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc8:	4a3c      	ldr	r2, [pc, #240]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fca:	f043 0302 	orr.w	r3, r3, #2
 8008fce:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd0:	4b3a      	ldr	r3, [pc, #232]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fdc:	4b37      	ldr	r3, [pc, #220]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	4a36      	ldr	r2, [pc, #216]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fe2:	f043 0304 	orr.w	r3, r3, #4
 8008fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe8:	4b34      	ldr	r3, [pc, #208]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ff4:	4b31      	ldr	r3, [pc, #196]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff8:	4a30      	ldr	r2, [pc, #192]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8008ffa:	f043 0308 	orr.w	r3, r3, #8
 8008ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8009000:	4b2e      	ldr	r3, [pc, #184]	; (80090bc <HAL_QSPI_MspInit+0x14c>)
 8009002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800900c:	2304      	movs	r3, #4
 800900e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009010:	2302      	movs	r3, #2
 8009012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009014:	2300      	movs	r3, #0
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009018:	2303      	movs	r3, #3
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800901c:	2309      	movs	r3, #9
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009020:	f107 031c 	add.w	r3, r7, #28
 8009024:	4619      	mov	r1, r3
 8009026:	4826      	ldr	r0, [pc, #152]	; (80090c0 <HAL_QSPI_MspInit+0x150>)
 8009028:	f7f8 faf6 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009030:	2302      	movs	r3, #2
 8009032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009034:	2300      	movs	r3, #0
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009038:	2303      	movs	r3, #3
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800903c:	230a      	movs	r3, #10
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8009040:	f107 031c 	add.w	r3, r7, #28
 8009044:	4619      	mov	r1, r3
 8009046:	481f      	ldr	r0, [pc, #124]	; (80090c4 <HAL_QSPI_MspInit+0x154>)
 8009048:	f7f8 fae6 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 800904c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009052:	2302      	movs	r3, #2
 8009054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009056:	2300      	movs	r3, #0
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800905a:	2303      	movs	r3, #3
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800905e:	2309      	movs	r3, #9
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009062:	f107 031c 	add.w	r3, r7, #28
 8009066:	4619      	mov	r1, r3
 8009068:	4817      	ldr	r0, [pc, #92]	; (80090c8 <HAL_QSPI_MspInit+0x158>)
 800906a:	f7f8 fad5 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800906e:	2304      	movs	r3, #4
 8009070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009072:	2302      	movs	r3, #2
 8009074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009076:	2300      	movs	r3, #0
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800907a:	2303      	movs	r3, #3
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800907e:	2309      	movs	r3, #9
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8009082:	f107 031c 	add.w	r3, r7, #28
 8009086:	4619      	mov	r1, r3
 8009088:	480e      	ldr	r0, [pc, #56]	; (80090c4 <HAL_QSPI_MspInit+0x154>)
 800908a:	f7f8 fac5 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 800908e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009094:	2302      	movs	r3, #2
 8009096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009098:	2300      	movs	r3, #0
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909c:	2303      	movs	r3, #3
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80090a0:	2309      	movs	r3, #9
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 80090a4:	f107 031c 	add.w	r3, r7, #28
 80090a8:	4619      	mov	r1, r3
 80090aa:	4808      	ldr	r0, [pc, #32]	; (80090cc <HAL_QSPI_MspInit+0x15c>)
 80090ac:	f7f8 fab4 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80090b0:	bf00      	nop
 80090b2:	3730      	adds	r7, #48	; 0x30
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	a0001000 	.word	0xa0001000
 80090bc:	40023800 	.word	0x40023800
 80090c0:	40021000 	.word	0x40021000
 80090c4:	40020400 	.word	0x40020400
 80090c8:	40020800 	.word	0x40020800
 80090cc:	40020c00 	.word	0x40020c00

080090d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a07      	ldr	r2, [pc, #28]	; (80090fc <HAL_RTC_MspInit+0x2c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d105      	bne.n	80090ee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <HAL_RTC_MspInit+0x30>)
 80090e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e6:	4a06      	ldr	r2, [pc, #24]	; (8009100 <HAL_RTC_MspInit+0x30>)
 80090e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	40002800 	.word	0x40002800
 8009100:	40023800 	.word	0x40023800

08009104 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08c      	sub	sp, #48	; 0x30
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800910c:	f107 031c 	add.w	r3, r7, #28
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	609a      	str	r2, [r3, #8]
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC2)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a33      	ldr	r2, [pc, #204]	; (80091f0 <HAL_MMC_MspInit+0xec>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d160      	bne.n	80091e8 <HAL_MMC_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8009126:	4b33      	ldr	r3, [pc, #204]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912a:	4a32      	ldr	r2, [pc, #200]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 800912c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009130:	6453      	str	r3, [r2, #68]	; 0x44
 8009132:	4b30      	ldr	r3, [pc, #192]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800913e:	4b2d      	ldr	r3, [pc, #180]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	4a2c      	ldr	r2, [pc, #176]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009144:	f043 0302 	orr.w	r3, r3, #2
 8009148:	6313      	str	r3, [r2, #48]	; 0x30
 800914a:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 800914c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009156:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915a:	4a26      	ldr	r2, [pc, #152]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	6313      	str	r3, [r2, #48]	; 0x30
 8009162:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800916e:	4b21      	ldr	r3, [pc, #132]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009172:	4a20      	ldr	r2, [pc, #128]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 8009174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009178:	6313      	str	r3, [r2, #48]	; 0x30
 800917a:	4b1e      	ldr	r3, [pc, #120]	; (80091f4 <HAL_MMC_MspInit+0xf0>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8009186:	2318      	movs	r3, #24
 8009188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800918a:	2302      	movs	r3, #2
 800918c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918e:	2300      	movs	r3, #0
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009192:	2303      	movs	r3, #3
 8009194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8009196:	230a      	movs	r3, #10
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800919a:	f107 031c 	add.w	r3, r7, #28
 800919e:	4619      	mov	r1, r3
 80091a0:	4815      	ldr	r0, [pc, #84]	; (80091f8 <HAL_MMC_MspInit+0xf4>)
 80091a2:	f7f8 fa39 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 80091a6:	23c0      	movs	r3, #192	; 0xc0
 80091a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091aa:	2302      	movs	r3, #2
 80091ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091b2:	2303      	movs	r3, #3
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80091b6:	230b      	movs	r3, #11
 80091b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80091ba:	f107 031c 	add.w	r3, r7, #28
 80091be:	4619      	mov	r1, r3
 80091c0:	480e      	ldr	r0, [pc, #56]	; (80091fc <HAL_MMC_MspInit+0xf8>)
 80091c2:	f7f8 fa29 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80091c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80091ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091cc:	2302      	movs	r3, #2
 80091ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d0:	2300      	movs	r3, #0
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091d4:	2303      	movs	r3, #3
 80091d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80091d8:	230b      	movs	r3, #11
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80091dc:	f107 031c 	add.w	r3, r7, #28
 80091e0:	4619      	mov	r1, r3
 80091e2:	4807      	ldr	r0, [pc, #28]	; (8009200 <HAL_MMC_MspInit+0xfc>)
 80091e4:	f7f8 fa18 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80091e8:	bf00      	nop
 80091ea:	3730      	adds	r7, #48	; 0x30
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	40011c00 	.word	0x40011c00
 80091f4:	40023800 	.word	0x40023800
 80091f8:	40020400 	.word	0x40020400
 80091fc:	40020c00 	.word	0x40020c00
 8009200:	40021800 	.word	0x40021800

08009204 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800920c:	f107 0314 	add.w	r3, r7, #20
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	605a      	str	r2, [r3, #4]
 8009216:	609a      	str	r2, [r3, #8]
 8009218:	60da      	str	r2, [r3, #12]
 800921a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8009224:	d128      	bne.n	8009278 <HAL_SPDIFRX_MspInit+0x74>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8009226:	4b16      	ldr	r3, [pc, #88]	; (8009280 <HAL_SPDIFRX_MspInit+0x7c>)
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <HAL_SPDIFRX_MspInit+0x7c>)
 800922c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009230:	6413      	str	r3, [r2, #64]	; 0x40
 8009232:	4b13      	ldr	r3, [pc, #76]	; (8009280 <HAL_SPDIFRX_MspInit+0x7c>)
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800923e:	4b10      	ldr	r3, [pc, #64]	; (8009280 <HAL_SPDIFRX_MspInit+0x7c>)
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	4a0f      	ldr	r2, [pc, #60]	; (8009280 <HAL_SPDIFRX_MspInit+0x7c>)
 8009244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009248:	6313      	str	r3, [r2, #48]	; 0x30
 800924a:	4b0d      	ldr	r3, [pc, #52]	; (8009280 <HAL_SPDIFRX_MspInit+0x7c>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PG12     ------> SPDIFRX_IN1 
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8009256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800925a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800925c:	2302      	movs	r3, #2
 800925e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009264:	2300      	movs	r3, #0
 8009266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8009268:	2307      	movs	r3, #7
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	4619      	mov	r1, r3
 8009272:	4804      	ldr	r0, [pc, #16]	; (8009284 <HAL_SPDIFRX_MspInit+0x80>)
 8009274:	f7f8 f9d0 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8009278:	bf00      	nop
 800927a:	3728      	adds	r7, #40	; 0x28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40023800 	.word	0x40023800
 8009284:	40021800 	.word	0x40021800

08009288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	605a      	str	r2, [r3, #4]
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	60da      	str	r2, [r3, #12]
 800929e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a2e      	ldr	r2, [pc, #184]	; (8009360 <HAL_SPI_MspInit+0xd8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d156      	bne.n	8009358 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80092aa:	4b2e      	ldr	r3, [pc, #184]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ae:	4a2d      	ldr	r2, [pc, #180]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092b4:	6413      	str	r3, [r2, #64]	; 0x40
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092c2:	4b28      	ldr	r3, [pc, #160]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c6:	4a27      	ldr	r2, [pc, #156]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092c8:	f043 0301 	orr.w	r3, r3, #1
 80092cc:	6313      	str	r3, [r2, #48]	; 0x30
 80092ce:	4b25      	ldr	r3, [pc, #148]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092da:	4b22      	ldr	r3, [pc, #136]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092de:	4a21      	ldr	r2, [pc, #132]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092e0:	f043 0302 	orr.w	r3, r3, #2
 80092e4:	6313      	str	r3, [r2, #48]	; 0x30
 80092e6:	4b1f      	ldr	r3, [pc, #124]	; (8009364 <HAL_SPI_MspInit+0xdc>)
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	60bb      	str	r3, [r7, #8]
 80092f0:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80092f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f8:	2302      	movs	r3, #2
 80092fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009300:	2300      	movs	r3, #0
 8009302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009304:	2305      	movs	r3, #5
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8009308:	f107 0314 	add.w	r3, r7, #20
 800930c:	4619      	mov	r1, r3
 800930e:	4816      	ldr	r0, [pc, #88]	; (8009368 <HAL_SPI_MspInit+0xe0>)
 8009310:	f7f8 f982 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8009314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800931a:	2302      	movs	r3, #2
 800931c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800931e:	2300      	movs	r3, #0
 8009320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009322:	2303      	movs	r3, #3
 8009324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009326:	2305      	movs	r3, #5
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800932a:	f107 0314 	add.w	r3, r7, #20
 800932e:	4619      	mov	r1, r3
 8009330:	480d      	ldr	r0, [pc, #52]	; (8009368 <HAL_SPI_MspInit+0xe0>)
 8009332:	f7f8 f971 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8009336:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800933a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933c:	2302      	movs	r3, #2
 800933e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009340:	2300      	movs	r3, #0
 8009342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009344:	2300      	movs	r3, #0
 8009346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009348:	2305      	movs	r3, #5
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	4619      	mov	r1, r3
 8009352:	4806      	ldr	r0, [pc, #24]	; (800936c <HAL_SPI_MspInit+0xe4>)
 8009354:	f7f8 f960 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009358:	bf00      	nop
 800935a:	3728      	adds	r7, #40	; 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40003800 	.word	0x40003800
 8009364:	40023800 	.word	0x40023800
 8009368:	40020000 	.word	0x40020000
 800936c:	40020400 	.word	0x40020400

08009370 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a13      	ldr	r2, [pc, #76]	; (80093cc <HAL_TIM_PWM_MspInit+0x5c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d10c      	bne.n	800939c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009382:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <HAL_TIM_PWM_MspInit+0x60>)
 8009384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009386:	4a12      	ldr	r2, [pc, #72]	; (80093d0 <HAL_TIM_PWM_MspInit+0x60>)
 8009388:	f043 0302 	orr.w	r3, r3, #2
 800938c:	6413      	str	r3, [r2, #64]	; 0x40
 800938e:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <HAL_TIM_PWM_MspInit+0x60>)
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800939a:	e010      	b.n	80093be <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0c      	ldr	r2, [pc, #48]	; (80093d4 <HAL_TIM_PWM_MspInit+0x64>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d10b      	bne.n	80093be <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <HAL_TIM_PWM_MspInit+0x60>)
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	4a09      	ldr	r2, [pc, #36]	; (80093d0 <HAL_TIM_PWM_MspInit+0x60>)
 80093ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b0:	6413      	str	r3, [r2, #64]	; 0x40
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <HAL_TIM_PWM_MspInit+0x60>)
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	60bb      	str	r3, [r7, #8]
 80093bc:	68bb      	ldr	r3, [r7, #8]
}
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40000400 	.word	0x40000400
 80093d0:	40023800 	.word	0x40023800
 80093d4:	40001800 	.word	0x40001800

080093d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a13      	ldr	r2, [pc, #76]	; (8009434 <HAL_TIM_Base_MspInit+0x5c>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d10c      	bne.n	8009404 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80093ea:	4b13      	ldr	r3, [pc, #76]	; (8009438 <HAL_TIM_Base_MspInit+0x60>)
 80093ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ee:	4a12      	ldr	r2, [pc, #72]	; (8009438 <HAL_TIM_Base_MspInit+0x60>)
 80093f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f4:	6453      	str	r3, [r2, #68]	; 0x44
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <HAL_TIM_Base_MspInit+0x60>)
 80093f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8009402:	e010      	b.n	8009426 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a0c      	ldr	r2, [pc, #48]	; (800943c <HAL_TIM_Base_MspInit+0x64>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d10b      	bne.n	8009426 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800940e:	4b0a      	ldr	r3, [pc, #40]	; (8009438 <HAL_TIM_Base_MspInit+0x60>)
 8009410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009412:	4a09      	ldr	r2, [pc, #36]	; (8009438 <HAL_TIM_Base_MspInit+0x60>)
 8009414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009418:	6453      	str	r3, [r2, #68]	; 0x44
 800941a:	4b07      	ldr	r3, [pc, #28]	; (8009438 <HAL_TIM_Base_MspInit+0x60>)
 800941c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009422:	60bb      	str	r3, [r7, #8]
 8009424:	68bb      	ldr	r3, [r7, #8]
}
 8009426:	bf00      	nop
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	40014400 	.word	0x40014400
 8009438:	40023800 	.word	0x40023800
 800943c:	40014800 	.word	0x40014800

08009440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08c      	sub	sp, #48	; 0x30
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009448:	f107 031c 	add.w	r3, r7, #28
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a44      	ldr	r2, [pc, #272]	; (8009570 <HAL_TIM_MspPostInit+0x130>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d11d      	bne.n	800949e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009462:	4b44      	ldr	r3, [pc, #272]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	4a43      	ldr	r2, [pc, #268]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 8009468:	f043 0304 	orr.w	r3, r3, #4
 800946c:	6313      	str	r3, [r2, #48]	; 0x30
 800946e:	4b41      	ldr	r3, [pc, #260]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 8009470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	61bb      	str	r3, [r7, #24]
 8009478:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration    
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 800947a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800947e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009480:	2302      	movs	r3, #2
 8009482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009484:	2300      	movs	r3, #0
 8009486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009488:	2300      	movs	r3, #0
 800948a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800948c:	2302      	movs	r3, #2
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8009490:	f107 031c 	add.w	r3, r7, #28
 8009494:	4619      	mov	r1, r3
 8009496:	4838      	ldr	r0, [pc, #224]	; (8009578 <HAL_TIM_MspPostInit+0x138>)
 8009498:	f7f8 f8be 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800949c:	e064      	b.n	8009568 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a36      	ldr	r2, [pc, #216]	; (800957c <HAL_TIM_MspPostInit+0x13c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d11c      	bne.n	80094e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80094a8:	4b32      	ldr	r3, [pc, #200]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 80094aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ac:	4a31      	ldr	r2, [pc, #196]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 80094ae:	f043 0320 	orr.w	r3, r3, #32
 80094b2:	6313      	str	r3, [r2, #48]	; 0x30
 80094b4:	4b2f      	ldr	r3, [pc, #188]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 80094b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 80094c0:	2340      	movs	r3, #64	; 0x40
 80094c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094c4:	2302      	movs	r3, #2
 80094c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094cc:	2300      	movs	r3, #0
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80094d0:	2303      	movs	r3, #3
 80094d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80094d4:	f107 031c 	add.w	r3, r7, #28
 80094d8:	4619      	mov	r1, r3
 80094da:	4829      	ldr	r0, [pc, #164]	; (8009580 <HAL_TIM_MspPostInit+0x140>)
 80094dc:	f7f8 f89c 	bl	8001618 <HAL_GPIO_Init>
}
 80094e0:	e042      	b.n	8009568 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a27      	ldr	r2, [pc, #156]	; (8009584 <HAL_TIM_MspPostInit+0x144>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d11c      	bne.n	8009526 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80094ec:	4b21      	ldr	r3, [pc, #132]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	4a20      	ldr	r2, [pc, #128]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 80094f2:	f043 0320 	orr.w	r3, r3, #32
 80094f6:	6313      	str	r3, [r2, #48]	; 0x30
 80094f8:	4b1e      	ldr	r3, [pc, #120]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	f003 0320 	and.w	r3, r3, #32
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8009504:	2380      	movs	r3, #128	; 0x80
 8009506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009508:	2302      	movs	r3, #2
 800950a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800950c:	2300      	movs	r3, #0
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009510:	2300      	movs	r3, #0
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8009514:	2303      	movs	r3, #3
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8009518:	f107 031c 	add.w	r3, r7, #28
 800951c:	4619      	mov	r1, r3
 800951e:	4818      	ldr	r0, [pc, #96]	; (8009580 <HAL_TIM_MspPostInit+0x140>)
 8009520:	f7f8 f87a 	bl	8001618 <HAL_GPIO_Init>
}
 8009524:	e020      	b.n	8009568 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a17      	ldr	r2, [pc, #92]	; (8009588 <HAL_TIM_MspPostInit+0x148>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d11b      	bne.n	8009568 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009530:	4b10      	ldr	r3, [pc, #64]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	4a0f      	ldr	r2, [pc, #60]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	6313      	str	r3, [r2, #48]	; 0x30
 800953c:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <HAL_TIM_MspPostInit+0x134>)
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8009548:	2340      	movs	r3, #64	; 0x40
 800954a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800954c:	2302      	movs	r3, #2
 800954e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009550:	2300      	movs	r3, #0
 8009552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009554:	2300      	movs	r3, #0
 8009556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8009558:	2309      	movs	r3, #9
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800955c:	f107 031c 	add.w	r3, r7, #28
 8009560:	4619      	mov	r1, r3
 8009562:	480a      	ldr	r0, [pc, #40]	; (800958c <HAL_TIM_MspPostInit+0x14c>)
 8009564:	f7f8 f858 	bl	8001618 <HAL_GPIO_Init>
}
 8009568:	bf00      	nop
 800956a:	3730      	adds	r7, #48	; 0x30
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	40000400 	.word	0x40000400
 8009574:	40023800 	.word	0x40023800
 8009578:	40020800 	.word	0x40020800
 800957c:	40014400 	.word	0x40014400
 8009580:	40021400 	.word	0x40021400
 8009584:	40014800 	.word	0x40014800
 8009588:	40001800 	.word	0x40001800
 800958c:	40021c00 	.word	0x40021c00

08009590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08e      	sub	sp, #56	; 0x38
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	609a      	str	r2, [r3, #8]
 80095a4:	60da      	str	r2, [r3, #12]
 80095a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a5c      	ldr	r2, [pc, #368]	; (8009720 <HAL_UART_MspInit+0x190>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d145      	bne.n	800963e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80095b2:	4b5c      	ldr	r3, [pc, #368]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	4a5b      	ldr	r2, [pc, #364]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095bc:	6413      	str	r3, [r2, #64]	; 0x40
 80095be:	4b59      	ldr	r3, [pc, #356]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095c6:	623b      	str	r3, [r7, #32]
 80095c8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80095ca:	4b56      	ldr	r3, [pc, #344]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	4a55      	ldr	r2, [pc, #340]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095d0:	f043 0304 	orr.w	r3, r3, #4
 80095d4:	6313      	str	r3, [r2, #48]	; 0x30
 80095d6:	4b53      	ldr	r3, [pc, #332]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	61fb      	str	r3, [r7, #28]
 80095e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80095e2:	4b50      	ldr	r3, [pc, #320]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	4a4f      	ldr	r2, [pc, #316]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095e8:	f043 0308 	orr.w	r3, r3, #8
 80095ec:	6313      	str	r3, [r2, #48]	; 0x30
 80095ee:	4b4d      	ldr	r3, [pc, #308]	; (8009724 <HAL_UART_MspInit+0x194>)
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 80095fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009600:	2302      	movs	r3, #2
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009604:	2300      	movs	r3, #0
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009608:	2303      	movs	r3, #3
 800960a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800960c:	2308      	movs	r3, #8
 800960e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8009610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009614:	4619      	mov	r1, r3
 8009616:	4844      	ldr	r0, [pc, #272]	; (8009728 <HAL_UART_MspInit+0x198>)
 8009618:	f7f7 fffe 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800961c:	2304      	movs	r3, #4
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009620:	2302      	movs	r3, #2
 8009622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009624:	2300      	movs	r3, #0
 8009626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009628:	2303      	movs	r3, #3
 800962a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800962c:	2308      	movs	r3, #8
 800962e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8009630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009634:	4619      	mov	r1, r3
 8009636:	483d      	ldr	r0, [pc, #244]	; (800972c <HAL_UART_MspInit+0x19c>)
 8009638:	f7f7 ffee 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800963c:	e06c      	b.n	8009718 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART1)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a3b      	ldr	r2, [pc, #236]	; (8009730 <HAL_UART_MspInit+0x1a0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d13a      	bne.n	80096be <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009648:	4b36      	ldr	r3, [pc, #216]	; (8009724 <HAL_UART_MspInit+0x194>)
 800964a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964c:	4a35      	ldr	r2, [pc, #212]	; (8009724 <HAL_UART_MspInit+0x194>)
 800964e:	f043 0310 	orr.w	r3, r3, #16
 8009652:	6453      	str	r3, [r2, #68]	; 0x44
 8009654:	4b33      	ldr	r3, [pc, #204]	; (8009724 <HAL_UART_MspInit+0x194>)
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009660:	4b30      	ldr	r3, [pc, #192]	; (8009724 <HAL_UART_MspInit+0x194>)
 8009662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009664:	4a2f      	ldr	r2, [pc, #188]	; (8009724 <HAL_UART_MspInit+0x194>)
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	6313      	str	r3, [r2, #48]	; 0x30
 800966c:	4b2d      	ldr	r3, [pc, #180]	; (8009724 <HAL_UART_MspInit+0x194>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8009678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800967e:	2302      	movs	r3, #2
 8009680:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009682:	2300      	movs	r3, #0
 8009684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009686:	2303      	movs	r3, #3
 8009688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800968a:	2307      	movs	r3, #7
 800968c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800968e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009692:	4619      	mov	r1, r3
 8009694:	4827      	ldr	r0, [pc, #156]	; (8009734 <HAL_UART_MspInit+0x1a4>)
 8009696:	f7f7 ffbf 	bl	8001618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800969a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a0:	2302      	movs	r3, #2
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a8:	2300      	movs	r3, #0
 80096aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80096ac:	2307      	movs	r3, #7
 80096ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80096b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b4:	4619      	mov	r1, r3
 80096b6:	481f      	ldr	r0, [pc, #124]	; (8009734 <HAL_UART_MspInit+0x1a4>)
 80096b8:	f7f7 ffae 	bl	8001618 <HAL_GPIO_Init>
}
 80096bc:	e02c      	b.n	8009718 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART6)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a1d      	ldr	r2, [pc, #116]	; (8009738 <HAL_UART_MspInit+0x1a8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d127      	bne.n	8009718 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART6_CLK_ENABLE();
 80096c8:	4b16      	ldr	r3, [pc, #88]	; (8009724 <HAL_UART_MspInit+0x194>)
 80096ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096cc:	4a15      	ldr	r2, [pc, #84]	; (8009724 <HAL_UART_MspInit+0x194>)
 80096ce:	f043 0320 	orr.w	r3, r3, #32
 80096d2:	6453      	str	r3, [r2, #68]	; 0x44
 80096d4:	4b13      	ldr	r3, [pc, #76]	; (8009724 <HAL_UART_MspInit+0x194>)
 80096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80096e0:	4b10      	ldr	r3, [pc, #64]	; (8009724 <HAL_UART_MspInit+0x194>)
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	4a0f      	ldr	r2, [pc, #60]	; (8009724 <HAL_UART_MspInit+0x194>)
 80096e6:	f043 0304 	orr.w	r3, r3, #4
 80096ea:	6313      	str	r3, [r2, #48]	; 0x30
 80096ec:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <HAL_UART_MspInit+0x194>)
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	60bb      	str	r3, [r7, #8]
 80096f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 80096f8:	23c0      	movs	r3, #192	; 0xc0
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096fc:	2302      	movs	r3, #2
 80096fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009700:	2300      	movs	r3, #0
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009704:	2303      	movs	r3, #3
 8009706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009708:	2308      	movs	r3, #8
 800970a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800970c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009710:	4619      	mov	r1, r3
 8009712:	4805      	ldr	r0, [pc, #20]	; (8009728 <HAL_UART_MspInit+0x198>)
 8009714:	f7f7 ff80 	bl	8001618 <HAL_GPIO_Init>
}
 8009718:	bf00      	nop
 800971a:	3738      	adds	r7, #56	; 0x38
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40005000 	.word	0x40005000
 8009724:	40023800 	.word	0x40023800
 8009728:	40020800 	.word	0x40020800
 800972c:	40020c00 	.word	0x40020c00
 8009730:	40011000 	.word	0x40011000
 8009734:	40020000 	.word	0x40020000
 8009738:	40011400 	.word	0x40011400

0800973c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	; 0x38
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a5a      	ldr	r2, [pc, #360]	; (80098c4 <HAL_PCD_MspInit+0x188>)
 800975a:	4293      	cmp	r3, r2
 800975c:	f040 80ae 	bne.w	80098bc <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009760:	4b59      	ldr	r3, [pc, #356]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009764:	4a58      	ldr	r2, [pc, #352]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009766:	f043 0302 	orr.w	r3, r3, #2
 800976a:	6313      	str	r3, [r2, #48]	; 0x30
 800976c:	4b56      	ldr	r3, [pc, #344]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	623b      	str	r3, [r7, #32]
 8009776:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009778:	4b53      	ldr	r3, [pc, #332]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800977a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977c:	4a52      	ldr	r2, [pc, #328]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800977e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009782:	6313      	str	r3, [r2, #48]	; 0x30
 8009784:	4b50      	ldr	r3, [pc, #320]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978c:	61fb      	str	r3, [r7, #28]
 800978e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009790:	4b4d      	ldr	r3, [pc, #308]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	4a4c      	ldr	r2, [pc, #304]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979a:	6313      	str	r3, [r2, #48]	; 0x30
 800979c:	4b4a      	ldr	r3, [pc, #296]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a4:	61bb      	str	r3, [r7, #24]
 80097a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097a8:	4b47      	ldr	r3, [pc, #284]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80097aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ac:	4a46      	ldr	r2, [pc, #280]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80097ae:	f043 0304 	orr.w	r3, r3, #4
 80097b2:	6313      	str	r3, [r2, #48]	; 0x30
 80097b4:	4b44      	ldr	r3, [pc, #272]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80097b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097c0:	4b41      	ldr	r3, [pc, #260]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	4a40      	ldr	r2, [pc, #256]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	6313      	str	r3, [r2, #48]	; 0x30
 80097cc:	4b3e      	ldr	r3, [pc, #248]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80097ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80097d8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097de:	2302      	movs	r3, #2
 80097e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097e6:	2303      	movs	r3, #3
 80097e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80097ea:	230a      	movs	r3, #10
 80097ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f2:	4619      	mov	r1, r3
 80097f4:	4835      	ldr	r0, [pc, #212]	; (80098cc <HAL_PCD_MspInit+0x190>)
 80097f6:	f7f7 ff0f 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80097fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009800:	2302      	movs	r3, #2
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009804:	2300      	movs	r3, #0
 8009806:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009808:	2303      	movs	r3, #3
 800980a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800980c:	230a      	movs	r3, #10
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8009810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009814:	4619      	mov	r1, r3
 8009816:	482e      	ldr	r0, [pc, #184]	; (80098d0 <HAL_PCD_MspInit+0x194>)
 8009818:	f7f7 fefe 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800981c:	2310      	movs	r3, #16
 800981e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009820:	2302      	movs	r3, #2
 8009822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009824:	2300      	movs	r3, #0
 8009826:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009828:	2303      	movs	r3, #3
 800982a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800982c:	230a      	movs	r3, #10
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009834:	4619      	mov	r1, r3
 8009836:	4827      	ldr	r0, [pc, #156]	; (80098d4 <HAL_PCD_MspInit+0x198>)
 8009838:	f7f7 feee 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800983c:	2301      	movs	r3, #1
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009840:	2302      	movs	r3, #2
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009844:	2300      	movs	r3, #0
 8009846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009848:	2303      	movs	r3, #3
 800984a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800984c:	230a      	movs	r3, #10
 800984e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8009850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009854:	4619      	mov	r1, r3
 8009856:	4820      	ldr	r0, [pc, #128]	; (80098d8 <HAL_PCD_MspInit+0x19c>)
 8009858:	f7f7 fede 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800985c:	2328      	movs	r3, #40	; 0x28
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009860:	2302      	movs	r3, #2
 8009862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009864:	2300      	movs	r3, #0
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009868:	2303      	movs	r3, #3
 800986a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800986c:	230a      	movs	r3, #10
 800986e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009874:	4619      	mov	r1, r3
 8009876:	4819      	ldr	r0, [pc, #100]	; (80098dc <HAL_PCD_MspInit+0x1a0>)
 8009878:	f7f7 fece 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800987c:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	4a11      	ldr	r2, [pc, #68]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009886:	6313      	str	r3, [r2, #48]	; 0x30
 8009888:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8009894:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 8009896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009898:	4a0b      	ldr	r2, [pc, #44]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 800989a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800989e:	6313      	str	r3, [r2, #48]	; 0x30
 80098a0:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_PCD_MspInit+0x18c>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098a8:	60bb      	str	r3, [r7, #8]
 80098aa:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80098ac:	2200      	movs	r2, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	204d      	movs	r0, #77	; 0x4d
 80098b2:	f7f7 fa0e 	bl	8000cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80098b6:	204d      	movs	r0, #77	; 0x4d
 80098b8:	f7f7 fa27 	bl	8000d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 80098bc:	bf00      	nop
 80098be:	3738      	adds	r7, #56	; 0x38
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40040000 	.word	0x40040000
 80098c8:	40023800 	.word	0x40023800
 80098cc:	40020400 	.word	0x40020400
 80098d0:	40022000 	.word	0x40022000
 80098d4:	40021c00 	.word	0x40021c00
 80098d8:	40020800 	.word	0x40020800
 80098dc:	40020000 	.word	0x40020000

080098e0 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a0a      	ldr	r2, [pc, #40]	; (8009918 <HAL_WWDG_MspInit+0x38>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d10b      	bne.n	800990a <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80098f2:	4b0a      	ldr	r3, [pc, #40]	; (800991c <HAL_WWDG_MspInit+0x3c>)
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	4a09      	ldr	r2, [pc, #36]	; (800991c <HAL_WWDG_MspInit+0x3c>)
 80098f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80098fc:	6413      	str	r3, [r2, #64]	; 0x40
 80098fe:	4b07      	ldr	r3, [pc, #28]	; (800991c <HAL_WWDG_MspInit+0x3c>)
 8009900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40002c00 	.word	0x40002c00
 800991c:	40023800 	.word	0x40023800

08009920 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8009926:	1d3b      	adds	r3, r7, #4
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	605a      	str	r2, [r3, #4]
 800992e:	609a      	str	r2, [r3, #8]
 8009930:	60da      	str	r2, [r3, #12]
 8009932:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8009934:	4b3b      	ldr	r3, [pc, #236]	; (8009a24 <HAL_FMC_MspInit+0x104>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d16f      	bne.n	8009a1c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800993c:	4b39      	ldr	r3, [pc, #228]	; (8009a24 <HAL_FMC_MspInit+0x104>)
 800993e:	2201      	movs	r2, #1
 8009940:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009942:	4b39      	ldr	r3, [pc, #228]	; (8009a28 <HAL_FMC_MspInit+0x108>)
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	4a38      	ldr	r2, [pc, #224]	; (8009a28 <HAL_FMC_MspInit+0x108>)
 8009948:	f043 0301 	orr.w	r3, r3, #1
 800994c:	6393      	str	r3, [r2, #56]	; 0x38
 800994e:	4b36      	ldr	r3, [pc, #216]	; (8009a28 <HAL_FMC_MspInit+0x108>)
 8009950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800995a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800995e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009960:	2302      	movs	r3, #2
 8009962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009968:	2303      	movs	r3, #3
 800996a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800996c:	230c      	movs	r3, #12
 800996e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009970:	1d3b      	adds	r3, r7, #4
 8009972:	4619      	mov	r1, r3
 8009974:	482d      	ldr	r0, [pc, #180]	; (8009a2c <HAL_FMC_MspInit+0x10c>)
 8009976:	f7f7 fe4f 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 800997a:	f248 1337 	movw	r3, #33079	; 0x8137
 800997e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009980:	2302      	movs	r3, #2
 8009982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009988:	2303      	movs	r3, #3
 800998a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800998c:	230c      	movs	r3, #12
 800998e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009990:	1d3b      	adds	r3, r7, #4
 8009992:	4619      	mov	r1, r3
 8009994:	4826      	ldr	r0, [pc, #152]	; (8009a30 <HAL_FMC_MspInit+0x110>)
 8009996:	f7f7 fe3f 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800999a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800999e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a0:	2302      	movs	r3, #2
 80099a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099a8:	2303      	movs	r3, #3
 80099aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099ac:	230c      	movs	r3, #12
 80099ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099b0:	1d3b      	adds	r3, r7, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	481f      	ldr	r0, [pc, #124]	; (8009a34 <HAL_FMC_MspInit+0x114>)
 80099b6:	f7f7 fe2f 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 80099ba:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80099be:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099c0:	2302      	movs	r3, #2
 80099c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c8:	2303      	movs	r3, #3
 80099ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099cc:	230c      	movs	r3, #12
 80099ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80099d0:	1d3b      	adds	r3, r7, #4
 80099d2:	4619      	mov	r1, r3
 80099d4:	4818      	ldr	r0, [pc, #96]	; (8009a38 <HAL_FMC_MspInit+0x118>)
 80099d6:	f7f7 fe1f 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80099da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80099de:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099e0:	2302      	movs	r3, #2
 80099e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099e8:	2303      	movs	r3, #3
 80099ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099ec:	230c      	movs	r3, #12
 80099ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80099f0:	1d3b      	adds	r3, r7, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4811      	ldr	r0, [pc, #68]	; (8009a3c <HAL_FMC_MspInit+0x11c>)
 80099f6:	f7f7 fe0f 	bl	8001618 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80099fa:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80099fe:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a00:	2302      	movs	r3, #2
 8009a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009a0c:	230c      	movs	r3, #12
 8009a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009a10:	1d3b      	adds	r3, r7, #4
 8009a12:	4619      	mov	r1, r3
 8009a14:	480a      	ldr	r0, [pc, #40]	; (8009a40 <HAL_FMC_MspInit+0x120>)
 8009a16:	f7f7 fdff 	bl	8001618 <HAL_GPIO_Init>
 8009a1a:	e000      	b.n	8009a1e <HAL_FMC_MspInit+0xfe>
    return;
 8009a1c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000028 	.word	0x20000028
 8009a28:	40023800 	.word	0x40023800
 8009a2c:	40021000 	.word	0x40021000
 8009a30:	40021800 	.word	0x40021800
 8009a34:	40020c00 	.word	0x40020c00
 8009a38:	40022000 	.word	0x40022000
 8009a3c:	40021400 	.word	0x40021400
 8009a40:	40021c00 	.word	0x40021c00

08009a44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009a4c:	f7ff ff68 	bl	8009920 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08a      	sub	sp, #40	; 0x28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a48      	ldr	r2, [pc, #288]	; (8009b88 <HAL_SAI_MspInit+0x130>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d134      	bne.n	8009ad4 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8009a6a:	4b48      	ldr	r3, [pc, #288]	; (8009b8c <HAL_SAI_MspInit+0x134>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009a72:	4b47      	ldr	r3, [pc, #284]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	4a46      	ldr	r2, [pc, #280]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a7e:	4b44      	ldr	r3, [pc, #272]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a86:	613b      	str	r3, [r7, #16]
 8009a88:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8009a8a:	4b40      	ldr	r3, [pc, #256]	; (8009b8c <HAL_SAI_MspInit+0x134>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	4a3e      	ldr	r2, [pc, #248]	; (8009b8c <HAL_SAI_MspInit+0x134>)
 8009a92:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8009a94:	2370      	movs	r3, #112	; 0x70
 8009a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009aa8:	f107 0314 	add.w	r3, r7, #20
 8009aac:	4619      	mov	r1, r3
 8009aae:	4839      	ldr	r0, [pc, #228]	; (8009b94 <HAL_SAI_MspInit+0x13c>)
 8009ab0:	f7f7 fdb2 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8009ab4:	2380      	movs	r3, #128	; 0x80
 8009ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009ac4:	2306      	movs	r3, #6
 8009ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8009ac8:	f107 0314 	add.w	r3, r7, #20
 8009acc:	4619      	mov	r1, r3
 8009ace:	4832      	ldr	r0, [pc, #200]	; (8009b98 <HAL_SAI_MspInit+0x140>)
 8009ad0:	f7f7 fda2 	bl	8001618 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a30      	ldr	r2, [pc, #192]	; (8009b9c <HAL_SAI_MspInit+0x144>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d124      	bne.n	8009b28 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8009ade:	4b2b      	ldr	r3, [pc, #172]	; (8009b8c <HAL_SAI_MspInit+0x134>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10b      	bne.n	8009afe <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8009ae6:	4b2a      	ldr	r3, [pc, #168]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aea:	4a29      	ldr	r2, [pc, #164]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009af0:	6453      	str	r3, [r2, #68]	; 0x44
 8009af2:	4b27      	ldr	r3, [pc, #156]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8009afe:	4b23      	ldr	r3, [pc, #140]	; (8009b8c <HAL_SAI_MspInit+0x134>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	4a21      	ldr	r2, [pc, #132]	; (8009b8c <HAL_SAI_MspInit+0x134>)
 8009b06:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8009b08:	2308      	movs	r3, #8
 8009b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b14:	2300      	movs	r3, #0
 8009b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8009b18:	2306      	movs	r3, #6
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8009b1c:	f107 0314 	add.w	r3, r7, #20
 8009b20:	4619      	mov	r1, r3
 8009b22:	481c      	ldr	r0, [pc, #112]	; (8009b94 <HAL_SAI_MspInit+0x13c>)
 8009b24:	f7f7 fd78 	bl	8001618 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a1c      	ldr	r2, [pc, #112]	; (8009ba0 <HAL_SAI_MspInit+0x148>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d125      	bne.n	8009b7e <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8009b32:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <HAL_SAI_MspInit+0x14c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10b      	bne.n	8009b52 <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8009b3a:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3e:	4a14      	ldr	r2, [pc, #80]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b44:	6453      	str	r3, [r2, #68]	; 0x44
 8009b46:	4b12      	ldr	r3, [pc, #72]	; (8009b90 <HAL_SAI_MspInit+0x138>)
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b4e:	60bb      	str	r3, [r7, #8]
 8009b50:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <HAL_SAI_MspInit+0x14c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3301      	adds	r3, #1
 8009b58:	4a12      	ldr	r2, [pc, #72]	; (8009ba4 <HAL_SAI_MspInit+0x14c>)
 8009b5a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_A_Block_A GPIO Configuration    
    PD11     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8009b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b62:	2302      	movs	r3, #2
 8009b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009b6e:	230a      	movs	r3, #10
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8009b72:	f107 0314 	add.w	r3, r7, #20
 8009b76:	4619      	mov	r1, r3
 8009b78:	480b      	ldr	r0, [pc, #44]	; (8009ba8 <HAL_SAI_MspInit+0x150>)
 8009b7a:	f7f7 fd4d 	bl	8001618 <HAL_GPIO_Init>

    }
}
 8009b7e:	bf00      	nop
 8009b80:	3728      	adds	r7, #40	; 0x28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	40015804 	.word	0x40015804
 8009b8c:	2000002c 	.word	0x2000002c
 8009b90:	40023800 	.word	0x40023800
 8009b94:	40021000 	.word	0x40021000
 8009b98:	40021800 	.word	0x40021800
 8009b9c:	40015824 	.word	0x40015824
 8009ba0:	40015c04 	.word	0x40015c04
 8009ba4:	20000030 	.word	0x20000030
 8009ba8:	40020c00 	.word	0x40020c00

08009bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009bb0:	bf00      	nop
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009bbe:	e7fe      	b.n	8009bbe <HardFault_Handler+0x4>

08009bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009bc4:	e7fe      	b.n	8009bc4 <MemManage_Handler+0x4>

08009bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009bca:	e7fe      	b.n	8009bca <BusFault_Handler+0x4>

08009bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009bd0:	e7fe      	b.n	8009bd0 <UsageFault_Handler+0x4>

08009bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009bf2:	bf00      	nop
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009c00:	f7f6 fcd8 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009c04:	bf00      	nop
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8009c0c:	4802      	ldr	r0, [pc, #8]	; (8009c18 <OTG_HS_IRQHandler+0x10>)
 8009c0e:	f7f8 fdc3 	bl	8002798 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8009c12:	bf00      	nop
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000238 	.word	0x20000238

08009c1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009c20:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <SystemInit+0x5c>)
 8009c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c26:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <SystemInit+0x5c>)
 8009c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009c30:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <SystemInit+0x60>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a11      	ldr	r2, [pc, #68]	; (8009c7c <SystemInit+0x60>)
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <SystemInit+0x60>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <SystemInit+0x60>)
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	490d      	ldr	r1, [pc, #52]	; (8009c7c <SystemInit+0x60>)
 8009c48:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <SystemInit+0x64>)
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <SystemInit+0x60>)
 8009c50:	4a0c      	ldr	r2, [pc, #48]	; (8009c84 <SystemInit+0x68>)
 8009c52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <SystemInit+0x60>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a08      	ldr	r2, [pc, #32]	; (8009c7c <SystemInit+0x60>)
 8009c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <SystemInit+0x60>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009c66:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <SystemInit+0x5c>)
 8009c68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c6c:	609a      	str	r2, [r3, #8]
#endif
}
 8009c6e:	bf00      	nop
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	e000ed00 	.word	0xe000ed00
 8009c7c:	40023800 	.word	0x40023800
 8009c80:	fef6ffff 	.word	0xfef6ffff
 8009c84:	24003010 	.word	0x24003010

08009c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c8e:	e003      	b.n	8009c98 <LoopCopyDataInit>

08009c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c90:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c96:	3104      	adds	r1, #4

08009c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c98:	480b      	ldr	r0, [pc, #44]	; (8009cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ca0:	d3f6      	bcc.n	8009c90 <CopyDataInit>
  ldr  r2, =_sbss
 8009ca2:	4a0b      	ldr	r2, [pc, #44]	; (8009cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009ca4:	e002      	b.n	8009cac <LoopFillZerobss>

08009ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ca8:	f842 3b04 	str.w	r3, [r2], #4

08009cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cac:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009cb0:	d3f9      	bcc.n	8009ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009cb2:	f7ff ffb3 	bl	8009c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009cb6:	f000 f811 	bl	8009cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009cba:	f7fd ff4d 	bl	8007b58 <main>
  bx  lr    
 8009cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009cc0:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 8009cc4:	08009d74 	.word	0x08009d74
  ldr  r0, =_sdata
 8009cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ccc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8009cd0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8009cd4:	20000bac 	.word	0x20000bac

08009cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009cd8:	e7fe      	b.n	8009cd8 <ADC_IRQHandler>
	...

08009cdc <__libc_init_array>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	4e0d      	ldr	r6, [pc, #52]	; (8009d14 <__libc_init_array+0x38>)
 8009ce0:	4c0d      	ldr	r4, [pc, #52]	; (8009d18 <__libc_init_array+0x3c>)
 8009ce2:	1ba4      	subs	r4, r4, r6
 8009ce4:	10a4      	asrs	r4, r4, #2
 8009ce6:	2500      	movs	r5, #0
 8009ce8:	42a5      	cmp	r5, r4
 8009cea:	d109      	bne.n	8009d00 <__libc_init_array+0x24>
 8009cec:	4e0b      	ldr	r6, [pc, #44]	; (8009d1c <__libc_init_array+0x40>)
 8009cee:	4c0c      	ldr	r4, [pc, #48]	; (8009d20 <__libc_init_array+0x44>)
 8009cf0:	f000 f820 	bl	8009d34 <_init>
 8009cf4:	1ba4      	subs	r4, r4, r6
 8009cf6:	10a4      	asrs	r4, r4, #2
 8009cf8:	2500      	movs	r5, #0
 8009cfa:	42a5      	cmp	r5, r4
 8009cfc:	d105      	bne.n	8009d0a <__libc_init_array+0x2e>
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d04:	4798      	blx	r3
 8009d06:	3501      	adds	r5, #1
 8009d08:	e7ee      	b.n	8009ce8 <__libc_init_array+0xc>
 8009d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d0e:	4798      	blx	r3
 8009d10:	3501      	adds	r5, #1
 8009d12:	e7f2      	b.n	8009cfa <__libc_init_array+0x1e>
 8009d14:	08009d6c 	.word	0x08009d6c
 8009d18:	08009d6c 	.word	0x08009d6c
 8009d1c:	08009d6c 	.word	0x08009d6c
 8009d20:	08009d70 	.word	0x08009d70

08009d24 <memset>:
 8009d24:	4402      	add	r2, r0
 8009d26:	4603      	mov	r3, r0
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d100      	bne.n	8009d2e <memset+0xa>
 8009d2c:	4770      	bx	lr
 8009d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d32:	e7f9      	b.n	8009d28 <memset+0x4>

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
