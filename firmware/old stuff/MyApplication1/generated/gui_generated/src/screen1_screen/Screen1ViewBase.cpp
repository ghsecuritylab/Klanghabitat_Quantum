/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
    radioButtonSelectedCallback(this, &Screen1ViewBase::radioButtonSelectedCallbackHandler),
    updateItemCallback(this, &Screen1ViewBase::updateItemCallbackHandler)
{
    boxBackground.setPosition(0, 0, 800, 480);
    boxBackground.setVisible(false);
    boxBackground.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    background.setXY(0, 0);
    background.setBitmap(Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_TEXTURE_800X480PX_ID));

    scrollBg.setXY(400, 375);
    scrollBg.setBitmap(Bitmap(BITMAP_SCROLLBG_ID));

    scrollList.setPosition(0, 0, 100, 480);
    scrollList.setHorizontal(false);
    scrollList.setCircular(true);
    scrollList.setEasingEquation(EasingEquations::cubicEaseOut);
    scrollList.setSwipeAcceleration(10);
    scrollList.setDragAcceleration(10);
    scrollList.setNumberOfItems(14);
    scrollList.setPadding(0, 0);
    scrollList.setSnapping(false);
    scrollList.setDrawableSize(75, 0);
    scrollList.setDrawables(scrollListListItems, updateItemCallback);

    scrollWheel.setPosition(42, 35, 396, 75);
    scrollWheel.setHorizontal(true);
    scrollWheel.setCircular(false);
    scrollWheel.setEasingEquation(EasingEquations::cubicEaseOut);
    scrollWheel.setSwipeAcceleration(40);
    scrollWheel.setDragAcceleration(10);
    scrollWheel.setNumberOfItems(61);
    scrollWheel.setSelectedItemOffset(153);
    scrollWheel.setSelectedItemExtraSize(0, 0);
    scrollWheel.setSelectedItemMargin(0, 0);
    scrollWheel.setDrawableSize(90, 0);
    scrollWheel.setDrawables(scrollWheelListItems, updateItemCallback,
                              scrollWheelSelectedListItems, updateItemCallback);
    scrollWheel.animateToItem(0, 0);
    scrollWheel.setVisible(false);

    selectedIcon.setXY(400, 129);
    selectedIcon.setBitmap(Bitmap(BITMAP_ALERT_ID));

    selectedVal.setPosition(208, 150, 64, 60);
    selectedVal.setVisible(false);
    selectedVal.setColor(touchgfx::Color::getColorFrom24BitRGB(213, 115, 0));
    selectedVal.setLinespacing(0);
    Unicode::snprintf(selectedValBuffer, SELECTEDVAL_SIZE, "%s", TypedText(T_SINGLEUSEID6).getText());
    selectedVal.setWildcard(selectedValBuffer);
    selectedVal.setTypedText(TypedText(T_SINGLEUSEID1));

    selectText.setPosition(40, 129, 400, 25);
    selectText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 138, 0));
    selectText.setLinespacing(0);
    selectText.setTypedText(TypedText(T_HEADLINE_SCROLLLIST));

    scrollWheelFrame.setXY(192, 31);
    scrollWheelFrame.setVisible(false);
    scrollWheelFrame.setBitmap(Bitmap(BITMAP_SCROLL_WHEEL_FRAME_ID));

    changeScrollListText.setXY(300, 227);
    changeScrollListText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 138, 0));
    changeScrollListText.setLinespacing(0);
    changeScrollListText.setTypedText(TypedText(T_SINGLEUSEID7));

    mask.setXY(400, 276);
    mask.setBitmap(Bitmap(BITMAP_MASK_ID));

    radioButtonScrollWheel.setXY(189, 217);
    radioButtonScrollWheel.setBitmaps(Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_ID), Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_PRESSED_ID), Bitmap(BITMAP_RADIO_BUTTON_SELECTED_ID), Bitmap(BITMAP_RADIO_BUTTON_SELECTED_PRESSED_ID));
    radioButtonScrollWheel.setSelected(false);
    radioButtonScrollWheel.setDeselectionEnabled(false);

    radioButtonScrollList.setXY(253, 217);
    radioButtonScrollList.setBitmaps(Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_ID), Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_PRESSED_ID), Bitmap(BITMAP_RADIO_BUTTON_SELECTED_ID), Bitmap(BITMAP_RADIO_BUTTON_SELECTED_PRESSED_ID));
    radioButtonScrollList.setSelected(true);
    radioButtonScrollList.setDeselectionEnabled(false);

    changeScrollWheelText.setXY(86, 228);
    changeScrollWheelText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 138, 0));
    changeScrollWheelText.setLinespacing(0);
    changeScrollWheelText.setTypedText(TypedText(T_SINGLEUSEID8));

    add(boxBackground);
    add(background);
    add(scrollBg);
    add(scrollList);
    add(scrollWheel);
    add(selectedIcon);
    add(selectedVal);
    add(selectText);
    add(scrollWheelFrame);
    add(changeScrollListText);
    add(mask);
    add(radioButtonScrollWheel);
    add(radioButtonScrollList);
    add(changeScrollWheelText);
    radioButtonGroup.add(radioButtonScrollWheel);
    radioButtonGroup.add(radioButtonScrollList);
    radioButtonGroup.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
}

void Screen1ViewBase::setupScreen()
{
    scrollList.initialize();
    for (int i = 0; i < scrollListListItems.getNumberOfDrawables(); i++)
    {
        scrollListListItems[i].initialize();
    }
    scrollWheel.initialize();
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelListItems[i].initialize();
    }
    for (int i = 0; i < scrollWheelSelectedListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelSelectedListItems[i].initialize();
    }
}

void Screen1ViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &radioButtonScrollWheel)
    {
        //scrollWheelSelectedInteractionInteraction1
        //When radioButtonScrollWheel selected call virtual function
        //Call scrollWheelSelected
        scrollWheelSelected();
    }
    else if (&src == &radioButtonScrollList)
    {
        //scrollListSelectedInteraction
        //When radioButtonScrollList selected call virtual function
        //Call scrollListSelected
        scrollListSelected();
    }
}

void Screen1ViewBase::updateItemCallbackHandler(DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollListListItems)
    {
        Drawable* d = items->getDrawable(containerIndex);
        imageContainer* cc = (imageContainer*)d;
        scrollListUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollWheelListItems)
    {
        Drawable* d = items->getDrawable(containerIndex);
        textContainer* cc = (textContainer*)d;
        scrollWheelUpdateItem(*cc, itemIndex);
    }
    else if (items == &scrollWheelSelectedListItems)
    {
        Drawable* d = items->getDrawable(containerIndex);
        textCenterContainer* cc = (textCenterContainer*)d;
        scrollWheelUpdateCenterItem(*cc, itemIndex);
    }
}
