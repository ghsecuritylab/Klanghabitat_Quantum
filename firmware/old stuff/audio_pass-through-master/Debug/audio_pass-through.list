
audio_pass-through.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800701c  0800701c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b0  20000000  08007024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000485c  200000b0  080070d4  000200b0  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000490c  080070d4  0002490c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025081  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b94  00000000  00000000  0004515f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ce76  00000000  00000000  00048cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001158  00000000  00000000  00055b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001078  00000000  00000000  00056cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000301d4  00000000  00000000  00057d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ee4e  00000000  00000000  00087f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00111191  00000000  00000000  00096d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  001a7ef3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036d0  00000000  00000000  001a7f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b0 	.word	0x200000b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08006e10 	.word	0x08006e10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b4 	.word	0x200000b4
 800023c:	08006e10 	.word	0x08006e10

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80002e0:	b508      	push	{r3, lr}
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80002e2:	f000 fee9 	bl	80010b8 <AUDIO_IO_Write>
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
}
 80002e6:	2000      	movs	r0, #0
 80002e8:	bd08      	pop	{r3, pc}
	...

080002ec <wm8994_SetMute>:
{
 80002ec:	b538      	push	{r3, r4, r5, lr}
 80002ee:	4603      	mov	r3, r0
  if (outputEnabled != 0)
 80002f0:	4a13      	ldr	r2, [pc, #76]	; (8000340 <wm8994_SetMute+0x54>)
 80002f2:	6810      	ldr	r0, [r2, #0]
 80002f4:	b180      	cbz	r0, 8000318 <wm8994_SetMute+0x2c>
    if(Cmd == AUDIO_MUTE_ON)
 80002f6:	2901      	cmp	r1, #1
 80002f8:	d00f      	beq.n	800031a <wm8994_SetMute+0x2e>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80002fa:	b2dd      	uxtb	r5, r3
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000302:	4628      	mov	r0, r5
 8000304:	f7ff ffec 	bl	80002e0 <CODEC_IO_Write>
 8000308:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 800030a:	2200      	movs	r2, #0
 800030c:	f240 4122 	movw	r1, #1058	; 0x422
 8000310:	4628      	mov	r0, r5
 8000312:	f7ff ffe5 	bl	80002e0 <CODEC_IO_Write>
 8000316:	4420      	add	r0, r4
}
 8000318:	bd38      	pop	{r3, r4, r5, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800031a:	b2dd      	uxtb	r5, r3
 800031c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000320:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000324:	4628      	mov	r0, r5
 8000326:	f7ff ffdb 	bl	80002e0 <CODEC_IO_Write>
 800032a:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800032c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000330:	f240 4122 	movw	r1, #1058	; 0x422
 8000334:	4628      	mov	r0, r5
 8000336:	f7ff ffd3 	bl	80002e0 <CODEC_IO_Write>
 800033a:	4420      	add	r0, r4
 800033c:	bd38      	pop	{r3, r4, r5, pc}
 800033e:	bf00      	nop
 8000340:	200000cc 	.word	0x200000cc

08000344 <wm8994_Play>:
{
 8000344:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000346:	2100      	movs	r1, #0
 8000348:	f7ff ffd0 	bl	80002ec <wm8994_SetMute>
}
 800034c:	bd08      	pop	{r3, pc}

0800034e <wm8994_Resume>:
{
 800034e:	b508      	push	{r3, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000350:	2100      	movs	r1, #0
 8000352:	f7ff ffcb 	bl	80002ec <wm8994_SetMute>
}
 8000356:	bd08      	pop	{r3, pc}

08000358 <wm8994_Pause>:
{  
 8000358:	b538      	push	{r3, r4, r5, lr}
 800035a:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800035c:	2101      	movs	r1, #1
 800035e:	f7ff ffc5 	bl	80002ec <wm8994_SetMute>
 8000362:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8000364:	2201      	movs	r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	b2e8      	uxtb	r0, r5
 800036a:	f7ff ffb9 	bl	80002e0 <CODEC_IO_Write>
}
 800036e:	4420      	add	r0, r4
 8000370:	bd38      	pop	{r3, r4, r5, pc}
	...

08000374 <wm8994_Stop>:
{
 8000374:	b570      	push	{r4, r5, r6, lr}
  if (outputEnabled != 0)
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <wm8994_Stop+0x78>)
 8000378:	681c      	ldr	r4, [r3, #0]
 800037a:	b90c      	cbnz	r4, 8000380 <wm8994_Stop+0xc>
}
 800037c:	4620      	mov	r0, r4
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	460e      	mov	r6, r1
 8000382:	4605      	mov	r5, r0
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000384:	2101      	movs	r1, #1
 8000386:	f7ff ffb1 	bl	80002ec <wm8994_SetMute>
 800038a:	4604      	mov	r4, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800038c:	2e02      	cmp	r6, #2
 800038e:	d0f5      	beq.n	800037c <wm8994_Stop+0x8>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000390:	b2ed      	uxtb	r5, r5
 8000392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000396:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800039a:	4628      	mov	r0, r5
 800039c:	f7ff ffa0 	bl	80002e0 <CODEC_IO_Write>
 80003a0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	f240 4122 	movw	r1, #1058	; 0x422
 80003aa:	4628      	mov	r0, r5
 80003ac:	f7ff ff98 	bl	80002e0 <CODEC_IO_Write>
 80003b0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80003b2:	2200      	movs	r2, #0
 80003b4:	212d      	movs	r1, #45	; 0x2d
 80003b6:	4628      	mov	r0, r5
 80003b8:	f7ff ff92 	bl	80002e0 <CODEC_IO_Write>
 80003bc:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80003be:	2200      	movs	r2, #0
 80003c0:	212e      	movs	r1, #46	; 0x2e
 80003c2:	4628      	mov	r0, r5
 80003c4:	f7ff ff8c 	bl	80002e0 <CODEC_IO_Write>
 80003c8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2105      	movs	r1, #5
 80003ce:	4628      	mov	r0, r5
 80003d0:	f7ff ff86 	bl	80002e0 <CODEC_IO_Write>
 80003d4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80003d6:	2200      	movs	r2, #0
 80003d8:	4611      	mov	r1, r2
 80003da:	4628      	mov	r0, r5
 80003dc:	f7ff ff80 	bl	80002e0 <CODEC_IO_Write>
 80003e0:	4404      	add	r4, r0
      outputEnabled = 0;
 80003e2:	2200      	movs	r2, #0
 80003e4:	4b01      	ldr	r3, [pc, #4]	; (80003ec <wm8994_Stop+0x78>)
 80003e6:	601a      	str	r2, [r3, #0]
  return counter;
 80003e8:	e7c8      	b.n	800037c <wm8994_Stop+0x8>
 80003ea:	bf00      	nop
 80003ec:	200000cc 	.word	0x200000cc

080003f0 <wm8994_SetVolume>:
{
 80003f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003f4:	4606      	mov	r6, r0
 80003f6:	460f      	mov	r7, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80003f8:	2964      	cmp	r1, #100	; 0x64
 80003fa:	d845      	bhi.n	8000488 <wm8994_SetVolume+0x98>
 80003fc:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
 8000400:	4a46      	ldr	r2, [pc, #280]	; (800051c <wm8994_SetVolume+0x12c>)
 8000402:	fb82 1203 	smull	r1, r2, r2, r3
 8000406:	17dd      	asrs	r5, r3, #31
 8000408:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 800040c:	b2ed      	uxtb	r5, r5
  if (outputEnabled != 0)
 800040e:	4b44      	ldr	r3, [pc, #272]	; (8000520 <wm8994_SetVolume+0x130>)
 8000410:	681c      	ldr	r4, [r3, #0]
 8000412:	b144      	cbz	r4, 8000426 <wm8994_SetVolume+0x36>
    if(convertedvol > 0x3E)
 8000414:	2d3e      	cmp	r5, #62	; 0x3e
 8000416:	d839      	bhi.n	800048c <wm8994_SetVolume+0x9c>
    else if (Volume == 0)
 8000418:	2f00      	cmp	r7, #0
 800041a:	d15a      	bne.n	80004d2 <wm8994_SetVolume+0xe2>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800041c:	2101      	movs	r1, #1
 800041e:	4630      	mov	r0, r6
 8000420:	f7ff ff64 	bl	80002ec <wm8994_SetMute>
 8000424:	4604      	mov	r4, r0
  if (inputEnabled != 0)
 8000426:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <wm8994_SetVolume+0x130>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	b353      	cbz	r3, 8000482 <wm8994_SetVolume+0x92>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800042c:	2f63      	cmp	r7, #99	; 0x63
 800042e:	d872      	bhi.n	8000516 <wm8994_SetVolume+0x126>
 8000430:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8000434:	010b      	lsls	r3, r1, #4
 8000436:	4a39      	ldr	r2, [pc, #228]	; (800051c <wm8994_SetVolume+0x12c>)
 8000438:	fb82 1203 	smull	r1, r2, r2, r3
 800043c:	17dd      	asrs	r5, r3, #31
 800043e:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 8000442:	b2ed      	uxtb	r5, r5
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000444:	b2f6      	uxtb	r6, r6
 8000446:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 800044a:	462a      	mov	r2, r5
 800044c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000450:	4630      	mov	r0, r6
 8000452:	f7ff ff45 	bl	80002e0 <CODEC_IO_Write>
 8000456:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8000458:	462a      	mov	r2, r5
 800045a:	f240 4101 	movw	r1, #1025	; 0x401
 800045e:	4630      	mov	r0, r6
 8000460:	f7ff ff3e 	bl	80002e0 <CODEC_IO_Write>
 8000464:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8000466:	462a      	mov	r2, r5
 8000468:	f240 4104 	movw	r1, #1028	; 0x404
 800046c:	4630      	mov	r0, r6
 800046e:	f7ff ff37 	bl	80002e0 <CODEC_IO_Write>
 8000472:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8000474:	462a      	mov	r2, r5
 8000476:	f240 4105 	movw	r1, #1029	; 0x405
 800047a:	4630      	mov	r0, r6
 800047c:	f7ff ff30 	bl	80002e0 <CODEC_IO_Write>
 8000480:	4404      	add	r4, r0
}
 8000482:	4620      	mov	r0, r4
 8000484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000488:	2564      	movs	r5, #100	; 0x64
 800048a:	e7c0      	b.n	800040e <wm8994_SetVolume+0x1e>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800048c:	2100      	movs	r1, #0
 800048e:	4630      	mov	r0, r6
 8000490:	f7ff ff2c 	bl	80002ec <wm8994_SetMute>
 8000494:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8000496:	b2f5      	uxtb	r5, r6
 8000498:	f240 127f 	movw	r2, #383	; 0x17f
 800049c:	211c      	movs	r1, #28
 800049e:	4628      	mov	r0, r5
 80004a0:	f7ff ff1e 	bl	80002e0 <CODEC_IO_Write>
 80004a4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80004a6:	f240 127f 	movw	r2, #383	; 0x17f
 80004aa:	211d      	movs	r1, #29
 80004ac:	4628      	mov	r0, r5
 80004ae:	f7ff ff17 	bl	80002e0 <CODEC_IO_Write>
 80004b2:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80004b4:	f240 127f 	movw	r2, #383	; 0x17f
 80004b8:	2126      	movs	r1, #38	; 0x26
 80004ba:	4628      	mov	r0, r5
 80004bc:	f7ff ff10 	bl	80002e0 <CODEC_IO_Write>
 80004c0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80004c2:	f240 127f 	movw	r2, #383	; 0x17f
 80004c6:	2127      	movs	r1, #39	; 0x27
 80004c8:	4628      	mov	r0, r5
 80004ca:	f7ff ff09 	bl	80002e0 <CODEC_IO_Write>
 80004ce:	4404      	add	r4, r0
 80004d0:	e7a9      	b.n	8000426 <wm8994_SetVolume+0x36>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80004d2:	2100      	movs	r1, #0
 80004d4:	4630      	mov	r0, r6
 80004d6:	f7ff ff09 	bl	80002ec <wm8994_SetMute>
 80004da:	4604      	mov	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80004dc:	fa5f f886 	uxtb.w	r8, r6
 80004e0:	f445 75a0 	orr.w	r5, r5, #320	; 0x140
 80004e4:	462a      	mov	r2, r5
 80004e6:	211c      	movs	r1, #28
 80004e8:	4640      	mov	r0, r8
 80004ea:	f7ff fef9 	bl	80002e0 <CODEC_IO_Write>
 80004ee:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80004f0:	462a      	mov	r2, r5
 80004f2:	211d      	movs	r1, #29
 80004f4:	4640      	mov	r0, r8
 80004f6:	f7ff fef3 	bl	80002e0 <CODEC_IO_Write>
 80004fa:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80004fc:	462a      	mov	r2, r5
 80004fe:	2126      	movs	r1, #38	; 0x26
 8000500:	4640      	mov	r0, r8
 8000502:	f7ff feed 	bl	80002e0 <CODEC_IO_Write>
 8000506:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8000508:	462a      	mov	r2, r5
 800050a:	2127      	movs	r1, #39	; 0x27
 800050c:	4640      	mov	r0, r8
 800050e:	f7ff fee7 	bl	80002e0 <CODEC_IO_Write>
 8000512:	4404      	add	r4, r0
 8000514:	e787      	b.n	8000426 <wm8994_SetVolume+0x36>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8000516:	25ef      	movs	r5, #239	; 0xef
 8000518:	e794      	b.n	8000444 <wm8994_SetVolume+0x54>
 800051a:	bf00      	nop
 800051c:	51eb851f 	.word	0x51eb851f
 8000520:	200000cc 	.word	0x200000cc

08000524 <wm8994_Init>:
{
 8000524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000528:	4680      	mov	r8, r0
 800052a:	4691      	mov	r9, r2
 800052c:	469a      	mov	sl, r3
  uint16_t output_device = OutputInputDevice & 0xFF;
 800052e:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000530:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 8000534:	f000 fdb6 	bl	80010a4 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000538:	fa5f f588 	uxtb.w	r5, r8
 800053c:	2203      	movs	r2, #3
 800053e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000542:	4628      	mov	r0, r5
 8000544:	f7ff fecc 	bl	80002e0 <CODEC_IO_Write>
 8000548:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 800054a:	2200      	movs	r2, #0
 800054c:	f640 0117 	movw	r1, #2071	; 0x817
 8000550:	4628      	mov	r0, r5
 8000552:	f7ff fec5 	bl	80002e0 <CODEC_IO_Write>
 8000556:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800055e:	4628      	mov	r0, r5
 8000560:	f7ff febe 	bl	80002e0 <CODEC_IO_Write>
 8000564:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000566:	226c      	movs	r2, #108	; 0x6c
 8000568:	2139      	movs	r1, #57	; 0x39
 800056a:	4628      	mov	r0, r5
 800056c:	f7ff feb8 	bl	80002e0 <CODEC_IO_Write>
 8000570:	4404      	add	r4, r0
  if (input_device > 0)
 8000572:	b3c6      	cbz	r6, 80005e6 <wm8994_Init+0xc2>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000574:	2213      	movs	r2, #19
 8000576:	2101      	movs	r1, #1
 8000578:	4628      	mov	r0, r5
 800057a:	f7ff feb1 	bl	80002e0 <CODEC_IO_Write>
 800057e:	4404      	add	r4, r0
  AUDIO_IO_Delay(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f000 fdc9 	bl	8001118 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000586:	2f00      	cmp	r7, #0
 8000588:	f000 80c7 	beq.w	800071a <wm8994_Init+0x1f6>
    outputEnabled = 1;
 800058c:	2201      	movs	r2, #1
 800058e:	4be9      	ldr	r3, [pc, #932]	; (8000934 <wm8994_Init+0x410>)
 8000590:	601a      	str	r2, [r3, #0]
    switch (output_device)
 8000592:	2f02      	cmp	r7, #2
 8000594:	d052      	beq.n	800063c <wm8994_Init+0x118>
 8000596:	2f03      	cmp	r7, #3
 8000598:	d074      	beq.n	8000684 <wm8994_Init+0x160>
 800059a:	4297      	cmp	r7, r2
 800059c:	d02a      	beq.n	80005f4 <wm8994_Init+0xd0>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800059e:	f240 3203 	movw	r2, #771	; 0x303
 80005a2:	2105      	movs	r1, #5
 80005a4:	4628      	mov	r0, r5
 80005a6:	f7ff fe9b 	bl	80002e0 <CODEC_IO_Write>
 80005aa:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f240 6101 	movw	r1, #1537	; 0x601
 80005b2:	4628      	mov	r0, r5
 80005b4:	f7ff fe94 	bl	80002e0 <CODEC_IO_Write>
 80005b8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f240 6102 	movw	r1, #1538	; 0x602
 80005c0:	4628      	mov	r0, r5
 80005c2:	f7ff fe8d 	bl	80002e0 <CODEC_IO_Write>
 80005c6:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f240 6104 	movw	r1, #1540	; 0x604
 80005ce:	4628      	mov	r0, r5
 80005d0:	f7ff fe86 	bl	80002e0 <CODEC_IO_Write>
 80005d4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f240 6105 	movw	r1, #1541	; 0x605
 80005dc:	4628      	mov	r0, r5
 80005de:	f7ff fe7f 	bl	80002e0 <CODEC_IO_Write>
 80005e2:	4404      	add	r4, r0
      break;
 80005e4:	e09c      	b.n	8000720 <wm8994_Init+0x1fc>
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80005e6:	2203      	movs	r2, #3
 80005e8:	2101      	movs	r1, #1
 80005ea:	4628      	mov	r0, r5
 80005ec:	f7ff fe78 	bl	80002e0 <CODEC_IO_Write>
 80005f0:	4404      	add	r4, r0
 80005f2:	e7c5      	b.n	8000580 <wm8994_Init+0x5c>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80005f4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80005f8:	2105      	movs	r1, #5
 80005fa:	4628      	mov	r0, r5
 80005fc:	f7ff fe70 	bl	80002e0 <CODEC_IO_Write>
 8000600:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000602:	2200      	movs	r2, #0
 8000604:	f240 6101 	movw	r1, #1537	; 0x601
 8000608:	4628      	mov	r0, r5
 800060a:	f7ff fe69 	bl	80002e0 <CODEC_IO_Write>
 800060e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000610:	2200      	movs	r2, #0
 8000612:	f240 6102 	movw	r1, #1538	; 0x602
 8000616:	4628      	mov	r0, r5
 8000618:	f7ff fe62 	bl	80002e0 <CODEC_IO_Write>
 800061c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800061e:	2202      	movs	r2, #2
 8000620:	f240 6104 	movw	r1, #1540	; 0x604
 8000624:	4628      	mov	r0, r5
 8000626:	f7ff fe5b 	bl	80002e0 <CODEC_IO_Write>
 800062a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800062c:	2202      	movs	r2, #2
 800062e:	f240 6105 	movw	r1, #1541	; 0x605
 8000632:	4628      	mov	r0, r5
 8000634:	f7ff fe54 	bl	80002e0 <CODEC_IO_Write>
 8000638:	4404      	add	r4, r0
      break;
 800063a:	e071      	b.n	8000720 <wm8994_Init+0x1fc>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800063c:	f240 3203 	movw	r2, #771	; 0x303
 8000640:	2105      	movs	r1, #5
 8000642:	4628      	mov	r0, r5
 8000644:	f7ff fe4c 	bl	80002e0 <CODEC_IO_Write>
 8000648:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800064a:	2201      	movs	r2, #1
 800064c:	f240 6101 	movw	r1, #1537	; 0x601
 8000650:	4628      	mov	r0, r5
 8000652:	f7ff fe45 	bl	80002e0 <CODEC_IO_Write>
 8000656:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000658:	2201      	movs	r2, #1
 800065a:	f240 6102 	movw	r1, #1538	; 0x602
 800065e:	4628      	mov	r0, r5
 8000660:	f7ff fe3e 	bl	80002e0 <CODEC_IO_Write>
 8000664:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000666:	2200      	movs	r2, #0
 8000668:	f240 6104 	movw	r1, #1540	; 0x604
 800066c:	4628      	mov	r0, r5
 800066e:	f7ff fe37 	bl	80002e0 <CODEC_IO_Write>
 8000672:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000674:	2200      	movs	r2, #0
 8000676:	f240 6105 	movw	r1, #1541	; 0x605
 800067a:	4628      	mov	r0, r5
 800067c:	f7ff fe30 	bl	80002e0 <CODEC_IO_Write>
 8000680:	4404      	add	r4, r0
      break;
 8000682:	e04d      	b.n	8000720 <wm8994_Init+0x1fc>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000684:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8000688:	d023      	beq.n	80006d2 <wm8994_Init+0x1ae>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800068a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800068e:	2105      	movs	r1, #5
 8000690:	4628      	mov	r0, r5
 8000692:	f7ff fe25 	bl	80002e0 <CODEC_IO_Write>
 8000696:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000698:	2201      	movs	r2, #1
 800069a:	f240 6101 	movw	r1, #1537	; 0x601
 800069e:	4628      	mov	r0, r5
 80006a0:	f7ff fe1e 	bl	80002e0 <CODEC_IO_Write>
 80006a4:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f240 6102 	movw	r1, #1538	; 0x602
 80006ac:	4628      	mov	r0, r5
 80006ae:	f7ff fe17 	bl	80002e0 <CODEC_IO_Write>
 80006b2:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80006b4:	2202      	movs	r2, #2
 80006b6:	f240 6104 	movw	r1, #1540	; 0x604
 80006ba:	4628      	mov	r0, r5
 80006bc:	f7ff fe10 	bl	80002e0 <CODEC_IO_Write>
 80006c0:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80006c2:	2202      	movs	r2, #2
 80006c4:	f240 6105 	movw	r1, #1541	; 0x605
 80006c8:	4628      	mov	r0, r5
 80006ca:	f7ff fe09 	bl	80002e0 <CODEC_IO_Write>
 80006ce:	4404      	add	r4, r0
 80006d0:	e026      	b.n	8000720 <wm8994_Init+0x1fc>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80006d2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80006d6:	2105      	movs	r1, #5
 80006d8:	4628      	mov	r0, r5
 80006da:	f7ff fe01 	bl	80002e0 <CODEC_IO_Write>
 80006de:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80006e0:	2203      	movs	r2, #3
 80006e2:	f240 6101 	movw	r1, #1537	; 0x601
 80006e6:	4628      	mov	r0, r5
 80006e8:	f7ff fdfa 	bl	80002e0 <CODEC_IO_Write>
 80006ec:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80006ee:	2203      	movs	r2, #3
 80006f0:	f240 6102 	movw	r1, #1538	; 0x602
 80006f4:	4628      	mov	r0, r5
 80006f6:	f7ff fdf3 	bl	80002e0 <CODEC_IO_Write>
 80006fa:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80006fc:	2203      	movs	r2, #3
 80006fe:	f240 6104 	movw	r1, #1540	; 0x604
 8000702:	4628      	mov	r0, r5
 8000704:	f7ff fdec 	bl	80002e0 <CODEC_IO_Write>
 8000708:	4404      	add	r4, r0
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800070a:	2203      	movs	r2, #3
 800070c:	f240 6105 	movw	r1, #1541	; 0x605
 8000710:	4628      	mov	r0, r5
 8000712:	f7ff fde5 	bl	80002e0 <CODEC_IO_Write>
 8000716:	4404      	add	r4, r0
 8000718:	e002      	b.n	8000720 <wm8994_Init+0x1fc>
    outputEnabled = 0;
 800071a:	2200      	movs	r2, #0
 800071c:	4b85      	ldr	r3, [pc, #532]	; (8000934 <wm8994_Init+0x410>)
 800071e:	601a      	str	r2, [r3, #0]
  if (input_device > 0)
 8000720:	2e00      	cmp	r6, #0
 8000722:	f000 80e8 	beq.w	80008f6 <wm8994_Init+0x3d2>
    inputEnabled = 1;
 8000726:	2201      	movs	r2, #1
 8000728:	4b82      	ldr	r3, [pc, #520]	; (8000934 <wm8994_Init+0x410>)
 800072a:	605a      	str	r2, [r3, #4]
    switch (input_device)
 800072c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000730:	d077      	beq.n	8000822 <wm8994_Init+0x2fe>
 8000732:	d947      	bls.n	80007c4 <wm8994_Init+0x2a0>
 8000734:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 8000738:	f000 809e 	beq.w	8000878 <wm8994_Init+0x354>
 800073c:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8000740:	f040 80d7 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8000744:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000748:	2104      	movs	r1, #4
 800074a:	4628      	mov	r0, r5
 800074c:	f7ff fdc8 	bl	80002e0 <CODEC_IO_Write>
 8000750:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000752:	22db      	movs	r2, #219	; 0xdb
 8000754:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000758:	4628      	mov	r0, r5
 800075a:	f7ff fdc1 	bl	80002e0 <CODEC_IO_Write>
 800075e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000760:	22db      	movs	r2, #219	; 0xdb
 8000762:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000766:	4628      	mov	r0, r5
 8000768:	f7ff fdba 	bl	80002e0 <CODEC_IO_Write>
 800076c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800076e:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000772:	2102      	movs	r1, #2
 8000774:	4628      	mov	r0, r5
 8000776:	f7ff fdb3 	bl	80002e0 <CODEC_IO_Write>
 800077a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800077c:	2202      	movs	r2, #2
 800077e:	f240 6106 	movw	r1, #1542	; 0x606
 8000782:	4628      	mov	r0, r5
 8000784:	f7ff fdac 	bl	80002e0 <CODEC_IO_Write>
 8000788:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800078a:	2202      	movs	r2, #2
 800078c:	f240 6107 	movw	r1, #1543	; 0x607
 8000790:	4628      	mov	r0, r5
 8000792:	f7ff fda5 	bl	80002e0 <CODEC_IO_Write>
 8000796:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000798:	2202      	movs	r2, #2
 800079a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800079e:	4628      	mov	r0, r5
 80007a0:	f7ff fd9e 	bl	80002e0 <CODEC_IO_Write>
 80007a4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80007a6:	2202      	movs	r2, #2
 80007a8:	f240 6109 	movw	r1, #1545	; 0x609
 80007ac:	4628      	mov	r0, r5
 80007ae:	f7ff fd97 	bl	80002e0 <CODEC_IO_Write>
 80007b2:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80007b4:	220d      	movs	r2, #13
 80007b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80007ba:	4628      	mov	r0, r5
 80007bc:	f7ff fd90 	bl	80002e0 <CODEC_IO_Write>
 80007c0:	4404      	add	r4, r0
      break;    
 80007c2:	e09b      	b.n	80008fc <wm8994_Init+0x3d8>
    switch (input_device)
 80007c4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80007c8:	f040 8093 	bne.w	80008f2 <wm8994_Init+0x3ce>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80007cc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80007d0:	2104      	movs	r1, #4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f7ff fd84 	bl	80002e0 <CODEC_IO_Write>
 80007d8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80007da:	22db      	movs	r2, #219	; 0xdb
 80007dc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80007e0:	4628      	mov	r0, r5
 80007e2:	f7ff fd7d 	bl	80002e0 <CODEC_IO_Write>
 80007e6:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80007e8:	f246 3250 	movw	r2, #25424	; 0x6350
 80007ec:	2102      	movs	r1, #2
 80007ee:	4628      	mov	r0, r5
 80007f0:	f7ff fd76 	bl	80002e0 <CODEC_IO_Write>
 80007f4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80007f6:	2202      	movs	r2, #2
 80007f8:	f240 6106 	movw	r1, #1542	; 0x606
 80007fc:	4628      	mov	r0, r5
 80007fe:	f7ff fd6f 	bl	80002e0 <CODEC_IO_Write>
 8000802:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000804:	2202      	movs	r2, #2
 8000806:	f240 6107 	movw	r1, #1543	; 0x607
 800080a:	4628      	mov	r0, r5
 800080c:	f7ff fd68 	bl	80002e0 <CODEC_IO_Write>
 8000810:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000812:	220d      	movs	r2, #13
 8000814:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000818:	4628      	mov	r0, r5
 800081a:	f7ff fd61 	bl	80002e0 <CODEC_IO_Write>
 800081e:	4404      	add	r4, r0
      break; 
 8000820:	e06c      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8000822:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8000826:	2104      	movs	r1, #4
 8000828:	4628      	mov	r0, r5
 800082a:	f7ff fd59 	bl	80002e0 <CODEC_IO_Write>
 800082e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000830:	22db      	movs	r2, #219	; 0xdb
 8000832:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000836:	4628      	mov	r0, r5
 8000838:	f7ff fd52 	bl	80002e0 <CODEC_IO_Write>
 800083c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800083e:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000842:	2102      	movs	r1, #2
 8000844:	4628      	mov	r0, r5
 8000846:	f7ff fd4b 	bl	80002e0 <CODEC_IO_Write>
 800084a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800084c:	2202      	movs	r2, #2
 800084e:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000852:	4628      	mov	r0, r5
 8000854:	f7ff fd44 	bl	80002e0 <CODEC_IO_Write>
 8000858:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800085a:	2202      	movs	r2, #2
 800085c:	f240 6109 	movw	r1, #1545	; 0x609
 8000860:	4628      	mov	r0, r5
 8000862:	f7ff fd3d 	bl	80002e0 <CODEC_IO_Write>
 8000866:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8000868:	220e      	movs	r2, #14
 800086a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800086e:	4628      	mov	r0, r5
 8000870:	f7ff fd36 	bl	80002e0 <CODEC_IO_Write>
 8000874:	4404      	add	r4, r0
      break;
 8000876:	e041      	b.n	80008fc <wm8994_Init+0x3d8>
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8000878:	2211      	movs	r2, #17
 800087a:	2128      	movs	r1, #40	; 0x28
 800087c:	4628      	mov	r0, r5
 800087e:	f7ff fd2f 	bl	80002e0 <CODEC_IO_Write>
 8000882:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8000884:	2220      	movs	r2, #32
 8000886:	2129      	movs	r1, #41	; 0x29
 8000888:	4628      	mov	r0, r5
 800088a:	f7ff fd29 	bl	80002e0 <CODEC_IO_Write>
 800088e:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8000890:	2220      	movs	r2, #32
 8000892:	212a      	movs	r1, #42	; 0x2a
 8000894:	4628      	mov	r0, r5
 8000896:	f7ff fd23 	bl	80002e0 <CODEC_IO_Write>
 800089a:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800089c:	f240 3203 	movw	r2, #771	; 0x303
 80008a0:	2104      	movs	r1, #4
 80008a2:	4628      	mov	r0, r5
 80008a4:	f7ff fd1c 	bl	80002e0 <CODEC_IO_Write>
 80008a8:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80008aa:	22db      	movs	r2, #219	; 0xdb
 80008ac:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80008b0:	4628      	mov	r0, r5
 80008b2:	f7ff fd15 	bl	80002e0 <CODEC_IO_Write>
 80008b6:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80008b8:	f246 3250 	movw	r2, #25424	; 0x6350
 80008bc:	2102      	movs	r1, #2
 80008be:	4628      	mov	r0, r5
 80008c0:	f7ff fd0e 	bl	80002e0 <CODEC_IO_Write>
 80008c4:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80008c6:	2202      	movs	r2, #2
 80008c8:	f240 6106 	movw	r1, #1542	; 0x606
 80008cc:	4628      	mov	r0, r5
 80008ce:	f7ff fd07 	bl	80002e0 <CODEC_IO_Write>
 80008d2:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80008d4:	2202      	movs	r2, #2
 80008d6:	f240 6107 	movw	r1, #1543	; 0x607
 80008da:	4628      	mov	r0, r5
 80008dc:	f7ff fd00 	bl	80002e0 <CODEC_IO_Write>
 80008e0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80008e2:	220d      	movs	r2, #13
 80008e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80008e8:	4628      	mov	r0, r5
 80008ea:	f7ff fcf9 	bl	80002e0 <CODEC_IO_Write>
 80008ee:	4404      	add	r4, r0
      break;
 80008f0:	e004      	b.n	80008fc <wm8994_Init+0x3d8>
      counter++;
 80008f2:	3401      	adds	r4, #1
      break;
 80008f4:	e002      	b.n	80008fc <wm8994_Init+0x3d8>
    inputEnabled = 0;
 80008f6:	2200      	movs	r2, #0
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <wm8994_Init+0x410>)
 80008fa:	605a      	str	r2, [r3, #4]
  switch (AudioFreq)
 80008fc:	f245 6322 	movw	r3, #22050	; 0x5622
 8000900:	459a      	cmp	sl, r3
 8000902:	f000 8093 	beq.w	8000a2c <wm8994_Init+0x508>
 8000906:	d919      	bls.n	800093c <wm8994_Init+0x418>
 8000908:	f64a 4344 	movw	r3, #44100	; 0xac44
 800090c:	459a      	cmp	sl, r3
 800090e:	f000 8095 	beq.w	8000a3c <wm8994_Init+0x518>
 8000912:	d925      	bls.n	8000960 <wm8994_Init+0x43c>
 8000914:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000918:	459a      	cmp	sl, r3
 800091a:	d077      	beq.n	8000a0c <wm8994_Init+0x4e8>
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <wm8994_Init+0x414>)
 800091e:	459a      	cmp	sl, r3
 8000920:	d116      	bne.n	8000950 <wm8994_Init+0x42c>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000922:	22a3      	movs	r2, #163	; 0xa3
 8000924:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000928:	4628      	mov	r0, r5
 800092a:	f7ff fcd9 	bl	80002e0 <CODEC_IO_Write>
 800092e:	4404      	add	r4, r0
    break;
 8000930:	e028      	b.n	8000984 <wm8994_Init+0x460>
 8000932:	bf00      	nop
 8000934:	200000cc 	.word	0x200000cc
 8000938:	00017700 	.word	0x00017700
  switch (AudioFreq)
 800093c:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000940:	459a      	cmp	sl, r3
 8000942:	d06b      	beq.n	8000a1c <wm8994_Init+0x4f8>
 8000944:	f5ba 5f7a 	cmp.w	sl, #16000	; 0x3e80
 8000948:	d058      	beq.n	80009fc <wm8994_Init+0x4d8>
 800094a:	f5ba 5ffa 	cmp.w	sl, #8000	; 0x1f40
 800094e:	d012      	beq.n	8000976 <wm8994_Init+0x452>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000950:	2283      	movs	r2, #131	; 0x83
 8000952:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000956:	4628      	mov	r0, r5
 8000958:	f7ff fcc2 	bl	80002e0 <CODEC_IO_Write>
 800095c:	4404      	add	r4, r0
    break; 
 800095e:	e011      	b.n	8000984 <wm8994_Init+0x460>
  switch (AudioFreq)
 8000960:	f5ba 4ffa 	cmp.w	sl, #32000	; 0x7d00
 8000964:	d1f4      	bne.n	8000950 <wm8994_Init+0x42c>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000966:	2263      	movs	r2, #99	; 0x63
 8000968:	f44f 7104 	mov.w	r1, #528	; 0x210
 800096c:	4628      	mov	r0, r5
 800096e:	f7ff fcb7 	bl	80002e0 <CODEC_IO_Write>
 8000972:	4404      	add	r4, r0
    break;
 8000974:	e006      	b.n	8000984 <wm8994_Init+0x460>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000976:	2203      	movs	r2, #3
 8000978:	f44f 7104 	mov.w	r1, #528	; 0x210
 800097c:	4628      	mov	r0, r5
 800097e:	f7ff fcaf 	bl	80002e0 <CODEC_IO_Write>
 8000982:	4404      	add	r4, r0
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000984:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8000988:	d060      	beq.n	8000a4c <wm8994_Init+0x528>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800098a:	f244 0210 	movw	r2, #16400	; 0x4010
 800098e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000992:	4628      	mov	r0, r5
 8000994:	f7ff fca4 	bl	80002e0 <CODEC_IO_Write>
 8000998:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800099a:	2200      	movs	r2, #0
 800099c:	f240 3102 	movw	r1, #770	; 0x302
 80009a0:	4628      	mov	r0, r5
 80009a2:	f7ff fc9d 	bl	80002e0 <CODEC_IO_Write>
 80009a6:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80009a8:	220a      	movs	r2, #10
 80009aa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80009ae:	4628      	mov	r0, r5
 80009b0:	f7ff fc96 	bl	80002e0 <CODEC_IO_Write>
 80009b4:	4404      	add	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009bc:	4628      	mov	r0, r5
 80009be:	f7ff fc8f 	bl	80002e0 <CODEC_IO_Write>
 80009c2:	4404      	add	r4, r0
  if (output_device > 0)  /* Audio output selected */
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d14a      	bne.n	8000a5e <wm8994_Init+0x53a>
  if (input_device > 0) /* Audio input selected */
 80009c8:	b1ae      	cbz	r6, 80009f6 <wm8994_Init+0x4d2>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80009ca:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80009ce:	bf18      	it	ne
 80009d0:	f5b6 7f80 	cmpne.w	r6, #256	; 0x100
 80009d4:	f000 80df 	beq.w	8000b96 <wm8994_Init+0x672>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80009d8:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 80009dc:	f000 80f2 	beq.w	8000bc4 <wm8994_Init+0x6a0>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80009e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80009e4:	bf18      	it	ne
 80009e6:	f5b6 7f40 	cmpne.w	r6, #768	; 0x300
 80009ea:	f000 810a 	beq.w	8000c02 <wm8994_Init+0x6de>
    wm8994_SetVolume(DeviceAddr, Volume);
 80009ee:	4649      	mov	r1, r9
 80009f0:	4640      	mov	r0, r8
 80009f2:	f7ff fcfd 	bl	80003f0 <wm8994_SetVolume>
}
 80009f6:	4620      	mov	r0, r4
 80009f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80009fc:	2233      	movs	r2, #51	; 0x33
 80009fe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a02:	4628      	mov	r0, r5
 8000a04:	f7ff fc6c 	bl	80002e0 <CODEC_IO_Write>
 8000a08:	4404      	add	r4, r0
    break;
 8000a0a:	e7bb      	b.n	8000984 <wm8994_Init+0x460>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000a0c:	2283      	movs	r2, #131	; 0x83
 8000a0e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a12:	4628      	mov	r0, r5
 8000a14:	f7ff fc64 	bl	80002e0 <CODEC_IO_Write>
 8000a18:	4404      	add	r4, r0
    break;
 8000a1a:	e7b3      	b.n	8000984 <wm8994_Init+0x460>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000a1c:	2213      	movs	r2, #19
 8000a1e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a22:	4628      	mov	r0, r5
 8000a24:	f7ff fc5c 	bl	80002e0 <CODEC_IO_Write>
 8000a28:	4404      	add	r4, r0
    break;
 8000a2a:	e7ab      	b.n	8000984 <wm8994_Init+0x460>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000a2c:	2243      	movs	r2, #67	; 0x43
 8000a2e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a32:	4628      	mov	r0, r5
 8000a34:	f7ff fc54 	bl	80002e0 <CODEC_IO_Write>
 8000a38:	4404      	add	r4, r0
    break;
 8000a3a:	e7a3      	b.n	8000984 <wm8994_Init+0x460>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000a3c:	2273      	movs	r2, #115	; 0x73
 8000a3e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a42:	4628      	mov	r0, r5
 8000a44:	f7ff fc4c 	bl	80002e0 <CODEC_IO_Write>
 8000a48:	4404      	add	r4, r0
    break; 
 8000a4a:	e79b      	b.n	8000984 <wm8994_Init+0x460>
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000a4c:	f244 0218 	movw	r2, #16408	; 0x4018
 8000a50:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a54:	4628      	mov	r0, r5
 8000a56:	f7ff fc43 	bl	80002e0 <CODEC_IO_Write>
 8000a5a:	4404      	add	r4, r0
 8000a5c:	e79d      	b.n	800099a <wm8994_Init+0x476>
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a62:	2103      	movs	r1, #3
 8000a64:	4628      	mov	r0, r5
 8000a66:	f7ff fc3b 	bl	80002e0 <CODEC_IO_Write>
 8000a6a:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2122      	movs	r1, #34	; 0x22
 8000a70:	4628      	mov	r0, r5
 8000a72:	f7ff fc35 	bl	80002e0 <CODEC_IO_Write>
 8000a76:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2123      	movs	r1, #35	; 0x23
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	f7ff fc2f 	bl	80002e0 <CODEC_IO_Write>
 8000a82:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000a84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a88:	2136      	movs	r1, #54	; 0x36
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f7ff fc28 	bl	80002e0 <CODEC_IO_Write>
 8000a90:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000a92:	f243 0203 	movw	r2, #12291	; 0x3003
 8000a96:	2101      	movs	r1, #1
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f7ff fc21 	bl	80002e0 <CODEC_IO_Write>
 8000a9e:	4404      	add	r4, r0
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000aa0:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8000aa4:	d06f      	beq.n	8000b86 <wm8994_Init+0x662>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	2151      	movs	r1, #81	; 0x51
 8000aaa:	4628      	mov	r0, r5
 8000aac:	f7ff fc18 	bl	80002e0 <CODEC_IO_Write>
 8000ab0:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000ab2:	f243 3203 	movw	r2, #13059	; 0x3303
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f7ff fc11 	bl	80002e0 <CODEC_IO_Write>
 8000abe:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000ac0:	2222      	movs	r2, #34	; 0x22
 8000ac2:	2160      	movs	r1, #96	; 0x60
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	f7ff fc0b 	bl	80002e0 <CODEC_IO_Write>
 8000aca:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000acc:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000ad0:	214c      	movs	r1, #76	; 0x4c
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f7ff fc04 	bl	80002e0 <CODEC_IO_Write>
 8000ad8:	4404      	add	r4, r0
    AUDIO_IO_Delay(15);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f000 fb1c 	bl	8001118 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	212d      	movs	r1, #45	; 0x2d
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	f7ff fbfb 	bl	80002e0 <CODEC_IO_Write>
 8000aea:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8000aec:	2201      	movs	r2, #1
 8000aee:	212e      	movs	r1, #46	; 0x2e
 8000af0:	4628      	mov	r0, r5
 8000af2:	f7ff fbf5 	bl	80002e0 <CODEC_IO_Write>
 8000af6:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8000af8:	f44f 724c 	mov.w	r2, #816	; 0x330
 8000afc:	2103      	movs	r1, #3
 8000afe:	4628      	mov	r0, r5
 8000b00:	f7ff fbee 	bl	80002e0 <CODEC_IO_Write>
 8000b04:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8000b06:	2233      	movs	r2, #51	; 0x33
 8000b08:	2154      	movs	r1, #84	; 0x54
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f7ff fbe8 	bl	80002e0 <CODEC_IO_Write>
 8000b10:	4404      	add	r4, r0
    AUDIO_IO_Delay(250);
 8000b12:	20fa      	movs	r0, #250	; 0xfa
 8000b14:	f000 fb00 	bl	8001118 <AUDIO_IO_Delay>
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8000b18:	22ee      	movs	r2, #238	; 0xee
 8000b1a:	2160      	movs	r1, #96	; 0x60
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	f7ff fbdf 	bl	80002e0 <CODEC_IO_Write>
 8000b22:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8000b24:	22c0      	movs	r2, #192	; 0xc0
 8000b26:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f7ff fbd8 	bl	80002e0 <CODEC_IO_Write>
 8000b30:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8000b32:	22c0      	movs	r2, #192	; 0xc0
 8000b34:	f240 6111 	movw	r1, #1553	; 0x611
 8000b38:	4628      	mov	r0, r5
 8000b3a:	f7ff fbd1 	bl	80002e0 <CODEC_IO_Write>
 8000b3e:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b46:	4628      	mov	r0, r5
 8000b48:	f7ff fbca 	bl	80002e0 <CODEC_IO_Write>
 8000b4c:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8000b4e:	22c0      	movs	r2, #192	; 0xc0
 8000b50:	f240 6112 	movw	r1, #1554	; 0x612
 8000b54:	4628      	mov	r0, r5
 8000b56:	f7ff fbc3 	bl	80002e0 <CODEC_IO_Write>
 8000b5a:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8000b5c:	22c0      	movs	r2, #192	; 0xc0
 8000b5e:	f240 6113 	movw	r1, #1555	; 0x613
 8000b62:	4628      	mov	r0, r5
 8000b64:	f7ff fbbc 	bl	80002e0 <CODEC_IO_Write>
 8000b68:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f240 4122 	movw	r1, #1058	; 0x422
 8000b70:	4628      	mov	r0, r5
 8000b72:	f7ff fbb5 	bl	80002e0 <CODEC_IO_Write>
 8000b76:	4404      	add	r4, r0
    wm8994_SetVolume(DeviceAddr, Volume);
 8000b78:	4649      	mov	r1, r9
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	f7ff fc38 	bl	80003f0 <wm8994_SetVolume>
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000b80:	f243 3703 	movw	r7, #13059	; 0x3303
 8000b84:	e720      	b.n	80009c8 <wm8994_Init+0x4a4>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000b86:	f240 2205 	movw	r2, #517	; 0x205
 8000b8a:	2151      	movs	r1, #81	; 0x51
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f7ff fba7 	bl	80002e0 <CODEC_IO_Write>
 8000b92:	4404      	add	r4, r0
 8000b94:	e78d      	b.n	8000ab2 <wm8994_Init+0x58e>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000b96:	f047 0213 	orr.w	r2, r7, #19
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f7ff fb9f 	bl	80002e0 <CODEC_IO_Write>
 8000ba2:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000baa:	4628      	mov	r0, r5
 8000bac:	f7ff fb98 	bl	80002e0 <CODEC_IO_Write>
 8000bb0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8000bb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bb6:	f240 4111 	movw	r1, #1041	; 0x411
 8000bba:	4628      	mov	r0, r5
 8000bbc:	f7ff fb90 	bl	80002e0 <CODEC_IO_Write>
 8000bc0:	4404      	add	r4, r0
 8000bc2:	e714      	b.n	80009ee <wm8994_Init+0x4ca>
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000bc4:	f047 0213 	orr.w	r2, r7, #19
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f7ff fb88 	bl	80002e0 <CODEC_IO_Write>
 8000bd0:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f7ff fb81 	bl	80002e0 <CODEC_IO_Write>
 8000bde:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000be0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000be4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000be8:	4628      	mov	r0, r5
 8000bea:	f7ff fb79 	bl	80002e0 <CODEC_IO_Write>
 8000bee:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8000bf0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000bf4:	f240 4111 	movw	r1, #1041	; 0x411
 8000bf8:	4628      	mov	r0, r5
 8000bfa:	f7ff fb71 	bl	80002e0 <CODEC_IO_Write>
 8000bfe:	4404      	add	r4, r0
 8000c00:	e6f5      	b.n	80009ee <wm8994_Init+0x4ca>
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8000c02:	220b      	movs	r2, #11
 8000c04:	2118      	movs	r1, #24
 8000c06:	4628      	mov	r0, r5
 8000c08:	f7ff fb6a 	bl	80002e0 <CODEC_IO_Write>
 8000c0c:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8000c0e:	220b      	movs	r2, #11
 8000c10:	211a      	movs	r1, #26
 8000c12:	4628      	mov	r0, r5
 8000c14:	f7ff fb64 	bl	80002e0 <CODEC_IO_Write>
 8000c18:	4404      	add	r4, r0
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8000c1a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8000c1e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c22:	4628      	mov	r0, r5
 8000c24:	f7ff fb5c 	bl	80002e0 <CODEC_IO_Write>
 8000c28:	4404      	add	r4, r0
 8000c2a:	e6e0      	b.n	80009ee <wm8994_Init+0x4ca>

08000c2c <wm8994_SetOutputMode>:
{
 8000c2c:	b538      	push	{r3, r4, r5, lr}
  switch (Output) 
 8000c2e:	2902      	cmp	r1, #2
 8000c30:	d04d      	beq.n	8000cce <wm8994_SetOutputMode+0xa2>
 8000c32:	2903      	cmp	r1, #3
 8000c34:	d070      	beq.n	8000d18 <wm8994_SetOutputMode+0xec>
 8000c36:	2901      	cmp	r1, #1
 8000c38:	d024      	beq.n	8000c84 <wm8994_SetOutputMode+0x58>
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000c3a:	b2c5      	uxtb	r5, r0
 8000c3c:	f240 3203 	movw	r2, #771	; 0x303
 8000c40:	2105      	movs	r1, #5
 8000c42:	4628      	mov	r0, r5
 8000c44:	f7ff fb4c 	bl	80002e0 <CODEC_IO_Write>
 8000c48:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f240 6101 	movw	r1, #1537	; 0x601
 8000c50:	4628      	mov	r0, r5
 8000c52:	f7ff fb45 	bl	80002e0 <CODEC_IO_Write>
 8000c56:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f240 6102 	movw	r1, #1538	; 0x602
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f7ff fb3e 	bl	80002e0 <CODEC_IO_Write>
 8000c64:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f240 6104 	movw	r1, #1540	; 0x604
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f7ff fb37 	bl	80002e0 <CODEC_IO_Write>
 8000c72:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f240 6105 	movw	r1, #1541	; 0x605
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	f7ff fb30 	bl	80002e0 <CODEC_IO_Write>
 8000c80:	4420      	add	r0, r4
}
 8000c82:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000c84:	b2c5      	uxtb	r5, r0
 8000c86:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f7ff fb27 	bl	80002e0 <CODEC_IO_Write>
 8000c92:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f240 6101 	movw	r1, #1537	; 0x601
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f7ff fb20 	bl	80002e0 <CODEC_IO_Write>
 8000ca0:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f240 6102 	movw	r1, #1538	; 0x602
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f7ff fb19 	bl	80002e0 <CODEC_IO_Write>
 8000cae:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	f240 6104 	movw	r1, #1540	; 0x604
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f7ff fb12 	bl	80002e0 <CODEC_IO_Write>
 8000cbc:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f240 6105 	movw	r1, #1541	; 0x605
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f7ff fb0b 	bl	80002e0 <CODEC_IO_Write>
 8000cca:	4420      	add	r0, r4
    break;
 8000ccc:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000cce:	b2c5      	uxtb	r5, r0
 8000cd0:	f240 3203 	movw	r2, #771	; 0x303
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	f7ff fb02 	bl	80002e0 <CODEC_IO_Write>
 8000cdc:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f240 6101 	movw	r1, #1537	; 0x601
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f7ff fafb 	bl	80002e0 <CODEC_IO_Write>
 8000cea:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f240 6102 	movw	r1, #1538	; 0x602
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	f7ff faf4 	bl	80002e0 <CODEC_IO_Write>
 8000cf8:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f240 6104 	movw	r1, #1540	; 0x604
 8000d00:	4628      	mov	r0, r5
 8000d02:	f7ff faed 	bl	80002e0 <CODEC_IO_Write>
 8000d06:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f240 6105 	movw	r1, #1541	; 0x605
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f7ff fae6 	bl	80002e0 <CODEC_IO_Write>
 8000d14:	4420      	add	r0, r4
    break;
 8000d16:	bd38      	pop	{r3, r4, r5, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000d18:	b2c5      	uxtb	r5, r0
 8000d1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000d1e:	2105      	movs	r1, #5
 8000d20:	4628      	mov	r0, r5
 8000d22:	f7ff fadd 	bl	80002e0 <CODEC_IO_Write>
 8000d26:	4604      	mov	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f240 6101 	movw	r1, #1537	; 0x601
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f7ff fad6 	bl	80002e0 <CODEC_IO_Write>
 8000d34:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f240 6102 	movw	r1, #1538	; 0x602
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f7ff facf 	bl	80002e0 <CODEC_IO_Write>
 8000d42:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000d44:	2202      	movs	r2, #2
 8000d46:	f240 6104 	movw	r1, #1540	; 0x604
 8000d4a:	4628      	mov	r0, r5
 8000d4c:	f7ff fac8 	bl	80002e0 <CODEC_IO_Write>
 8000d50:	4404      	add	r4, r0
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000d52:	2202      	movs	r2, #2
 8000d54:	f240 6105 	movw	r1, #1541	; 0x605
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f7ff fac1 	bl	80002e0 <CODEC_IO_Write>
 8000d5e:	4420      	add	r0, r4
    break;
 8000d60:	bd38      	pop	{r3, r4, r5, pc}
	...

08000d64 <wm8994_SetFrequency>:
{
 8000d64:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000d66:	f245 6322 	movw	r3, #22050	; 0x5622
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d046      	beq.n	8000dfc <wm8994_SetFrequency+0x98>
 8000d6e:	d810      	bhi.n	8000d92 <wm8994_SetFrequency+0x2e>
 8000d70:	f642 3311 	movw	r3, #11025	; 0x2b11
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d03a      	beq.n	8000dee <wm8994_SetFrequency+0x8a>
 8000d78:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8000d7c:	d022      	beq.n	8000dc4 <wm8994_SetFrequency+0x60>
 8000d7e:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8000d82:	d018      	beq.n	8000db6 <wm8994_SetFrequency+0x52>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000d84:	2283      	movs	r2, #131	; 0x83
 8000d86:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d8a:	b2c0      	uxtb	r0, r0
 8000d8c:	f7ff faa8 	bl	80002e0 <CODEC_IO_Write>
}
 8000d90:	bd08      	pop	{r3, pc}
  switch (AudioFreq)
 8000d92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8000d96:	4299      	cmp	r1, r3
 8000d98:	d01b      	beq.n	8000dd2 <wm8994_SetFrequency+0x6e>
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <wm8994_SetFrequency+0xa8>)
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d01f      	beq.n	8000de0 <wm8994_SetFrequency+0x7c>
 8000da0:	f64a 4344 	movw	r3, #44100	; 0xac44
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d1ed      	bne.n	8000d84 <wm8994_SetFrequency+0x20>
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000da8:	2273      	movs	r2, #115	; 0x73
 8000daa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dae:	b2c0      	uxtb	r0, r0
 8000db0:	f7ff fa96 	bl	80002e0 <CODEC_IO_Write>
    break; 
 8000db4:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000db6:	2203      	movs	r2, #3
 8000db8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dbc:	b2c0      	uxtb	r0, r0
 8000dbe:	f7ff fa8f 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dc2:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000dc4:	2233      	movs	r2, #51	; 0x33
 8000dc6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dca:	b2c0      	uxtb	r0, r0
 8000dcc:	f7ff fa88 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dd0:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000dd2:	2283      	movs	r2, #131	; 0x83
 8000dd4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000dd8:	b2c0      	uxtb	r0, r0
 8000dda:	f7ff fa81 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dde:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000de0:	22a3      	movs	r2, #163	; 0xa3
 8000de2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000de6:	b2c0      	uxtb	r0, r0
 8000de8:	f7ff fa7a 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dec:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000dee:	2213      	movs	r2, #19
 8000df0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	f7ff fa73 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000dfa:	bd08      	pop	{r3, pc}
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000dfc:	2243      	movs	r2, #67	; 0x43
 8000dfe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000e02:	b2c0      	uxtb	r0, r0
 8000e04:	f7ff fa6c 	bl	80002e0 <CODEC_IO_Write>
    break;
 8000e08:	bd08      	pop	{r3, pc}
 8000e0a:	bf00      	nop
 8000e0c:	00017700 	.word	0x00017700

08000e10 <wm8994_Reset>:
{
 8000e10:	b508      	push	{r3, lr}
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8000e12:	2200      	movs	r2, #0
 8000e14:	4611      	mov	r1, r2
 8000e16:	b2c0      	uxtb	r0, r0
 8000e18:	f7ff fa62 	bl	80002e0 <CODEC_IO_Write>
  outputEnabled = 0;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <wm8994_Reset+0x18>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8000e22:	605a      	str	r2, [r3, #4]
}
 8000e24:	bd08      	pop	{r3, pc}
 8000e26:	bf00      	nop
 8000e28:	200000cc 	.word	0x200000cc

08000e2c <wm8994_DeInit>:
{
 8000e2c:	b508      	push	{r3, lr}
  AUDIO_IO_DeInit();
 8000e2e:	f000 f941 	bl	80010b4 <AUDIO_IO_DeInit>
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <wm8994_ReadID>:
{
 8000e34:	b510      	push	{r4, lr}
 8000e36:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000e38:	f000 f934 	bl	80010a4 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	b2e0      	uxtb	r0, r4
 8000e40:	f000 f950 	bl	80010e4 <AUDIO_IO_Read>
}
 8000e44:	bd10      	pop	{r4, pc}
	...

08000e48 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <I2Cx_MspInit+0x12c>)
 8000e4e:	4283      	cmp	r3, r0
 8000e50:	d043      	beq.n	8000eda <I2Cx_MspInit+0x92>
  }
  else
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e52:	4c49      	ldr	r4, [pc, #292]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000e54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	9303      	str	r3, [sp, #12]
 8000e64:	9b03      	ldr	r3, [sp, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e6c:	2312      	movs	r3, #18
 8000e6e:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e70:	2500      	movs	r5, #0
 8000e72:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e74:	2302      	movs	r3, #2
 8000e76:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e7c:	4e3f      	ldr	r6, [pc, #252]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000e7e:	a905      	add	r1, sp, #20
 8000e80:	4630      	mov	r0, r6
 8000e82:	f001 fbdf 	bl	8002644 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e8c:	a905      	add	r1, sp, #20
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f001 fbd8 	bl	8002644 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9a:	6423      	str	r3, [r4, #64]	; 0x40
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea2:	9304      	str	r3, [sp, #16]
 8000ea4:	9b04      	ldr	r3, [sp, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000ea6:	6a23      	ldr	r3, [r4, #32]
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000eae:	6a23      	ldr	r3, [r4, #32]
 8000eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000eb6:	462a      	mov	r2, r5
 8000eb8:	210f      	movs	r1, #15
 8000eba:	201f      	movs	r0, #31
 8000ebc:	f000 ff96 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000ec0:	201f      	movs	r0, #31
 8000ec2:	f000 ffc3 	bl	8001e4c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec6:	462a      	mov	r2, r5
 8000ec8:	210f      	movs	r1, #15
 8000eca:	2020      	movs	r0, #32
 8000ecc:	f000 ff8e 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000ed0:	2020      	movs	r0, #32
 8000ed2:	f000 ffbb 	bl	8001e4c <HAL_NVIC_EnableIRQ>
  }
}
 8000ed6:	b00a      	add	sp, #40	; 0x28
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000eda:	4c27      	ldr	r4, [pc, #156]	; (8000f78 <I2Cx_MspInit+0x130>)
 8000edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8000ee4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000eee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000f12:	2304      	movs	r3, #4
 8000f14:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000f16:	a905      	add	r1, sp, #20
 8000f18:	4819      	ldr	r0, [pc, #100]	; (8000f80 <I2Cx_MspInit+0x138>)
 8000f1a:	f001 fb93 	bl	8002644 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000f22:	230b      	movs	r3, #11
 8000f24:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	4814      	ldr	r0, [pc, #80]	; (8000f7c <I2Cx_MspInit+0x134>)
 8000f2a:	f001 fb8b 	bl	8002644 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f34:	6423      	str	r3, [r4, #64]	; 0x40
 8000f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000f40:	6a23      	ldr	r3, [r4, #32]
 8000f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f46:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000f48:	6a23      	ldr	r3, [r4, #32]
 8000f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000f50:	462a      	mov	r2, r5
 8000f52:	210f      	movs	r1, #15
 8000f54:	205f      	movs	r0, #95	; 0x5f
 8000f56:	f000 ff49 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000f5a:	205f      	movs	r0, #95	; 0x5f
 8000f5c:	f000 ff76 	bl	8001e4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000f60:	462a      	mov	r2, r5
 8000f62:	210f      	movs	r1, #15
 8000f64:	2060      	movs	r0, #96	; 0x60
 8000f66:	f000 ff41 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000f6a:	2060      	movs	r0, #96	; 0x60
 8000f6c:	f000 ff6e 	bl	8001e4c <HAL_NVIC_EnableIRQ>
 8000f70:	e7b1      	b.n	8000ed6 <I2Cx_MspInit+0x8e>
 8000f72:	bf00      	nop
 8000f74:	200000d4 	.word	0x200000d4
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020c00 	.word	0x40020c00

08000f84 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f84:	b510      	push	{r4, lr}
 8000f86:	4604      	mov	r4, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000f88:	f002 f88b 	bl	80030a2 <HAL_I2C_GetState>
 8000f8c:	b9a0      	cbnz	r0, 8000fb8 <I2Cx_Init+0x34>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <I2Cx_Init+0x3c>)
 8000f90:	429c      	cmp	r4, r3
 8000f92:	d012      	beq.n	8000fba <I2Cx_Init+0x36>
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <I2Cx_Init+0x40>)
 8000f96:	6023      	str	r3, [r4, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <I2Cx_Init+0x44>)
 8000f9a:	6063      	str	r3, [r4, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60a3      	str	r3, [r4, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60e2      	str	r2, [r4, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fa4:	6123      	str	r3, [r4, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000fa6:	6163      	str	r3, [r4, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fa8:	61e3      	str	r3, [r4, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000faa:	6223      	str	r3, [r4, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff ff4b 	bl	8000e48 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f001 fe3a 	bl	8002c2c <HAL_I2C_Init>
 8000fb8:	bd10      	pop	{r4, pc}
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <I2Cx_Init+0x48>)
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	e7eb      	b.n	8000f98 <I2Cx_Init+0x14>
 8000fc0:	200000d4 	.word	0x200000d4
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40912732 	.word	0x40912732
 8000fcc:	40006000 	.word	0x40006000

08000fd0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fd4:	f001 fe89 	bl	8002cea <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ffd3 	bl	8000f84 <I2Cx_Init>
 8000fde:	bd10      	pop	{r4, pc}

08000fe0 <I2Cx_WriteMultiple>:
{
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fec:	9102      	str	r1, [sp, #8]
 8000fee:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8000ff2:	9101      	str	r1, [sp, #4]
 8000ff4:	9908      	ldr	r1, [sp, #32]
 8000ff6:	9100      	str	r1, [sp, #0]
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	f001 fe8f 	bl	8002d1c <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000ffe:	4605      	mov	r5, r0
 8001000:	b910      	cbnz	r0, 8001008 <I2Cx_WriteMultiple+0x28>
}
 8001002:	4628      	mov	r0, r5
 8001004:	b004      	add	sp, #16
 8001006:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 8001008:	4621      	mov	r1, r4
 800100a:	4630      	mov	r0, r6
 800100c:	f7ff ffe0 	bl	8000fd0 <I2Cx_Error>
 8001010:	e7f7      	b.n	8001002 <I2Cx_WriteMultiple+0x22>

08001012 <I2Cx_ReadMultiple>:
{
 8001012:	b570      	push	{r4, r5, r6, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	4606      	mov	r6, r0
 8001018:	460c      	mov	r4, r1
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800101a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8001024:	9101      	str	r1, [sp, #4]
 8001026:	9908      	ldr	r1, [sp, #32]
 8001028:	9100      	str	r1, [sp, #0]
 800102a:	4621      	mov	r1, r4
 800102c:	f001 ff58 	bl	8002ee0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001030:	4605      	mov	r5, r0
 8001032:	b910      	cbnz	r0, 800103a <I2Cx_ReadMultiple+0x28>
}
 8001034:	4628      	mov	r0, r5
 8001036:	b004      	add	sp, #16
 8001038:	bd70      	pop	{r4, r5, r6, pc}
    I2Cx_Error(i2c_handler, Addr);
 800103a:	4621      	mov	r1, r4
 800103c:	4630      	mov	r0, r6
 800103e:	f7ff ffc7 	bl	8000fd0 <I2Cx_Error>
 8001042:	e7f7      	b.n	8001034 <I2Cx_ReadMultiple+0x22>

08001044 <BSP_LED_Init>:
{
 8001044:	b500      	push	{lr}
 8001046:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE();
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <BSP_LED_Init+0x3c>)
 800104a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800104c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001050:	6311      	str	r1, [r2, #48]	; 0x30
 8001052:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001054:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <BSP_LED_Init+0x40>)
 800105e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8001062:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001064:	2201      	movs	r2, #1
 8001066:	9202      	str	r2, [sp, #8]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8001068:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800106a:	2203      	movs	r2, #3
 800106c:	9204      	str	r2, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800106e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001072:	a901      	add	r1, sp, #4
 8001074:	6898      	ldr	r0, [r3, #8]
 8001076:	f001 fae5 	bl	8002644 <HAL_GPIO_Init>
}
 800107a:	b007      	add	sp, #28
 800107c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001080:	40023800 	.word	0x40023800
 8001084:	20000030 	.word	0x20000030

08001088 <BSP_LED_On>:
{
 8001088:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <BSP_LED_On+0x18>)
 800108c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8001090:	2201      	movs	r2, #1
 8001092:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8001096:	68a0      	ldr	r0, [r4, #8]
 8001098:	f001 fc60 	bl	800295c <HAL_GPIO_WritePin>
 800109c:	bd10      	pop	{r4, pc}
 800109e:	bf00      	nop
 80010a0:	20000030 	.word	0x20000030

080010a4 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 80010a4:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cAudioHandler);
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <AUDIO_IO_Init+0xc>)
 80010a8:	f7ff ff6c 	bl	8000f84 <I2Cx_Init>
 80010ac:	bd08      	pop	{r3, pc}
 80010ae:	bf00      	nop
 80010b0:	200000d4 	.word	0x200000d4

080010b4 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 80010b4:	4770      	bx	lr
	...

080010b8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80010b8:	b510      	push	{r4, lr}
 80010ba:	b084      	sub	sp, #16
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80010bc:	0213      	lsls	r3, r2, #8
 80010be:	b21b      	sxth	r3, r3
 80010c0:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 80010c4:	ac04      	add	r4, sp, #16
 80010c6:	f824 2d02 	strh.w	r2, [r4, #-2]!
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80010ca:	2302      	movs	r3, #2
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	9400      	str	r4, [sp, #0]
 80010d0:	460a      	mov	r2, r1
 80010d2:	4601      	mov	r1, r0
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <AUDIO_IO_Write+0x28>)
 80010d6:	f7ff ff83 	bl	8000fe0 <I2Cx_WriteMultiple>
}
 80010da:	b004      	add	sp, #16
 80010dc:	bd10      	pop	{r4, pc}
 80010de:	bf00      	nop
 80010e0:	200000d4 	.word	0x200000d4

080010e4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80010e4:	b500      	push	{lr}
 80010e6:	b085      	sub	sp, #20
  uint16_t read_value = 0, tmp = 0;
 80010e8:	aa04      	add	r2, sp, #16
 80010ea:	2300      	movs	r3, #0
 80010ec:	f822 3d02 	strh.w	r3, [r2, #-2]!
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80010f0:	2302      	movs	r3, #2
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	460a      	mov	r2, r1
 80010f8:	4601      	mov	r1, r0
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <AUDIO_IO_Read+0x30>)
 80010fc:	f7ff ff89 	bl	8001012 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001100:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001104:	0218      	lsls	r0, r3, #8
 8001106:	b200      	sxth	r0, r0
 8001108:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
  
  read_value = tmp;
  
  return read_value;
}
 800110c:	b280      	uxth	r0, r0
 800110e:	b005      	add	sp, #20
 8001110:	f85d fb04 	ldr.w	pc, [sp], #4
 8001114:	200000d4 	.word	0x200000d4

08001118 <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001118:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800111a:	f000 fe47 	bl	8001dac <HAL_Delay>
 800111e:	bd08      	pop	{r3, pc}

08001120 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8001120:	b508      	push	{r3, lr}
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <SAIx_Out_DeInit+0x18>)
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SAIx_Out_DeInit+0x1c>)
 8001126:	6003      	str	r3, [r0, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800112e:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001130:	f003 fa80 	bl	8004634 <HAL_SAI_DeInit>
 8001134:	bd08      	pop	{r3, pc}
 8001136:	bf00      	nop
 8001138:	20000448 	.word	0x20000448
 800113c:	40015804 	.word	0x40015804

08001140 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8001140:	b510      	push	{r4, lr}
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <SAIx_In_DeInit+0x24>)
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SAIx_In_DeInit+0x28>)
 8001146:	6003      	str	r3, [r0, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001148:	4c08      	ldr	r4, [pc, #32]	; (800116c <SAIx_In_DeInit+0x2c>)
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <SAIx_In_DeInit+0x30>)
 800114c:	6022      	str	r2, [r4, #0]
  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001154:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8001156:	f003 fa6d 	bl	8004634 <HAL_SAI_DeInit>
  HAL_SAI_DeInit(&haudio_out_sai);
 800115a:	4620      	mov	r0, r4
 800115c:	f003 fa6a 	bl	8004634 <HAL_SAI_DeInit>
 8001160:	bd10      	pop	{r4, pc}
 8001162:	bf00      	nop
 8001164:	20000364 	.word	0x20000364
 8001168:	40015824 	.word	0x40015824
 800116c:	20000448 	.word	0x20000448
 8001170:	40015804 	.word	0x40015804

08001174 <SAIx_Out_Init>:
{
 8001174:	b510      	push	{r4, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001176:	4c1a      	ldr	r4, [pc, #104]	; (80011e0 <SAIx_Out_Init+0x6c>)
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <SAIx_Out_Init+0x70>)
 800117a:	6023      	str	r3, [r4, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001182:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8001184:	2300      	movs	r3, #0
 8001186:	6263      	str	r3, [r4, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001188:	61e0      	str	r0, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800118a:	6063      	str	r3, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800118c:	6163      	str	r3, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800118e:	6323      	str	r3, [r4, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	6362      	str	r2, [r4, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001194:	63a3      	str	r3, [r4, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001196:	2101      	movs	r1, #1
 8001198:	63e1      	str	r1, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800119a:	60a3      	str	r3, [r4, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800119c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a0:	6120      	str	r0, [r4, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80011a2:	61a1      	str	r1, [r4, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80011a4:	60e3      	str	r3, [r4, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80011a6:	62a3      	str	r3, [r4, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80011a8:	62e3      	str	r3, [r4, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;
 80011aa:	6223      	str	r3, [r4, #32]
  haudio_out_sai.FrameInit.FrameLength = 128; 
 80011ac:	6422      	str	r2, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	6462      	str	r2, [r4, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80011b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b6:	64a2      	str	r2, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011b8:	64e3      	str	r3, [r4, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80011ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011be:	6522      	str	r2, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80011c0:	6563      	str	r3, [r4, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011c2:	65a3      	str	r3, [r4, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 80011c4:	2304      	movs	r3, #4
 80011c6:	65e3      	str	r3, [r4, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80011c8:	230f      	movs	r3, #15
 80011ca:	6623      	str	r3, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f003 f931 	bl	8004434 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	6813      	ldr	r3, [r2, #0]
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	bf00      	nop
 80011e0:	20000448 	.word	0x20000448
 80011e4:	40015804 	.word	0x40015804

080011e8 <SAIx_In_Init>:
{
 80011e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ec:	b083      	sub	sp, #12
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80011ee:	4c39      	ldr	r4, [pc, #228]	; (80012d4 <SAIx_In_Init+0xec>)
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <SAIx_In_Init+0xf0>)
 80011f2:	6023      	str	r3, [r4, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011fa:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80011fc:	2600      	movs	r6, #0
 80011fe:	6266      	str	r6, [r4, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001200:	9001      	str	r0, [sp, #4]
 8001202:	61e0      	str	r0, [r4, #28]
  haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_RX;
 8001204:	2701      	movs	r7, #1
 8001206:	6067      	str	r7, [r4, #4]
  haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8001208:	6166      	str	r6, [r4, #20]
  haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 800120a:	6326      	str	r6, [r4, #48]	; 0x30
  haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 800120c:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8001210:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8001214:	63a6      	str	r6, [r4, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001216:	63e6      	str	r6, [r4, #60]	; 0x3c
  haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8001218:	60a6      	str	r6, [r4, #8]
  haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 800121a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121e:	6123      	str	r3, [r4, #16]
  haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8001220:	61a7      	str	r7, [r4, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8001222:	60e6      	str	r6, [r4, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8001224:	62a6      	str	r6, [r4, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8001226:	62e6      	str	r6, [r4, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;  
 8001228:	6226      	str	r6, [r4, #32]
  haudio_out_sai.FrameInit.FrameLength       = 64;
 800122a:	f04f 0940 	mov.w	r9, #64	; 0x40
 800122e:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001232:	f04f 0820 	mov.w	r8, #32
 8001236:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800123a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800123e:	64a2      	str	r2, [r4, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8001240:	64e6      	str	r6, [r4, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8001242:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001246:	6522      	str	r2, [r4, #80]	; 0x50
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001248:	6566      	str	r6, [r4, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800124a:	65a6      	str	r6, [r4, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber     = 4;
 800124c:	2204      	movs	r2, #4
 800124e:	65e2      	str	r2, [r4, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 8001250:	f04f 0b05 	mov.w	fp, #5
 8001254:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001258:	4620      	mov	r0, r4
 800125a:	f003 f8eb 	bl	8004434 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800125e:	4d1f      	ldr	r5, [pc, #124]	; (80012dc <SAIx_In_Init+0xf4>)
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <SAIx_In_Init+0xf8>)
 8001262:	602b      	str	r3, [r5, #0]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800126a:	601a      	str	r2, [r3, #0]
  haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800126c:	626e      	str	r6, [r5, #36]	; 0x24
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800126e:	9b01      	ldr	r3, [sp, #4]
 8001270:	61eb      	str	r3, [r5, #28]
  haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8001272:	2303      	movs	r3, #3
 8001274:	606b      	str	r3, [r5, #4]
  haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8001276:	616e      	str	r6, [r5, #20]
  haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8001278:	632e      	str	r6, [r5, #48]	; 0x30
  haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 800127a:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
  haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 800127e:	63ae      	str	r6, [r5, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_RISINGEDGE;
 8001280:	63ef      	str	r7, [r5, #60]	; 0x3c
  haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8001282:	60af      	str	r7, [r5, #8]
  haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8001284:	612e      	str	r6, [r5, #16]
  haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8001286:	61af      	str	r7, [r5, #24]
  haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8001288:	60ee      	str	r6, [r5, #12]
  haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 800128a:	62ae      	str	r6, [r5, #40]	; 0x28
  haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 800128c:	2310      	movs	r3, #16
 800128e:	62eb      	str	r3, [r5, #44]	; 0x2c
  haudio_in_sai.Init.Mckdiv         = 0;
 8001290:	622e      	str	r6, [r5, #32]
  haudio_in_sai.FrameInit.FrameLength       = 64;
 8001292:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001296:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800129a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129e:	64ab      	str	r3, [r5, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80012a0:	64ee      	str	r6, [r5, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80012a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012a6:	652b      	str	r3, [r5, #80]	; 0x50
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80012a8:	656e      	str	r6, [r5, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80012aa:	65ae      	str	r6, [r5, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber     = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	65eb      	str	r3, [r5, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 80012b0:	f8c5 b060 	str.w	fp, [r5, #96]	; 0x60
  HAL_SAI_Init(&haudio_in_sai);
 80012b4:	4628      	mov	r0, r5
 80012b6:	f003 f8bd 	bl	8004434 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80012ba:	682a      	ldr	r2, [r5, #0]
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
}
 80012ce:	b003      	add	sp, #12
 80012d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d4:	20000448 	.word	0x20000448
 80012d8:	40015804 	.word	0x40015804
 80012dc:	20000364 	.word	0x20000364
 80012e0:	40015824 	.word	0x40015824

080012e4 <DFSDMx_ChannelMspInit>:
/**
  * @brief  Initialize the DFSDM channel MSP.
  * @retval None
  */
static void DFSDMx_ChannelMspInit(void)
{
 80012e4:	b530      	push	{r4, r5, lr}
 80012e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <DFSDMx_ChannelMspInit+0x80>)
 80012ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
 80012f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	9a00      	ldr	r2, [sp, #0]
  
  /* Enable GPIO clock */
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
 80012fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fe:	f042 0204 	orr.w	r2, r2, #4
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
 8001304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001306:	f002 0204 	and.w	r2, r2, #4
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	9a01      	ldr	r2, [sp, #4]
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	f042 0208 	orr.w	r2, r2, #8
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	9b02      	ldr	r3, [sp, #8]
  
  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN;
 8001320:	2508      	movs	r5, #8
 8001322:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2403      	movs	r4, #3
 800132e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
 8001330:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8001332:	a903      	add	r1, sp, #12
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <DFSDMx_ChannelMspInit+0x84>)
 8001336:	f001 f985 	bl	8002644 <HAL_GPIO_Init>
  
  /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
 800133a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 800133c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 800133e:	a903      	add	r1, sp, #12
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <DFSDMx_ChannelMspInit+0x88>)
 8001342:	f001 f97f 	bl	8002644 <HAL_GPIO_Init>
  
  if(AudioIn_ChannelNumber > 2)
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <DFSDMx_ChannelMspInit+0x8c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d801      	bhi.n	8001352 <DFSDMx_ChannelMspInit+0x6e>
  /* DFSDM pin configuration: DMIC_DATIN5 pin --------------------------------*/  
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
  }
}
 800134e:	b009      	add	sp, #36	; 0x24
 8001350:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8001352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001356:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8001358:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
 800135a:	a903      	add	r1, sp, #12
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <DFSDMx_ChannelMspInit+0x88>)
 800135e:	f001 f971 	bl	8002644 <HAL_GPIO_Init>
}
 8001362:	e7f4      	b.n	800134e <DFSDMx_ChannelMspInit+0x6a>
 8001364:	40023800 	.word	0x40023800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40020800 	.word	0x40020800
 8001370:	20000044 	.word	0x20000044

08001374 <DFSDMx_FilterMspInit>:
/**
  * @brief  Initialize the DFSDM filter MSP.
  * @retval None
  */
static void DFSDMx_FilterMspInit(void)
{  
 8001374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001378:	b082      	sub	sp, #8
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 800137a:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <DFSDMx_FilterMspInit+0x140>)
 800137c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800137e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
 8001384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001386:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	9a00      	ldr	r2, [sp, #0]
  
  /* Enable the DMA clock */
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	9b01      	ldr	r3, [sp, #4]
  
  /*********** Configure DMA stream for TOP LEFT microphone *******************/
  hDmaTopLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80013a0:	4845      	ldr	r0, [pc, #276]	; (80014b8 <DFSDMx_FilterMspInit+0x144>)
 80013a2:	2400      	movs	r4, #0
 80013a4:	6084      	str	r4, [r0, #8]
  hDmaTopLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 80013a6:	60c4      	str	r4, [r0, #12]
  hDmaTopLeft.Init.MemInc              = DMA_MINC_ENABLE;
 80013a8:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80013ac:	f8c0 a010 	str.w	sl, [r0, #16]
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 80013b0:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 80013b4:	f8c0 9014 	str.w	r9, [r0, #20]
  hDmaTopLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 80013b8:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80013bc:	f8c0 8018 	str.w	r8, [r0, #24]
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 80013c0:	f44f 7780 	mov.w	r7, #256	; 0x100
 80013c4:	61c7      	str	r7, [r0, #28]
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 80013c6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80013ca:	6206      	str	r6, [r0, #32]
  hDmaTopLeft.Instance                 = AUDIO_DFSDMx_DMAx_TOP_LEFT_STREAM;
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <DFSDMx_FilterMspInit+0x148>)
 80013ce:	6003      	str	r3, [r0, #0]
  hDmaTopLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 80013d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80013d4:	6045      	str	r5, [r0, #4]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <DFSDMx_FilterMspInit+0x14c>)
 80013d8:	6298      	str	r0, [r3, #40]	; 0x28
 80013da:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopLeft);
 80013dc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  
  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopLeft);      
 80013e0:	f000 ff70 	bl	80022c4 <HAL_DMA_Init>
  
  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80013e4:	4622      	mov	r2, r4
 80013e6:	210e      	movs	r1, #14
 80013e8:	2038      	movs	r0, #56	; 0x38
 80013ea:	f000 fcff 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ);
 80013ee:	2038      	movs	r0, #56	; 0x38
 80013f0:	f000 fd2c 	bl	8001e4c <HAL_NVIC_EnableIRQ>
  
  
  /*********** Configure DMA stream for TOP RIGHT microphone ******************/
  hDmaTopRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80013f4:	4833      	ldr	r0, [pc, #204]	; (80014c4 <DFSDMx_FilterMspInit+0x150>)
 80013f6:	6084      	str	r4, [r0, #8]
  hDmaTopRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 80013f8:	60c4      	str	r4, [r0, #12]
  hDmaTopRight.Init.MemInc              = DMA_MINC_ENABLE;
 80013fa:	f8c0 a010 	str.w	sl, [r0, #16]
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 80013fe:	f8c0 9014 	str.w	r9, [r0, #20]
  hDmaTopRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001402:	f8c0 8018 	str.w	r8, [r0, #24]
  hDmaTopRight.Init.Mode                = DMA_CIRCULAR;
 8001406:	61c7      	str	r7, [r0, #28]
  hDmaTopRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 8001408:	6206      	str	r6, [r0, #32]
  hDmaTopRight.Instance                 = AUDIO_DFSDMx_DMAx_TOP_RIGHT_STREAM;
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <DFSDMx_FilterMspInit+0x154>)
 800140c:	6003      	str	r3, [r0, #0]
  hDmaTopRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 800140e:	6045      	str	r5, [r0, #4]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <DFSDMx_FilterMspInit+0x158>)
 8001412:	6298      	str	r0, [r3, #40]	; 0x28
 8001414:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopRight);
 8001416:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  
  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopRight);      
 800141a:	f000 ff53 	bl	80022c4 <HAL_DMA_Init>
  
  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800141e:	4622      	mov	r2, r4
 8001420:	210e      	movs	r1, #14
 8001422:	2044      	movs	r0, #68	; 0x44
 8001424:	f000 fce2 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ);
 8001428:	2044      	movs	r0, #68	; 0x44
 800142a:	f000 fd0f 	bl	8001e4c <HAL_NVIC_EnableIRQ>
  
  if(AudioIn_ChannelNumber > 2)
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <DFSDMx_FilterMspInit+0x15c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d802      	bhi.n	800143c <DFSDMx_FilterMspInit+0xc8>
    
    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ); 
  }
}
 8001436:	b002      	add	sp, #8
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hDmaButtomLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <DFSDMx_FilterMspInit+0x160>)
 800143e:	6084      	str	r4, [r0, #8]
    hDmaButtomLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001440:	60c4      	str	r4, [r0, #12]
    hDmaButtomLeft.Init.MemInc              = DMA_MINC_ENABLE;
 8001442:	f8c0 a010 	str.w	sl, [r0, #16]
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001446:	f8c0 9014 	str.w	r9, [r0, #20]
    hDmaButtomLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 800144a:	f8c0 8018 	str.w	r8, [r0, #24]
    hDmaButtomLeft.Init.Mode                = DMA_CIRCULAR;
 800144e:	61c7      	str	r7, [r0, #28]
    hDmaButtomLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8001450:	6206      	str	r6, [r0, #32]
    hDmaButtomLeft.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_STREAM;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <DFSDMx_FilterMspInit+0x164>)
 8001454:	6003      	str	r3, [r0, #0]
    hDmaButtomLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 8001456:	6045      	str	r5, [r0, #4]
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <DFSDMx_FilterMspInit+0x168>)
 800145a:	6298      	str	r0, [r3, #40]	; 0x28
 800145c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomLeft);
 800145e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    HAL_DMA_Init(&hDmaButtomLeft);      
 8001462:	f000 ff2f 	bl	80022c4 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001466:	4622      	mov	r2, r4
 8001468:	210e      	movs	r1, #14
 800146a:	2045      	movs	r0, #69	; 0x45
 800146c:	f000 fcbe 	bl	8001dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ);
 8001470:	2045      	movs	r0, #69	; 0x45
 8001472:	f000 fceb 	bl	8001e4c <HAL_NVIC_EnableIRQ>
    hDmaButtomRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001476:	481a      	ldr	r0, [pc, #104]	; (80014e0 <DFSDMx_FilterMspInit+0x16c>)
 8001478:	6084      	str	r4, [r0, #8]
    hDmaButtomRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 800147a:	60c4      	str	r4, [r0, #12]
    hDmaButtomRight.Init.MemInc              = DMA_MINC_ENABLE;
 800147c:	f8c0 a010 	str.w	sl, [r0, #16]
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001480:	f8c0 9014 	str.w	r9, [r0, #20]
    hDmaButtomRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001484:	f8c0 8018 	str.w	r8, [r0, #24]
    hDmaButtomRight.Init.Mode                = DMA_CIRCULAR;
 8001488:	61c7      	str	r7, [r0, #28]
    hDmaButtomRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 800148a:	6206      	str	r6, [r0, #32]
    hDmaButtomRight.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_STREAM;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <DFSDMx_FilterMspInit+0x170>)
 800148e:	6003      	str	r3, [r0, #0]
    hDmaButtomRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 8001490:	6045      	str	r5, [r0, #4]
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <DFSDMx_FilterMspInit+0x174>)
 8001494:	6298      	str	r0, [r3, #40]	; 0x28
 8001496:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomRight);
 8001498:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    HAL_DMA_Init(&hDmaButtomRight);      
 800149c:	f000 ff12 	bl	80022c4 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80014a0:	4622      	mov	r2, r4
 80014a2:	210e      	movs	r1, #14
 80014a4:	2046      	movs	r0, #70	; 0x46
 80014a6:	f000 fca1 	bl	8001dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ); 
 80014aa:	2046      	movs	r0, #70	; 0x46
 80014ac:	f000 fcce 	bl	8001e4c <HAL_NVIC_EnableIRQ>
}
 80014b0:	e7c1      	b.n	8001436 <DFSDMx_FilterMspInit+0xc2>
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	2000058c 	.word	0x2000058c
 80014bc:	40026410 	.word	0x40026410
 80014c0:	200004cc 	.word	0x200004cc
 80014c4:	20000528 	.word	0x20000528
 80014c8:	40026488 	.word	0x40026488
 80014cc:	200006e8 	.word	0x200006e8
 80014d0:	20000044 	.word	0x20000044
 80014d4:	200003e8 	.word	0x200003e8
 80014d8:	400264a0 	.word	0x400264a0
 80014dc:	2000065c 	.word	0x2000065c
 80014e0:	20000774 	.word	0x20000774
 80014e4:	400264b8 	.word	0x400264b8
 80014e8:	20000310 	.word	0x20000310

080014ec <SAI_AUDIO_IN_MspInit>:
{
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	4607      	mov	r7, r0
  AUDIO_IN_SAIx_CLK_ENABLE();
 80014f2:	4c3b      	ldr	r4, [pc, #236]	; (80015e0 <SAI_AUDIO_IN_MspInit+0xf4>)
 80014f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fa:	6463      	str	r3, [r4, #68]	; 0x44
 80014fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8001506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6323      	str	r3, [r4, #48]	; 0x30
 800150e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001518:	2308      	movs	r3, #8
 800151a:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800151c:	2502      	movs	r5, #2
 800151e:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001520:	2600      	movs	r6, #0
 8001522:	9607      	str	r6, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001524:	9508      	str	r5, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8001526:	2306      	movs	r3, #6
 8001528:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800152a:	a905      	add	r1, sp, #20
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <SAI_AUDIO_IN_MspInit+0xf8>)
 800152e:	f001 f889 	bl	8002644 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8001532:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6323      	str	r3, [r4, #48]	; 0x30
 800153a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800153c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001540:	9303      	str	r3, [sp, #12]
 8001542:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001548:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800154a:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800154c:	9607      	str	r6, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800154e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001550:	a905      	add	r1, sp, #20
 8001552:	4825      	ldr	r0, [pc, #148]	; (80015e8 <SAI_AUDIO_IN_MspInit+0xfc>)
 8001554:	f001 f876 	bl	8002644 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001558:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800155a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800155e:	6323      	str	r3, [r4, #48]	; 0x30
 8001560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	9304      	str	r3, [sp, #16]
 8001568:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <SAI_AUDIO_IN_MspInit+0x100>)
 800156e:	429a      	cmp	r2, r3
 8001570:	d011      	beq.n	8001596 <SAI_AUDIO_IN_MspInit+0xaa>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	210f      	movs	r1, #15
 8001576:	203c      	movs	r0, #60	; 0x3c
 8001578:	f000 fc38 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800157c:	203c      	movs	r0, #60	; 0x3c
 800157e:	f000 fc65 	bl	8001e4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	210f      	movs	r1, #15
 8001586:	2028      	movs	r0, #40	; 0x28
 8001588:	f000 fc30 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800158c:	2028      	movs	r0, #40	; 0x28
 800158e:	f000 fc5d 	bl	8001e4c <HAL_NVIC_EnableIRQ>
}
 8001592:	b00b      	add	sp, #44	; 0x2c
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001596:	4c16      	ldr	r4, [pc, #88]	; (80015f0 <SAI_AUDIO_IN_MspInit+0x104>)
 8001598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800159c:	6063      	str	r3, [r4, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800159e:	60a6      	str	r6, [r4, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80015a0:	60e6      	str	r6, [r4, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80015a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a6:	6122      	str	r2, [r4, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 80015a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ac:	6162      	str	r2, [r4, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	61a2      	str	r2, [r4, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	61e2      	str	r2, [r4, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80015ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015be:	6222      	str	r2, [r4, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80015c0:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80015c2:	2203      	movs	r2, #3
 80015c4:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80015c6:	62e6      	str	r6, [r4, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80015c8:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <SAI_AUDIO_IN_MspInit+0x108>)
 80015cc:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80015ce:	673c      	str	r4, [r7, #112]	; 0x70
 80015d0:	63a7      	str	r7, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_sai_rx);
 80015d2:	4620      	mov	r0, r4
 80015d4:	f000 fede 	bl	8002394 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 fe73 	bl	80022c4 <HAL_DMA_Init>
 80015de:	e7c8      	b.n	8001572 <SAI_AUDIO_IN_MspInit+0x86>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40022400 	.word	0x40022400
 80015ec:	40015824 	.word	0x40015824
 80015f0:	2000016c 	.word	0x2000016c
 80015f4:	40026470 	.word	0x40026470

080015f8 <DFSDMx_Init>:
{
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4604      	mov	r4, r0
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);  
 80015fc:	4ba1      	ldr	r3, [pc, #644]	; (8001884 <DFSDMx_Init+0x28c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hAudioInTopLeftChannel.Instance                      = DFSDM1_Channel1;  
 8001604:	4aa0      	ldr	r2, [pc, #640]	; (8001888 <DFSDMx_Init+0x290>)
 8001606:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftChannel.Init.OutputClock.Activation   = ENABLE;
 8001608:	2201      	movs	r2, #1
 800160a:	711a      	strb	r2, [r3, #4]
  hAudioInTopLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800160c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001610:	609a      	str	r2, [r3, #8]
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8001612:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8001616:	d015      	beq.n	8001644 <DFSDMx_Init+0x4c>
 8001618:	f642 3311 	movw	r3, #11025	; 0x2b11
 800161c:	4298      	cmp	r0, r3
 800161e:	d03a      	beq.n	8001696 <DFSDMx_Init+0x9e>
 8001620:	f5b0 5f7a 	cmp.w	r0, #16000	; 0x3e80
 8001624:	d039      	beq.n	800169a <DFSDMx_Init+0xa2>
 8001626:	f245 6322 	movw	r3, #22050	; 0x5622
 800162a:	4298      	cmp	r0, r3
 800162c:	d037      	beq.n	800169e <DFSDMx_Init+0xa6>
 800162e:	f5b0 4ffa 	cmp.w	r0, #32000	; 0x7d00
 8001632:	d036      	beq.n	80016a2 <DFSDMx_Init+0xaa>
 8001634:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001638:	4298      	cmp	r0, r3
 800163a:	d001      	beq.n	8001640 <DFSDMx_Init+0x48>
 800163c:	2619      	movs	r6, #25
 800163e:	e002      	b.n	8001646 <DFSDMx_Init+0x4e>
 8001640:	2604      	movs	r6, #4
 8001642:	e000      	b.n	8001646 <DFSDMx_Init+0x4e>
 8001644:	2618      	movs	r6, #24
 8001646:	4b8f      	ldr	r3, [pc, #572]	; (8001884 <DFSDMx_Init+0x28c>)
 8001648:	60de      	str	r6, [r3, #12]
  hAudioInTopLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hAudioInTopLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800164e:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001650:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8001652:	61da      	str	r2, [r3, #28]
  hAudioInTopLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001654:	2104      	movs	r1, #4
 8001656:	6219      	str	r1, [r3, #32]
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = 10;
 800165a:	210a      	movs	r1, #10
 800165c:	6299      	str	r1, [r3, #40]	; 0x28
  hAudioInTopLeftChannel.Init.Offset                   = 0;
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8001660:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
 8001664:	d021      	beq.n	80016aa <DFSDMx_Init+0xb2>
 8001666:	f642 3311 	movw	r3, #11025	; 0x2b11
 800166a:	429c      	cmp	r4, r3
 800166c:	d025      	beq.n	80016ba <DFSDMx_Init+0xc2>
 800166e:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 8001672:	d024      	beq.n	80016be <DFSDMx_Init+0xc6>
 8001674:	f245 6322 	movw	r3, #22050	; 0x5622
 8001678:	429c      	cmp	r4, r3
 800167a:	d022      	beq.n	80016c2 <DFSDMx_Init+0xca>
 800167c:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 8001680:	d021      	beq.n	80016c6 <DFSDMx_Init+0xce>
 8001682:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001686:	429c      	cmp	r4, r3
 8001688:	d01f      	beq.n	80016ca <DFSDMx_Init+0xd2>
 800168a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800168e:	429c      	cmp	r4, r3
 8001690:	d009      	beq.n	80016a6 <DFSDMx_Init+0xae>
 8001692:	2504      	movs	r5, #4
 8001694:	e00a      	b.n	80016ac <DFSDMx_Init+0xb4>
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8001696:	2604      	movs	r6, #4
 8001698:	e7d5      	b.n	8001646 <DFSDMx_Init+0x4e>
 800169a:	2618      	movs	r6, #24
 800169c:	e7d3      	b.n	8001646 <DFSDMx_Init+0x4e>
 800169e:	2604      	movs	r6, #4
 80016a0:	e7d1      	b.n	8001646 <DFSDMx_Init+0x4e>
 80016a2:	2618      	movs	r6, #24
 80016a4:	e7cf      	b.n	8001646 <DFSDMx_Init+0x4e>
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80016a6:	4615      	mov	r5, r2
 80016a8:	e000      	b.n	80016ac <DFSDMx_Init+0xb4>
 80016aa:	2508      	movs	r5, #8
 80016ac:	4875      	ldr	r0, [pc, #468]	; (8001884 <DFSDMx_Init+0x28c>)
 80016ae:	6305      	str	r5, [r0, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 80016b0:	f000 fc30 	bl	8001f14 <HAL_DFSDM_ChannelInit>
 80016b4:	b158      	cbz	r0, 80016ce <DFSDMx_Init+0xd6>
    return AUDIO_ERROR;
 80016b6:	2001      	movs	r0, #1
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80016ba:	2508      	movs	r5, #8
 80016bc:	e7f6      	b.n	80016ac <DFSDMx_Init+0xb4>
 80016be:	2503      	movs	r5, #3
 80016c0:	e7f4      	b.n	80016ac <DFSDMx_Init+0xb4>
 80016c2:	2504      	movs	r5, #4
 80016c4:	e7f2      	b.n	80016ac <DFSDMx_Init+0xb4>
 80016c6:	2507      	movs	r5, #7
 80016c8:	e7f0      	b.n	80016ac <DFSDMx_Init+0xb4>
 80016ca:	2500      	movs	r5, #0
 80016cc:	e7ee      	b.n	80016ac <DFSDMx_Init+0xb4>
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);  
 80016ce:	486f      	ldr	r0, [pc, #444]	; (800188c <DFSDMx_Init+0x294>)
 80016d0:	2300      	movs	r3, #0
 80016d2:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hAudioInTopRightChannel.Instance                      = DFSDM1_Channel0;  
 80016d6:	4a6e      	ldr	r2, [pc, #440]	; (8001890 <DFSDMx_Init+0x298>)
 80016d8:	6002      	str	r2, [r0, #0]
  hAudioInTopRightChannel.Init.OutputClock.Activation   = ENABLE;
 80016da:	2201      	movs	r2, #1
 80016dc:	7102      	strb	r2, [r0, #4]
  hAudioInTopRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80016de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016e2:	6081      	str	r1, [r0, #8]
  hAudioInTopRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80016e4:	60c6      	str	r6, [r0, #12]
  hAudioInTopRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016e6:	6103      	str	r3, [r0, #16]
  hAudioInTopRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80016e8:	6143      	str	r3, [r0, #20]
  hAudioInTopRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80016ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ee:	6181      	str	r1, [r0, #24]
  hAudioInTopRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 80016f0:	61c2      	str	r2, [r0, #28]
  hAudioInTopRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016f2:	2204      	movs	r2, #4
 80016f4:	6202      	str	r2, [r0, #32]
  hAudioInTopRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016f6:	6243      	str	r3, [r0, #36]	; 0x24
  hAudioInTopRightChannel.Init.Awd.Oversampling         = 10;
 80016f8:	220a      	movs	r2, #10
 80016fa:	6282      	str	r2, [r0, #40]	; 0x28
  hAudioInTopRightChannel.Init.Offset                   = 0;
 80016fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hAudioInTopRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80016fe:	6305      	str	r5, [r0, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 8001700:	f000 fc08 	bl	8001f14 <HAL_DFSDM_ChannelInit>
 8001704:	2800      	cmp	r0, #0
 8001706:	f040 813b 	bne.w	8001980 <DFSDMx_Init+0x388>
  if(AudioIn_ChannelNumber > 2)
 800170a:	4b62      	ldr	r3, [pc, #392]	; (8001894 <DFSDMx_Init+0x29c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d82c      	bhi.n	800176c <DFSDMx_Init+0x174>
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 8001712:	4b61      	ldr	r3, [pc, #388]	; (8001898 <DFSDMx_Init+0x2a0>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hAudioInTopLeftFilter.Instance                          = AUDIO_DFSDMx_TOP_LEFT_FILTER;  
 800171a:	4960      	ldr	r1, [pc, #384]	; (800189c <DFSDMx_Init+0x2a4>)
 800171c:	6019      	str	r1, [r3, #0]
  hAudioInTopLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 800171e:	605a      	str	r2, [r3, #4]
  hAudioInTopLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8001720:	2101      	movs	r1, #1
 8001722:	7219      	strb	r1, [r3, #8]
  hAudioInTopLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 8001724:	7259      	strb	r1, [r3, #9]
  hAudioInTopLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8001726:	60da      	str	r2, [r3, #12]
  hAudioInTopLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 8001728:	7419      	strb	r1, [r3, #16]
  hAudioInTopLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 800172a:	745a      	strb	r2, [r3, #17]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800172c:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800172e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001732:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8001734:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
 8001738:	d056      	beq.n	80017e8 <DFSDMx_Init+0x1f0>
 800173a:	f642 3311 	movw	r3, #11025	; 0x2b11
 800173e:	429c      	cmp	r4, r3
 8001740:	d071      	beq.n	8001826 <DFSDMx_Init+0x22e>
 8001742:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 8001746:	d071      	beq.n	800182c <DFSDMx_Init+0x234>
 8001748:	f245 6322 	movw	r3, #22050	; 0x5622
 800174c:	429c      	cmp	r4, r3
 800174e:	d070      	beq.n	8001832 <DFSDMx_Init+0x23a>
 8001750:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 8001754:	d070      	beq.n	8001838 <DFSDMx_Init+0x240>
 8001756:	f64a 4344 	movw	r3, #44100	; 0xac44
 800175a:	429c      	cmp	r4, r3
 800175c:	d06f      	beq.n	800183e <DFSDMx_Init+0x246>
 800175e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001762:	429c      	cmp	r4, r3
 8001764:	d03d      	beq.n	80017e2 <DFSDMx_Init+0x1ea>
 8001766:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
 800176a:	e03f      	b.n	80017ec <DFSDMx_Init+0x1f4>
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);  
 800176c:	484c      	ldr	r0, [pc, #304]	; (80018a0 <DFSDMx_Init+0x2a8>)
 800176e:	2300      	movs	r3, #0
 8001770:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hAudioInButtomLeftChannel.Instance                      = DFSDM1_Channel5;  
 8001774:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <DFSDMx_Init+0x2ac>)
 8001776:	6002      	str	r2, [r0, #0]
    hAudioInButtomLeftChannel.Init.OutputClock.Activation   = ENABLE;
 8001778:	2201      	movs	r2, #1
 800177a:	7102      	strb	r2, [r0, #4]
    hAudioInButtomLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800177c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001780:	6082      	str	r2, [r0, #8]
    hAudioInButtomLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8001782:	60c6      	str	r6, [r0, #12]
    hAudioInButtomLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001784:	6103      	str	r3, [r0, #16]
    hAudioInButtomLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8001786:	6143      	str	r3, [r0, #20]
    hAudioInButtomLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001788:	6183      	str	r3, [r0, #24]
    hAudioInButtomLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 800178a:	61c3      	str	r3, [r0, #28]
    hAudioInButtomLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800178c:	2204      	movs	r2, #4
 800178e:	6202      	str	r2, [r0, #32]
    hAudioInButtomLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001790:	6243      	str	r3, [r0, #36]	; 0x24
    hAudioInButtomLeftChannel.Init.Awd.Oversampling         = 10;
 8001792:	220a      	movs	r2, #10
 8001794:	6282      	str	r2, [r0, #40]	; 0x28
    hAudioInButtomLeftChannel.Init.Offset                   = 0;
 8001796:	62c3      	str	r3, [r0, #44]	; 0x2c
    hAudioInButtomLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8001798:	6305      	str	r5, [r0, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 800179a:	f000 fbbb 	bl	8001f14 <HAL_DFSDM_ChannelInit>
 800179e:	b108      	cbz	r0, 80017a4 <DFSDMx_Init+0x1ac>
      return AUDIO_ERROR;
 80017a0:	2001      	movs	r0, #1
 80017a2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);  
 80017a4:	4840      	ldr	r0, [pc, #256]	; (80018a8 <DFSDMx_Init+0x2b0>)
 80017a6:	2300      	movs	r3, #0
 80017a8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hAudioInButtomRightChannel.Instance                      = DFSDM1_Channel4;  
 80017ac:	4a3f      	ldr	r2, [pc, #252]	; (80018ac <DFSDMx_Init+0x2b4>)
 80017ae:	6002      	str	r2, [r0, #0]
    hAudioInButtomRightChannel.Init.OutputClock.Activation   = ENABLE;
 80017b0:	2201      	movs	r2, #1
 80017b2:	7102      	strb	r2, [r0, #4]
    hAudioInButtomRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80017b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b8:	6081      	str	r1, [r0, #8]
    hAudioInButtomRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80017ba:	60c6      	str	r6, [r0, #12]
    hAudioInButtomRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017bc:	6103      	str	r3, [r0, #16]
    hAudioInButtomRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80017be:	6143      	str	r3, [r0, #20]
    hAudioInButtomRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80017c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c4:	6181      	str	r1, [r0, #24]
    hAudioInButtomRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 80017c6:	61c2      	str	r2, [r0, #28]
    hAudioInButtomRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80017c8:	2204      	movs	r2, #4
 80017ca:	6202      	str	r2, [r0, #32]
    hAudioInButtomRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017cc:	6243      	str	r3, [r0, #36]	; 0x24
    hAudioInButtomRightChannel.Init.Awd.Oversampling         = 10;
 80017ce:	220a      	movs	r2, #10
 80017d0:	6282      	str	r2, [r0, #40]	; 0x28
    hAudioInButtomRightChannel.Init.Offset                   = 0;
 80017d2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hAudioInButtomRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80017d4:	6305      	str	r5, [r0, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 80017d6:	f000 fb9d 	bl	8001f14 <HAL_DFSDM_ChannelInit>
 80017da:	2800      	cmp	r0, #0
 80017dc:	d099      	beq.n	8001712 <DFSDMx_Init+0x11a>
      return AUDIO_ERROR;
 80017de:	2001      	movs	r0, #1
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 80017e2:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 80017e6:	e001      	b.n	80017ec <DFSDMx_Init+0x1f4>
 80017e8:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 80017ec:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <DFSDMx_Init+0x2a0>)
 80017ee:	61dd      	str	r5, [r3, #28]
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 80017f0:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
 80017f4:	d028      	beq.n	8001848 <DFSDMx_Init+0x250>
 80017f6:	f642 3311 	movw	r3, #11025	; 0x2b11
 80017fa:	429c      	cmp	r4, r3
 80017fc:	d02f      	beq.n	800185e <DFSDMx_Init+0x266>
 80017fe:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 8001802:	d02f      	beq.n	8001864 <DFSDMx_Init+0x26c>
 8001804:	f245 6322 	movw	r3, #22050	; 0x5622
 8001808:	429c      	cmp	r4, r3
 800180a:	d02d      	beq.n	8001868 <DFSDMx_Init+0x270>
 800180c:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 8001810:	d02c      	beq.n	800186c <DFSDMx_Init+0x274>
 8001812:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001816:	429c      	cmp	r4, r3
 8001818:	d02a      	beq.n	8001870 <DFSDMx_Init+0x278>
 800181a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800181e:	429c      	cmp	r4, r3
 8001820:	d010      	beq.n	8001844 <DFSDMx_Init+0x24c>
 8001822:	2414      	movs	r4, #20
 8001824:	e012      	b.n	800184c <DFSDMx_Init+0x254>
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8001826:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 800182a:	e7df      	b.n	80017ec <DFSDMx_Init+0x1f4>
 800182c:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 8001830:	e7dc      	b.n	80017ec <DFSDMx_Init+0x1f4>
 8001832:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 8001836:	e7d9      	b.n	80017ec <DFSDMx_Init+0x1f4>
 8001838:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800183c:	e7d6      	b.n	80017ec <DFSDMx_Init+0x1f4>
 800183e:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 8001842:	e7d3      	b.n	80017ec <DFSDMx_Init+0x1f4>
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8001844:	2428      	movs	r4, #40	; 0x28
 8001846:	e001      	b.n	800184c <DFSDMx_Init+0x254>
 8001848:	f44f 7480 	mov.w	r4, #256	; 0x100
 800184c:	4812      	ldr	r0, [pc, #72]	; (8001898 <DFSDMx_Init+0x2a0>)
 800184e:	6204      	str	r4, [r0, #32]
  hAudioInTopLeftFilter.Init.FilterParam.IntOversampling  = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	6243      	str	r3, [r0, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 8001854:	f000 fbfa 	bl	800204c <HAL_DFSDM_FilterInit>
 8001858:	b160      	cbz	r0, 8001874 <DFSDMx_Init+0x27c>
    return AUDIO_ERROR;
 800185a:	2001      	movs	r0, #1
 800185c:	bd70      	pop	{r4, r5, r6, pc}
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 800185e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001862:	e7f3      	b.n	800184c <DFSDMx_Init+0x254>
 8001864:	2480      	movs	r4, #128	; 0x80
 8001866:	e7f1      	b.n	800184c <DFSDMx_Init+0x254>
 8001868:	2480      	movs	r4, #128	; 0x80
 800186a:	e7ef      	b.n	800184c <DFSDMx_Init+0x254>
 800186c:	2440      	movs	r4, #64	; 0x40
 800186e:	e7ed      	b.n	800184c <DFSDMx_Init+0x254>
 8001870:	2440      	movs	r4, #64	; 0x40
 8001872:	e7eb      	b.n	800184c <DFSDMx_Init+0x254>
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopLeftFilter, AUDIO_DFSDMx_TOP_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001874:	2201      	movs	r2, #1
 8001876:	490e      	ldr	r1, [pc, #56]	; (80018b0 <DFSDMx_Init+0x2b8>)
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <DFSDMx_Init+0x2a0>)
 800187a:	f000 fc81 	bl	8002180 <HAL_DFSDM_FilterConfigRegChannel>
 800187e:	b1c8      	cbz	r0, 80018b4 <DFSDMx_Init+0x2bc>
    return AUDIO_ERROR;
 8001880:	2001      	movs	r0, #1
 8001882:	bd70      	pop	{r4, r5, r6, pc}
 8001884:	200005ec 	.word	0x200005ec
 8001888:	40017420 	.word	0x40017420
 800188c:	20000624 	.word	0x20000624
 8001890:	40017400 	.word	0x40017400
 8001894:	20000044 	.word	0x20000044
 8001898:	200004cc 	.word	0x200004cc
 800189c:	40017500 	.word	0x40017500
 80018a0:	2000073c 	.word	0x2000073c
 80018a4:	400174a0 	.word	0x400174a0
 80018a8:	200006b0 	.word	0x200006b0
 80018ac:	40017480 	.word	0x40017480
 80018b0:	00010002 	.word	0x00010002
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 80018b4:	4836      	ldr	r0, [pc, #216]	; (8001990 <DFSDMx_Init+0x398>)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  hAudioInTopRightFilter.Instance                          = AUDIO_DFSDMx_TOP_RIGHT_FILTER;
 80018bc:	4a35      	ldr	r2, [pc, #212]	; (8001994 <DFSDMx_Init+0x39c>)
 80018be:	6002      	str	r2, [r0, #0]
  hAudioInTopRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 80018c0:	2201      	movs	r2, #1
 80018c2:	6042      	str	r2, [r0, #4]
  hAudioInTopRightFilter.Init.RegularParam.FastMode        = ENABLE;
 80018c4:	7202      	strb	r2, [r0, #8]
  hAudioInTopRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 80018c6:	7242      	strb	r2, [r0, #9]
  hAudioInTopRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80018c8:	60c3      	str	r3, [r0, #12]
  hAudioInTopRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 80018ca:	7403      	strb	r3, [r0, #16]
  hAudioInTopRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80018cc:	7443      	strb	r3, [r0, #17]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80018ce:	6143      	str	r3, [r0, #20]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80018d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d4:	6183      	str	r3, [r0, #24]
  hAudioInTopRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 80018d6:	61c5      	str	r5, [r0, #28]
  hAudioInTopRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 80018d8:	6204      	str	r4, [r0, #32]
  hAudioInTopRightFilter.Init.FilterParam.IntOversampling  = 1;
 80018da:	6242      	str	r2, [r0, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 80018dc:	f000 fbb6 	bl	800204c <HAL_DFSDM_FilterInit>
 80018e0:	b108      	cbz	r0, 80018e6 <DFSDMx_Init+0x2ee>
    return AUDIO_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopRightFilter, AUDIO_DFSDMx_TOP_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 80018e6:	2201      	movs	r2, #1
 80018e8:	4611      	mov	r1, r2
 80018ea:	4829      	ldr	r0, [pc, #164]	; (8001990 <DFSDMx_Init+0x398>)
 80018ec:	f000 fc48 	bl	8002180 <HAL_DFSDM_FilterConfigRegChannel>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d147      	bne.n	8001984 <DFSDMx_Init+0x38c>
  if(AudioIn_ChannelNumber > 2)
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <DFSDMx_Init+0x3a0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d801      	bhi.n	8001900 <DFSDMx_Init+0x308>
  return AUDIO_OK;
 80018fc:	2000      	movs	r0, #0
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 8001900:	4826      	ldr	r0, [pc, #152]	; (800199c <DFSDMx_Init+0x3a4>)
 8001902:	2200      	movs	r2, #0
 8001904:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    hAudioInButtomLeftFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_LEFT_FILTER;  
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <DFSDMx_Init+0x3a8>)
 800190a:	6003      	str	r3, [r0, #0]
    hAudioInButtomLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 800190c:	2301      	movs	r3, #1
 800190e:	6043      	str	r3, [r0, #4]
    hAudioInButtomLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8001910:	7203      	strb	r3, [r0, #8]
    hAudioInButtomLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 8001912:	7243      	strb	r3, [r0, #9]
    hAudioInButtomLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8001914:	60c2      	str	r2, [r0, #12]
    hAudioInButtomLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 8001916:	7403      	strb	r3, [r0, #16]
    hAudioInButtomLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8001918:	7442      	strb	r2, [r0, #17]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800191a:	6142      	str	r2, [r0, #20]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800191c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001920:	6182      	str	r2, [r0, #24]
    hAudioInButtomLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8001922:	61c5      	str	r5, [r0, #28]
    hAudioInButtomLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8001924:	6204      	str	r4, [r0, #32]
    hAudioInButtomLeftFilter.Init.FilterParam.IntOversampling  = 1;
 8001926:	6243      	str	r3, [r0, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 8001928:	f000 fb90 	bl	800204c <HAL_DFSDM_FilterInit>
 800192c:	b108      	cbz	r0, 8001932 <DFSDMx_Init+0x33a>
      return AUDIO_ERROR;
 800192e:	2001      	movs	r0, #1
 8001930:	bd70      	pop	{r4, r5, r6, pc}
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomLeftFilter, AUDIO_DFSDMx_BUTTOM_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001932:	2201      	movs	r2, #1
 8001934:	491b      	ldr	r1, [pc, #108]	; (80019a4 <DFSDMx_Init+0x3ac>)
 8001936:	4819      	ldr	r0, [pc, #100]	; (800199c <DFSDMx_Init+0x3a4>)
 8001938:	f000 fc22 	bl	8002180 <HAL_DFSDM_FilterConfigRegChannel>
 800193c:	b108      	cbz	r0, 8001942 <DFSDMx_Init+0x34a>
      return AUDIO_ERROR;
 800193e:	2001      	movs	r0, #1
 8001940:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 8001942:	4819      	ldr	r0, [pc, #100]	; (80019a8 <DFSDMx_Init+0x3b0>)
 8001944:	2300      	movs	r3, #0
 8001946:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    hAudioInButtomRightFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_RIGHT_FILTER;
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <DFSDMx_Init+0x3b4>)
 800194c:	6002      	str	r2, [r0, #0]
    hAudioInButtomRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 800194e:	2201      	movs	r2, #1
 8001950:	6042      	str	r2, [r0, #4]
    hAudioInButtomRightFilter.Init.RegularParam.FastMode        = ENABLE;
 8001952:	7202      	strb	r2, [r0, #8]
    hAudioInButtomRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 8001954:	7242      	strb	r2, [r0, #9]
    hAudioInButtomRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8001956:	60c3      	str	r3, [r0, #12]
    hAudioInButtomRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 8001958:	7403      	strb	r3, [r0, #16]
    hAudioInButtomRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 800195a:	7443      	strb	r3, [r0, #17]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800195c:	6143      	str	r3, [r0, #20]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	6183      	str	r3, [r0, #24]
    hAudioInButtomRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8001964:	61c5      	str	r5, [r0, #28]
    hAudioInButtomRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8001966:	6204      	str	r4, [r0, #32]
    hAudioInButtomRightFilter.Init.FilterParam.IntOversampling  = 1;
 8001968:	6242      	str	r2, [r0, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 800196a:	f000 fb6f 	bl	800204c <HAL_DFSDM_FilterInit>
 800196e:	b958      	cbnz	r0, 8001988 <DFSDMx_Init+0x390>
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomRightFilter, AUDIO_DFSDMx_BUTTOM_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001970:	2201      	movs	r2, #1
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <DFSDMx_Init+0x3b8>)
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <DFSDMx_Init+0x3b0>)
 8001976:	f000 fc03 	bl	8002180 <HAL_DFSDM_FilterConfigRegChannel>
 800197a:	b138      	cbz	r0, 800198c <DFSDMx_Init+0x394>
      return AUDIO_ERROR;
 800197c:	2001      	movs	r0, #1
 800197e:	bd70      	pop	{r4, r5, r6, pc}
    return AUDIO_ERROR;
 8001980:	2001      	movs	r0, #1
 8001982:	bd70      	pop	{r4, r5, r6, pc}
    return AUDIO_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	bd70      	pop	{r4, r5, r6, pc}
      return AUDIO_ERROR;
 8001988:	2001      	movs	r0, #1
 800198a:	bd70      	pop	{r4, r5, r6, pc}
  return AUDIO_OK;
 800198c:	2000      	movs	r0, #0
}
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	200006e8 	.word	0x200006e8
 8001994:	40017580 	.word	0x40017580
 8001998:	20000044 	.word	0x20000044
 800199c:	2000065c 	.word	0x2000065c
 80019a0:	40017600 	.word	0x40017600
 80019a4:	00050020 	.word	0x00050020
 80019a8:	20000310 	.word	0x20000310
 80019ac:	40017680 	.word	0x40017680
 80019b0:	00040010 	.word	0x00040010

080019b4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
{
 80019b4:	4770      	bx	lr

080019b6 <HAL_SAI_TxCpltCallback>:
{
 80019b6:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80019b8:	f7ff fffc 	bl	80019b4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
 80019bc:	bd08      	pop	{r3, pc}

080019be <HAL_SAI_TxHalfCpltCallback>:
{
 80019be:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80019c0:	f003 ffa8 	bl	8005914 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
 80019c4:	bd08      	pop	{r3, pc}

080019c6 <BSP_AUDIO_OUT_Error_CallBack>:
{
 80019c6:	4770      	bx	lr

080019c8 <BSP_AUDIO_OUT_MspInit>:
{ 
 80019c8:	b530      	push	{r4, r5, lr}
 80019ca:	b08b      	sub	sp, #44	; 0x2c
 80019cc:	4605      	mov	r5, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80019ce:	4c3a      	ldr	r4, [pc, #232]	; (8001ab8 <BSP_AUDIO_OUT_MspInit+0xf0>)
 80019d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d6:	6463      	str	r3, [r4, #68]	; 0x44
 80019d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80019e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e8:	6323      	str	r3, [r4, #48]	; 0x30
 80019ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 80019f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	6323      	str	r3, [r4, #48]	; 0x30
 80019fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	9303      	str	r3, [sp, #12]
 8001a04:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8001a06:	2370      	movs	r3, #112	; 0x70
 8001a08:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	9308      	str	r3, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8001a16:	2306      	movs	r3, #6
 8001a18:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001a1a:	a905      	add	r1, sp, #20
 8001a1c:	4827      	ldr	r0, [pc, #156]	; (8001abc <BSP_AUDIO_OUT_MspInit+0xf4>)
 8001a1e:	f000 fe11 	bl	8002644 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001a26:	a905      	add	r1, sp, #20
 8001a28:	4825      	ldr	r0, [pc, #148]	; (8001ac0 <BSP_AUDIO_OUT_MspInit+0xf8>)
 8001a2a:	f000 fe0b 	bl	8002644 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a34:	6323      	str	r3, [r4, #48]	; 0x30
 8001a36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	9304      	str	r3, [sp, #16]
 8001a3e:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001a40:	682a      	ldr	r2, [r5, #0]
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <BSP_AUDIO_OUT_MspInit+0xfc>)
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d009      	beq.n	8001a5c <BSP_AUDIO_OUT_MspInit+0x94>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	210e      	movs	r1, #14
 8001a4c:	2039      	movs	r0, #57	; 0x39
 8001a4e:	f000 f9cd 	bl	8001dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001a52:	2039      	movs	r0, #57	; 0x39
 8001a54:	f000 f9fa 	bl	8001e4c <HAL_NVIC_EnableIRQ>
}
 8001a58:	b00b      	add	sp, #44	; 0x2c
 8001a5a:	bd30      	pop	{r4, r5, pc}
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <BSP_AUDIO_OUT_MspInit+0x100>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001a62:	2140      	movs	r1, #64	; 0x40
 8001a64:	6699      	str	r1, [r3, #104]	; 0x68
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001a66:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6c:	6719      	str	r1, [r3, #112]	; 0x70
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a72:	6759      	str	r1, [r3, #116]	; 0x74
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a78:	6799      	str	r1, [r3, #120]	; 0x78
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7e:	67d9      	str	r1, [r3, #124]	; 0x7c
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001a80:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001a84:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001a88:	2104      	movs	r1, #4
 8001a8a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001a8e:	2103      	movs	r1, #3
 8001a90:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001a98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <BSP_AUDIO_OUT_MspInit+0x104>)
 8001aa0:	f844 2f60 	str.w	r2, [r4, #96]!
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001aa4:	66ec      	str	r4, [r5, #108]	; 0x6c
 8001aa6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f000 fc72 	bl	8002394 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f000 fc07 	bl	80022c4 <HAL_DMA_Init>
 8001ab6:	e7c7      	b.n	8001a48 <BSP_AUDIO_OUT_MspInit+0x80>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40015804 	.word	0x40015804
 8001ac8:	2000016c 	.word	0x2000016c
 8001acc:	40026428 	.word	0x40026428

08001ad0 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	b0a4      	sub	sp, #144	; 0x90
 8001ad4:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001ad6:	4668      	mov	r0, sp
 8001ad8:	f002 fa76 	bl	8003fc8 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001adc:	f245 6322 	movw	r3, #22050	; 0x5622
 8001ae0:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001ae4:	429c      	cmp	r4, r3
 8001ae6:	bf18      	it	ne
 8001ae8:	4294      	cmpne	r4, r2
 8001aea:	d014      	beq.n	8001b16 <BSP_AUDIO_OUT_ClockConfig+0x46>
 8001aec:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001af0:	429c      	cmp	r4, r3
 8001af2:	d010      	beq.n	8001b16 <BSP_AUDIO_OUT_ClockConfig+0x46>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001af8:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001afa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001afe:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001b00:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001b04:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8001b06:	2307      	movs	r3, #7
 8001b08:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001b0e:	4668      	mov	r0, sp
 8001b10:	f001 fe56 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001b14:	e00f      	b.n	8001b36 <BSP_AUDIO_OUT_ClockConfig+0x66>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001b16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b1a:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001b1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b20:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001b22:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001b26:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001b2c:	2313      	movs	r3, #19
 8001b2e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001b30:	4668      	mov	r0, sp
 8001b32:	f001 fe45 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001b36:	b024      	add	sp, #144	; 0x90
 8001b38:	bd10      	pop	{r4, pc}
	...

08001b3c <BSP_AUDIO_OUT_Init>:
{ 
 8001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b40:	4680      	mov	r8, r0
 8001b42:	460f      	mov	r7, r1
 8001b44:	4615      	mov	r5, r2
  SAIx_Out_DeInit();
 8001b46:	f7ff faeb 	bl	8001120 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001b4a:	4c19      	ldr	r4, [pc, #100]	; (8001bb0 <BSP_AUDIO_OUT_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4629      	mov	r1, r5
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff ffbd 	bl	8001ad0 <BSP_AUDIO_OUT_ClockConfig>
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <BSP_AUDIO_OUT_Init+0x78>)
 8001b58:	6023      	str	r3, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f002 feb5 	bl	80048ca <HAL_SAI_GetState>
 8001b60:	b178      	cbz	r0, 8001b82 <BSP_AUDIO_OUT_Init+0x46>
  SAIx_Out_Init(AudioFreq);
 8001b62:	4628      	mov	r0, r5
 8001b64:	f7ff fb06 	bl	8001174 <SAIx_Out_Init>
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <BSP_AUDIO_OUT_Init+0x7c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2034      	movs	r0, #52	; 0x34
 8001b6e:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8001b70:	f648 1394 	movw	r3, #35220	; 0x8994
 8001b74:	4298      	cmp	r0, r3
 8001b76:	d009      	beq.n	8001b8c <BSP_AUDIO_OUT_Init+0x50>
    ret = AUDIO_ERROR;
 8001b78:	2401      	movs	r4, #1
  if(ret == AUDIO_OK)
 8001b7a:	b17c      	cbz	r4, 8001b9c <BSP_AUDIO_OUT_Init+0x60>
}
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001b82:	2100      	movs	r1, #0
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff ff1f 	bl	80019c8 <BSP_AUDIO_OUT_MspInit>
 8001b8a:	e7ea      	b.n	8001b62 <BSP_AUDIO_OUT_Init+0x26>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <BSP_AUDIO_OUT_Init+0x7c>)
 8001b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b90:	2034      	movs	r0, #52	; 0x34
 8001b92:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <BSP_AUDIO_OUT_Init+0x80>)
 8001b96:	601c      	str	r4, [r3, #0]
    ret = AUDIO_OK;
 8001b98:	2400      	movs	r4, #0
 8001b9a:	e7ee      	b.n	8001b7a <BSP_AUDIO_OUT_Init+0x3e>
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <BSP_AUDIO_OUT_Init+0x80>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681e      	ldr	r6, [r3, #0]
 8001ba2:	462b      	mov	r3, r5
 8001ba4:	463a      	mov	r2, r7
 8001ba6:	4641      	mov	r1, r8
 8001ba8:	2034      	movs	r0, #52	; 0x34
 8001baa:	47b0      	blx	r6
 8001bac:	e7e6      	b.n	8001b7c <BSP_AUDIO_OUT_Init+0x40>
 8001bae:	bf00      	nop
 8001bb0:	20000448 	.word	0x20000448
 8001bb4:	40015804 	.word	0x40015804
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	20000588 	.word	0x20000588

08001bc0 <HAL_SAI_RxCpltCallback>:
{
 8001bc0:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001bc2:	f003 fead 	bl	8005920 <BSP_AUDIO_IN_TransferComplete_CallBack>
 8001bc6:	bd08      	pop	{r3, pc}

08001bc8 <HAL_SAI_RxHalfCpltCallback>:
{
 8001bc8:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001bca:	f003 feaf 	bl	800592c <BSP_AUDIO_IN_HalfTransfer_CallBack>
 8001bce:	bd08      	pop	{r3, pc}

08001bd0 <HAL_SAI_ErrorCallback>:
{
 8001bd0:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001bd2:	6802      	ldr	r2, [r0, #0]
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_SAI_ErrorCallback+0x18>)
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d002      	beq.n	8001be0 <HAL_SAI_ErrorCallback+0x10>
    BSP_AUDIO_IN_Error_CallBack();
 8001bda:	f003 fead 	bl	8005938 <BSP_AUDIO_IN_Error_CallBack>
 8001bde:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack();
 8001be0:	f7ff fef1 	bl	80019c6 <BSP_AUDIO_OUT_Error_CallBack>
 8001be4:	bd08      	pop	{r3, pc}
 8001be6:	bf00      	nop
 8001be8:	40015804 	.word	0x40015804

08001bec <BSP_AUDIO_IN_MspInit>:
{ 
 8001bec:	b508      	push	{r3, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <BSP_AUDIO_IN_MspInit+0x20>)
 8001bf0:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8001bf4:	b123      	cbz	r3, 8001c00 <BSP_AUDIO_IN_MspInit+0x14>
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL); 
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <BSP_AUDIO_IN_MspInit+0x24>)
 8001bfa:	f7ff fc77 	bl	80014ec <SAI_AUDIO_IN_MspInit>
 8001bfe:	bd08      	pop	{r3, pc}
  DFSDMx_ChannelMspInit();  
 8001c00:	f7ff fb70 	bl	80012e4 <DFSDMx_ChannelMspInit>
  DFSDMx_FilterMspInit();
 8001c04:	f7ff fbb6 	bl	8001374 <DFSDMx_FilterMspInit>
 8001c08:	bd08      	pop	{r3, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000016c 	.word	0x2000016c
 8001c10:	20000364 	.word	0x20000364

08001c14 <BSP_AUDIO_IN_ClockConfig>:
{ 
 8001c14:	b510      	push	{r4, lr}
 8001c16:	b0a4      	sub	sp, #144	; 0x90
 8001c18:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001c1a:	4668      	mov	r0, sp
 8001c1c:	f002 f9d4 	bl	8003fc8 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001c20:	f245 6322 	movw	r3, #22050	; 0x5622
 8001c24:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	bf18      	it	ne
 8001c2c:	4294      	cmpne	r4, r2
 8001c2e:	d014      	beq.n	8001c5a <BSP_AUDIO_IN_ClockConfig+0x46>
 8001c30:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001c34:	429c      	cmp	r4, r3
 8001c36:	d010      	beq.n	8001c5a <BSP_AUDIO_IN_ClockConfig+0x46>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001c38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c3c:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c42:	9310      	str	r3, [sp, #64]	; 0x40
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001c44:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001c48:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;   
 8001c4e:	2301      	movs	r3, #1
 8001c50:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001c52:	4668      	mov	r0, sp
 8001c54:	f001 fdb4 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	e00f      	b.n	8001c7a <BSP_AUDIO_IN_ClockConfig+0x66>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001c5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c5e:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c64:	9310      	str	r3, [sp, #64]	; 0x40
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001c66:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001c6a:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001c70:	2313      	movs	r3, #19
 8001c72:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001c74:	4668      	mov	r0, sp
 8001c76:	f001 fda3 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 8001c7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c7e:	9300      	str	r3, [sp, #0]
  rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001c80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c84:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct); 
 8001c86:	4668      	mov	r0, sp
 8001c88:	f001 fd9a 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001c8c:	b024      	add	sp, #144	; 0x90
 8001c8e:	bd10      	pop	{r4, pc}

08001c90 <BSP_AUDIO_IN_InitEx>:
{ 
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	460d      	mov	r5, r1
  AudioIn_Device = InputDevice;
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <BSP_AUDIO_IN_InitEx+0x90>)
 8001c96:	f8a2 00d4 	strh.w	r0, [r2, #212]	; 0xd4
  if(InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 8001c9a:	b320      	cbz	r0, 8001ce6 <BSP_AUDIO_IN_InitEx+0x56>
 8001c9c:	4604      	mov	r4, r0
    SAIx_In_DeInit();
 8001c9e:	f7ff fa4f 	bl	8001140 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8001ca2:	4e20      	ldr	r6, [pc, #128]	; (8001d24 <BSP_AUDIO_IN_InitEx+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f7ff ff11 	bl	8001ad0 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001cae:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <BSP_AUDIO_IN_InitEx+0x98>)
 8001cb0:	6033      	str	r3, [r6, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f002 fe09 	bl	80048ca <HAL_SAI_GetState>
 8001cb8:	b318      	cbz	r0, 8001d02 <BSP_AUDIO_IN_InitEx+0x72>
    SAIx_In_Init(AudioFreq);
 8001cba:	4628      	mov	r0, r5
 8001cbc:	f7ff fa94 	bl	80011e8 <SAIx_In_Init>
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <BSP_AUDIO_IN_InitEx+0x9c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2034      	movs	r0, #52	; 0x34
 8001cc6:	4798      	blx	r3
 8001cc8:	f648 1394 	movw	r3, #35220	; 0x8994
 8001ccc:	4298      	cmp	r0, r3
 8001cce:	d01f      	beq.n	8001d10 <BSP_AUDIO_IN_InitEx+0x80>
      ret = AUDIO_ERROR;
 8001cd0:	2601      	movs	r6, #1
    if(ret == AUDIO_OK)
 8001cd2:	b9a6      	cbnz	r6, 8001cfe <BSP_AUDIO_IN_InitEx+0x6e>
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8001cd4:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <BSP_AUDIO_IN_InitEx+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681f      	ldr	r7, [r3, #0]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	2264      	movs	r2, #100	; 0x64
 8001cde:	4621      	mov	r1, r4
 8001ce0:	2034      	movs	r0, #52	; 0x34
 8001ce2:	47b8      	blx	r7
 8001ce4:	e00b      	b.n	8001cfe <BSP_AUDIO_IN_InitEx+0x6e>
    AudioIn_ChannelNumber = ChnlNbr;
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <BSP_AUDIO_IN_InitEx+0xa4>)
 8001ce8:	7013      	strb	r3, [r2, #0]
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 8001cea:	2200      	movs	r2, #0
 8001cec:	4812      	ldr	r0, [pc, #72]	; (8001d38 <BSP_AUDIO_IN_InitEx+0xa8>)
 8001cee:	f7ff ff91 	bl	8001c14 <BSP_AUDIO_IN_ClockConfig>
    BSP_AUDIO_IN_MspInit();
 8001cf2:	f7ff ff7b 	bl	8001bec <BSP_AUDIO_IN_MspInit>
    DFSDMx_Init(AudioFreq);
 8001cf6:	4628      	mov	r0, r5
 8001cf8:	f7ff fc7e 	bl	80015f8 <DFSDMx_Init>
    ret = AUDIO_OK;
 8001cfc:	2600      	movs	r6, #0
}
 8001cfe:	4630      	mov	r0, r6
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);
 8001d02:	2100      	movs	r1, #0
 8001d04:	4630      	mov	r0, r6
 8001d06:	f7ff fe5f 	bl	80019c8 <BSP_AUDIO_OUT_MspInit>
    BSP_AUDIO_IN_MspInit();
 8001d0a:	f7ff ff6f 	bl	8001bec <BSP_AUDIO_IN_MspInit>
 8001d0e:	e7d4      	b.n	8001cba <BSP_AUDIO_IN_InitEx+0x2a>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001d10:	4e06      	ldr	r6, [pc, #24]	; (8001d2c <BSP_AUDIO_IN_InitEx+0x9c>)
 8001d12:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001d14:	2034      	movs	r0, #52	; 0x34
 8001d16:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <BSP_AUDIO_IN_InitEx+0xa0>)
 8001d1a:	601e      	str	r6, [r3, #0]
      ret = AUDIO_OK;
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	e7d8      	b.n	8001cd2 <BSP_AUDIO_IN_InitEx+0x42>
 8001d20:	2000016c 	.word	0x2000016c
 8001d24:	20000364 	.word	0x20000364
 8001d28:	40015824 	.word	0x40015824
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000588 	.word	0x20000588
 8001d34:	20000044 	.word	0x20000044
 8001d38:	200004cc 	.word	0x200004cc

08001d3c <BSP_AUDIO_IN_Init>:
{ 
 8001d3c:	b508      	push	{r3, lr}
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MIC, AudioFreq, BitRes, ChnlNbr);
 8001d3e:	4613      	mov	r3, r2
 8001d40:	460a      	mov	r2, r1
 8001d42:	4601      	mov	r1, r0
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff ffa3 	bl	8001c90 <BSP_AUDIO_IN_InitEx>
}
 8001d4a:	bd08      	pop	{r3, pc}

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_InitTick+0x24>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <HAL_InitTick+0x28>)
 8001d56:	fba3 3000 	umull	r3, r0, r3, r0
 8001d5a:	0980      	lsrs	r0, r0, #6
 8001d5c:	f000 f882 	bl	8001e64 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	4621      	mov	r1, r4
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f000 f840 	bl	8001dec <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	bd10      	pop	{r4, pc}
 8001d70:	20000048 	.word	0x20000048
 8001d74:	10624dd3 	.word	0x10624dd3

08001d78 <HAL_Init>:
{
 8001d78:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f000 f824 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff ffe3 	bl	8001d4c <HAL_InitTick>
  HAL_MspInit();
 8001d86:	f003 ff93 	bl	8005cb0 <HAL_MspInit>
}
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	bd08      	pop	{r3, pc}
	...

08001d90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001d90:	4a02      	ldr	r2, [pc, #8]	; (8001d9c <HAL_IncTick+0xc>)
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	200007d4 	.word	0x200007d4

08001da0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <HAL_GetTick+0x8>)
 8001da2:	6818      	ldr	r0, [r3, #0]
}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200007d4 	.word	0x200007d4

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001dac:	b510      	push	{r4, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8001db2:	f7ff fff5 	bl	8001da0 <HAL_GetTick>
 8001db6:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001db8:	f7ff fff2 	bl	8001da0 <HAL_GetTick>
 8001dbc:	1b00      	subs	r0, r0, r4
 8001dbe:	9b01      	ldr	r3, [sp, #4]
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	d3f9      	bcc.n	8001db8 <HAL_Delay+0xc>
  {
  }
}
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd10      	pop	{r4, pc}

08001dc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4906      	ldr	r1, [pc, #24]	; (8001de4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001dca:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001dd4:	0200      	lsls	r0, r0, #8
 8001dd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dda:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001ddc:	4a02      	ldr	r2, [pc, #8]	; (8001de8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001dde:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8001de0:	60ca      	str	r2, [r1, #12]
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	05fa0000 	.word	0x05fa0000

08001dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_NVIC_SetPriority+0x54>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df6:	f1c3 0407 	rsb	r4, r3, #7
 8001dfa:	2c04      	cmp	r4, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e00:	1d1d      	adds	r5, r3, #4
 8001e02:	2d06      	cmp	r5, #6
 8001e04:	d913      	bls.n	8001e2e <HAL_NVIC_SetPriority+0x42>
 8001e06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	2501      	movs	r5, #1
 8001e0a:	fa05 f404 	lsl.w	r4, r5, r4
 8001e0e:	3c01      	subs	r4, #1
 8001e10:	4021      	ands	r1, r4
 8001e12:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	fa05 f303 	lsl.w	r3, r5, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	db07      	blt.n	8001e32 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	0109      	lsls	r1, r1, #4
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_NVIC_SetPriority+0x58>)
 8001e28:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e2a:	bc30      	pop	{r4, r5}
 8001e2c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e7ea      	b.n	8001e08 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	f000 000f 	and.w	r0, r0, #15
 8001e36:	0109      	lsls	r1, r1, #4
 8001e38:	b2c9      	uxtb	r1, r1
 8001e3a:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_NVIC_SetPriority+0x5c>)
 8001e3c:	5419      	strb	r1, [r3, r0]
 8001e3e:	e7f4      	b.n	8001e2a <HAL_NVIC_SetPriority+0x3e>
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	e000e400 	.word	0xe000e400
 8001e48:	e000ed14 	.word	0xe000ed14

08001e4c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e4c:	0942      	lsrs	r2, r0, #5
 8001e4e:	f000 001f 	and.w	r0, r0, #31
 8001e52:	2301      	movs	r3, #1
 8001e54:	fa03 f000 	lsl.w	r0, r3, r0
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <HAL_NVIC_EnableIRQ+0x14>)
 8001e5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001e5e:	4770      	bx	lr
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	3801      	subs	r0, #1
 8001e66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e6a:	d20a      	bcs.n	8001e82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_SYSTICK_Config+0x24>)
 8001e6e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	21f0      	movs	r1, #240	; 0xf0
 8001e72:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_SYSTICK_Config+0x28>)
 8001e74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	2000      	movs	r0, #0
 8001e7a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001e90:	2804      	cmp	r0, #4
 8001e92:	d005      	beq.n	8001ea0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001e94:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ea0:	4a02      	ldr	r2, [pc, #8]	; (8001eac <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	f043 0304 	orr.w	r3, r3, #4
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4770      	bx	lr
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_SYSTICK_IRQHandler>:
{
 8001eb2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001eb4:	f7ff fffc 	bl	8001eb0 <HAL_SYSTICK_Callback>
 8001eb8:	bd08      	pop	{r3, pc}
	...

08001ebc <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
  uint32_t channel = 0xFF;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <DFSDM_GetChannelFromInstance+0x54>)
 8001ebe:	4298      	cmp	r0, r3
 8001ec0:	d016      	beq.n	8001ef0 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 0;
  }
  else if(Instance == DFSDM1_Channel1)
 8001ec2:	3320      	adds	r3, #32
 8001ec4:	4298      	cmp	r0, r3
 8001ec6:	d015      	beq.n	8001ef4 <DFSDM_GetChannelFromInstance+0x38>
  {
    channel = 1;
  }
  else if(Instance == DFSDM1_Channel2)
 8001ec8:	3320      	adds	r3, #32
 8001eca:	4298      	cmp	r0, r3
 8001ecc:	d014      	beq.n	8001ef8 <DFSDM_GetChannelFromInstance+0x3c>
  {
    channel = 2;
  }
  else if(Instance == DFSDM1_Channel3)
 8001ece:	3320      	adds	r3, #32
 8001ed0:	4298      	cmp	r0, r3
 8001ed2:	d013      	beq.n	8001efc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
  }
  else if(Instance == DFSDM1_Channel4)
 8001ed4:	3320      	adds	r3, #32
 8001ed6:	4298      	cmp	r0, r3
 8001ed8:	d012      	beq.n	8001f00 <DFSDM_GetChannelFromInstance+0x44>
  {
    channel = 4;
  }
  else if(Instance == DFSDM1_Channel5)
 8001eda:	3320      	adds	r3, #32
 8001edc:	4298      	cmp	r0, r3
 8001ede:	d011      	beq.n	8001f04 <DFSDM_GetChannelFromInstance+0x48>
  {
    channel = 5;
  }
  else if(Instance == DFSDM1_Channel6)
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	4298      	cmp	r0, r3
 8001ee4:	d010      	beq.n	8001f08 <DFSDM_GetChannelFromInstance+0x4c>
  {
    channel = 6;
  }
  else if(Instance == DFSDM1_Channel7)
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	4298      	cmp	r0, r3
 8001eea:	d00f      	beq.n	8001f0c <DFSDM_GetChannelFromInstance+0x50>
  uint32_t channel = 0xFF;
 8001eec:	20ff      	movs	r0, #255	; 0xff
 8001eee:	4770      	bx	lr
    channel = 0;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	4770      	bx	lr
    channel = 1;
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	4770      	bx	lr
    channel = 2;
 8001ef8:	2002      	movs	r0, #2
 8001efa:	4770      	bx	lr
    channel = 3;
 8001efc:	2003      	movs	r0, #3
 8001efe:	4770      	bx	lr
    channel = 4;
 8001f00:	2004      	movs	r0, #4
 8001f02:	4770      	bx	lr
    channel = 5;
 8001f04:	2005      	movs	r0, #5
 8001f06:	4770      	bx	lr
    channel = 6;
 8001f08:	2006      	movs	r0, #6
 8001f0a:	4770      	bx	lr
  {
    channel = 7;
 8001f0c:	2007      	movs	r0, #7
  }

  return channel;
}
 8001f0e:	4770      	bx	lr
 8001f10:	40017400 	.word	0x40017400

08001f14 <HAL_DFSDM_ChannelInit>:
  if(hdfsdm_channel == NULL)
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f000 8091 	beq.w	800203c <HAL_DFSDM_ChannelInit+0x128>
{
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	4604      	mov	r4, r0
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f1e:	6800      	ldr	r0, [r0, #0]
 8001f20:	f7ff ffcc 	bl	8001ebc <DFSDM_GetChannelFromInstance>
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_DFSDM_ChannelInit+0x12c>)
 8001f26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f2a:	b10b      	cbz	r3, 8001f30 <HAL_DFSDM_ChannelInit+0x1c>
    return HAL_ERROR;
 8001f2c:	2001      	movs	r0, #1
}
 8001f2e:	bd10      	pop	{r4, pc}
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f002 fff7 	bl	8004f24 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001f36:	4b42      	ldr	r3, [pc, #264]	; (8002040 <HAL_DFSDM_ChannelInit+0x12c>)
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	3201      	adds	r2, #1
 8001f3c:	621a      	str	r2, [r3, #32]
  if(v_dfsdm1ChannelCounter == 1)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d057      	beq.n	8001ff4 <HAL_DFSDM_ChannelInit+0xe0>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001f4c:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001f4e:	6821      	ldr	r1, [r4, #0]
 8001f50:	680a      	ldr	r2, [r1, #0]
 8001f52:	6923      	ldr	r3, [r4, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001f54:	6960      	ldr	r0, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001f56:	4303      	orrs	r3, r0
                                        hdfsdm_channel->Init.Input.Pins);
 8001f58:	69a0      	ldr	r0, [r4, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8001f5a:	4303      	orrs	r3, r0
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	f023 030f 	bic.w	r3, r3, #15
 8001f68:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001f6a:	6821      	ldr	r1, [r4, #0]
 8001f6c:	680b      	ldr	r3, [r1, #0]
 8001f6e:	69e2      	ldr	r2, [r4, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001f70:	6a20      	ldr	r0, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8001f72:	4302      	orrs	r2, r0
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	6893      	ldr	r3, [r2, #8]
 8001f7c:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001f80:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_FOSR_OFFSET));
 8001f84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f86:	3a01      	subs	r2, #1
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8001f8c:	fa91 f1a1 	rbit	r1, r1
 8001f90:	fab1 f181 	clz	r1, r1
 8001f94:	408a      	lsls	r2, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8001f96:	4313      	orrs	r3, r2
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	6891      	ldr	r1, [r2, #8]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6093      	str	r3, [r2, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	6853      	ldr	r3, [r2, #4]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	6053      	str	r3, [r2, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_OFFSET) | 
 8001faa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fac:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	4093      	lsls	r3, r2
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_OFFSET));
 8001fba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001fbc:	22f8      	movs	r2, #248	; 0xf8
 8001fbe:	fa92 f2a2 	rbit	r2, r2
 8001fc2:	fab2 f282 	clz	r2, r2
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_OFFSET) | 
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	6822      	ldr	r2, [r4, #0]
 8001fce:	6851      	ldr	r1, [r2, #4]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6053      	str	r3, [r2, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	6013      	str	r3, [r2, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001fe4:	6820      	ldr	r0, [r4, #0]
 8001fe6:	f7ff ff69 	bl	8001ebc <DFSDM_GetChannelFromInstance>
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_DFSDM_ChannelInit+0x12c>)
 8001fec:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  return HAL_OK;
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	bd10      	pop	{r4, pc}
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_DFSDM_ChannelInit+0x130>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001ffc:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68a1      	ldr	r1, [r4, #8]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800200c:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800200e:	7923      	ldrb	r3, [r4, #4]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d005      	beq.n	8002020 <HAL_DFSDM_ChannelInit+0x10c>
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002014:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_DFSDM_ChannelInit+0x130>)
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e791      	b.n	8001f44 <HAL_DFSDM_ChannelInit+0x30>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8002020:	68e3      	ldr	r3, [r4, #12]
 8002022:	3b01      	subs	r3, #1
 8002024:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8002028:	fa92 f2a2 	rbit	r2, r2
                                             DFSDM_CHCFGR1_CLK_DIV_OFFSET);
 800202c:	fab2 f282 	clz	r2, r2
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8002030:	4093      	lsls	r3, r2
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_DFSDM_ChannelInit+0x130>)
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	430b      	orrs	r3, r1
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e7eb      	b.n	8002014 <HAL_DFSDM_ChannelInit+0x100>
    return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
 800203e:	4770      	bx	lr
 8002040:	2000026c 	.word	0x2000026c
 8002044:	40017400 	.word	0x40017400

08002048 <HAL_DFSDM_FilterMspInit>:
{
 8002048:	4770      	bx	lr
	...

0800204c <HAL_DFSDM_FilterInit>:
  if(hdfsdm_filter == NULL)
 800204c:	2800      	cmp	r0, #0
 800204e:	f000 808b 	beq.w	8002168 <HAL_DFSDM_FilterInit+0x11c>
{
 8002052:	b510      	push	{r4, lr}
 8002054:	4604      	mov	r4, r0
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8002056:	6802      	ldr	r2, [r0, #0]
 8002058:	4b45      	ldr	r3, [pc, #276]	; (8002170 <HAL_DFSDM_FilterInit+0x124>)
 800205a:	429a      	cmp	r2, r3
 800205c:	d05e      	beq.n	800211c <HAL_DFSDM_FilterInit+0xd0>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800205e:	2300      	movs	r3, #0
 8002060:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002062:	2201      	movs	r2, #1
 8002064:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002066:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002068:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff ffec 	bl	8002048 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002078:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800207a:	7a23      	ldrb	r3, [r4, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d055      	beq.n	800212c <HAL_DFSDM_FilterInit+0xe0>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002080:	6822      	ldr	r2, [r4, #0]
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002088:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800208a:	7a63      	ldrb	r3, [r4, #9]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d053      	beq.n	8002138 <HAL_DFSDM_FilterInit+0xec>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002090:	6822      	ldr	r2, [r4, #0]
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002098:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	6811      	ldr	r1, [r2, #0]
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_DFSDM_FilterInit+0x128>)
 80020a0:	400b      	ands	r3, r1
 80020a2:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d04c      	beq.n	8002144 <HAL_DFSDM_FilterInit+0xf8>
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80020aa:	7c23      	ldrb	r3, [r4, #16]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d04f      	beq.n	8002150 <HAL_DFSDM_FilterInit+0x104>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	f023 0310 	bic.w	r3, r3, #16
 80020b8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80020ba:	7c63      	ldrb	r3, [r4, #17]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d04d      	beq.n	800215c <HAL_DFSDM_FilterInit+0x110>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80020c0:	6822      	ldr	r2, [r4, #0]
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	f023 0320 	bic.w	r3, r3, #32
 80020c8:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6951      	ldr	r1, [r2, #20]
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_DFSDM_FilterInit+0x12c>)
 80020d0:	400b      	ands	r3, r1
 80020d2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020d4:	69e3      	ldr	r3, [r4, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_OFFSET) |
 80020d6:	6a22      	ldr	r2, [r4, #32]
 80020d8:	3a01      	subs	r2, #1
 80020da:	4928      	ldr	r1, [pc, #160]	; (800217c <HAL_DFSDM_FilterInit+0x130>)
 80020dc:	fa91 f1a1 	rbit	r1, r1
 80020e0:	fab1 f181 	clz	r1, r1
 80020e4:	408a      	lsls	r2, r1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020e6:	4313      	orrs	r3, r2
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80020e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020ea:	3a01      	subs	r2, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_OFFSET) |
 80020ec:	4313      	orrs	r3, r2
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	6951      	ldr	r1, [r2, #20]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80020f6:	6863      	ldr	r3, [r4, #4]
 80020f8:	6363      	str	r3, [r4, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80020fa:	68e3      	ldr	r3, [r4, #12]
 80020fc:	63a3      	str	r3, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80020fe:	69a3      	ldr	r3, [r4, #24]
 8002100:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002102:	7c23      	ldrb	r3, [r4, #16]
 8002104:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6013      	str	r3, [r2, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002112:	2301      	movs	r3, #1
 8002114:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8002118:	2000      	movs	r0, #0
 800211a:	bd10      	pop	{r4, pc}
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800211c:	6843      	ldr	r3, [r0, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 800211e:	2b01      	cmp	r3, #1
 8002120:	d024      	beq.n	800216c <HAL_DFSDM_FilterInit+0x120>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002122:	68c3      	ldr	r3, [r0, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8002124:	2b01      	cmp	r3, #1
 8002126:	d19a      	bne.n	800205e <HAL_DFSDM_FilterInit+0x12>
    return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
}
 800212a:	bd10      	pop	{r4, pc}
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e7a8      	b.n	800208a <HAL_DFSDM_FilterInit+0x3e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002138:	6822      	ldr	r2, [r4, #0]
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e7aa      	b.n	800209a <HAL_DFSDM_FilterInit+0x4e>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	6813      	ldr	r3, [r2, #0]
 8002148:	6961      	ldr	r1, [r4, #20]
 800214a:	430b      	orrs	r3, r1
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e7ac      	b.n	80020aa <HAL_DFSDM_FilterInit+0x5e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6813      	ldr	r3, [r2, #0]
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e7ae      	b.n	80020ba <HAL_DFSDM_FilterInit+0x6e>
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800215c:	6822      	ldr	r2, [r4, #0]
 800215e:	6813      	ldr	r3, [r2, #0]
 8002160:	f043 0320 	orr.w	r3, r3, #32
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e7b0      	b.n	80020ca <HAL_DFSDM_FilterInit+0x7e>
    return HAL_ERROR;
 8002168:	2001      	movs	r0, #1
 800216a:	4770      	bx	lr
    return HAL_ERROR;
 800216c:	2001      	movs	r0, #1
 800216e:	bd10      	pop	{r4, pc}
 8002170:	40017500 	.word	0x40017500
 8002174:	ffff80f7 	.word	0xffff80f7
 8002178:	1c00ff00 	.word	0x1c00ff00
 800217c:	03ff0000 	.word	0x03ff0000

08002180 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8002180:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002184:	3b01      	subs	r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2bfd      	cmp	r3, #253	; 0xfd
 800218a:	d81c      	bhi.n	80021c6 <HAL_DFSDM_FilterConfigRegChannel+0x46>
{
 800218c:	b430      	push	{r4, r5}
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800218e:	6804      	ldr	r4, [r0, #0]
 8002190:	6825      	ldr	r5, [r4, #0]
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_DFSDM_FilterConfigRegChannel+0x4c>)
 8002194:	402b      	ands	r3, r5
 8002196:	6023      	str	r3, [r4, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002198:	2a01      	cmp	r2, #1
 800219a:	d00a      	beq.n	80021b2 <HAL_DFSDM_FilterConfigRegChannel+0x32>
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800219c:	6804      	ldr	r4, [r0, #0]
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	0209      	lsls	r1, r1, #8
 80021a2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80021a6:	4319      	orrs	r1, r3
 80021a8:	6021      	str	r1, [r4, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80021aa:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2000      	movs	r0, #0
}
 80021ae:	bc30      	pop	{r4, r5}
 80021b0:	4770      	bx	lr
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80021b2:	6804      	ldr	r4, [r0, #0]
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	0209      	lsls	r1, r1, #8
 80021b8:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80021bc:	4319      	orrs	r1, r3
 80021be:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80021c2:	6021      	str	r1, [r4, #0]
 80021c4:	e7f1      	b.n	80021aa <HAL_DFSDM_FilterConfigRegChannel+0x2a>
    status = HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	f8fbffff 	.word	0xf8fbffff

080021d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021d2:	6805      	ldr	r5, [r0, #0]
 80021d4:	682c      	ldr	r4, [r5, #0]
 80021d6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80021da:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021dc:	6804      	ldr	r4, [r0, #0]
 80021de:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e0:	6883      	ldr	r3, [r0, #8]
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d005      	beq.n	80021f2 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80021e6:	6803      	ldr	r3, [r0, #0]
 80021e8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80021ea:	6803      	ldr	r3, [r0, #0]
 80021ec:	60da      	str	r2, [r3, #12]
  }
}
 80021ee:	bc30      	pop	{r4, r5}
 80021f0:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80021f2:	6803      	ldr	r3, [r0, #0]
 80021f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80021f6:	6803      	ldr	r3, [r0, #0]
 80021f8:	60d9      	str	r1, [r3, #12]
 80021fa:	e7f8      	b.n	80021ee <DMA_SetConfig+0x1e>

080021fc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021fc:	6802      	ldr	r2, [r0, #0]
 80021fe:	b2d3      	uxtb	r3, r2
 8002200:	3b10      	subs	r3, #16
 8002202:	4909      	ldr	r1, [pc, #36]	; (8002228 <DMA_CalcBaseAndBitshift+0x2c>)
 8002204:	fba1 1303 	umull	r1, r3, r1, r3
 8002208:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <DMA_CalcBaseAndBitshift+0x30>)
 800220c:	5cc9      	ldrb	r1, [r1, r3]
 800220e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002210:	2b03      	cmp	r3, #3
 8002212:	d804      	bhi.n	800221e <DMA_CalcBaseAndBitshift+0x22>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <DMA_CalcBaseAndBitshift+0x34>)
 8002216:	4013      	ands	r3, r2
 8002218:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800221a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800221c:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <DMA_CalcBaseAndBitshift+0x34>)
 8002220:	4013      	ands	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	6583      	str	r3, [r0, #88]	; 0x58
 8002226:	e7f8      	b.n	800221a <DMA_CalcBaseAndBitshift+0x1e>
 8002228:	aaaaaaab 	.word	0xaaaaaaab
 800222c:	08006e28 	.word	0x08006e28
 8002230:	fffffc00 	.word	0xfffffc00

08002234 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002234:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002236:	6982      	ldr	r2, [r0, #24]
 8002238:	b992      	cbnz	r2, 8002260 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800223a:	2b01      	cmp	r3, #1
 800223c:	d00a      	beq.n	8002254 <DMA_CheckFifoParam+0x20>
 800223e:	b11b      	cbz	r3, 8002248 <DMA_CheckFifoParam+0x14>
 8002240:	2b02      	cmp	r3, #2
 8002242:	d001      	beq.n	8002248 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2000      	movs	r0, #0
 8002246:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002248:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800224a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800224e:	d12c      	bne.n	80022aa <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2000      	movs	r0, #0
 8002252:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002254:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002256:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800225a:	d028      	beq.n	80022ae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	2000      	movs	r0, #0
 800225e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002260:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002264:	d005      	beq.n	8002272 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002266:	2b02      	cmp	r3, #2
 8002268:	d929      	bls.n	80022be <DMA_CheckFifoParam+0x8a>
 800226a:	2b03      	cmp	r3, #3
 800226c:	d015      	beq.n	800229a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2000      	movs	r0, #0
 8002270:	4770      	bx	lr
    switch (tmp)
 8002272:	2b03      	cmp	r3, #3
 8002274:	d803      	bhi.n	800227e <DMA_CheckFifoParam+0x4a>
 8002276:	e8df f003 	tbb	[pc, r3]
 800227a:	041c      	.short	0x041c
 800227c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2000      	movs	r0, #0
 8002280:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002282:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002284:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002288:	d115      	bne.n	80022b6 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2000      	movs	r0, #0
 800228c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800228e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002294:	d011      	beq.n	80022ba <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2000      	movs	r0, #0
 8002298:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800229a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800229c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80022a0:	d001      	beq.n	80022a6 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80022a4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2000      	movs	r0, #0
 80022a8:	4770      	bx	lr
        status = HAL_ERROR;
 80022aa:	2001      	movs	r0, #1
 80022ac:	4770      	bx	lr
        status = HAL_ERROR;
 80022ae:	2001      	movs	r0, #1
 80022b0:	4770      	bx	lr
      status = HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
 80022b4:	4770      	bx	lr
        status = HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
 80022b8:	4770      	bx	lr
        status = HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
 80022bc:	4770      	bx	lr
      status = HAL_ERROR;
 80022be:	2001      	movs	r0, #1
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_DMA_Init>:
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022c8:	f7ff fd6a 	bl	8001da0 <HAL_GetTick>
  if(hdma == NULL)
 80022cc:	2c00      	cmp	r4, #0
 80022ce:	d05d      	beq.n	800238c <HAL_DMA_Init+0xc8>
 80022d0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80022d2:	2300      	movs	r3, #0
 80022d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d8:	2302      	movs	r3, #2
 80022da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f012 0f01 	tst.w	r2, #1
 80022f0:	d00a      	beq.n	8002308 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f2:	f7ff fd55 	bl	8001da0 <HAL_GetTick>
 80022f6:	1b40      	subs	r0, r0, r5
 80022f8:	2805      	cmp	r0, #5
 80022fa:	d9f5      	bls.n	80022e8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022fc:	2320      	movs	r3, #32
 80022fe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002300:	2003      	movs	r0, #3
 8002302:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002306:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002308:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800230a:	4921      	ldr	r1, [pc, #132]	; (8002390 <HAL_DMA_Init+0xcc>)
 800230c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230e:	6862      	ldr	r2, [r4, #4]
 8002310:	68a0      	ldr	r0, [r4, #8]
 8002312:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002318:	6920      	ldr	r0, [r4, #16]
 800231a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	69a0      	ldr	r0, [r4, #24]
 8002322:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002324:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002326:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002328:	6a20      	ldr	r0, [r4, #32]
 800232a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800232e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002330:	2904      	cmp	r1, #4
 8002332:	d016      	beq.n	8002362 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8002334:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002336:	6826      	ldr	r6, [r4, #0]
 8002338:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800233a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800233e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002340:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002342:	2b04      	cmp	r3, #4
 8002344:	d012      	beq.n	800236c <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8002346:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff ff57 	bl	80021fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002350:	233f      	movs	r3, #63	; 0x3f
 8002352:	4093      	lsls	r3, r2
 8002354:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002356:	2000      	movs	r0, #0
 8002358:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800235a:	2301      	movs	r3, #1
 800235c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002360:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002362:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002364:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002366:	4301      	orrs	r1, r0
 8002368:	430a      	orrs	r2, r1
 800236a:	e7e3      	b.n	8002334 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 800236c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800236e:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0e7      	beq.n	8002346 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff ff5c 	bl	8002234 <DMA_CheckFifoParam>
 800237c:	2800      	cmp	r0, #0
 800237e:	d0e2      	beq.n	8002346 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002384:	2001      	movs	r0, #1
 8002386:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800238a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800238c:	2001      	movs	r0, #1
}
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	e010803f 	.word	0xe010803f

08002394 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8002394:	b340      	cbz	r0, 80023e8 <HAL_DMA_DeInit+0x54>
{
 8002396:	b538      	push	{r3, r4, r5, lr}
 8002398:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800239a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_DeInit+0x14>
    return HAL_BUSY;
 80023a4:	2002      	movs	r0, #2
}
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 80023a8:	6802      	ldr	r2, [r0, #0]
 80023aa:	6813      	ldr	r3, [r2, #0]
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80023b2:	6803      	ldr	r3, [r0, #0]
 80023b4:	2500      	movs	r5, #0
 80023b6:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80023b8:	6803      	ldr	r3, [r0, #0]
 80023ba:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80023bc:	6803      	ldr	r3, [r0, #0]
 80023be:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80023c0:	6803      	ldr	r3, [r0, #0]
 80023c2:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80023c4:	6803      	ldr	r3, [r0, #0]
 80023c6:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	2221      	movs	r2, #33	; 0x21
 80023cc:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ce:	f7ff ff15 	bl	80021fc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023d4:	233f      	movs	r3, #63	; 0x3f
 80023d6:	4093      	lsls	r3, r2
 80023d8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023da:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 80023dc:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80023e0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 80023e4:	4628      	mov	r0, r5
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80023e8:	2001      	movs	r0, #1
 80023ea:	4770      	bx	lr

080023ec <HAL_DMA_Start_IT>:
{
 80023ec:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ee:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80023f0:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80023f4:	2c01      	cmp	r4, #1
 80023f6:	d031      	beq.n	800245c <HAL_DMA_Start_IT+0x70>
 80023f8:	2401      	movs	r4, #1
 80023fa:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fe:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002402:	b2e4      	uxtb	r4, r4
 8002404:	2c01      	cmp	r4, #1
 8002406:	d004      	beq.n	8002412 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002408:	2300      	movs	r3, #0
 800240a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800240e:	2002      	movs	r0, #2
 8002410:	bd38      	pop	{r3, r4, r5, pc}
 8002412:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	2002      	movs	r0, #2
 8002416:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241a:	2000      	movs	r0, #0
 800241c:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fed6 	bl	80021d0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002424:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002426:	233f      	movs	r3, #63	; 0x3f
 8002428:	4093      	lsls	r3, r2
 800242a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	6813      	ldr	r3, [r2, #0]
 8002430:	f043 0316 	orr.w	r3, r3, #22
 8002434:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	6953      	ldr	r3, [r2, #20]
 800243a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243e:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002442:	b123      	cbz	r3, 800244e <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002444:	6822      	ldr	r2, [r4, #0]
 8002446:	6813      	ldr	r3, [r2, #0]
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800244e:	6822      	ldr	r2, [r4, #0]
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2000      	movs	r0, #0
 800245a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 800245c:	2002      	movs	r0, #2
}
 800245e:	bd38      	pop	{r3, r4, r5, pc}

08002460 <HAL_DMA_IRQHandler>:
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	b083      	sub	sp, #12
 8002464:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800246a:	4b72      	ldr	r3, [pc, #456]	; (8002634 <HAL_DMA_IRQHandler+0x1d4>)
 800246c:	681d      	ldr	r5, [r3, #0]
 800246e:	4b72      	ldr	r3, [pc, #456]	; (8002638 <HAL_DMA_IRQHandler+0x1d8>)
 8002470:	fba3 3505 	umull	r3, r5, r3, r5
 8002474:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002476:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002478:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800247c:	2308      	movs	r3, #8
 800247e:	4093      	lsls	r3, r2
 8002480:	421e      	tst	r6, r3
 8002482:	d010      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002484:	6803      	ldr	r3, [r0, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	f012 0f04 	tst.w	r2, #4
 800248c:	d00b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f022 0204 	bic.w	r2, r2, #4
 8002494:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002496:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002498:	2308      	movs	r3, #8
 800249a:	4093      	lsls	r3, r2
 800249c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800249e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024a8:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_DMA_IRQHandler+0x1dc>)
 80024aa:	4093      	lsls	r3, r2
 80024ac:	421e      	tst	r6, r3
 80024ae:	d009      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024b0:	6822      	ldr	r2, [r4, #0]
 80024b2:	6952      	ldr	r2, [r2, #20]
 80024b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80024b8:	d004      	beq.n	80024c4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ba:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <HAL_DMA_IRQHandler+0x1e0>)
 80024c8:	4093      	lsls	r3, r2
 80024ca:	421e      	tst	r6, r3
 80024cc:	d009      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ce:	6822      	ldr	r2, [r4, #0]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	f012 0f02 	tst.w	r2, #2
 80024d6:	d004      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024d8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024e4:	2310      	movs	r3, #16
 80024e6:	4093      	lsls	r3, r2
 80024e8:	421e      	tst	r6, r3
 80024ea:	d024      	beq.n	8002536 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f012 0f08 	tst.w	r2, #8
 80024f4:	d01f      	beq.n	8002536 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002500:	d00d      	beq.n	800251e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002508:	d104      	bne.n	8002514 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800250a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800250c:	b19b      	cbz	r3, 8002536 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800250e:	4620      	mov	r0, r4
 8002510:	4798      	blx	r3
 8002512:	e010      	b.n	8002536 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002514:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002516:	b173      	cbz	r3, 8002536 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002518:	4620      	mov	r0, r4
 800251a:	4798      	blx	r3
 800251c:	e00b      	b.n	8002536 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002524:	d103      	bne.n	800252e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f022 0208 	bic.w	r2, r2, #8
 800252c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800252e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002530:	b10b      	cbz	r3, 8002536 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002532:	4620      	mov	r0, r4
 8002534:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002536:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002538:	2320      	movs	r3, #32
 800253a:	4093      	lsls	r3, r2
 800253c:	421e      	tst	r6, r3
 800253e:	d055      	beq.n	80025ec <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	f012 0f10 	tst.w	r2, #16
 8002548:	d050      	beq.n	80025ec <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800254a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800254c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b05      	cmp	r3, #5
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800255e:	d033      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002566:	d12a      	bne.n	80025be <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002568:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03e      	beq.n	80025ec <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800256e:	4620      	mov	r0, r4
 8002570:	4798      	blx	r3
 8002572:	e03b      	b.n	80025ec <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	6813      	ldr	r3, [r2, #0]
 8002578:	f023 0316 	bic.w	r3, r3, #22
 800257c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	6953      	ldr	r3, [r2, #20]
 8002582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002586:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800258a:	b1a3      	cbz	r3, 80025b6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800258c:	6822      	ldr	r2, [r4, #0]
 800258e:	6813      	ldr	r3, [r2, #0]
 8002590:	f023 0308 	bic.w	r3, r3, #8
 8002594:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002596:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002598:	233f      	movs	r3, #63	; 0x3f
 800259a:	4093      	lsls	r3, r2
 800259c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800259e:	2300      	movs	r3, #0
 80025a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80025aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03f      	beq.n	8002630 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80025b0:	4620      	mov	r0, r4
 80025b2:	4798      	blx	r3
 80025b4:	e03c      	b.n	8002630 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e7      	bne.n	800258c <HAL_DMA_IRQHandler+0x12c>
 80025bc:	e7eb      	b.n	8002596 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80025be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c0:	b1a3      	cbz	r3, 80025ec <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80025c2:	4620      	mov	r0, r4
 80025c4:	4798      	blx	r3
 80025c6:	e011      	b.n	80025ec <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f412 7f80 	tst.w	r2, #256	; 0x100
 80025ce:	d109      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f022 0210 	bic.w	r2, r2, #16
 80025d6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80025d8:	2300      	movs	r3, #0
 80025da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80025de:	2301      	movs	r3, #1
 80025e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80025e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025e6:	b10b      	cbz	r3, 80025ec <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80025e8:	4620      	mov	r0, r4
 80025ea:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025ee:	b1fb      	cbz	r3, 8002630 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025f2:	f013 0f01 	tst.w	r3, #1
 80025f6:	d017      	beq.n	8002628 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80025f8:	2305      	movs	r3, #5
 80025fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80025fe:	6822      	ldr	r2, [r4, #0]
 8002600:	6813      	ldr	r3, [r2, #0]
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002608:	9b01      	ldr	r3, [sp, #4]
 800260a:	3301      	adds	r3, #1
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	429d      	cmp	r5, r3
 8002610:	d304      	bcc.n	800261c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f013 0f01 	tst.w	r3, #1
 800261a:	d1f5      	bne.n	8002608 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 800261c:	2300      	movs	r3, #0
 800261e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002622:	2301      	movs	r3, #1
 8002624:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002628:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800262a:	b10b      	cbz	r3, 8002630 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800262c:	4620      	mov	r0, r4
 800262e:	4798      	blx	r3
}
 8002630:	b003      	add	sp, #12
 8002632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002634:	20000048 	.word	0x20000048
 8002638:	1b4e81b5 	.word	0x1b4e81b5
 800263c:	00800001 	.word	0x00800001
 8002640:	00800004 	.word	0x00800004

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002648:	2400      	movs	r4, #0
 800264a:	e037      	b.n	80026bc <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800264c:	2609      	movs	r6, #9
 800264e:	e000      	b.n	8002652 <HAL_GPIO_Init+0xe>
 8002650:	2600      	movs	r6, #0
 8002652:	fa06 f60e 	lsl.w	r6, r6, lr
 8002656:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8002658:	3302      	adds	r3, #2
 800265a:	4e6c      	ldr	r6, [pc, #432]	; (800280c <HAL_GPIO_Init+0x1c8>)
 800265c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002660:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <HAL_GPIO_Init+0x1cc>)
 8002662:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8002664:	43eb      	mvns	r3, r5
 8002666:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266a:	684f      	ldr	r7, [r1, #4]
 800266c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002670:	d001      	beq.n	8002676 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8002672:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8002676:	4a66      	ldr	r2, [pc, #408]	; (8002810 <HAL_GPIO_Init+0x1cc>)
 8002678:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800267a:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800267c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002680:	684f      	ldr	r7, [r1, #4]
 8002682:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002686:	d001      	beq.n	800268c <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8002688:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800268c:	4a60      	ldr	r2, [pc, #384]	; (8002810 <HAL_GPIO_Init+0x1cc>)
 800268e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002690:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002692:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002696:	684f      	ldr	r7, [r1, #4]
 8002698:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800269c:	d001      	beq.n	80026a2 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800269e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80026a2:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <HAL_GPIO_Init+0x1cc>)
 80026a4:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80026a6:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026aa:	684e      	ldr	r6, [r1, #4]
 80026ac:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80026b0:	d001      	beq.n	80026b6 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 80026b2:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80026b6:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_GPIO_Init+0x1cc>)
 80026b8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ba:	3401      	adds	r4, #1
 80026bc:	2c0f      	cmp	r4, #15
 80026be:	f200 80a3 	bhi.w	8002808 <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 80026c2:	2301      	movs	r3, #1
 80026c4:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c6:	680a      	ldr	r2, [r1, #0]
 80026c8:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80026cc:	42ab      	cmp	r3, r5
 80026ce:	d1f4      	bne.n	80026ba <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d0:	684a      	ldr	r2, [r1, #4]
 80026d2:	2a12      	cmp	r2, #18
 80026d4:	bf18      	it	ne
 80026d6:	2a02      	cmpne	r2, #2
 80026d8:	d112      	bne.n	8002700 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80026da:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80026de:	f10e 0e08 	add.w	lr, lr, #8
 80026e2:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026e6:	f004 0607 	and.w	r6, r4, #7
 80026ea:	00b6      	lsls	r6, r6, #2
 80026ec:	270f      	movs	r7, #15
 80026ee:	40b7      	lsls	r7, r6
 80026f0:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026f4:	690f      	ldr	r7, [r1, #16]
 80026f6:	fa07 f606 	lsl.w	r6, r7, r6
 80026fa:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 80026fc:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 8002700:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002702:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f20e 	lsl.w	r2, r2, lr
 800270c:	43d2      	mvns	r2, r2
 800270e:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002710:	684f      	ldr	r7, [r1, #4]
 8002712:	f007 0703 	and.w	r7, r7, #3
 8002716:	fa07 f70e 	lsl.w	r7, r7, lr
 800271a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800271c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800271e:	684e      	ldr	r6, [r1, #4]
 8002720:	1e77      	subs	r7, r6, #1
 8002722:	2e11      	cmp	r6, #17
 8002724:	bf18      	it	ne
 8002726:	2f01      	cmpne	r7, #1
 8002728:	d901      	bls.n	800272e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272a:	2e12      	cmp	r6, #18
 800272c:	d10f      	bne.n	800274e <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 800272e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002730:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8002732:	68cf      	ldr	r7, [r1, #12]
 8002734:	fa07 f70e 	lsl.w	r7, r7, lr
 8002738:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800273a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800273c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273e:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002742:	684e      	ldr	r6, [r1, #4]
 8002744:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8002748:	40a6      	lsls	r6, r4
 800274a:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800274c:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800274e:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002750:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002752:	688b      	ldr	r3, [r1, #8]
 8002754:	fa03 f30e 	lsl.w	r3, r3, lr
 8002758:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800275a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800275c:	684b      	ldr	r3, [r1, #4]
 800275e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002762:	d0aa      	beq.n	80026ba <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_GPIO_Init+0x1d0>)
 8002766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002778:	08a3      	lsrs	r3, r4, #2
 800277a:	1c9e      	adds	r6, r3, #2
 800277c:	4a23      	ldr	r2, [pc, #140]	; (800280c <HAL_GPIO_Init+0x1c8>)
 800277e:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002782:	f004 0603 	and.w	r6, r4, #3
 8002786:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800278a:	260f      	movs	r6, #15
 800278c:	fa06 f60e 	lsl.w	r6, r6, lr
 8002790:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002794:	4f20      	ldr	r7, [pc, #128]	; (8002818 <HAL_GPIO_Init+0x1d4>)
 8002796:	42b8      	cmp	r0, r7
 8002798:	f43f af5a 	beq.w	8002650 <HAL_GPIO_Init+0xc>
 800279c:	4e1f      	ldr	r6, [pc, #124]	; (800281c <HAL_GPIO_Init+0x1d8>)
 800279e:	42b0      	cmp	r0, r6
 80027a0:	d022      	beq.n	80027e8 <HAL_GPIO_Init+0x1a4>
 80027a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027a6:	42b0      	cmp	r0, r6
 80027a8:	d020      	beq.n	80027ec <HAL_GPIO_Init+0x1a8>
 80027aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027ae:	42b0      	cmp	r0, r6
 80027b0:	d01e      	beq.n	80027f0 <HAL_GPIO_Init+0x1ac>
 80027b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027b6:	42b0      	cmp	r0, r6
 80027b8:	d01c      	beq.n	80027f4 <HAL_GPIO_Init+0x1b0>
 80027ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027be:	42b0      	cmp	r0, r6
 80027c0:	d01a      	beq.n	80027f8 <HAL_GPIO_Init+0x1b4>
 80027c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027c6:	42b0      	cmp	r0, r6
 80027c8:	d018      	beq.n	80027fc <HAL_GPIO_Init+0x1b8>
 80027ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027ce:	42b0      	cmp	r0, r6
 80027d0:	d016      	beq.n	8002800 <HAL_GPIO_Init+0x1bc>
 80027d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027d6:	42b0      	cmp	r0, r6
 80027d8:	d014      	beq.n	8002804 <HAL_GPIO_Init+0x1c0>
 80027da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027de:	42b0      	cmp	r0, r6
 80027e0:	f43f af34 	beq.w	800264c <HAL_GPIO_Init+0x8>
 80027e4:	260a      	movs	r6, #10
 80027e6:	e734      	b.n	8002652 <HAL_GPIO_Init+0xe>
 80027e8:	2601      	movs	r6, #1
 80027ea:	e732      	b.n	8002652 <HAL_GPIO_Init+0xe>
 80027ec:	2602      	movs	r6, #2
 80027ee:	e730      	b.n	8002652 <HAL_GPIO_Init+0xe>
 80027f0:	2603      	movs	r6, #3
 80027f2:	e72e      	b.n	8002652 <HAL_GPIO_Init+0xe>
 80027f4:	2604      	movs	r6, #4
 80027f6:	e72c      	b.n	8002652 <HAL_GPIO_Init+0xe>
 80027f8:	2605      	movs	r6, #5
 80027fa:	e72a      	b.n	8002652 <HAL_GPIO_Init+0xe>
 80027fc:	2606      	movs	r6, #6
 80027fe:	e728      	b.n	8002652 <HAL_GPIO_Init+0xe>
 8002800:	2607      	movs	r6, #7
 8002802:	e726      	b.n	8002652 <HAL_GPIO_Init+0xe>
 8002804:	2608      	movs	r6, #8
 8002806:	e724      	b.n	8002652 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8002808:	b003      	add	sp, #12
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	40013800 	.word	0x40013800
 8002810:	40013c00 	.word	0x40013c00
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400

08002820 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002820:	2300      	movs	r3, #0
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f200 8092 	bhi.w	800294c <HAL_GPIO_DeInit+0x12c>
{
 8002828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282a:	e00a      	b.n	8002842 <HAL_GPIO_DeInit+0x22>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800282c:	2609      	movs	r6, #9
 800282e:	e000      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 8002830:	2600      	movs	r6, #0
 8002832:	fa06 f202 	lsl.w	r2, r6, r2
 8002836:	4294      	cmp	r4, r2
 8002838:	d06f      	beq.n	800291a <HAL_GPIO_DeInit+0xfa>
  for(position = 0; position < GPIO_NUMBER; position++)
 800283a:	3301      	adds	r3, #1
 800283c:	2b0f      	cmp	r3, #15
 800283e:	f200 8084 	bhi.w	800294a <HAL_GPIO_DeInit+0x12a>
    ioposition = ((uint32_t)0x01) << position;
 8002842:	2201      	movs	r2, #1
 8002844:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8002846:	ea02 0501 	and.w	r5, r2, r1
    if(iocurrent == ioposition)
 800284a:	42aa      	cmp	r2, r5
 800284c:	d1f5      	bne.n	800283a <HAL_GPIO_DeInit+0x1a>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800284e:	6806      	ldr	r6, [r0, #0]
 8002850:	005f      	lsls	r7, r3, #1
 8002852:	2403      	movs	r4, #3
 8002854:	40bc      	lsls	r4, r7
 8002856:	43e4      	mvns	r4, r4
 8002858:	4026      	ands	r6, r4
 800285a:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800285c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002860:	f10e 0e08 	add.w	lr, lr, #8
 8002864:	f850 c02e 	ldr.w	ip, [r0, lr, lsl #2]
 8002868:	f003 0607 	and.w	r6, r3, #7
 800286c:	00b6      	lsls	r6, r6, #2
 800286e:	270f      	movs	r7, #15
 8002870:	fa07 f606 	lsl.w	r6, r7, r6
 8002874:	ea2c 0606 	bic.w	r6, ip, r6
 8002878:	f840 602e 	str.w	r6, [r0, lr, lsl #2]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800287c:	6886      	ldr	r6, [r0, #8]
 800287e:	4026      	ands	r6, r4
 8002880:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002882:	6846      	ldr	r6, [r0, #4]
 8002884:	ea26 0202 	bic.w	r2, r6, r2
 8002888:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800288a:	68c2      	ldr	r2, [r0, #12]
 800288c:	4014      	ands	r4, r2
 800288e:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8002890:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8002894:	f10e 0402 	add.w	r4, lr, #2
 8002898:	4a2d      	ldr	r2, [pc, #180]	; (8002950 <HAL_GPIO_DeInit+0x130>)
 800289a:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4097      	lsls	r7, r2
 80028a6:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80028a8:	4e2a      	ldr	r6, [pc, #168]	; (8002954 <HAL_GPIO_DeInit+0x134>)
 80028aa:	42b0      	cmp	r0, r6
 80028ac:	d0c0      	beq.n	8002830 <HAL_GPIO_DeInit+0x10>
 80028ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028b2:	42b0      	cmp	r0, r6
 80028b4:	d021      	beq.n	80028fa <HAL_GPIO_DeInit+0xda>
 80028b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028ba:	42b0      	cmp	r0, r6
 80028bc:	d01f      	beq.n	80028fe <HAL_GPIO_DeInit+0xde>
 80028be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028c2:	42b0      	cmp	r0, r6
 80028c4:	d01d      	beq.n	8002902 <HAL_GPIO_DeInit+0xe2>
 80028c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028ca:	42b0      	cmp	r0, r6
 80028cc:	d01b      	beq.n	8002906 <HAL_GPIO_DeInit+0xe6>
 80028ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028d2:	42b0      	cmp	r0, r6
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_DeInit+0xea>
 80028d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028da:	42b0      	cmp	r0, r6
 80028dc:	d017      	beq.n	800290e <HAL_GPIO_DeInit+0xee>
 80028de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028e2:	42b0      	cmp	r0, r6
 80028e4:	d015      	beq.n	8002912 <HAL_GPIO_DeInit+0xf2>
 80028e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028ea:	42b0      	cmp	r0, r6
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_DeInit+0xf6>
 80028ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028f2:	42b0      	cmp	r0, r6
 80028f4:	d09a      	beq.n	800282c <HAL_GPIO_DeInit+0xc>
 80028f6:	260a      	movs	r6, #10
 80028f8:	e79b      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 80028fa:	2601      	movs	r6, #1
 80028fc:	e799      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 80028fe:	2602      	movs	r6, #2
 8002900:	e797      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 8002902:	2603      	movs	r6, #3
 8002904:	e795      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 8002906:	2604      	movs	r6, #4
 8002908:	e793      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 800290a:	2605      	movs	r6, #5
 800290c:	e791      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 800290e:	2606      	movs	r6, #6
 8002910:	e78f      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 8002912:	2607      	movs	r6, #7
 8002914:	e78d      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
 8002916:	2608      	movs	r6, #8
 8002918:	e78b      	b.n	8002832 <HAL_GPIO_DeInit+0x12>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800291a:	4e0d      	ldr	r6, [pc, #52]	; (8002950 <HAL_GPIO_DeInit+0x130>)
 800291c:	f10e 0202 	add.w	r2, lr, #2
 8002920:	f856 4022 	ldr.w	r4, [r6, r2, lsl #2]
 8002924:	ea24 0707 	bic.w	r7, r4, r7
 8002928:	f846 7022 	str.w	r7, [r6, r2, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800292c:	4c0a      	ldr	r4, [pc, #40]	; (8002958 <HAL_GPIO_DeInit+0x138>)
 800292e:	6826      	ldr	r6, [r4, #0]
 8002930:	43ea      	mvns	r2, r5
 8002932:	4016      	ands	r6, r2
 8002934:	6026      	str	r6, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002936:	6865      	ldr	r5, [r4, #4]
 8002938:	4015      	ands	r5, r2
 800293a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800293c:	68a5      	ldr	r5, [r4, #8]
 800293e:	4015      	ands	r5, r2
 8002940:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002942:	68e5      	ldr	r5, [r4, #12]
 8002944:	402a      	ands	r2, r5
 8002946:	60e2      	str	r2, [r4, #12]
 8002948:	e777      	b.n	800283a <HAL_GPIO_DeInit+0x1a>
	  }
    }
  }
}
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40013800 	.word	0x40013800
 8002954:	40020000 	.word	0x40020000
 8002958:	40013c00 	.word	0x40013c00

0800295c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	b912      	cbnz	r2, 8002964 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800295e:	0409      	lsls	r1, r1, #16
 8002960:	6181      	str	r1, [r0, #24]
 8002962:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002964:	6181      	str	r1, [r0, #24]
 8002966:	4770      	bx	lr

08002968 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002968:	6803      	ldr	r3, [r0, #0]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	f012 0f02 	tst.w	r2, #2
 8002970:	d001      	beq.n	8002976 <I2C_Flush_TXDR+0xe>
  {
     hi2c->Instance->TXDR = 0x00U;
 8002972:	2200      	movs	r2, #0
 8002974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002976:	6803      	ldr	r3, [r0, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	f012 0f01 	tst.w	r2, #1
 800297e:	d103      	bne.n	8002988 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	4770      	bx	lr

0800298a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800298a:	b410      	push	{r4}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800298c:	6804      	ldr	r4, [r0, #0]
 800298e:	6860      	ldr	r0, [r4, #4]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002990:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8002994:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
 8002998:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800299c:	f020 0003 	bic.w	r0, r0, #3

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80029a0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80029a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80029a8:	4319      	orrs	r1, r3
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	4319      	orrs	r1, r3
 80029ae:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80029b0:	6061      	str	r1, [r4, #4]
}
 80029b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <I2C_IsAcknowledgeFailed>:
{
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029c0:	6803      	ldr	r3, [r0, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f013 0f10 	tst.w	r3, #16
 80029c8:	d017      	beq.n	80029fa <I2C_IsAcknowledgeFailed+0x42>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	f012 0f20 	tst.w	r2, #32
 80029d2:	d114      	bne.n	80029fe <I2C_IsAcknowledgeFailed+0x46>
      if(Timeout != HAL_MAX_DELAY)
 80029d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80029d8:	d0f7      	beq.n	80029ca <I2C_IsAcknowledgeFailed+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80029da:	b125      	cbz	r5, 80029e6 <I2C_IsAcknowledgeFailed+0x2e>
 80029dc:	f7ff f9e0 	bl	8001da0 <HAL_GetTick>
 80029e0:	1b80      	subs	r0, r0, r6
 80029e2:	4285      	cmp	r5, r0
 80029e4:	d2f1      	bcs.n	80029ca <I2C_IsAcknowledgeFailed+0x12>
          hi2c->State= HAL_I2C_STATE_READY;
 80029e6:	2320      	movs	r3, #32
 80029e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80029f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80029f6:	2003      	movs	r0, #3
 80029f8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80029fa:	2000      	movs	r0, #0
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fe:	2210      	movs	r2, #16
 8002a00:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	2520      	movs	r5, #32
 8002a06:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7ff ffad 	bl	8002968 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6853      	ldr	r3, [r2, #4]
 8002a12:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002a16:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002a1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a24:	2304      	movs	r3, #4
 8002a26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 8002a28:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002a32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
}
 8002a38:	bd70      	pop	{r4, r5, r6, pc}

08002a3a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002a3a:	b570      	push	{r4, r5, r6, lr}
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	460d      	mov	r5, r1
 8002a40:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f013 0f02 	tst.w	r3, #2
 8002a4a:	d11c      	bne.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4c:	4632      	mov	r2, r6
 8002a4e:	4629      	mov	r1, r5
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7ff ffb1 	bl	80029b8 <I2C_IsAcknowledgeFailed>
 8002a56:	b9c0      	cbnz	r0, 8002a8a <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8002a58:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a5c:	d0f1      	beq.n	8002a42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8002a5e:	b125      	cbz	r5, 8002a6a <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 8002a60:	f7ff f99e 	bl	8001da0 <HAL_GetTick>
 8002a64:	1b80      	subs	r0, r0, r6
 8002a66:	4285      	cmp	r5, r0
 8002a68:	d2eb      	bcs.n	8002a42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a6c:	f043 0320 	orr.w	r3, r3, #32
 8002a70:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State= HAL_I2C_STATE_READY;
 8002a72:	2320      	movs	r3, #32
 8002a74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002a7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002a82:	2003      	movs	r0, #3
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	bd70      	pop	{r4, r5, r6, pc}

08002a8e <I2C_WaitOnFlagUntilTimeout>:
{
 8002a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a90:	4605      	mov	r5, r0
 8002a92:	460f      	mov	r7, r1
 8002a94:	4616      	mov	r6, r2
 8002a96:	461c      	mov	r4, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	ea37 0303 	bics.w	r3, r7, r3
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	42b3      	cmp	r3, r6
 8002aa8:	d113      	bne.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0x44>
    if(Timeout != HAL_MAX_DELAY)
 8002aaa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002aae:	d0f3      	beq.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xa>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002ab0:	b12c      	cbz	r4, 8002abe <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ab2:	f7ff f975 	bl	8001da0 <HAL_GetTick>
 8002ab6:	9b06      	ldr	r3, [sp, #24]
 8002ab8:	1ac0      	subs	r0, r0, r3
 8002aba:	4284      	cmp	r4, r0
 8002abc:	d2ec      	bcs.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->State= HAL_I2C_STATE_READY;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002aca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8002ace:	2003      	movs	r0, #3
 8002ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002ad2:	2000      	movs	r0, #0
}
 8002ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ad6 <I2C_RequestMemoryWrite>:
{
 8002ad6:	b570      	push	{r4, r5, r6, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	4604      	mov	r4, r0
 8002adc:	4616      	mov	r6, r2
 8002ade:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aea:	b2ea      	uxtb	r2, r5
 8002aec:	f7ff ff4d 	bl	800298a <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af0:	9a07      	ldr	r2, [sp, #28]
 8002af2:	9906      	ldr	r1, [sp, #24]
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ffa0 	bl	8002a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002afa:	b140      	cbz	r0, 8002b0e <I2C_RequestMemoryWrite+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <I2C_RequestMemoryWrite+0x34>
      return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	b002      	add	sp, #8
 8002b08:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e7fa      	b.n	8002b04 <I2C_RequestMemoryWrite+0x2e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0e:	2d01      	cmp	r5, #1
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryWrite+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	0a32      	lsrs	r2, r6, #8
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b18:	9a07      	ldr	r2, [sp, #28]
 8002b1a:	9906      	ldr	r1, [sp, #24]
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff ff8c 	bl	8002a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b22:	b1b0      	cbz	r0, 8002b52 <I2C_RequestMemoryWrite+0x7c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d011      	beq.n	8002b4e <I2C_RequestMemoryWrite+0x78>
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e7ea      	b.n	8002b04 <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	b2f6      	uxtb	r6, r6
 8002b32:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	9b07      	ldr	r3, [sp, #28]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	9b06      	ldr	r3, [sp, #24]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7ff ffa5 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d0dc      	beq.n	8002b04 <I2C_RequestMemoryWrite+0x2e>
    return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e7da      	b.n	8002b04 <I2C_RequestMemoryWrite+0x2e>
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e7d8      	b.n	8002b04 <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	b2f6      	uxtb	r6, r6
 8002b56:	629e      	str	r6, [r3, #40]	; 0x28
 8002b58:	e7ec      	b.n	8002b34 <I2C_RequestMemoryWrite+0x5e>

08002b5a <I2C_RequestMemoryRead>:
{
 8002b5a:	b570      	push	{r4, r5, r6, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4616      	mov	r6, r2
 8002b62:	461d      	mov	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	b2ea      	uxtb	r2, r5
 8002b6e:	f7ff ff0c 	bl	800298a <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b72:	9a07      	ldr	r2, [sp, #28]
 8002b74:	9906      	ldr	r1, [sp, #24]
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7ff ff5f 	bl	8002a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7c:	b140      	cbz	r0, 8002b90 <I2C_RequestMemoryRead+0x36>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d003      	beq.n	8002b8c <I2C_RequestMemoryRead+0x32>
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e7fa      	b.n	8002b86 <I2C_RequestMemoryRead+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b90:	2d01      	cmp	r5, #1
 8002b92:	d00d      	beq.n	8002bb0 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	0a32      	lsrs	r2, r6, #8
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b9a:	9a07      	ldr	r2, [sp, #28]
 8002b9c:	9906      	ldr	r1, [sp, #24]
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff ff4b 	bl	8002a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba4:	b1b0      	cbz	r0, 8002bd4 <I2C_RequestMemoryRead+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d011      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x76>
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e7ea      	b.n	8002b86 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	b2f6      	uxtb	r6, r6
 8002bb4:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb6:	9b07      	ldr	r3, [sp, #28]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	9b06      	ldr	r3, [sp, #24]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2140      	movs	r1, #64	; 0x40
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7ff ff64 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	d0dc      	beq.n	8002b86 <I2C_RequestMemoryRead+0x2c>
    return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e7da      	b.n	8002b86 <I2C_RequestMemoryRead+0x2c>
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e7d8      	b.n	8002b86 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b2f6      	uxtb	r6, r6
 8002bd8:	629e      	str	r6, [r3, #40]	; 0x28
 8002bda:	e7ec      	b.n	8002bb6 <I2C_RequestMemoryRead+0x5c>

08002bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4605      	mov	r5, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	f013 0f20 	tst.w	r3, #32
 8002bec:	d119      	bne.n	8002c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	4632      	mov	r2, r6
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f7ff fee0 	bl	80029b8 <I2C_IsAcknowledgeFailed>
 8002bf8:	b9a8      	cbnz	r0, 8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8002bfa:	b124      	cbz	r4, 8002c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
 8002bfc:	f7ff f8d0 	bl	8001da0 <HAL_GetTick>
 8002c00:	1b80      	subs	r0, r0, r6
 8002c02:	4284      	cmp	r4, r0
 8002c04:	d2ee      	bcs.n	8002be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002c08:	f043 0320 	orr.w	r3, r3, #32
 8002c0c:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c1a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_TIMEOUT;
 8002c1e:	2003      	movs	r0, #3
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8002c22:	2000      	movs	r0, #0
 8002c24:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
}
 8002c28:	bd70      	pop	{r4, r5, r6, pc}

08002c2a <HAL_I2C_MspInit>:
{
 8002c2a:	4770      	bx	lr

08002c2c <HAL_I2C_Init>:
  if(hi2c == NULL)
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d057      	beq.n	8002ce0 <HAL_I2C_Init+0xb4>
{
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002c34:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d041      	beq.n	8002cc0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	2324      	movs	r3, #36	; 0x24
 8002c3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002c54:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	6893      	ldr	r3, [r2, #8]
 8002c5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c5e:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c60:	68e3      	ldr	r3, [r4, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d031      	beq.n	8002cca <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	68a3      	ldr	r3, [r4, #8]
 8002c6a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002c6e:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c70:	68e3      	ldr	r3, [r4, #12]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d02f      	beq.n	8002cd6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	6851      	ldr	r1, [r2, #4]
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_I2C_Init+0xb8>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	68d3      	ldr	r3, [r2, #12]
 8002c84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c88:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	6961      	ldr	r1, [r4, #20]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	69a1      	ldr	r1, [r4, #24]
 8002c94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c98:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	69e3      	ldr	r3, [r4, #28]
 8002c9e:	6a21      	ldr	r1, [r4, #32]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cae:	2000      	movs	r0, #0
 8002cb0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cba:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002cbe:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002cc0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002cc4:	f7ff ffb1 	bl	8002c2a <HAL_I2C_MspInit>
 8002cc8:	e7b8      	b.n	8002c3c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	68a3      	ldr	r3, [r4, #8]
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	e7cc      	b.n	8002c70 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e7ca      	b.n	8002c76 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	4770      	bx	lr
 8002ce4:	02008000 	.word	0x02008000

08002ce8 <HAL_I2C_MspDeInit>:
{
 8002ce8:	4770      	bx	lr

08002cea <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8002cea:	b1a8      	cbz	r0, 8002d18 <HAL_I2C_DeInit+0x2e>
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	2324      	movs	r3, #36	; 0x24
 8002cf2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002cf6:	6802      	ldr	r2, [r0, #0]
 8002cf8:	6813      	ldr	r3, [r2, #0]
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002d00:	f7ff fff2 	bl	8002ce8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d04:	2000      	movs	r0, #0
 8002d06:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002d08:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 8002d12:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002d16:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d18:	2001      	movs	r0, #1
 8002d1a:	4770      	bx	lr

08002d1c <HAL_I2C_Mem_Write>:
{
 8002d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002d26:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002d2a:	b2e4      	uxtb	r4, r4
 8002d2c:	2c20      	cmp	r4, #32
 8002d2e:	d004      	beq.n	8002d3a <HAL_I2C_Mem_Write+0x1e>
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	b002      	add	sp, #8
 8002d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((pData == NULL) || (Size == 0U))
 8002d3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	bf18      	it	ne
 8002d40:	2c00      	cmpne	r4, #0
 8002d42:	f000 80c9 	beq.w	8002ed8 <HAL_I2C_Mem_Write+0x1bc>
    __HAL_LOCK(hi2c);
 8002d46:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002d4a:	2c01      	cmp	r4, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Mem_Write+0x36>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e7ef      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
 8002d52:	4698      	mov	r8, r3
 8002d54:	4691      	mov	r9, r2
 8002d56:	460e      	mov	r6, r1
 8002d58:	4604      	mov	r4, r0
 8002d5a:	f04f 0a01 	mov.w	sl, #1
 8002d5e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002d62:	f7ff f81d 	bl	8001da0 <HAL_GetTick>
 8002d66:	4607      	mov	r7, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d68:	9000      	str	r0, [sp, #0]
 8002d6a:	2319      	movs	r3, #25
 8002d6c:	4652      	mov	r2, sl
 8002d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff fe8b 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 8002d78:	b108      	cbz	r0, 8002d7e <HAL_I2C_Mem_Write+0x62>
      return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e7d9      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d7e:	2321      	movs	r3, #33	; 0x21
 8002d80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d90:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d92:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d94:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d96:	9701      	str	r7, [sp, #4]
 8002d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4643      	mov	r3, r8
 8002d9e:	464a      	mov	r2, r9
 8002da0:	4631      	mov	r1, r6
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7ff fe97 	bl	8002ad6 <I2C_RequestMemoryWrite>
 8002da8:	b160      	cbz	r0, 8002dc4 <HAL_I2C_Mem_Write+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d004      	beq.n	8002dba <HAL_I2C_Mem_Write+0x9e>
        __HAL_UNLOCK(hi2c);
 8002db0:	2300      	movs	r3, #0
 8002db2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e7bb      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
        __HAL_UNLOCK(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002dc0:	4653      	mov	r3, sl
 8002dc2:	e7b6      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2bff      	cmp	r3, #255	; 0xff
 8002dca:	d90a      	bls.n	8002de2 <HAL_I2C_Mem_Write+0xc6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dcc:	22ff      	movs	r2, #255	; 0xff
 8002dce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd8:	4631      	mov	r1, r6
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff fdd5 	bl	800298a <I2C_TransferConfig>
 8002de0:	e023      	b.n	8002e2a <HAL_I2C_Mem_Write+0x10e>
      hi2c->XferSize = hi2c->XferCount;
 8002de2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002de4:	b292      	uxth	r2, r2
 8002de6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	4631      	mov	r1, r6
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff fdc8 	bl	800298a <I2C_TransferConfig>
 8002dfa:	e016      	b.n	8002e2a <HAL_I2C_Mem_Write+0x10e>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Write+0xea>
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e795      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e793      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
          hi2c->XferSize = hi2c->XferCount;
 8002e0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e10:	2300      	movs	r3, #0
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f7ff fdb4 	bl	800298a <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8002e22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d032      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x174>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	463a      	mov	r2, r7
 8002e2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7ff fe03 	bl	8002a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d1e1      	bne.n	8002dfc <HAL_I2C_Mem_Write+0xe0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e3c:	1c59      	adds	r1, r3, #1
 8002e3e:	6261      	str	r1, [r4, #36]	; 0x24
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8002e44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	8523      	strh	r3, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e3      	bne.n	8002e22 <HAL_I2C_Mem_Write+0x106>
 8002e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0df      	beq.n	8002e22 <HAL_I2C_Mem_Write+0x106>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e62:	9700      	str	r7, [sp, #0]
 8002e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e66:	2200      	movs	r2, #0
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff fe0f 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 8002e70:	bba0      	cbnz	r0, 8002edc <HAL_I2C_Mem_Write+0x1c0>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2bff      	cmp	r3, #255	; 0xff
 8002e78:	d9c7      	bls.n	8002e0a <HAL_I2C_Mem_Write+0xee>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e86:	4631      	mov	r1, r6
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7ff fd7e 	bl	800298a <I2C_TransferConfig>
 8002e8e:	e7c8      	b.n	8002e22 <HAL_I2C_Mem_Write+0x106>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	463a      	mov	r2, r7
 8002e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff fea1 	bl	8002bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	b130      	cbz	r0, 8002eac <HAL_I2C_Mem_Write+0x190>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_Mem_Write+0x18c>
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e744      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e742      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	2120      	movs	r1, #32
 8002eb0:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	6842      	ldr	r2, [r0, #4]
 8002eb6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002eba:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ebe:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002ed2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8002ed6:	e72c      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e72a      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e728      	b.n	8002d32 <HAL_I2C_Mem_Write+0x16>

08002ee0 <HAL_I2C_Mem_Read>:
{
 8002ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002eea:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002eee:	b2e4      	uxtb	r4, r4
 8002ef0:	2c20      	cmp	r4, #32
 8002ef2:	d004      	beq.n	8002efe <HAL_I2C_Mem_Read+0x1e>
    return HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	b002      	add	sp, #8
 8002efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((pData == NULL) || (Size == 0U))
 8002efe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	bf18      	it	ne
 8002f04:	2c00      	cmpne	r4, #0
 8002f06:	f000 80c6 	beq.w	8003096 <HAL_I2C_Mem_Read+0x1b6>
    __HAL_LOCK(hi2c);
 8002f0a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8002f0e:	2c01      	cmp	r4, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x36>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e7ef      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
 8002f16:	4698      	mov	r8, r3
 8002f18:	4691      	mov	r9, r2
 8002f1a:	460e      	mov	r6, r1
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	f04f 0a01 	mov.w	sl, #1
 8002f22:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002f26:	f7fe ff3b 	bl	8001da0 <HAL_GetTick>
 8002f2a:	4607      	mov	r7, r0
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f2c:	9000      	str	r0, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	4652      	mov	r2, sl
 8002f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff fda9 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	b108      	cbz	r0, 8002f42 <HAL_I2C_Mem_Read+0x62>
      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e7d9      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f42:	2322      	movs	r3, #34	; 0x22
 8002f44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f54:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f56:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f58:	6363      	str	r3, [r4, #52]	; 0x34
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f5a:	9701      	str	r7, [sp, #4]
 8002f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4643      	mov	r3, r8
 8002f62:	464a      	mov	r2, r9
 8002f64:	4631      	mov	r1, r6
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7ff fdf7 	bl	8002b5a <I2C_RequestMemoryRead>
 8002f6c:	b160      	cbz	r0, 8002f88 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d004      	beq.n	8002f7e <HAL_I2C_Mem_Read+0x9e>
        __HAL_UNLOCK(hi2c);
 8002f74:	2300      	movs	r3, #0
 8002f76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e7bb      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
        __HAL_UNLOCK(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002f84:	4653      	mov	r3, sl
 8002f86:	e7b6      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2bff      	cmp	r3, #255	; 0xff
 8002f8e:	d90b      	bls.n	8002fa8 <HAL_I2C_Mem_Read+0xc8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f94:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7ff fcf2 	bl	800298a <I2C_TransferConfig>
 8002fa6:	e01d      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x104>
      hi2c->XferSize = hi2c->XferCount;
 8002fa8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002faa:	b292      	uxth	r2, r2
 8002fac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002fae:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	4631      	mov	r1, r6
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff fce4 	bl	800298a <I2C_TransferConfig>
 8002fc2:	e00f      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x104>
          hi2c->XferSize = hi2c->XferCount;
 8002fc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4631      	mov	r1, r6
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff fcd7 	bl	800298a <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8002fdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d034      	beq.n	800304e <HAL_I2C_Mem_Read+0x16e>
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fe4:	9700      	str	r7, [sp, #0]
 8002fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2104      	movs	r1, #4
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fd4e 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d151      	bne.n	800309a <HAL_I2C_Mem_Read+0x1ba>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8002ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	6262      	str	r2, [r4, #36]	; 0x24
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003000:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8003002:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003004:	3a01      	subs	r2, #1
 8003006:	b292      	uxth	r2, r2
 8003008:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800300a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29b      	uxth	r3, r3
 8003012:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8003014:	2a00      	cmp	r2, #0
 8003016:	d1e1      	bne.n	8002fdc <HAL_I2C_Mem_Read+0xfc>
 8003018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0dd      	beq.n	8002fdc <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003020:	9700      	str	r7, [sp, #0]
 8003022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003024:	2180      	movs	r1, #128	; 0x80
 8003026:	4620      	mov	r0, r4
 8003028:	f7ff fd31 	bl	8002a8e <I2C_WaitOnFlagUntilTimeout>
 800302c:	2800      	cmp	r0, #0
 800302e:	d136      	bne.n	800309e <HAL_I2C_Mem_Read+0x1be>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8003030:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2bff      	cmp	r3, #255	; 0xff
 8003036:	d9c5      	bls.n	8002fc4 <HAL_I2C_Mem_Read+0xe4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003038:	22ff      	movs	r2, #255	; 0xff
 800303a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003044:	4631      	mov	r1, r6
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff fc9f 	bl	800298a <I2C_TransferConfig>
 800304c:	e7c6      	b.n	8002fdc <HAL_I2C_Mem_Read+0xfc>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304e:	463a      	mov	r2, r7
 8003050:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff fdc2 	bl	8002bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	b130      	cbz	r0, 800306a <HAL_I2C_Mem_Read+0x18a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800305e:	2b04      	cmp	r3, #4
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Read+0x186>
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e747      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e745      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	2120      	movs	r1, #32
 800306e:	61d1      	str	r1, [r2, #28]
    I2C_RESET_CR2(hi2c);
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	6842      	ldr	r2, [r0, #4]
 8003074:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003078:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800307c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	6042      	str	r2, [r0, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308a:	2200      	movs	r2, #0
 800308c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003090:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_OK;
 8003094:	e72f      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
      return  HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e72d      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e72b      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e729      	b.n	8002ef6 <HAL_I2C_Mem_Read+0x16>

080030a2 <HAL_I2C_GetState>:
  return hi2c->State;
 80030a2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80030a6:	4770      	bx	lr

080030a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030a8:	b510      	push	{r4, lr}
 80030aa:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_PWREx_EnableOverDrive+0x74>)
 80030ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_PWREx_EnableOverDrive+0x78>)
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ca:	f7fe fe69 	bl	8001da0 <HAL_GetTick>
 80030ce:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_PWREx_EnableOverDrive+0x78>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80030d8:	d108      	bne.n	80030ec <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030da:	f7fe fe61 	bl	8001da0 <HAL_GetTick>
 80030de:	1b00      	subs	r0, r0, r4
 80030e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80030e4:	d9f4      	bls.n	80030d0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80030e6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80030e8:	b002      	add	sp, #8
 80030ea:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030ec:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <HAL_PWREx_EnableOverDrive+0x78>)
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80030f6:	f7fe fe53 	bl	8001da0 <HAL_GetTick>
 80030fa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_PWREx_EnableOverDrive+0x78>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003104:	d107      	bne.n	8003116 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003106:	f7fe fe4b 	bl	8001da0 <HAL_GetTick>
 800310a:	1b00      	subs	r0, r0, r4
 800310c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003110:	d9f4      	bls.n	80030fc <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8003112:	2003      	movs	r0, #3
 8003114:	e7e8      	b.n	80030e8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003116:	2000      	movs	r0, #0
 8003118:	e7e6      	b.n	80030e8 <HAL_PWREx_EnableOverDrive+0x40>
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000

08003124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312a:	6803      	ldr	r3, [r0, #0]
 800312c:	f013 0f01 	tst.w	r3, #1
 8003130:	d03a      	beq.n	80031a8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003132:	4baa      	ldr	r3, [pc, #680]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d02b      	beq.n	8003196 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4ba7      	ldr	r3, [pc, #668]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d020      	beq.n	800318c <HAL_RCC_OscConfig+0x68>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d051      	beq.n	80031f6 <HAL_RCC_OscConfig+0xd2>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d155      	bne.n	8003202 <HAL_RCC_OscConfig+0xde>
 8003156:	4ba1      	ldr	r3, [pc, #644]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003166:	601a      	str	r2, [r3, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d060      	beq.n	8003230 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe fe17 	bl	8001da0 <HAL_GetTick>
 8003172:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003174:	4b99      	ldr	r3, [pc, #612]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800317c:	d114      	bne.n	80031a8 <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317e:	f7fe fe0f 	bl	8001da0 <HAL_GetTick>
 8003182:	1b40      	subs	r0, r0, r5
 8003184:	2864      	cmp	r0, #100	; 0x64
 8003186:	d9f5      	bls.n	8003174 <HAL_RCC_OscConfig+0x50>
          {
            return HAL_TIMEOUT;
 8003188:	2003      	movs	r0, #3
 800318a:	e1d4      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318c:	4b93      	ldr	r3, [pc, #588]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003194:	d0d9      	beq.n	800314a <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003196:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800319e:	d003      	beq.n	80031a8 <HAL_RCC_OscConfig+0x84>
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 81c4 	beq.w	8003530 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f013 0f02 	tst.w	r3, #2
 80031ae:	d06b      	beq.n	8003288 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031b0:	4b8a      	ldr	r3, [pc, #552]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f013 0f0c 	tst.w	r3, #12
 80031b8:	d04e      	beq.n	8003258 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d043      	beq.n	800324e <HAL_RCC_OscConfig+0x12a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8087 	beq.w	80032dc <HAL_RCC_OscConfig+0x1b8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ce:	4a83      	ldr	r2, [pc, #524]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe fde2 	bl	8001da0 <HAL_GetTick>
 80031dc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f013 0f02 	tst.w	r3, #2
 80031e6:	d16a      	bne.n	80032be <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fdda 	bl	8001da0 <HAL_GetTick>
 80031ec:	1b40      	subs	r0, r0, r5
 80031ee:	2802      	cmp	r0, #2
 80031f0:	d9f5      	bls.n	80031de <HAL_RCC_OscConfig+0xba>
          {
            return HAL_TIMEOUT;
 80031f2:	2003      	movs	r0, #3
 80031f4:	e19f      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	4a79      	ldr	r2, [pc, #484]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e7b2      	b.n	8003168 <HAL_RCC_OscConfig+0x44>
 8003202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003206:	d009      	beq.n	800321c <HAL_RCC_OscConfig+0xf8>
 8003208:	4b74      	ldr	r3, [pc, #464]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e7a5      	b.n	8003168 <HAL_RCC_OscConfig+0x44>
 800321c:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e79b      	b.n	8003168 <HAL_RCC_OscConfig+0x44>
        tickstart = HAL_GetTick();
 8003230:	f7fe fdb6 	bl	8001da0 <HAL_GetTick>
 8003234:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	4b69      	ldr	r3, [pc, #420]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800323e:	d0b3      	beq.n	80031a8 <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe fdae 	bl	8001da0 <HAL_GetTick>
 8003244:	1b40      	subs	r0, r0, r5
 8003246:	2864      	cmp	r0, #100	; 0x64
 8003248:	d9f5      	bls.n	8003236 <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 800324a:	2003      	movs	r0, #3
 800324c:	e173      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003256:	d1b6      	bne.n	80031c6 <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003258:	4b60      	ldr	r3, [pc, #384]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f013 0f02 	tst.w	r3, #2
 8003260:	d004      	beq.n	800326c <HAL_RCC_OscConfig+0x148>
 8003262:	68e3      	ldr	r3, [r4, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d001      	beq.n	800326c <HAL_RCC_OscConfig+0x148>
        return HAL_ERROR;
 8003268:	2001      	movs	r0, #1
 800326a:	e164      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	485b      	ldr	r0, [pc, #364]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 800326e:	6803      	ldr	r3, [r0, #0]
 8003270:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003274:	6921      	ldr	r1, [r4, #16]
 8003276:	22f8      	movs	r2, #248	; 0xf8
 8003278:	fa92 f2a2 	rbit	r2, r2
 800327c:	fab2 f282 	clz	r2, r2
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	4313      	orrs	r3, r2
 8003286:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	f013 0f08 	tst.w	r3, #8
 800328e:	d04d      	beq.n	800332c <HAL_RCC_OscConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003290:	6963      	ldr	r3, [r4, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d036      	beq.n	8003304 <HAL_RCC_OscConfig+0x1e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003298:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fd7e 	bl	8001da0 <HAL_GetTick>
 80032a4:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	4b4d      	ldr	r3, [pc, #308]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	f013 0f02 	tst.w	r3, #2
 80032ae:	d13d      	bne.n	800332c <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe fd76 	bl	8001da0 <HAL_GetTick>
 80032b4:	1b40      	subs	r0, r0, r5
 80032b6:	2802      	cmp	r0, #2
 80032b8:	d9f5      	bls.n	80032a6 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80032ba:	2003      	movs	r0, #3
 80032bc:	e13b      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032be:	4847      	ldr	r0, [pc, #284]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80032c0:	6803      	ldr	r3, [r0, #0]
 80032c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032c6:	6921      	ldr	r1, [r4, #16]
 80032c8:	22f8      	movs	r2, #248	; 0xf8
 80032ca:	fa92 f2a2 	rbit	r2, r2
 80032ce:	fab2 f282 	clz	r2, r2
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	4313      	orrs	r3, r2
 80032d8:	6003      	str	r3, [r0, #0]
 80032da:	e7d5      	b.n	8003288 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80032dc:	4a3f      	ldr	r2, [pc, #252]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80032de:	6813      	ldr	r3, [r2, #0]
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032e6:	f7fe fd5b 	bl	8001da0 <HAL_GetTick>
 80032ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f013 0f02 	tst.w	r3, #2
 80032f4:	d0c8      	beq.n	8003288 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe fd53 	bl	8001da0 <HAL_GetTick>
 80032fa:	1b40      	subs	r0, r0, r5
 80032fc:	2802      	cmp	r0, #2
 80032fe:	d9f5      	bls.n	80032ec <HAL_RCC_OscConfig+0x1c8>
            return HAL_TIMEOUT;
 8003300:	2003      	movs	r0, #3
 8003302:	e118      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003304:	4a35      	ldr	r2, [pc, #212]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003306:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fd47 	bl	8001da0 <HAL_GetTick>
 8003312:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	f013 0f02 	tst.w	r3, #2
 800331c:	d006      	beq.n	800332c <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331e:	f7fe fd3f 	bl	8001da0 <HAL_GetTick>
 8003322:	1b40      	subs	r0, r0, r5
 8003324:	2802      	cmp	r0, #2
 8003326:	d9f5      	bls.n	8003314 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003328:	2003      	movs	r0, #3
 800332a:	e104      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	f013 0f04 	tst.w	r3, #4
 8003332:	d07f      	beq.n	8003434 <HAL_RCC_OscConfig+0x310>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003334:	4b29      	ldr	r3, [pc, #164]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800333c:	d131      	bne.n	80033a2 <HAL_RCC_OscConfig+0x27e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003342:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003352:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_OscConfig+0x2bc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f413 7f80 	tst.w	r3, #256	; 0x100
 800335c:	d023      	beq.n	80033a6 <HAL_RCC_OscConfig+0x282>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d034      	beq.n	80033ce <HAL_RCC_OscConfig+0x2aa>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d13d      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2c0>
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 800336a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	671a      	str	r2, [r3, #112]	; 0x70
 8003372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003374:	f022 0204 	bic.w	r2, r2, #4
 8003378:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337a:	68a3      	ldr	r3, [r4, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d047      	beq.n	8003410 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe fd0e 	bl	8001da0 <HAL_GetTick>
 8003384:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	f013 0f02 	tst.w	r3, #2
 800338e:	d150      	bne.n	8003432 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fd06 	bl	8001da0 <HAL_GetTick>
 8003394:	1b80      	subs	r0, r0, r6
 8003396:	f241 3388 	movw	r3, #5000	; 0x1388
 800339a:	4298      	cmp	r0, r3
 800339c:	d9f3      	bls.n	8003386 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 800339e:	2003      	movs	r0, #3
 80033a0:	e0c9      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
  FlagStatus pwrclkchanged = RESET;
 80033a2:	2500      	movs	r5, #0
 80033a4:	e7d6      	b.n	8003354 <HAL_RCC_OscConfig+0x230>
      PWR->CR1 |= PWR_CR1_DBP;
 80033a6:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCC_OscConfig+0x2bc>)
 80033a8:	6813      	ldr	r3, [r2, #0]
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80033b0:	f7fe fcf6 	bl	8001da0 <HAL_GetTick>
 80033b4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RCC_OscConfig+0x2bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033be:	d1ce      	bne.n	800335e <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033c0:	f7fe fcee 	bl	8001da0 <HAL_GetTick>
 80033c4:	1b80      	subs	r0, r0, r6
 80033c6:	2864      	cmp	r0, #100	; 0x64
 80033c8:	d9f5      	bls.n	80033b6 <HAL_RCC_OscConfig+0x292>
          return HAL_TIMEOUT;
 80033ca:	2003      	movs	r0, #3
 80033cc:	e0b3      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ce:	4a03      	ldr	r2, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x2b8>)
 80033d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e7cf      	b.n	800337a <HAL_RCC_OscConfig+0x256>
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40007000 	.word	0x40007000
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d009      	beq.n	80033fc <HAL_RCC_OscConfig+0x2d8>
 80033e8:	4b55      	ldr	r3, [pc, #340]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 80033ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	671a      	str	r2, [r3, #112]	; 0x70
 80033f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f4:	f022 0204 	bic.w	r2, r2, #4
 80033f8:	671a      	str	r2, [r3, #112]	; 0x70
 80033fa:	e7be      	b.n	800337a <HAL_RCC_OscConfig+0x256>
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 80033fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003400:	f042 0204 	orr.w	r2, r2, #4
 8003404:	671a      	str	r2, [r3, #112]	; 0x70
 8003406:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	671a      	str	r2, [r3, #112]	; 0x70
 800340e:	e7b4      	b.n	800337a <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe fcc6 	bl	8001da0 <HAL_GetTick>
 8003414:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	f013 0f02 	tst.w	r3, #2
 800341e:	d008      	beq.n	8003432 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fcbe 	bl	8001da0 <HAL_GetTick>
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	f241 3388 	movw	r3, #5000	; 0x1388
 800342a:	4298      	cmp	r0, r3
 800342c:	d9f3      	bls.n	8003416 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800342e:	2003      	movs	r0, #3
 8003430:	e081      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003432:	b9f5      	cbnz	r5, 8003472 <HAL_RCC_OscConfig+0x34e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003434:	69a3      	ldr	r3, [r4, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d07c      	beq.n	8003534 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343a:	4a41      	ldr	r2, [pc, #260]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	f002 020c 	and.w	r2, r2, #12
 8003442:	2a08      	cmp	r2, #8
 8003444:	d079      	beq.n	800353a <HAL_RCC_OscConfig+0x416>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	2b02      	cmp	r3, #2
 8003448:	d019      	beq.n	800347e <HAL_RCC_OscConfig+0x35a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4a3d      	ldr	r2, [pc, #244]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fca4 	bl	8001da0 <HAL_GetTick>
 8003458:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003462:	d063      	beq.n	800352c <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fc9c 	bl	8001da0 <HAL_GetTick>
 8003468:	1b00      	subs	r0, r0, r4
 800346a:	2802      	cmp	r0, #2
 800346c:	d9f5      	bls.n	800345a <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 800346e:	2003      	movs	r0, #3
 8003470:	e061      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4a33      	ldr	r2, [pc, #204]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 8003474:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347a:	6413      	str	r3, [r2, #64]	; 0x40
 800347c:	e7da      	b.n	8003434 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_PLL_DISABLE();
 800347e:	4a30      	ldr	r2, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003488:	f7fe fc8a 	bl	8001da0 <HAL_GetTick>
 800348c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	4b2c      	ldr	r3, [pc, #176]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003496:	d006      	beq.n	80034a6 <HAL_RCC_OscConfig+0x382>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fc82 	bl	8001da0 <HAL_GetTick>
 800349c:	1b40      	subs	r0, r0, r5
 800349e:	2802      	cmp	r0, #2
 80034a0:	d9f5      	bls.n	800348e <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 80034a2:	2003      	movs	r0, #3
 80034a4:	e047      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a6:	69e3      	ldr	r3, [r4, #28]
 80034a8:	6a22      	ldr	r2, [r4, #32]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034ae:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	fab2 f282 	clz	r2, r2
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	4313      	orrs	r3, r2
 80034c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80034c2:	0852      	lsrs	r2, r2, #1
 80034c4:	3a01      	subs	r2, #1
 80034c6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80034ca:	fa91 f1a1 	rbit	r1, r1
 80034ce:	fab1 f181 	clz	r1, r1
 80034d2:	408a      	lsls	r2, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80034d8:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80034dc:	fa92 f2a2 	rbit	r2, r2
 80034e0:	fab2 f282 	clz	r2, r2
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	4313      	orrs	r3, r2
 80034ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80034ec:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80034f0:	fa92 f2a2 	rbit	r2, r2
 80034f4:	fab2 f282 	clz	r2, r2
 80034f8:	fa01 f202 	lsl.w	r2, r1, r2
 80034fc:	4313      	orrs	r3, r2
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 8003500:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003508:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800350a:	f7fe fc49 	bl	8001da0 <HAL_GetTick>
 800350e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x41c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003518:	d106      	bne.n	8003528 <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fe fc41 	bl	8001da0 <HAL_GetTick>
 800351e:	1b00      	subs	r0, r0, r4
 8003520:	2802      	cmp	r0, #2
 8003522:	d9f5      	bls.n	8003510 <HAL_RCC_OscConfig+0x3ec>
            return HAL_TIMEOUT;
 8003524:	2003      	movs	r0, #3
 8003526:	e006      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003528:	2000      	movs	r0, #0
 800352a:	e004      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
 800352c:	2000      	movs	r0, #0
 800352e:	e002      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8003530:	2001      	movs	r0, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8003534:	2000      	movs	r0, #0
}
 8003536:	b002      	add	sp, #8
 8003538:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
 800353c:	e7fb      	b.n	8003536 <HAL_RCC_OscConfig+0x412>
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003544:	4b21      	ldr	r3, [pc, #132]	; (80035cc <HAL_RCC_GetSysClockFreq+0x88>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b04      	cmp	r3, #4
 800354e:	d03a      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x82>
 8003550:	2b08      	cmp	r3, #8
 8003552:	d001      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003554:	481e      	ldr	r0, [pc, #120]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003556:	4770      	bx	lr
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_RCC_GetSysClockFreq+0x88>)
 800355a:	6858      	ldr	r0, [r3, #4]
 800355c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003566:	d01e      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x90>)
 800356a:	fbb2 f2f0 	udiv	r2, r2, r0
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <HAL_RCC_GetSysClockFreq+0x88>)
 8003570:	6858      	ldr	r0, [r3, #4]
 8003572:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003576:	4018      	ands	r0, r3
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	40d8      	lsrs	r0, r3
 8003582:	fb00 f002 	mul.w	r0, r0, r2
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_RCC_GetSysClockFreq+0x88>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800358e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003592:	fa92 f2a2 	rbit	r2, r2
 8003596:	fab2 f282 	clz	r2, r2
 800359a:	40d3      	lsrs	r3, r2
 800359c:	3301      	adds	r3, #1
 800359e:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 80035a0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80035a4:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x8c>)
 80035a8:	fbb2 f2f0 	udiv	r2, r2, r0
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <HAL_RCC_GetSysClockFreq+0x88>)
 80035ae:	6858      	ldr	r0, [r3, #4]
 80035b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035b4:	4018      	ands	r0, r3
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	40d8      	lsrs	r0, r3
 80035c0:	fb00 f002 	mul.w	r0, r0, r2
 80035c4:	e7df      	b.n	8003586 <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x90>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	017d7840 	.word	0x017d7840

080035d8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80035d8:	4b5c      	ldr	r3, [pc, #368]	; (800374c <HAL_RCC_ClockConfig+0x174>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	428b      	cmp	r3, r1
 80035e2:	d20c      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e4:	4a59      	ldr	r2, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x174>)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	f023 030f 	bic.w	r3, r3, #15
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4299      	cmp	r1, r3
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80035fa:	2001      	movs	r0, #1
 80035fc:	4770      	bx	lr
{
 80035fe:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	f013 0f02 	tst.w	r3, #2
 8003606:	d006      	beq.n	8003616 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4a51      	ldr	r2, [pc, #324]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 800360a:	6893      	ldr	r3, [r2, #8]
 800360c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003610:	6884      	ldr	r4, [r0, #8]
 8003612:	4323      	orrs	r3, r4
 8003614:	6093      	str	r3, [r2, #8]
 8003616:	460d      	mov	r5, r1
 8003618:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	6803      	ldr	r3, [r0, #0]
 800361c:	f013 0f01 	tst.w	r3, #1
 8003620:	d052      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	6843      	ldr	r3, [r0, #4]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d023      	beq.n	8003670 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003628:	2b02      	cmp	r3, #2
 800362a:	d028      	beq.n	800367e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	4a48      	ldr	r2, [pc, #288]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	f012 0f02 	tst.w	r2, #2
 8003634:	f000 8088 	beq.w	8003748 <HAL_RCC_ClockConfig+0x170>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003638:	4945      	ldr	r1, [pc, #276]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 800363a:	688a      	ldr	r2, [r1, #8]
 800363c:	f022 0203 	bic.w	r2, r2, #3
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003644:	f7fe fbac 	bl	8001da0 <HAL_GetTick>
 8003648:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	6863      	ldr	r3, [r4, #4]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d01d      	beq.n	800368c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	2b02      	cmp	r3, #2
 8003652:	d02a      	beq.n	80036aa <HAL_RCC_ClockConfig+0xd2>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003654:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f013 0f0c 	tst.w	r3, #12
 800365c:	d034      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365e:	f7fe fb9f 	bl	8001da0 <HAL_GetTick>
 8003662:	1b80      	subs	r0, r0, r6
 8003664:	f241 3388 	movw	r3, #5000	; 0x1388
 8003668:	4298      	cmp	r0, r3
 800366a:	d9f3      	bls.n	8003654 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 800366c:	2003      	movs	r0, #3
 800366e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003670:	4a37      	ldr	r2, [pc, #220]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003678:	d1de      	bne.n	8003638 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800367a:	2001      	movs	r0, #1
 800367c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003686:	d1d7      	bne.n	8003638 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8003688:	2001      	movs	r0, #1
 800368a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800368c:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b04      	cmp	r3, #4
 8003696:	d017      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe fb82 	bl	8001da0 <HAL_GetTick>
 800369c:	1b80      	subs	r0, r0, r6
 800369e:	f241 3388 	movw	r3, #5000	; 0x1388
 80036a2:	4298      	cmp	r0, r3
 80036a4:	d9f2      	bls.n	800368c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80036a6:	2003      	movs	r0, #3
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d008      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b6:	f7fe fb73 	bl	8001da0 <HAL_GetTick>
 80036ba:	1b80      	subs	r0, r0, r6
 80036bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c0:	4298      	cmp	r0, r3
 80036c2:	d9f2      	bls.n	80036aa <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 80036c4:	2003      	movs	r0, #3
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80036c8:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCC_ClockConfig+0x174>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	429d      	cmp	r5, r3
 80036d2:	d20c      	bcs.n	80036ee <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_RCC_ClockConfig+0x174>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	f023 030f 	bic.w	r3, r3, #15
 80036dc:	432b      	orrs	r3, r5
 80036de:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	429d      	cmp	r5, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 80036ea:	2001      	movs	r0, #1
}
 80036ec:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	f013 0f04 	tst.w	r3, #4
 80036f4:	d006      	beq.n	8003704 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f6:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 80036f8:	6893      	ldr	r3, [r2, #8]
 80036fa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80036fe:	68e1      	ldr	r1, [r4, #12]
 8003700:	430b      	orrs	r3, r1
 8003702:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	f013 0f08 	tst.w	r3, #8
 800370a:	d007      	beq.n	800371c <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800370c:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 800370e:	6893      	ldr	r3, [r2, #8]
 8003710:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003714:	6921      	ldr	r1, [r4, #16]
 8003716:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800371a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800371c:	f7ff ff12 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x178>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003728:	22f0      	movs	r2, #240	; 0xf0
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	fab2 f282 	clz	r2, r2
 8003732:	40d3      	lsrs	r3, r2
 8003734:	4a07      	ldr	r2, [pc, #28]	; (8003754 <HAL_RCC_ClockConfig+0x17c>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	40d8      	lsrs	r0, r3
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCC_ClockConfig+0x180>)
 800373c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800373e:	2000      	movs	r0, #0
 8003740:	f7fe fb04 	bl	8001d4c <HAL_InitTick>
  return HAL_OK;
 8003744:	2000      	movs	r0, #0
 8003746:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	08006e38 	.word	0x08006e38
 8003758:	20000048 	.word	0x20000048

0800375c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800375c:	4b01      	ldr	r3, [pc, #4]	; (8003764 <HAL_RCC_GetHCLKFreq+0x8>)
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000048 	.word	0x20000048

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8003768:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800376a:	f7ff fff7 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003776:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800377a:	fa92 f2a2 	rbit	r2, r2
 800377e:	fab2 f282 	clz	r2, r2
 8003782:	40d3      	lsrs	r3, r2
 8003784:	4a02      	ldr	r2, [pc, #8]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
}
 8003788:	40d8      	lsrs	r0, r3
 800378a:	bd08      	pop	{r3, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	08006e48 	.word	0x08006e48

08003794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003794:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003796:	f7ff ffe1 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80037a2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80037a6:	fa92 f2a2 	rbit	r2, r2
 80037aa:	fab2 f282 	clz	r2, r2
 80037ae:	40d3      	lsrs	r3, r2
 80037b0:	4a02      	ldr	r2, [pc, #8]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
} 
 80037b4:	40d8      	lsrs	r0, r3
 80037b6:	bd08      	pop	{r3, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08006e48 	.word	0x08006e48

080037c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b083      	sub	sp, #12
 80037c4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037c6:	6803      	ldr	r3, [r0, #0]
 80037c8:	f013 0f01 	tst.w	r3, #1
 80037cc:	d00c      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ce:	4bb5      	ldr	r3, [pc, #724]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80037e2:	b1c3      	cbz	r3, 8003816 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80037e4:	2700      	movs	r7, #0
 80037e6:	e000      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80037e8:	2700      	movs	r7, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80037f0:	d015      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037f2:	4aac      	ldr	r2, [pc, #688]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037f4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80037f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80037fe:	430b      	orrs	r3, r1
 8003800:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003804:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380a:	d006      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8145 	beq.w	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  uint32_t pllsaiused = 0;
 8003812:	2500      	movs	r5, #0
 8003814:	e004      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8003816:	2701      	movs	r7, #1
 8003818:	e7e7      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 800381a:	2701      	movs	r7, #1
 800381c:	e7f6      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800381e:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003826:	d00f      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003828:	4a9e      	ldr	r2, [pc, #632]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800382a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800382e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003832:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003834:	430b      	orrs	r3, r1
 8003836:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800383a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003840:	f000 812e 	beq.w	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003844:	b903      	cbnz	r3, 8003848 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1; 
 8003846:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800384e:	d000      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {    
      plli2sused = 1; 
 8003850:	2701      	movs	r7, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003852:	f013 0f20 	tst.w	r3, #32
 8003856:	f040 8127 	bne.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f013 0f10 	tst.w	r3, #16
 8003860:	d00c      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003862:	4b90      	ldr	r3, [pc, #576]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003864:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003868:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800386c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003870:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003874:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003876:	430a      	orrs	r2, r1
 8003878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003884:	4a87      	ldr	r2, [pc, #540]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003886:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800388a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800388e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003890:	430b      	orrs	r3, r1
 8003892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800389c:	d008      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800389e:	4a81      	ldr	r2, [pc, #516]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038a4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80038a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80038aa:	430b      	orrs	r3, r1
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038b8:	4a7a      	ldr	r2, [pc, #488]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038be:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80038c4:	430b      	orrs	r3, r1
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038d2:	4a74      	ldr	r2, [pc, #464]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038d8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038dc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80038de:	430b      	orrs	r3, r1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ec:	4a6d      	ldr	r2, [pc, #436]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80038f8:	430b      	orrs	r3, r1
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003904:	d008      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003906:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003908:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800390c:	f023 030c 	bic.w	r3, r3, #12
 8003910:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003912:	430b      	orrs	r3, r1
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003920:	4a60      	ldr	r2, [pc, #384]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003922:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003926:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800392a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800392c:	430b      	orrs	r3, r1
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003938:	d008      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800393a:	4a5a      	ldr	r2, [pc, #360]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800393c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003940:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003944:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003946:	430b      	orrs	r3, r1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003952:	d008      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003954:	4a53      	ldr	r2, [pc, #332]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003956:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800395a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003960:	430b      	orrs	r3, r1
 8003962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800396c:	d008      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800396e:	4a4d      	ldr	r2, [pc, #308]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003970:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003974:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003978:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800397a:	430b      	orrs	r3, r1
 800397c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003986:	d008      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003988:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800398a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800398e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003992:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003994:	430b      	orrs	r3, r1
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039a2:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80039a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80039ac:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80039ae:	430b      	orrs	r3, r1
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80039ba:	d008      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039bc:	4a39      	ldr	r2, [pc, #228]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80039c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80039c8:	430b      	orrs	r3, r1
 80039ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80039d4:	d00d      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039d6:	4a33      	ldr	r2, [pc, #204]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80039dc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80039e0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80039e2:	430b      	orrs	r3, r1
 80039e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80039ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ee:	f000 80c1 	beq.w	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	f013 0f08 	tst.w	r3, #8
 80039f8:	d000      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1; 
 80039fa:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039fc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003a00:	d008      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a02:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a04:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a08:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003a0c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003a1a:	d009      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a1c:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003a36:	d009      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a38:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a42:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003a46:	430b      	orrs	r3, r1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003a52:	d009      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a54:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a56:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a5a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8003a62:	430b      	orrs	r3, r1
 8003a64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a6e:	d009      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a70:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a72:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a7a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a84:	2f00      	cmp	r7, #0
 8003a86:	d177      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a8e:	d073      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	f040 819b 	bne.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003a96:	2000      	movs	r0, #0
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1; 
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	e6bf      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8003aa0:	2701      	movs	r7, #1
 8003aa2:	e6cf      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003aa4:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4bc5      	ldr	r3, [pc, #788]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003abc:	4ac1      	ldr	r2, [pc, #772]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ac6:	f7fe f96b 	bl	8001da0 <HAL_GetTick>
 8003aca:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003acc:	4bbd      	ldr	r3, [pc, #756]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad6:	f7fe f963 	bl	8001da0 <HAL_GetTick>
 8003ada:	1b80      	subs	r0, r0, r6
 8003adc:	2864      	cmp	r0, #100	; 0x64
 8003ade:	d9f5      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	e7d9      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae4:	4bb6      	ldr	r3, [pc, #728]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003aec:	d015      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003aee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003af0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d010      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af8:	4bb1      	ldr	r3, [pc, #708]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003afc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b02:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003b06:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003b0a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003b0e:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003b10:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f013 0f01 	tst.w	r3, #1
 8003b18:	d112      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b1c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003b20:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003b24:	d01d      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8003b26:	4aa6      	ldr	r2, [pc, #664]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003b28:	6893      	ldr	r3, [r2, #8]
 8003b2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b2e:	6093      	str	r3, [r2, #8]
 8003b30:	49a3      	ldr	r1, [pc, #652]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003b32:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003b34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003b36:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	670b      	str	r3, [r1, #112]	; 0x70
 8003b3e:	e68c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8003b40:	f7fe f92e 	bl	8001da0 <HAL_GetTick>
 8003b44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	4b9e      	ldr	r3, [pc, #632]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f013 0f02 	tst.w	r3, #2
 8003b4e:	d1e4      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fe f926 	bl	8001da0 <HAL_GetTick>
 8003b54:	1b80      	subs	r0, r0, r6
 8003b56:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	d9f3      	bls.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3
 8003b60:	e79a      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b62:	4897      	ldr	r0, [pc, #604]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003b64:	6882      	ldr	r2, [r0, #8]
 8003b66:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003b6a:	4997      	ldr	r1, [pc, #604]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 8003b6c:	4019      	ands	r1, r3
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	6082      	str	r2, [r0, #8]
 8003b72:	e7dd      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 8003b74:	2501      	movs	r5, #1
 8003b76:	e73c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();  
 8003b78:	4a91      	ldr	r2, [pc, #580]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003b82:	f7fe f90d 	bl	8001da0 <HAL_GetTick>
 8003b86:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b88:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003b90:	d006      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b92:	f7fe f905 	bl	8001da0 <HAL_GetTick>
 8003b96:	1b80      	subs	r0, r0, r6
 8003b98:	2864      	cmp	r0, #100	; 0x64
 8003b9a:	d9f5      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	e77b      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	f013 0f01 	tst.w	r3, #1
 8003ba6:	d03a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8003ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003baa:	bbc3      	cbnz	r3, 8003c1e <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003bac:	4e84      	ldr	r6, [pc, #528]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003bae:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8003bb2:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
 8003bb6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003bba:	fa90 f3a0 	rbit	r3, r0
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	fa2e fe03 	lsr.w	lr, lr, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8003bc6:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8003bca:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003bce:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8003bd2:	fa91 f3a1 	rbit	r3, r1
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003be2:	fa97 f7a7 	rbit	r7, r7
 8003be6:	fab7 f787 	clz	r7, r7
 8003bea:	40bb      	lsls	r3, r7
 8003bec:	fa90 f0a0 	rbit	r0, r0
 8003bf0:	fab0 f080 	clz	r0, r0
 8003bf4:	fa0e f000 	lsl.w	r0, lr, r0
 8003bf8:	4303      	orrs	r3, r0
 8003bfa:	fa91 f1a1 	rbit	r1, r1
 8003bfe:	fab1 f181 	clz	r1, r1
 8003c02:	408a      	lsls	r2, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	68a1      	ldr	r1, [r4, #8]
 8003c08:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003c0c:	fa92 f2a2 	rbit	r2, r2
 8003c10:	fab2 f282 	clz	r2, r2
 8003c14:	fa01 f202 	lsl.w	r2, r1, r2
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003c24:	d004      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x470>
 8003c26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003c2c:	f000 8085 	beq.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003c30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3c:	d07d      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c44:	d037      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8003c46:	4e5e      	ldr	r6, [pc, #376]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003c48:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8003c4c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003c50:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 8003c54:	fa9e f3ae 	rbit	r3, lr
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003c5e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8003c62:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003c66:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8003c6a:	fa90 f3a0 	rbit	r3, r0
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c74:	6863      	ldr	r3, [r4, #4]
 8003c76:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003c7a:	fa97 f7a7 	rbit	r7, r7
 8003c7e:	fab7 f787 	clz	r7, r7
 8003c82:	40bb      	lsls	r3, r7
 8003c84:	6927      	ldr	r7, [r4, #16]
 8003c86:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8003c8a:	fa9c fcac 	rbit	ip, ip
 8003c8e:	fabc fc8c 	clz	ip, ip
 8003c92:	fa07 f70c 	lsl.w	r7, r7, ip
 8003c96:	433b      	orrs	r3, r7
 8003c98:	fa9e feae 	rbit	lr, lr
 8003c9c:	fabe fe8e 	clz	lr, lr
 8003ca0:	fa01 f10e 	lsl.w	r1, r1, lr
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	fa90 f0a0 	rbit	r0, r0
 8003caa:	fab0 f080 	clz	r0, r0
 8003cae:	4082      	lsls	r2, r0
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x550>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cbe:	6863      	ldr	r3, [r4, #4]
 8003cc0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003cc4:	fa92 f2a2 	rbit	r2, r2
 8003cc8:	fab2 f282 	clz	r2, r2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	6921      	ldr	r1, [r4, #16]
 8003cd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cd4:	fa92 f2a2 	rbit	r2, r2
 8003cd8:	fab2 f282 	clz	r2, r2
 8003cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	68e1      	ldr	r1, [r4, #12]
 8003ce4:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8003ce8:	fa92 f2a2 	rbit	r2, r2
 8003cec:	fab2 f282 	clz	r2, r2
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	68a1      	ldr	r1, [r4, #8]
 8003cf8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003cfc:	fa92 f2a2 	rbit	r2, r2
 8003d00:	fab2 f282 	clz	r2, r2
 8003d04:	fa01 f202 	lsl.w	r2, r1, r2
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003d0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003d10:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003d12:	6813      	ldr	r3, [r2, #0]
 8003d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d18:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003d1a:	f7fe f841 	bl	8001da0 <HAL_GetTick>
 8003d1e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d20:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003d28:	f47f aeb2 	bne.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d2c:	f7fe f838 	bl	8001da0 <HAL_GetTick>
 8003d30:	1b80      	subs	r0, r0, r6
 8003d32:	2864      	cmp	r0, #100	; 0x64
 8003d34:	d9f4      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 8003d36:	2003      	movs	r0, #3
 8003d38:	e6ae      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003d3a:	4e21      	ldr	r6, [pc, #132]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8003d3c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8003d40:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
 8003d44:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003d48:	fa90 f3a0 	rbit	r3, r0
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	fa2e fe03 	lsr.w	lr, lr, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003d54:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8003d58:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003d5c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8003d60:	fa91 f3a1 	rbit	r3, r1
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003d70:	fa97 f7a7 	rbit	r7, r7
 8003d74:	fab7 f787 	clz	r7, r7
 8003d78:	40bb      	lsls	r3, r7
 8003d7a:	fa90 f0a0 	rbit	r0, r0
 8003d7e:	fab0 f080 	clz	r0, r0
 8003d82:	fa0e f000 	lsl.w	r0, lr, r0
 8003d86:	4303      	orrs	r3, r0
 8003d88:	68e7      	ldr	r7, [r4, #12]
 8003d8a:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8003d8e:	fa90 f0a0 	rbit	r0, r0
 8003d92:	fab0 f080 	clz	r0, r0
 8003d96:	fa07 f000 	lsl.w	r0, r7, r0
 8003d9a:	4303      	orrs	r3, r0
 8003d9c:	fa91 f1a1 	rbit	r1, r1
 8003da0:	fab1 f181 	clz	r1, r1
 8003da4:	408a      	lsls	r2, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8003dac:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003db0:	f023 031f 	bic.w	r3, r3, #31
 8003db4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003db6:	3a01      	subs	r2, #1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 8003dbe:	e73e      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003dd6:	f7fd ffe3 	bl	8001da0 <HAL_GetTick>
 8003dda:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ddc:	4b79      	ldr	r3, [pc, #484]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003de4:	d006      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003de6:	f7fd ffdb 	bl	8001da0 <HAL_GetTick>
 8003dea:	1b40      	subs	r0, r0, r5
 8003dec:	2864      	cmp	r0, #100	; 0x64
 8003dee:	d9f5      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x61c>
        return HAL_TIMEOUT;
 8003df0:	2003      	movs	r0, #3
 8003df2:	e651      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003dfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003dfe:	b12a      	cbz	r2, 8003e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003e04:	d044      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d141      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8003e0c:	4d6d      	ldr	r5, [pc, #436]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003e0e:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 8003e12:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 8003e16:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8003e1a:	fa90 f3a0 	rbit	r3, r0
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8003e24:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8003e28:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003e2c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8003e30:	fa91 f3a1 	rbit	r3, r1
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e3a:	6963      	ldr	r3, [r4, #20]
 8003e3c:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8003e40:	fa96 f6a6 	rbit	r6, r6
 8003e44:	fab6 f686 	clz	r6, r6
 8003e48:	40b3      	lsls	r3, r6
 8003e4a:	fa90 f0a0 	rbit	r0, r0
 8003e4e:	fab0 f080 	clz	r0, r0
 8003e52:	fa07 f000 	lsl.w	r0, r7, r0
 8003e56:	4303      	orrs	r3, r0
 8003e58:	69a6      	ldr	r6, [r4, #24]
 8003e5a:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8003e5e:	fa90 f0a0 	rbit	r0, r0
 8003e62:	fab0 f080 	clz	r0, r0
 8003e66:	fa06 f000 	lsl.w	r0, r6, r0
 8003e6a:	4303      	orrs	r3, r0
 8003e6c:	fa91 f1a1 	rbit	r1, r1
 8003e70:	fab1 f181 	clz	r1, r1
 8003e74:	408a      	lsls	r2, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e7c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003e80:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003e84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e86:	3a01      	subs	r2, #1
 8003e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e8c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8003e98:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9e:	d056      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	f013 0f08 	tst.w	r3, #8
 8003ea6:	d03e      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x766>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8003ea8:	4d46      	ldr	r5, [pc, #280]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003eaa:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8003eae:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003eb2:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8003eb6:	fa90 f3a0 	rbit	r3, r0
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8003ec0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8003ec4:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8003ec8:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8003ecc:	fa96 f3a6 	rbit	r3, r6
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ed6:	6963      	ldr	r3, [r4, #20]
 8003ed8:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003edc:	fa97 f7a7 	rbit	r7, r7
 8003ee0:	fab7 f787 	clz	r7, r7
 8003ee4:	40bb      	lsls	r3, r7
 8003ee6:	fa96 f6a6 	rbit	r6, r6
 8003eea:	fab6 f686 	clz	r6, r6
 8003eee:	40b1      	lsls	r1, r6
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	fa90 f1a0 	rbit	r1, r0
 8003ef6:	fab1 f181 	clz	r1, r1
 8003efa:	408a      	lsls	r2, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	69e1      	ldr	r1, [r4, #28]
 8003f00:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003f04:	fa92 f2a2 	rbit	r2, r2
 8003f08:	fab2 f282 	clz	r2, r2
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f16:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003f1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8003f26:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003f28:	6813      	ldr	r3, [r2, #0]
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003f30:	f7fd ff36 	bl	8001da0 <HAL_GetTick>
 8003f34:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f36:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8003f3e:	d13e      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f40:	f7fd ff2e 	bl	8001da0 <HAL_GetTick>
 8003f44:	1b00      	subs	r0, r0, r4
 8003f46:	2864      	cmp	r0, #100	; 0x64
 8003f48:	d9f5      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x776>
        return HAL_TIMEOUT;
 8003f4a:	2003      	movs	r0, #3
 8003f4c:	e5a4      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8003f4e:	4e1d      	ldr	r6, [pc, #116]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8003f50:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 8003f54:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003f58:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8003f5c:	fa95 f3a5 	rbit	r3, r5
 8003f60:	fab3 f383 	clz	r3, r3
 8003f64:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8003f66:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 8003f6a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8003f6e:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8003f72:	fa90 f3a0 	rbit	r3, r0
 8003f76:	fab3 f383 	clz	r3, r3
 8003f7a:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f7c:	6963      	ldr	r3, [r4, #20]
 8003f7e:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8003f82:	fa97 f7a7 	rbit	r7, r7
 8003f86:	fab7 f787 	clz	r7, r7
 8003f8a:	40bb      	lsls	r3, r7
 8003f8c:	6a27      	ldr	r7, [r4, #32]
 8003f8e:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8003f92:	fa9e feae 	rbit	lr, lr
 8003f96:	fabe fe8e 	clz	lr, lr
 8003f9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8003f9e:	433b      	orrs	r3, r7
 8003fa0:	fa95 f5a5 	rbit	r5, r5
 8003fa4:	fab5 f585 	clz	r5, r5
 8003fa8:	40a9      	lsls	r1, r5
 8003faa:	430b      	orrs	r3, r1
 8003fac:	fa90 f1a0 	rbit	r1, r0
 8003fb0:	fab1 f181 	clz	r1, r1
 8003fb4:	408a      	lsls	r2, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8003fbc:	e770      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
  return HAL_OK;
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	e56a      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8003fca:	4b80      	ldr	r3, [pc, #512]	; (80041cc <HAL_RCCEx_GetPeriphCLKConfig+0x204>)
 8003fcc:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8003fce:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <HAL_RCCEx_GetPeriphCLKConfig+0x208>)
 8003fd0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003fd4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003fd8:	4011      	ands	r1, r2
 8003fda:	fa92 f4a2 	rbit	r4, r2
 8003fde:	fab4 f484 	clz	r4, r4
 8003fe2:	40e1      	lsrs	r1, r4
 8003fe4:	6041      	str	r1, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003fe6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8003fea:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
 8003fee:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8003ff2:	fa91 f5a1 	rbit	r5, r1
 8003ff6:	fab5 f585 	clz	r5, r5
 8003ffa:	40ec      	lsrs	r4, r5
 8003ffc:	6104      	str	r4, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8003ffe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8004002:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
 8004006:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 800400a:	fa95 f6a5 	rbit	r6, r5
 800400e:	fab6 f686 	clz	r6, r6
 8004012:	40f4      	lsrs	r4, r6
 8004014:	60c4      	str	r4, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8004016:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 800401a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800401e:	f04f 44e0 	mov.w	r4, #1879048192	; 0x70000000
 8004022:	fa94 f7a4 	rbit	r7, r4
 8004026:	fab7 f787 	clz	r7, r7
 800402a:	40fe      	lsrs	r6, r7
 800402c:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 800402e:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 8004032:	4016      	ands	r6, r2
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	fab2 f282 	clz	r2, r2
 800403c:	fa26 f202 	lsr.w	r2, r6, r2
 8004040:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004042:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004046:	400a      	ands	r2, r1
 8004048:	fa91 f6a1 	rbit	r6, r1
 800404c:	fab6 f686 	clz	r6, r6
 8004050:	40f2      	lsrs	r2, r6
 8004052:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8004054:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004058:	402a      	ands	r2, r5
 800405a:	fa95 f5a5 	rbit	r5, r5
 800405e:	fab5 f585 	clz	r5, r5
 8004062:	fa22 f505 	lsr.w	r5, r2, r5
 8004066:	6185      	str	r5, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8004068:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800406c:	4022      	ands	r2, r4
 800406e:	fa94 f4a4 	rbit	r4, r4
 8004072:	fab4 f484 	clz	r4, r4
 8004076:	fa22 f404 	lsr.w	r4, r2, r4
 800407a:	61c4      	str	r4, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 800407c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004080:	f002 021f 	and.w	r2, r2, #31
 8004084:	241f      	movs	r4, #31
 8004086:	fa94 f4a4 	rbit	r4, r4
 800408a:	fab4 f484 	clz	r4, r4
 800408e:	40e2      	lsrs	r2, r4
 8004090:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8004092:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004096:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800409a:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 800409e:	fa94 f4a4 	rbit	r4, r4
 80040a2:	fab4 f484 	clz	r4, r4
 80040a6:	40e2      	lsrs	r2, r4
 80040a8:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 80040aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040ae:	400a      	ands	r2, r1
 80040b0:	fa91 f1a1 	rbit	r1, r1
 80040b4:	fab1 f181 	clz	r1, r1
 80040b8:	fa22 f101 	lsr.w	r1, r2, r1
 80040bc:	62c1      	str	r1, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80040be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040c2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80040c6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80040c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040cc:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80040d0:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80040d8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80040da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80040de:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80040e2:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80040e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80040e8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80040ec:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80040ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80040f2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80040f6:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80040f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80040fc:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8004100:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8004102:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004106:	f002 0203 	and.w	r2, r2, #3
 800410a:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800410c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004110:	f002 020c 	and.w	r2, r2, #12
 8004114:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8004116:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800411a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800411e:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8004120:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004124:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004128:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800412a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800412e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004132:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8004134:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004138:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800413c:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800413e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004142:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8004146:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8004148:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800414c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004150:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004152:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004156:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 800415a:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800415c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004160:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004164:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8004166:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800416a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800416e:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004170:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004174:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004178:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800417c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004180:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004184:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
	
  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004188:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800418c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004190:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
 8004194:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004198:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800419c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80041a6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041a8:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80041ac:	430a      	orrs	r2, r1
 80041ae:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80041b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80041b8:	d004      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKConfig+0x1fc>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80041ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041be:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 80041c0:	bcf0      	pop	{r4, r5, r6, r7}
 80041c2:	4770      	bx	lr
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80041c4:	2300      	movs	r3, #0
 80041c6:	6383      	str	r3, [r0, #56]	; 0x38
 80041c8:	e7fa      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKConfig+0x1f8>
 80041ca:	bf00      	nop
 80041cc:	1cfffff1 	.word	0x1cfffff1
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041d4:	b410      	push	{r4}
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80041d6:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80041da:	d007      	beq.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  uint32_t frequency = 0;
 80041dc:	2300      	movs	r3, #0
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80041de:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80041e2:	d072      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      }
    }
  }
  
  return frequency;
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041ea:	4770      	bx	lr
    saiclocksource = RCC->DCKCFGR1;   
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80041ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80041f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    switch (saiclocksource)
 80041f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fa:	d039      	beq.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80041fc:	d90c      	bls.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 80041fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004202:	d05e      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004208:	d128      	bne.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800420a:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004212:	d158      	bne.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          frequency = HSI_VALUE;
 8004214:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004216:	e7e2      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    switch (saiclocksource)
 8004218:	bb03      	cbnz	r3, 800425c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800421a:	4b64      	ldr	r3, [pc, #400]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004222:	d11d      	bne.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004224:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004226:	685c      	ldr	r4, [r3, #4]
 8004228:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 800422c:	4b60      	ldr	r3, [pc, #384]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 800422e:	fbb3 f4f4 	udiv	r4, r3, r4
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004232:	4a5e      	ldr	r2, [pc, #376]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004234:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8004238:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800423c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004240:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004244:	fb03 f304 	mul.w	r3, r3, r4
 8004248:	fbb3 f3f1 	udiv	r3, r3, r1
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800424c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8004250:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8004254:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg); 
 8004256:	fbb3 f3f2 	udiv	r3, r3, r2
        break;       
 800425a:	e7c0      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa>
  uint32_t frequency = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	e7be      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004262:	685c      	ldr	r4, [r3, #4]
 8004264:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8004268:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800426a:	fbb3 f4f4 	udiv	r4, r3, r4
 800426e:	e7e0      	b.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004270:	4b4e      	ldr	r3, [pc, #312]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004278:	d11b      	bne.n	80042b2 <HAL_RCCEx_GetPeriphCLKFreq+0xde>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800427c:	685c      	ldr	r4, [r3, #4]
 800427e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8004282:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004284:	fbb3 f4f4 	udiv	r4, r3, r4
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004288:	4a48      	ldr	r2, [pc, #288]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800428a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 800428e:	f3c1 6103 	ubfx	r1, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004292:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004296:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800429a:	fb03 f304 	mul.w	r3, r3, r4
 800429e:	fbb3 f3f1 	udiv	r3, r3, r1
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 80042a2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80042a6:	f002 021f 	and.w	r2, r2, #31
 80042aa:	3201      	adds	r2, #1
        frequency = frequency/(tmpreg);
 80042ac:	fbb3 f3f2 	udiv	r3, r3, r2
        break;
 80042b0:	e795      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80042b4:	685c      	ldr	r4, [r3, #4]
 80042b6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80042ba:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80042bc:	fbb3 f4f4 	udiv	r4, r3, r4
 80042c0:	e7e2      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        frequency = EXTERNAL_CLOCK_VALUE;
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 80042c4:	e78b      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa>
          frequency = HSE_VALUE;
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 80042c8:	e789      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa>
    saiclocksource = RCC->DCKCFGR1;   
 80042ca:	4a38      	ldr	r2, [pc, #224]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80042cc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80042d0:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 80042d4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80042d8:	d03a      	beq.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80042da:	d90d      	bls.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80042dc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80042e0:	d05f      	beq.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80042e2:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80042e6:	f47f af7d 	bne.w	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80042ea:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80042f2:	d158      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          frequency = HSI_VALUE;
 80042f4:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 80042f6:	e775      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
    switch (saiclocksource)
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	f47f af73 	bne.w	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80042fe:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004306:	d11b      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004310:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004312:	fbb3 f1f1 	udiv	r1, r3, r1
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004316:	4a25      	ldr	r2, [pc, #148]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004318:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 800431c:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004320:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004324:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004328:	fb03 f301 	mul.w	r3, r3, r1
 800432c:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004330:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004334:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8004338:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg); 
 800433a:	fbb3 f3f0 	udiv	r3, r3, r0
        break;       
 800433e:	e751      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004342:	6859      	ldr	r1, [r3, #4]
 8004344:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800434a:	fbb3 f1f1 	udiv	r1, r3, r1
 800434e:	e7e2      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004358:	d11b      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8004364:	fbb3 f1f1 	udiv	r1, r3, r1
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004368:	4a10      	ldr	r2, [pc, #64]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 800436a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 800436e:	f3c0 6003 	ubfx	r0, r0, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004372:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004376:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800437a:	fb03 f301 	mul.w	r3, r3, r1
 800437e:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8004382:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004386:	f000 001f 	and.w	r0, r0, #31
 800438a:	3001      	adds	r0, #1
        frequency = frequency/(tmpreg);
 800438c:	fbb3 f3f0 	udiv	r3, r3, r0
        break;
 8004390:	e728      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 800439c:	fbb3 f1f1 	udiv	r1, r3, r1
 80043a0:	e7e2      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
        frequency = EXTERNAL_CLOCK_VALUE;
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 80043a4:	e71e      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = HSE_VALUE;
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
  return frequency;
 80043a8:	e71c      	b.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	017d7840 	.word	0x017d7840
 80043b8:	00bb8000 	.word	0x00bb8000

080043bc <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 80043bc:	2901      	cmp	r1, #1
 80043be:	d00a      	beq.n	80043d6 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80043c0:	2301      	movs	r3, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80043c2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80043c4:	2a08      	cmp	r2, #8
 80043c6:	d008      	beq.n	80043da <SAI_InterruptFlag+0x1e>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT|= SAI_IT_CNRDY;
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80043c8:	6842      	ldr	r2, [r0, #4]
 80043ca:	3a02      	subs	r2, #2
 80043cc:	2a01      	cmp	r2, #1
 80043ce:	d90c      	bls.n	80043ea <SAI_InterruptFlag+0x2e>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80043d0:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 80043d4:	4770      	bx	lr
    tmpIT|= SAI_IT_FREQ;
 80043d6:	2309      	movs	r3, #9
 80043d8:	e7f3      	b.n	80043c2 <SAI_InterruptFlag+0x6>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80043da:	6842      	ldr	r2, [r0, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80043dc:	2a01      	cmp	r2, #1
 80043de:	bf18      	it	ne
 80043e0:	2a03      	cmpne	r2, #3
 80043e2:	d1f1      	bne.n	80043c8 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_CNRDY;
 80043e4:	f043 0310 	orr.w	r3, r3, #16
 80043e8:	e7ee      	b.n	80043c8 <SAI_InterruptFlag+0xc>
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80043ea:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 80043ee:	4770      	bx	lr

080043f0 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <SAI_Disable+0x3c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <SAI_Disable+0x40>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0b1b      	lsrs	r3, r3, #12
 80043fc:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80043fe:	6801      	ldr	r1, [r0, #0]
 8004400:	680a      	ldr	r2, [r1, #0]
 8004402:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004406:	600a      	str	r2, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	b13b      	cbz	r3, 800441c <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800440c:	6803      	ldr	r3, [r0, #0]
 800440e:	6819      	ldr	r1, [r3, #0]
    if (count-- == 0)
 8004410:	4613      	mov	r3, r2
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004412:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8004416:	d1f7      	bne.n	8004408 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	2000      	movs	r0, #0

  return status;
}
 800441a:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800441c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004428:	2003      	movs	r0, #3
      break;
 800442a:	4770      	bx	lr
 800442c:	20000048 	.word	0x20000048
 8004430:	95cbec1b 	.word	0x95cbec1b

08004434 <HAL_SAI_Init>:
  if(hsai == NULL)
 8004434:	2800      	cmp	r0, #0
 8004436:	f000 80e6 	beq.w	8004606 <HAL_SAI_Init+0x1d2>
{
 800443a:	b570      	push	{r4, r5, r6, lr}
 800443c:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 800443e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80b4 	beq.w	80045b0 <HAL_SAI_Init+0x17c>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004448:	2302      	movs	r3, #2
 800444a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ffce 	bl	80043f0 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8004454:	68e3      	ldr	r3, [r4, #12]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f000 80b1 	beq.w	80045be <HAL_SAI_Init+0x18a>
 800445c:	2b02      	cmp	r3, #2
 800445e:	f000 80ac 	beq.w	80045ba <HAL_SAI_Init+0x186>
  uint32_t tmpregisterGCR = 0;
 8004462:	2200      	movs	r2, #0
  switch(hsai->Init.Synchro)
 8004464:	68a3      	ldr	r3, [r4, #8]
 8004466:	2b02      	cmp	r3, #2
 8004468:	f000 80ab 	beq.w	80045c2 <HAL_SAI_Init+0x18e>
 800446c:	2b03      	cmp	r3, #3
 800446e:	f000 80ab 	beq.w	80045c8 <HAL_SAI_Init+0x194>
 8004472:	2b01      	cmp	r3, #1
 8004474:	f000 80ad 	beq.w	80045d2 <HAL_SAI_Init+0x19e>
  uint32_t syncen_bits = 0;
 8004478:	2500      	movs	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	4963      	ldr	r1, [pc, #396]	; (800460c <HAL_SAI_Init+0x1d8>)
 800447e:	4864      	ldr	r0, [pc, #400]	; (8004610 <HAL_SAI_Init+0x1dc>)
 8004480:	428b      	cmp	r3, r1
 8004482:	bf18      	it	ne
 8004484:	4283      	cmpne	r3, r0
 8004486:	f040 80a7 	bne.w	80045d8 <HAL_SAI_Init+0x1a4>
    SAI1->GCR = tmpregisterGCR;
 800448a:	4b62      	ldr	r3, [pc, #392]	; (8004614 <HAL_SAI_Init+0x1e0>)
 800448c:	601a      	str	r2, [r3, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800448e:	69e3      	ldr	r3, [r4, #28]
 8004490:	b323      	cbz	r3, 80044dc <HAL_SAI_Init+0xa8>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	4a5d      	ldr	r2, [pc, #372]	; (800460c <HAL_SAI_Init+0x1d8>)
 8004496:	495e      	ldr	r1, [pc, #376]	; (8004610 <HAL_SAI_Init+0x1dc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	bf18      	it	ne
 800449c:	428b      	cmpne	r3, r1
 800449e:	f000 809e 	beq.w	80045de <HAL_SAI_Init+0x1aa>
    uint32_t freq = 0;
 80044a2:	2000      	movs	r0, #0
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	4a5c      	ldr	r2, [pc, #368]	; (8004618 <HAL_SAI_Init+0x1e4>)
 80044a8:	495c      	ldr	r1, [pc, #368]	; (800461c <HAL_SAI_Init+0x1e8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	bf18      	it	ne
 80044ae:	428b      	cmpne	r3, r1
 80044b0:	f000 809a 	beq.w	80045e8 <HAL_SAI_Init+0x1b4>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80044b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044b8:	0041      	lsls	r1, r0, #1
 80044ba:	69e3      	ldr	r3, [r4, #28]
 80044bc:	025b      	lsls	r3, r3, #9
 80044be:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80044c2:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_SAI_Init+0x1ec>)
 80044c4:	fba3 2301 	umull	r2, r3, r3, r1
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	6223      	str	r3, [r4, #32]
    if((tmpval % 10) > 8)
 80044cc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80044d0:	0042      	lsls	r2, r0, #1
 80044d2:	1a8a      	subs	r2, r1, r2
 80044d4:	2a08      	cmp	r2, #8
 80044d6:	d901      	bls.n	80044dc <HAL_SAI_Init+0xa8>
      hsai->Init.Mckdiv+= 1;
 80044d8:	3301      	adds	r3, #1
 80044da:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	bf18      	it	ne
 80044e2:	2b00      	cmpne	r3, #0
 80044e4:	f040 8087 	bne.w	80045f6 <HAL_SAI_Init+0x1c2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80044e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	f000 8081 	beq.w	80045f2 <HAL_SAI_Init+0x1be>
 80044f0:	f44f 7300 	mov.w	r3, #512	; 0x200
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	6810      	ldr	r0, [r2, #0]
 80044f8:	494a      	ldr	r1, [pc, #296]	; (8004624 <HAL_SAI_Init+0x1f0>)
 80044fa:	4001      	ands	r1, r0
 80044fc:	6011      	str	r1, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	6801      	ldr	r1, [r0, #0]
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8004506:	4332      	orrs	r2, r6
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004508:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800450a:	4332      	orrs	r2, r6
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800450c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800450e:	4332      	orrs	r2, r6
 8004510:	4313      	orrs	r3, r2
                        ckstr_bits | syncen_bits |                               \
 8004512:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004514:	6a65      	ldr	r5, [r4, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8004516:	432b      	orrs	r3, r5
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004518:	6925      	ldr	r5, [r4, #16]
 800451a:	432b      	orrs	r3, r5
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800451c:	6965      	ldr	r5, [r4, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800451e:	432b      	orrs	r3, r5
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004520:	6a22      	ldr	r2, [r4, #32]
 8004522:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004526:	430b      	orrs	r3, r1
 8004528:	6003      	str	r3, [r0, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800452a:	6822      	ldr	r2, [r4, #0]
 800452c:	6851      	ldr	r1, [r2, #4]
 800452e:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_SAI_Init+0x1f4>)
 8004530:	400b      	ands	r3, r1
 8004532:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004534:	6821      	ldr	r1, [r4, #0]
 8004536:	684a      	ldr	r2, [r1, #4]
 8004538:	69a3      	ldr	r3, [r4, #24]
 800453a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800453c:	4303      	orrs	r3, r0
 800453e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004540:	4303      	orrs	r3, r0
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	6891      	ldr	r1, [r2, #8]
 800454a:	4b38      	ldr	r3, [pc, #224]	; (800462c <HAL_SAI_Init+0x1f8>)
 800454c:	400b      	ands	r3, r1
 800454e:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	6882      	ldr	r2, [r0, #8]
 8004554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004556:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset |
 8004558:	6d21      	ldr	r1, [r4, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800455a:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 800455c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800455e:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 8004560:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8004562:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004564:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004566:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 8004568:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800456c:	4313      	orrs	r3, r2
 800456e:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	68d3      	ldr	r3, [r2, #12]
 8004574:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8004578:	f023 030f 	bic.w	r3, r3, #15
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	68c2      	ldr	r2, [r0, #12]
 8004586:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004588:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800458a:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800458c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800458e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004592:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004594:	3901      	subs	r1, #1
 8004596:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800459a:	4313      	orrs	r3, r2
 800459c:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800459e:	2000      	movs	r0, #0
 80045a0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  hsai->State= HAL_SAI_STATE_READY;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80045aa:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
    hsai->Lock = HAL_UNLOCKED;
 80045b0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80045b4:	f001 fb1e 	bl	8005bf4 <HAL_SAI_MspInit>
 80045b8:	e746      	b.n	8004448 <HAL_SAI_Init+0x14>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80045ba:	2220      	movs	r2, #32
      break;
 80045bc:	e752      	b.n	8004464 <HAL_SAI_Init+0x30>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80045be:	2210      	movs	r2, #16
 80045c0:	e750      	b.n	8004464 <HAL_SAI_Init+0x30>
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80045c2:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80045c6:	e758      	b.n	800447a <HAL_SAI_Init+0x46>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80045c8:	f042 0201 	orr.w	r2, r2, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80045cc:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80045d0:	e753      	b.n	800447a <HAL_SAI_Init+0x46>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80045d2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80045d6:	e750      	b.n	800447a <HAL_SAI_Init+0x46>
    SAI2->GCR = tmpregisterGCR;
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_SAI_Init+0x1fc>)
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e757      	b.n	800448e <HAL_SAI_Init+0x5a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80045de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80045e2:	f7ff fdf7 	bl	80041d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80045e6:	e75d      	b.n	80044a4 <HAL_SAI_Init+0x70>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80045e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80045ec:	f7ff fdf2 	bl	80041d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80045f0:	e760      	b.n	80044b4 <HAL_SAI_Init+0x80>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e77e      	b.n	80044f4 <HAL_SAI_Init+0xc0>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80045f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d001      	beq.n	8004600 <HAL_SAI_Init+0x1cc>
 80045fc:	2300      	movs	r3, #0
 80045fe:	e779      	b.n	80044f4 <HAL_SAI_Init+0xc0>
 8004600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004604:	e776      	b.n	80044f4 <HAL_SAI_Init+0xc0>
    return HAL_ERROR;
 8004606:	2001      	movs	r0, #1
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40015824 	.word	0x40015824
 8004610:	40015804 	.word	0x40015804
 8004614:	40015800 	.word	0x40015800
 8004618:	40015c24 	.word	0x40015c24
 800461c:	40015c04 	.word	0x40015c04
 8004620:	cccccccd 	.word	0xcccccccd
 8004624:	ff05c010 	.word	0xff05c010
 8004628:	ffff1ff0 	.word	0xffff1ff0
 800462c:	fff88000 	.word	0xfff88000
 8004630:	40015c00 	.word	0x40015c00

08004634 <HAL_SAI_DeInit>:
  if(hsai == NULL)
 8004634:	b1e8      	cbz	r0, 8004672 <HAL_SAI_DeInit+0x3e>
{
 8004636:	b538      	push	{r3, r4, r5, lr}
 8004638:	4604      	mov	r4, r0
  hsai->State = HAL_SAI_STATE_BUSY;
 800463a:	2302      	movs	r3, #2
 800463c:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8004640:	6803      	ldr	r3, [r0, #0]
 8004642:	2500      	movs	r5, #0
 8004644:	611d      	str	r5, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004646:	6803      	ldr	r3, [r0, #0]
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 800464e:	f7ff fecf 	bl	80043f0 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	6853      	ldr	r3, [r2, #4]
 8004656:	f043 0308 	orr.w	r3, r3, #8
 800465a:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 800465c:	4620      	mov	r0, r4
 800465e:	f001 fb03 	bl	8005c68 <HAL_SAI_MspDeInit>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004662:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_RESET;
 8004666:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 800466a:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
  return HAL_OK;
 800466e:	4628      	mov	r0, r5
 8004670:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004672:	2001      	movs	r0, #1
 8004674:	4770      	bx	lr
	...

08004678 <HAL_SAI_Transmit_DMA>:
{
 8004678:	b538      	push	{r3, r4, r5, lr}
  if((pData == NULL) || (Size == 0))
 800467a:	2a00      	cmp	r2, #0
 800467c:	bf18      	it	ne
 800467e:	2900      	cmpne	r1, #0
 8004680:	d051      	beq.n	8004726 <HAL_SAI_Transmit_DMA+0xae>
 8004682:	4614      	mov	r4, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 8004684:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d002      	beq.n	8004694 <HAL_SAI_Transmit_DMA+0x1c>
    return HAL_BUSY;
 800468e:	2402      	movs	r4, #2
}
 8004690:	4620      	mov	r0, r4
 8004692:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hsai);
 8004694:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_SAI_Transmit_DMA+0x28>
 800469c:	2402      	movs	r4, #2
 800469e:	e7f7      	b.n	8004690 <HAL_SAI_Transmit_DMA+0x18>
 80046a0:	4605      	mov	r5, r0
 80046a2:	2201      	movs	r2, #1
 80046a4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 80046a8:	6669      	str	r1, [r5, #100]	; 0x64
    hsai->XferSize = Size;
 80046aa:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 80046ae:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80046b8:	2212      	movs	r2, #18
 80046ba:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80046be:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80046c0:	491a      	ldr	r1, [pc, #104]	; (800472c <HAL_SAI_Transmit_DMA+0xb4>)
 80046c2:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80046c4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80046c6:	491a      	ldr	r1, [pc, #104]	; (8004730 <HAL_SAI_Transmit_DMA+0xb8>)
 80046c8:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80046ca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80046cc:	4919      	ldr	r1, [pc, #100]	; (8004734 <HAL_SAI_Transmit_DMA+0xbc>)
 80046ce:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80046d0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80046d2:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80046d4:	6802      	ldr	r2, [r0, #0]
 80046d6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80046da:	321c      	adds	r2, #28
 80046dc:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80046de:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80046e0:	f7fd fe84 	bl	80023ec <HAL_DMA_Start_IT>
 80046e4:	4604      	mov	r4, r0
 80046e6:	b9c8      	cbnz	r0, 800471c <HAL_SAI_Transmit_DMA+0xa4>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80046f0:	d103      	bne.n	80046fa <HAL_SAI_Transmit_DMA+0x82>
      __HAL_SAI_ENABLE(hsai);
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046f8:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80046fa:	2100      	movs	r1, #0
 80046fc:	4628      	mov	r0, r5
 80046fe:	f7ff fe5d 	bl	80043bc <SAI_InterruptFlag>
 8004702:	682a      	ldr	r2, [r5, #0]
 8004704:	6913      	ldr	r3, [r2, #16]
 8004706:	4318      	orrs	r0, r3
 8004708:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800470a:	682a      	ldr	r2, [r5, #0]
 800470c:	6813      	ldr	r3, [r2, #0]
 800470e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004712:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8004714:	2300      	movs	r3, #0
 8004716:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 800471a:	e7b9      	b.n	8004690 <HAL_SAI_Transmit_DMA+0x18>
      __HAL_UNLOCK(hsai);
 800471c:	2300      	movs	r3, #0
 800471e:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
      return  HAL_ERROR;
 8004722:	2401      	movs	r4, #1
 8004724:	e7b4      	b.n	8004690 <HAL_SAI_Transmit_DMA+0x18>
    return  HAL_ERROR;
 8004726:	2401      	movs	r4, #1
 8004728:	e7b2      	b.n	8004690 <HAL_SAI_Transmit_DMA+0x18>
 800472a:	bf00      	nop
 800472c:	08004835 	.word	0x08004835
 8004730:	080047f9 	.word	0x080047f9
 8004734:	08004885 	.word	0x08004885

08004738 <HAL_SAI_Receive_DMA>:
{
 8004738:	b538      	push	{r3, r4, r5, lr}
  if((pData == NULL) || (Size == 0))
 800473a:	2a00      	cmp	r2, #0
 800473c:	bf18      	it	ne
 800473e:	2900      	cmpne	r1, #0
 8004740:	d051      	beq.n	80047e6 <HAL_SAI_Receive_DMA+0xae>
 8004742:	4614      	mov	r4, r2
  if(hsai->State == HAL_SAI_STATE_READY)
 8004744:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d002      	beq.n	8004754 <HAL_SAI_Receive_DMA+0x1c>
    return HAL_BUSY;
 800474e:	2402      	movs	r4, #2
}
 8004750:	4620      	mov	r0, r4
 8004752:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hsai);
 8004754:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_SAI_Receive_DMA+0x28>
 800475c:	2402      	movs	r4, #2
 800475e:	e7f7      	b.n	8004750 <HAL_SAI_Receive_DMA+0x18>
 8004760:	4605      	mov	r5, r0
 8004762:	2201      	movs	r2, #1
 8004764:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8004768:	6669      	str	r1, [r5, #100]	; 0x64
    hsai->XferSize = Size;
 800476a:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 800476e:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004772:	2300      	movs	r3, #0
 8004774:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004778:	2222      	movs	r2, #34	; 0x22
 800477a:	f880 207d 	strb.w	r2, [r0, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800477e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004780:	491a      	ldr	r1, [pc, #104]	; (80047ec <HAL_SAI_Receive_DMA+0xb4>)
 8004782:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004784:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004786:	491a      	ldr	r1, [pc, #104]	; (80047f0 <HAL_SAI_Receive_DMA+0xb8>)
 8004788:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800478a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800478c:	4919      	ldr	r1, [pc, #100]	; (80047f4 <HAL_SAI_Receive_DMA+0xbc>)
 800478e:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004790:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8004792:	6513      	str	r3, [r2, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004794:	6801      	ldr	r1, [r0, #0]
 8004796:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800479a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800479c:	311c      	adds	r1, #28
 800479e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80047a0:	f7fd fe24 	bl	80023ec <HAL_DMA_Start_IT>
 80047a4:	4604      	mov	r4, r0
 80047a6:	b9c8      	cbnz	r0, 80047dc <HAL_SAI_Receive_DMA+0xa4>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80047b0:	d103      	bne.n	80047ba <HAL_SAI_Receive_DMA+0x82>
      __HAL_SAI_ENABLE(hsai);
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80047b8:	601a      	str	r2, [r3, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80047ba:	2100      	movs	r1, #0
 80047bc:	4628      	mov	r0, r5
 80047be:	f7ff fdfd 	bl	80043bc <SAI_InterruptFlag>
 80047c2:	682a      	ldr	r2, [r5, #0]
 80047c4:	6913      	ldr	r3, [r2, #16]
 80047c6:	4318      	orrs	r0, r3
 80047c8:	6110      	str	r0, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80047ca:	682a      	ldr	r2, [r5, #0]
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d2:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80047d4:	2300      	movs	r3, #0
 80047d6:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 80047da:	e7b9      	b.n	8004750 <HAL_SAI_Receive_DMA+0x18>
      __HAL_UNLOCK(hsai);
 80047dc:	2300      	movs	r3, #0
 80047de:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
      return  HAL_ERROR;
 80047e2:	2401      	movs	r4, #1
 80047e4:	e7b4      	b.n	8004750 <HAL_SAI_Receive_DMA+0x18>
    return  HAL_ERROR;
 80047e6:	2401      	movs	r4, #1
 80047e8:	e7b2      	b.n	8004750 <HAL_SAI_Receive_DMA+0x18>
 80047ea:	bf00      	nop
 80047ec:	0800487b 	.word	0x0800487b
 80047f0:	0800483f 	.word	0x0800483f
 80047f4:	08004885 	.word	0x08004885

080047f8 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80047f8:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80047fa:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80047fc:	6803      	ldr	r3, [r0, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004804:	d112      	bne.n	800482c <SAI_DMATxCplt+0x34>
  {
    hsai->XferCount = 0;
 8004806:	2100      	movs	r1, #0
 8004808:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004814:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004816:	4620      	mov	r0, r4
 8004818:	f7ff fdd0 	bl	80043bc <SAI_InterruptFlag>
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	6913      	ldr	r3, [r2, #16]
 8004820:	ea23 0000 	bic.w	r0, r3, r0
 8004824:	6110      	str	r0, [r2, #16]
    
    hsai->State= HAL_SAI_STATE_READY;
 8004826:	2301      	movs	r3, #1
 8004828:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 800482c:	4620      	mov	r0, r4
 800482e:	f7fd f8c2 	bl	80019b6 <HAL_SAI_TxCpltCallback>
 8004832:	bd10      	pop	{r4, pc}

08004834 <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004834:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 8004836:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004838:	f7fd f8c1 	bl	80019be <HAL_SAI_TxHalfCpltCallback>
 800483c:	bd08      	pop	{r3, pc}

0800483e <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800483e:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004840:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8004842:	6803      	ldr	r3, [r0, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f413 7f80 	tst.w	r3, #256	; 0x100
 800484a:	d112      	bne.n	8004872 <SAI_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004854:	6013      	str	r3, [r2, #0]
    hsai->XferCount = 0;
 8004856:	2100      	movs	r1, #0
 8004858:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800485c:	4620      	mov	r0, r4
 800485e:	f7ff fdad 	bl	80043bc <SAI_InterruptFlag>
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6913      	ldr	r3, [r2, #16]
 8004866:	ea23 0000 	bic.w	r0, r3, r0
 800486a:	6110      	str	r0, [r2, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 800486c:	2301      	movs	r3, #1
 800486e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8004872:	4620      	mov	r0, r4
 8004874:	f7fd f9a4 	bl	8001bc0 <HAL_SAI_RxCpltCallback>
 8004878:	bd10      	pop	{r4, pc}

0800487a <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800487a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 800487c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800487e:	f7fd f9a3 	bl	8001bc8 <HAL_SAI_RxHalfCpltCallback>
 8004882:	bd08      	pop	{r3, pc}

08004884 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004884:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004886:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004888:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800488c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004890:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004894:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	2b01      	cmp	r3, #1
 800489a:	d007      	beq.n	80048ac <SAI_DMAError+0x28>
 800489c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d003      	beq.n	80048ac <SAI_DMAError+0x28>

    /* Initialize XferCount */
    hsai->XferCount = 0U;
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80048a4:	4620      	mov	r0, r4
 80048a6:	f7fd f993 	bl	8001bd0 <HAL_SAI_ErrorCallback>
 80048aa:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048b4:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7ff fd9a 	bl	80043f0 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 80048bc:	2301      	movs	r3, #1
 80048be:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->XferCount = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80048c8:	e7ec      	b.n	80048a4 <SAI_DMAError+0x20>

080048ca <HAL_SAI_GetState>:
  return hsai->State;
 80048ca:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80048ce:	4770      	bx	lr

080048d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d4:	4605      	mov	r5, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	4616      	mov	r6, r2
 80048da:	4698      	mov	r8, r3
 80048dc:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	ea37 0303 	bics.w	r3, r7, r3
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	42b3      	cmp	r3, r6
 80048ee:	d11e      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80048f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80048f4:	d0f3      	beq.n	80048de <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80048f6:	b12c      	cbz	r4, 8004904 <UART_WaitOnFlagUntilTimeout+0x34>
 80048f8:	f7fd fa52 	bl	8001da0 <HAL_GetTick>
 80048fc:	eba0 0008 	sub.w	r0, r0, r8
 8004900:	4284      	cmp	r4, r0
 8004902:	d8ec      	bhi.n	80048de <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004904:	682a      	ldr	r2, [r5, #0]
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800490c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	682a      	ldr	r2, [r5, #0]
 8004910:	6893      	ldr	r3, [r2, #8]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004918:	2320      	movs	r3, #32
 800491a:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800491e:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004922:	2300      	movs	r3, #0
 8004924:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8004928:	2003      	movs	r0, #3
 800492a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  return HAL_OK;
 800492e:	2000      	movs	r0, #0
}
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004934 <HAL_UART_Transmit>:
{
 8004934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800493c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	d004      	beq.n	8004950 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
}
 8004948:	4618      	mov	r0, r3
 800494a:	b002      	add	sp, #8
 800494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8004956:	2a00      	cmp	r2, #0
 8004958:	bf18      	it	ne
 800495a:	2900      	cmpne	r1, #0
 800495c:	d04c      	beq.n	80049f8 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 800495e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x36>
 8004966:	2302      	movs	r3, #2
 8004968:	e7ee      	b.n	8004948 <HAL_UART_Transmit+0x14>
 800496a:	2301      	movs	r3, #1
 800496c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	2300      	movs	r3, #0
 8004972:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004974:	2321      	movs	r3, #33	; 0x21
 8004976:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800497a:	f7fd fa11 	bl	8001da0 <HAL_GetTick>
 800497e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004980:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8004984:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8004988:	e003      	b.n	8004992 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	782a      	ldrb	r2, [r5, #0]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
 8004990:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8004992:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004996:	b29b      	uxth	r3, r3
 8004998:	b1e3      	cbz	r3, 80049d4 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 800499a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a8:	9600      	str	r6, [sp, #0]
 80049aa:	463b      	mov	r3, r7
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	4620      	mov	r0, r4
 80049b2:	f7ff ff8d 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 80049b6:	bb08      	cbnz	r0, 80049fc <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b8:	68a3      	ldr	r3, [r4, #8]
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	d1e4      	bne.n	800498a <HAL_UART_Transmit+0x56>
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e1      	bne.n	800498a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 80049d2:	e7de      	b.n	8004992 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049d4:	9600      	str	r6, [sp, #0]
 80049d6:	463b      	mov	r3, r7
 80049d8:	2200      	movs	r2, #0
 80049da:	2140      	movs	r1, #64	; 0x40
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff ff77 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	b108      	cbz	r0, 80049ea <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e7ae      	b.n	8004948 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 80049ea:	2220      	movs	r2, #32
 80049ec:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80049f0:	2200      	movs	r2, #0
 80049f2:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 80049f6:	e7a7      	b.n	8004948 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e7a5      	b.n	8004948 <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e7a3      	b.n	8004948 <HAL_UART_Transmit+0x14>

08004a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a04:	6883      	ldr	r3, [r0, #8]
 8004a06:	6902      	ldr	r2, [r0, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	6942      	ldr	r2, [r0, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	69c2      	ldr	r2, [r0, #28]
 8004a10:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004a12:	6801      	ldr	r1, [r0, #0]
 8004a14:	6808      	ldr	r0, [r1, #0]
 8004a16:	4aa0      	ldr	r2, [pc, #640]	; (8004c98 <UART_SetConfig+0x298>)
 8004a18:	4002      	ands	r2, r0
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	6853      	ldr	r3, [r2, #4]
 8004a22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a26:	68e1      	ldr	r1, [r4, #12]
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004a2c:	69a3      	ldr	r3, [r4, #24]
 8004a2e:	6a22      	ldr	r2, [r4, #32]
 8004a30:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	688a      	ldr	r2, [r1, #8]
 8004a36:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	4b96      	ldr	r3, [pc, #600]	; (8004c9c <UART_SetConfig+0x29c>)
 8004a42:	429d      	cmp	r5, r3
 8004a44:	d02b      	beq.n	8004a9e <UART_SetConfig+0x9e>
 8004a46:	4b96      	ldr	r3, [pc, #600]	; (8004ca0 <UART_SetConfig+0x2a0>)
 8004a48:	429d      	cmp	r5, r3
 8004a4a:	d03c      	beq.n	8004ac6 <UART_SetConfig+0xc6>
 8004a4c:	4b95      	ldr	r3, [pc, #596]	; (8004ca4 <UART_SetConfig+0x2a4>)
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	d052      	beq.n	8004af8 <UART_SetConfig+0xf8>
 8004a52:	4b95      	ldr	r3, [pc, #596]	; (8004ca8 <UART_SetConfig+0x2a8>)
 8004a54:	429d      	cmp	r5, r3
 8004a56:	d067      	beq.n	8004b28 <UART_SetConfig+0x128>
 8004a58:	4b94      	ldr	r3, [pc, #592]	; (8004cac <UART_SetConfig+0x2ac>)
 8004a5a:	429d      	cmp	r5, r3
 8004a5c:	d07c      	beq.n	8004b58 <UART_SetConfig+0x158>
 8004a5e:	4b94      	ldr	r3, [pc, #592]	; (8004cb0 <UART_SetConfig+0x2b0>)
 8004a60:	429d      	cmp	r5, r3
 8004a62:	f000 8094 	beq.w	8004b8e <UART_SetConfig+0x18e>
 8004a66:	4b93      	ldr	r3, [pc, #588]	; (8004cb4 <UART_SetConfig+0x2b4>)
 8004a68:	429d      	cmp	r5, r3
 8004a6a:	f000 80ab 	beq.w	8004bc4 <UART_SetConfig+0x1c4>
 8004a6e:	4b92      	ldr	r3, [pc, #584]	; (8004cb8 <UART_SetConfig+0x2b8>)
 8004a70:	429d      	cmp	r5, r3
 8004a72:	f000 80c2 	beq.w	8004bfa <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004a76:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a78:	69e2      	ldr	r2, [r4, #28]
 8004a7a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004a7e:	f000 80db 	beq.w	8004c38 <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	f200 8168 	bhi.w	8004d58 <UART_SetConfig+0x358>
 8004a88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004a8c:	013c0131 	.word	0x013c0131
 8004a90:	01660147 	.word	0x01660147
 8004a94:	01660151 	.word	0x01660151
 8004a98:	01660166 	.word	0x01660166
 8004a9c:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a9e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d803      	bhi.n	8004ab6 <UART_SetConfig+0xb6>
 8004aae:	e8df f003 	tbb	[pc, r3]
 8004ab2:	06bf      	.short	0x06bf
 8004ab4:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	e7de      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aba:	2302      	movs	r3, #2
 8004abc:	e7dc      	b.n	8004a78 <UART_SetConfig+0x78>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	e7da      	b.n	8004a78 <UART_SetConfig+0x78>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	e7d8      	b.n	8004a78 <UART_SetConfig+0x78>
 8004ac6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d808      	bhi.n	8004ae8 <UART_SetConfig+0xe8>
 8004ad6:	e8df f003 	tbb	[pc, r3]
 8004ada:	07ad      	.short	0x07ad
 8004adc:	070b0707 	.word	0x070b0707
 8004ae0:	07090707 	.word	0x07090707
 8004ae4:	0707      	.short	0x0707
 8004ae6:	0d          	.byte	0x0d
 8004ae7:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004ae8:	2310      	movs	r3, #16
 8004aea:	e7c5      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aec:	2302      	movs	r3, #2
 8004aee:	e7c3      	b.n	8004a78 <UART_SetConfig+0x78>
 8004af0:	2304      	movs	r3, #4
 8004af2:	e7c1      	b.n	8004a78 <UART_SetConfig+0x78>
 8004af4:	2308      	movs	r3, #8
 8004af6:	e7bf      	b.n	8004a78 <UART_SetConfig+0x78>
 8004af8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d00d      	beq.n	8004b24 <UART_SetConfig+0x124>
 8004b08:	d905      	bls.n	8004b16 <UART_SetConfig+0x116>
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d008      	beq.n	8004b20 <UART_SetConfig+0x120>
 8004b0e:	2b30      	cmp	r3, #48	; 0x30
 8004b10:	d104      	bne.n	8004b1c <UART_SetConfig+0x11c>
 8004b12:	2308      	movs	r3, #8
 8004b14:	e7b0      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b16:	b90b      	cbnz	r3, 8004b1c <UART_SetConfig+0x11c>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e7ad      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	e7ab      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b20:	2302      	movs	r3, #2
 8004b22:	e7a9      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b24:	2304      	movs	r3, #4
 8004b26:	e7a7      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b28:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d00d      	beq.n	8004b54 <UART_SetConfig+0x154>
 8004b38:	d905      	bls.n	8004b46 <UART_SetConfig+0x146>
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d008      	beq.n	8004b50 <UART_SetConfig+0x150>
 8004b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b40:	d104      	bne.n	8004b4c <UART_SetConfig+0x14c>
 8004b42:	2308      	movs	r3, #8
 8004b44:	e798      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b46:	b90b      	cbnz	r3, 8004b4c <UART_SetConfig+0x14c>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e795      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	e793      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b50:	2302      	movs	r3, #2
 8004b52:	e791      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e78f      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b58:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b68:	d00f      	beq.n	8004b8a <UART_SetConfig+0x18a>
 8004b6a:	d907      	bls.n	8004b7c <UART_SetConfig+0x17c>
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b70:	d009      	beq.n	8004b86 <UART_SetConfig+0x186>
 8004b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b76:	d104      	bne.n	8004b82 <UART_SetConfig+0x182>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	e77d      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b7c:	b90b      	cbnz	r3, 8004b82 <UART_SetConfig+0x182>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e77a      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004b82:	2310      	movs	r3, #16
 8004b84:	e778      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b86:	2302      	movs	r3, #2
 8004b88:	e776      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e774      	b.n	8004a78 <UART_SetConfig+0x78>
 8004b8e:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d00f      	beq.n	8004bc0 <UART_SetConfig+0x1c0>
 8004ba0:	d907      	bls.n	8004bb2 <UART_SetConfig+0x1b2>
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba6:	d009      	beq.n	8004bbc <UART_SetConfig+0x1bc>
 8004ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bac:	d104      	bne.n	8004bb8 <UART_SetConfig+0x1b8>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	e762      	b.n	8004a78 <UART_SetConfig+0x78>
 8004bb2:	b90b      	cbnz	r3, 8004bb8 <UART_SetConfig+0x1b8>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e75f      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004bb8:	2310      	movs	r3, #16
 8004bba:	e75d      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e75b      	b.n	8004a78 <UART_SetConfig+0x78>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	e759      	b.n	8004a78 <UART_SetConfig+0x78>
 8004bc4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd4:	d00f      	beq.n	8004bf6 <UART_SetConfig+0x1f6>
 8004bd6:	d907      	bls.n	8004be8 <UART_SetConfig+0x1e8>
 8004bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bdc:	d009      	beq.n	8004bf2 <UART_SetConfig+0x1f2>
 8004bde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004be2:	d104      	bne.n	8004bee <UART_SetConfig+0x1ee>
 8004be4:	2308      	movs	r3, #8
 8004be6:	e747      	b.n	8004a78 <UART_SetConfig+0x78>
 8004be8:	b90b      	cbnz	r3, 8004bee <UART_SetConfig+0x1ee>
 8004bea:	2300      	movs	r3, #0
 8004bec:	e744      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004bee:	2310      	movs	r3, #16
 8004bf0:	e742      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e740      	b.n	8004a78 <UART_SetConfig+0x78>
 8004bf6:	2304      	movs	r3, #4
 8004bf8:	e73e      	b.n	8004a78 <UART_SetConfig+0x78>
 8004bfa:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0a:	d00f      	beq.n	8004c2c <UART_SetConfig+0x22c>
 8004c0c:	d907      	bls.n	8004c1e <UART_SetConfig+0x21e>
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c12:	d009      	beq.n	8004c28 <UART_SetConfig+0x228>
 8004c14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c18:	d104      	bne.n	8004c24 <UART_SetConfig+0x224>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	e72c      	b.n	8004a78 <UART_SetConfig+0x78>
 8004c1e:	b90b      	cbnz	r3, 8004c24 <UART_SetConfig+0x224>
 8004c20:	2300      	movs	r3, #0
 8004c22:	e729      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004c24:	2310      	movs	r3, #16
 8004c26:	e727      	b.n	8004a78 <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e725      	b.n	8004a78 <UART_SetConfig+0x78>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	e723      	b.n	8004a78 <UART_SetConfig+0x78>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e721      	b.n	8004a78 <UART_SetConfig+0x78>
 8004c34:	2300      	movs	r3, #0
 8004c36:	e71f      	b.n	8004a78 <UART_SetConfig+0x78>
    switch (clocksource)
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d855      	bhi.n	8004ce8 <UART_SetConfig+0x2e8>
 8004c3c:	e8df f003 	tbb	[pc, r3]
 8004c40:	54221705 	.word	0x54221705
 8004c44:	54545440 	.word	0x54545440
 8004c48:	4b          	.byte	0x4b
 8004c49:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c4a:	f7fe fd8d 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004c4e:	6862      	ldr	r2, [r4, #4]
 8004c50:	0853      	lsrs	r3, r2, #1
 8004c52:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c5a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8004c5e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c62:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004c66:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	60d3      	str	r3, [r2, #12]
 8004c6c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004c6e:	f7fe fd91 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004c72:	6862      	ldr	r2, [r4, #4]
 8004c74:	0853      	lsrs	r3, r2, #1
 8004c76:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c80:	2000      	movs	r0, #0
      break;
 8004c82:	e7ec      	b.n	8004c5e <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004c84:	6862      	ldr	r2, [r4, #4]
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <UART_SetConfig+0x2bc>)
 8004c88:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c90:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c92:	2000      	movs	r0, #0
      break;
 8004c94:	e7e3      	b.n	8004c5e <UART_SetConfig+0x25e>
 8004c96:	bf00      	nop
 8004c98:	efff69f3 	.word	0xefff69f3
 8004c9c:	40011000 	.word	0x40011000
 8004ca0:	40004400 	.word	0x40004400
 8004ca4:	40004800 	.word	0x40004800
 8004ca8:	40004c00 	.word	0x40004c00
 8004cac:	40005000 	.word	0x40005000
 8004cb0:	40011400 	.word	0x40011400
 8004cb4:	40007800 	.word	0x40007800
 8004cb8:	40007c00 	.word	0x40007c00
 8004cbc:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004cc0:	f7fe fc40 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8004cc4:	6862      	ldr	r2, [r4, #4]
 8004cc6:	0853      	lsrs	r3, r2, #1
 8004cc8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd2:	2000      	movs	r0, #0
      break;
 8004cd4:	e7c3      	b.n	8004c5e <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004cd6:	6862      	ldr	r2, [r4, #4]
 8004cd8:	0853      	lsrs	r3, r2, #1
 8004cda:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ce2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ce4:	2000      	movs	r0, #0
      break;
 8004ce6:	e7ba      	b.n	8004c5e <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e7b7      	b.n	8004c5e <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004cee:	f7fe fd3b 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004cf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8004cfc:	b280      	uxth	r0, r0
 8004cfe:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d00:	2000      	movs	r0, #0
      break;
 8004d02:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d04:	f7fe fd46 	bl	8003794 <HAL_RCC_GetPCLK2Freq>
 8004d08:	6863      	ldr	r3, [r4, #4]
 8004d0a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004d0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d12:	b280      	uxth	r0, r0
 8004d14:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d16:	2000      	movs	r0, #0
      break;
 8004d18:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004d1a:	6862      	ldr	r2, [r4, #4]
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <UART_SetConfig+0x35c>)
 8004d1e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d2a:	2000      	movs	r0, #0
      break;
 8004d2c:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d2e:	f7fe fc09 	bl	8003544 <HAL_RCC_GetSysClockFreq>
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d3c:	b280      	uxth	r0, r0
 8004d3e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d40:	2000      	movs	r0, #0
      break;
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004d44:	6862      	ldr	r2, [r4, #4]
 8004d46:	0853      	lsrs	r3, r2, #1
 8004d48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d54:	2000      	movs	r0, #0
      break;
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8004d58:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	00f42400 	.word	0x00f42400

08004d60 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d62:	f013 0f01 	tst.w	r3, #1
 8004d66:	d006      	beq.n	8004d76 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d68:	6802      	ldr	r2, [r0, #0]
 8004d6a:	6853      	ldr	r3, [r2, #4]
 8004d6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d70:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d78:	f013 0f02 	tst.w	r3, #2
 8004d7c:	d006      	beq.n	8004d8c <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d7e:	6802      	ldr	r2, [r0, #0]
 8004d80:	6853      	ldr	r3, [r2, #4]
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d86:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d8e:	f013 0f04 	tst.w	r3, #4
 8004d92:	d006      	beq.n	8004da2 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d94:	6802      	ldr	r2, [r0, #0]
 8004d96:	6853      	ldr	r3, [r2, #4]
 8004d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004da4:	f013 0f08 	tst.w	r3, #8
 8004da8:	d006      	beq.n	8004db8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004daa:	6802      	ldr	r2, [r0, #0]
 8004dac:	6853      	ldr	r3, [r2, #4]
 8004dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004db2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004dba:	f013 0f10 	tst.w	r3, #16
 8004dbe:	d006      	beq.n	8004dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc0:	6802      	ldr	r2, [r0, #0]
 8004dc2:	6893      	ldr	r3, [r2, #8]
 8004dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004dd0:	f013 0f20 	tst.w	r3, #32
 8004dd4:	d006      	beq.n	8004de4 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd6:	6802      	ldr	r2, [r0, #0]
 8004dd8:	6893      	ldr	r3, [r2, #8]
 8004dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dde:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004de0:	430b      	orrs	r3, r1
 8004de2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004de6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dec:	6802      	ldr	r2, [r0, #0]
 8004dee:	6853      	ldr	r3, [r2, #4]
 8004df0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004df4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004df6:	430b      	orrs	r3, r1
 8004df8:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e00:	d00b      	beq.n	8004e1a <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e08:	d006      	beq.n	8004e18 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e0a:	6802      	ldr	r2, [r0, #0]
 8004e0c:	6853      	ldr	r3, [r2, #4]
 8004e0e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004e12:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e14:	430b      	orrs	r3, r1
 8004e16:	6053      	str	r3, [r2, #4]
 8004e18:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	6853      	ldr	r3, [r2, #4]
 8004e1e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e22:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6053      	str	r3, [r2, #4]
 8004e28:	e7eb      	b.n	8004e02 <UART_AdvFeatureConfig+0xa2>

08004e2a <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e34:	f7fc ffb4 	bl	8001da0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e38:	6822      	ldr	r2, [r4, #0]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	f012 0f08 	tst.w	r2, #8
 8004e40:	d109      	bne.n	8004e56 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004e42:	2320      	movs	r3, #32
 8004e44:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8004e48:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8004e52:	b002      	add	sp, #8
 8004e54:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff fd33 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d0e9      	beq.n	8004e42 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004e6e:	2003      	movs	r0, #3
 8004e70:	e7ef      	b.n	8004e52 <UART_CheckIdleState+0x28>

08004e72 <HAL_UART_Init>:
  if(huart == NULL)
 8004e72:	b378      	cbz	r0, 8004ed4 <HAL_UART_Init+0x62>
{
 8004e74:	b510      	push	{r4, lr}
 8004e76:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8004e78:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8004e7c:	b30b      	cbz	r3, 8004ec2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004e7e:	2324      	movs	r3, #36	; 0x24
 8004e80:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff fdb6 	bl	8004a00 <UART_SetConfig>
 8004e94:	2801      	cmp	r0, #1
 8004e96:	d01f      	beq.n	8004ed8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e9a:	b9bb      	cbnz	r3, 8004ecc <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	6853      	ldr	r3, [r2, #4]
 8004ea0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ea4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	6893      	ldr	r3, [r2, #8]
 8004eaa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004eae:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	6813      	ldr	r3, [r2, #0]
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff ffb5 	bl	8004e2a <UART_CheckIdleState>
 8004ec0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004ec6:	f000 ffb7 	bl	8005e38 <HAL_UART_MspInit>
 8004eca:	e7d8      	b.n	8004e7e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7ff ff47 	bl	8004d60 <UART_AdvFeatureConfig>
 8004ed2:	e7e3      	b.n	8004e9c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	4770      	bx	lr
}
 8004ed8:	bd10      	pop	{r4, pc}
	...

08004edc <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8004edc:	b508      	push	{r3, lr}

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8004ede:	480e      	ldr	r0, [pc, #56]	; (8004f18 <MX_DFSDM1_Init+0x3c>)
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <MX_DFSDM1_Init+0x40>)
 8004ee2:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	7103      	strb	r3, [r0, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8004ee8:	6083      	str	r3, [r0, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8004eea:	2202      	movs	r2, #2
 8004eec:	60c2      	str	r2, [r0, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8004eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef2:	6102      	str	r2, [r0, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8004ef4:	6143      	str	r3, [r0, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8004ef6:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004ef8:	61c3      	str	r3, [r0, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8004efa:	6203      	str	r3, [r0, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004efc:	6243      	str	r3, [r0, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8004efe:	2201      	movs	r2, #1
 8004f00:	6282      	str	r2, [r0, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8004f02:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8004f04:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8004f06:	f7fd f805 	bl	8001f14 <HAL_DFSDM_ChannelInit>
 8004f0a:	b900      	cbnz	r0, 8004f0e <MX_DFSDM1_Init+0x32>
 8004f0c:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8004f0e:	2146      	movs	r1, #70	; 0x46
 8004f10:	4803      	ldr	r0, [pc, #12]	; (8004f20 <MX_DFSDM1_Init+0x44>)
 8004f12:	f000 fd8b 	bl	8005a2c <_Error_Handler>
  }

}
 8004f16:	e7f9      	b.n	8004f0c <MX_DFSDM1_Init+0x30>
 8004f18:	200007d8 	.word	0x200007d8
 8004f1c:	40017400 	.word	0x40017400
 8004f20:	08006e50 	.word	0x08006e50

08004f24 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8004f24:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b103      	cbz	r3, 8004f2c <HAL_DFSDM_ChannelMspInit+0x8>
 8004f2a:	4770      	bx	lr
{
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004f30:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <HAL_DFSDM_ChannelMspInit+0x60>)
 8004f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	9b00      	ldr	r3, [sp, #0]
    /**DFSDM1 GPIO Configuration    
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    PC3     ------> DFSDM1_DATIN1 
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8004f44:	f640 0308 	movw	r3, #2056	; 0x808
 8004f48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4a:	2602      	movs	r6, #2
 8004f4c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	2400      	movs	r4, #0
 8004f50:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f52:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8004f54:	2503      	movs	r5, #3
 8004f56:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f58:	a901      	add	r1, sp, #4
 8004f5a:	480b      	ldr	r0, [pc, #44]	; (8004f88 <HAL_DFSDM_ChannelMspInit+0x64>)
 8004f5c:	f7fd fb72 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8004f60:	2308      	movs	r3, #8
 8004f62:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f64:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f68:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8004f6a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8004f6c:	a901      	add	r1, sp, #4
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <HAL_DFSDM_ChannelMspInit+0x68>)
 8004f70:	f7fd fb68 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8004f74:	4a02      	ldr	r2, [pc, #8]	; (8004f80 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	6013      	str	r3, [r2, #0]
  }
}
 8004f7c:	b006      	add	sp, #24
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	20000290 	.word	0x20000290
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40020800 	.word	0x40020800
 8004f8c:	40020c00 	.word	0x40020c00

08004f90 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f96:	4ba8      	ldr	r3, [pc, #672]	; (8005238 <MX_GPIO_Init+0x2a8>)
 8004f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f9a:	f042 0210 	orr.w	r2, r2, #16
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa2:	f002 0210 	and.w	r2, r2, #16
 8004fa6:	9200      	str	r2, [sp, #0]
 8004fa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004fb8:	9201      	str	r2, [sp, #4]
 8004fba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fbe:	f042 0202 	orr.w	r2, r2, #2
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc6:	f002 0202 	and.w	r2, r2, #2
 8004fca:	9202      	str	r2, [sp, #8]
 8004fcc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd0:	f042 0208 	orr.w	r2, r2, #8
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8004fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd8:	f002 0208 	and.w	r2, r2, #8
 8004fdc:	9203      	str	r2, [sp, #12]
 8004fde:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	f042 0204 	orr.w	r2, r2, #4
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8004fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fea:	f002 0204 	and.w	r2, r2, #4
 8004fee:	9204      	str	r2, [sp, #16]
 8004ff0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffc:	f002 0201 	and.w	r2, r2, #1
 8005000:	9205      	str	r2, [sp, #20]
 8005002:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
 800500c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800500e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005012:	9206      	str	r2, [sp, #24]
 8005014:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
 800501e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005024:	9207      	str	r2, [sp, #28]
 8005026:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
 8005030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005032:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005036:	9208      	str	r2, [sp, #32]
 8005038:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800503a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
 8005042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005044:	f002 0220 	and.w	r2, r2, #32
 8005048:	9209      	str	r2, [sp, #36]	; 0x24
 800504a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800504c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	930a      	str	r3, [sp, #40]	; 0x28
 800505c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800505e:	2704      	movs	r7, #4
 8005060:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005062:	2502      	movs	r5, #2
 8005064:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2400      	movs	r4, #0
 8005068:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506a:	2603      	movs	r6, #3
 800506c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800506e:	f04f 0b09 	mov.w	fp, #9
 8005072:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8005076:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800525c <MX_GPIO_Init+0x2cc>
 800507a:	a90b      	add	r1, sp, #44	; 0x2c
 800507c:	4640      	mov	r0, r8
 800507e:	f7fd fae1 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8005082:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005086:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800508e:	f04f 090b 	mov.w	r9, #11
 8005092:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005096:	a90b      	add	r1, sp, #44	; 0x2c
 8005098:	4868      	ldr	r0, [pc, #416]	; (800523c <MX_GPIO_Init+0x2ac>)
 800509a:	f7fd fad3 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800509e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80050a2:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80050aa:	f04f 0a0c 	mov.w	sl, #12
 80050ae:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050b2:	a90b      	add	r1, sp, #44	; 0x2c
 80050b4:	4640      	mov	r0, r8
 80050b6:	f7fd fac5 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80050ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050be:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050c0:	2312      	movs	r3, #18
 80050c2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050c4:	2301      	movs	r3, #1
 80050c6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c8:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050ca:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050cc:	a90b      	add	r1, sp, #44	; 0x2c
 80050ce:	485c      	ldr	r0, [pc, #368]	; (8005240 <MX_GPIO_Init+0x2b0>)
 80050d0:	f7fd fab8 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80050d4:	f643 4323 	movw	r3, #15395	; 0x3c23
 80050d8:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050da:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050dc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050de:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80050e0:	f04f 080a 	mov.w	r8, #10
 80050e4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e8:	a90b      	add	r1, sp, #44	; 0x2c
 80050ea:	4855      	ldr	r0, [pc, #340]	; (8005240 <MX_GPIO_Init+0x2b0>)
 80050ec:	f7fd faaa 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 80050f0:	2318      	movs	r3, #24
 80050f2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050f8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80050fa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050fe:	a90b      	add	r1, sp, #44	; 0x2c
 8005100:	484f      	ldr	r0, [pc, #316]	; (8005240 <MX_GPIO_Init+0x2b0>)
 8005102:	f7fd fa9f 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8005106:	23c0      	movs	r3, #192	; 0xc0
 8005108:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005110:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005114:	a90b      	add	r1, sp, #44	; 0x2c
 8005116:	484b      	ldr	r0, [pc, #300]	; (8005244 <MX_GPIO_Init+0x2b4>)
 8005118:	f7fd fa94 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 800511c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005120:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005122:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005126:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005128:	2308      	movs	r3, #8
 800512a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 800512c:	a90b      	add	r1, sp, #44	; 0x2c
 800512e:	4846      	ldr	r0, [pc, #280]	; (8005248 <MX_GPIO_Init+0x2b8>)
 8005130:	f7fd fa88 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8005134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005138:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800513a:	2312      	movs	r3, #18
 800513c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005140:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8005142:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8005144:	a90b      	add	r1, sp, #44	; 0x2c
 8005146:	4841      	ldr	r0, [pc, #260]	; (800524c <MX_GPIO_Init+0x2bc>)
 8005148:	f7fd fa7c 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005150:	2312      	movs	r3, #18
 8005152:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005154:	2301      	movs	r3, #1
 8005156:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005158:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 800515a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 800515e:	a90b      	add	r1, sp, #44	; 0x2c
 8005160:	4837      	ldr	r0, [pc, #220]	; (8005240 <MX_GPIO_Init+0x2b0>)
 8005162:	f7fd fa6f 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8005166:	2340      	movs	r3, #64	; 0x40
 8005168:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005170:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8005174:	a90b      	add	r1, sp, #44	; 0x2c
 8005176:	4832      	ldr	r0, [pc, #200]	; (8005240 <MX_GPIO_Init+0x2b0>)
 8005178:	f7fd fa64 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 800517c:	f248 1337 	movw	r3, #33079	; 0x8137
 8005180:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005182:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005184:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005186:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005188:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800518c:	a90b      	add	r1, sp, #44	; 0x2c
 800518e:	482b      	ldr	r0, [pc, #172]	; (800523c <MX_GPIO_Init+0x2ac>)
 8005190:	f7fd fa58 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin 
                           PJPin PJPin PJPin PJPin 
                           PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin 
 8005194:	f24f 033b 	movw	r3, #61499	; 0xf03b
 8005198:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARD_D8_Pin|LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin 
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800519a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800519e:	a90b      	add	r1, sp, #44	; 0x2c
 80051a0:	482b      	ldr	r0, [pc, #172]	; (8005250 <MX_GPIO_Init+0x2c0>)
 80051a2:	f7fd fa4f 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80051a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80051aa:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051b2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b6:	a90b      	add	r1, sp, #44	; 0x2c
 80051b8:	4822      	ldr	r0, [pc, #136]	; (8005244 <MX_GPIO_Init+0x2b4>)
 80051ba:	f7fd fa43 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 80051be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80051c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80051ca:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ce:	a90b      	add	r1, sp, #44	; 0x2c
 80051d0:	481d      	ldr	r0, [pc, #116]	; (8005248 <MX_GPIO_Init+0x2b8>)
 80051d2:	f7fd fa37 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80051d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051dc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80051e2:	2305      	movs	r3, #5
 80051e4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80051e6:	a90b      	add	r1, sp, #44	; 0x2c
 80051e8:	4818      	ldr	r0, [pc, #96]	; (800524c <MX_GPIO_Init+0x2bc>)
 80051ea:	f7fd fa2b 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 80051ee:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 80051f2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051f4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051f8:	a90b      	add	r1, sp, #44	; 0x2c
 80051fa:	4816      	ldr	r0, [pc, #88]	; (8005254 <MX_GPIO_Init+0x2c4>)
 80051fc:	f7fd fa22 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin 
                           PIPin PIPin PIPin PIPin 
                           PIPin PIPin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8005200:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8005204:	930b      	str	r3, [sp, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005206:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005208:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800520a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800520c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005210:	a90b      	add	r1, sp, #44	; 0x2c
 8005212:	4810      	ldr	r0, [pc, #64]	; (8005254 <MX_GPIO_Init+0x2c4>)
 8005214:	f7fd fa16 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin 
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 8005218:	23f8      	movs	r3, #248	; 0xf8
 800521a:	930b      	str	r3, [sp, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800521c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005220:	a90b      	add	r1, sp, #44	; 0x2c
 8005222:	480d      	ldr	r0, [pc, #52]	; (8005258 <MX_GPIO_Init+0x2c8>)
 8005224:	f7fd fa0e 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8005228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800522c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005232:	940e      	str	r4, [sp, #56]	; 0x38
 8005234:	e014      	b.n	8005260 <MX_GPIO_Init+0x2d0>
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	40021800 	.word	0x40021800
 8005240:	40020400 	.word	0x40020400
 8005244:	40020c00 	.word	0x40020c00
 8005248:	40020800 	.word	0x40020800
 800524c:	40020000 	.word	0x40020000
 8005250:	40022400 	.word	0x40022400
 8005254:	40022000 	.word	0x40022000
 8005258:	40022800 	.word	0x40022800
 800525c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8005260:	2307      	movs	r3, #7
 8005262:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8005264:	a90b      	add	r1, sp, #44	; 0x2c
 8005266:	48a1      	ldr	r0, [pc, #644]	; (80054ec <MX_GPIO_Init+0x55c>)
 8005268:	f7fd f9ec 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 800526c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005270:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005272:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005274:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005276:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8005278:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800527c:	a90b      	add	r1, sp, #44	; 0x2c
 800527e:	489b      	ldr	r0, [pc, #620]	; (80054ec <MX_GPIO_Init+0x55c>)
 8005280:	f7fd f9e0 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8005284:	2330      	movs	r3, #48	; 0x30
 8005286:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005288:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800528c:	a90b      	add	r1, sp, #44	; 0x2c
 800528e:	4898      	ldr	r0, [pc, #608]	; (80054f0 <MX_GPIO_Init+0x560>)
 8005290:	f7fd f9d8 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8005294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005298:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800529e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052a0:	2305      	movs	r3, #5
 80052a2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80052a4:	a90b      	add	r1, sp, #44	; 0x2c
 80052a6:	4893      	ldr	r0, [pc, #588]	; (80054f4 <MX_GPIO_Init+0x564>)
 80052a8:	f7fd f9cc 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80052ac:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80052b0:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052bc:	a90b      	add	r1, sp, #44	; 0x2c
 80052be:	488e      	ldr	r0, [pc, #568]	; (80054f8 <MX_GPIO_Init+0x568>)
 80052c0:	f7fd f9c0 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80052c4:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ca:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80052cc:	2308      	movs	r3, #8
 80052ce:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80052d0:	a90b      	add	r1, sp, #44	; 0x2c
 80052d2:	4887      	ldr	r0, [pc, #540]	; (80054f0 <MX_GPIO_Init+0x560>)
 80052d4:	f7fd f9b6 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin 
                           PHPin PHPin PHPin PHPin 
                           PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 80052d8:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80052dc:	930b      	str	r3, [sp, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052de:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80052e4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80052e8:	a90b      	add	r1, sp, #44	; 0x2c
 80052ea:	4884      	ldr	r0, [pc, #528]	; (80054fc <MX_GPIO_Init+0x56c>)
 80052ec:	f7fd f9aa 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80052f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fa:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80052fc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8005300:	a90b      	add	r1, sp, #44	; 0x2c
 8005302:	487f      	ldr	r0, [pc, #508]	; (8005500 <MX_GPIO_Init+0x570>)
 8005304:	f7fd f99e 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8005308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800530c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005310:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005314:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8005316:	a90b      	add	r1, sp, #44	; 0x2c
 8005318:	4876      	ldr	r0, [pc, #472]	; (80054f4 <MX_GPIO_Init+0x564>)
 800531a:	f7fd f993 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800531e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8005322:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005326:	4b77      	ldr	r3, [pc, #476]	; (8005504 <MX_GPIO_Init+0x574>)
 8005328:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800532c:	a90b      	add	r1, sp, #44	; 0x2c
 800532e:	4874      	ldr	r0, [pc, #464]	; (8005500 <MX_GPIO_Init+0x570>)
 8005330:	f7fd f988 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8005334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005338:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005340:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8005342:	a90b      	add	r1, sp, #44	; 0x2c
 8005344:	4870      	ldr	r0, [pc, #448]	; (8005508 <MX_GPIO_Init+0x578>)
 8005346:	f7fd f97d 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 800534a:	23c0      	movs	r3, #192	; 0xc0
 800534c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005352:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005354:	2308      	movs	r3, #8
 8005356:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005358:	a90b      	add	r1, sp, #44	; 0x2c
 800535a:	486b      	ldr	r0, [pc, #428]	; (8005508 <MX_GPIO_Init+0x578>)
 800535c:	f7fd f972 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8005360:	2310      	movs	r3, #16
 8005362:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005364:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005368:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800536a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800536e:	a90b      	add	r1, sp, #44	; 0x2c
 8005370:	4862      	ldr	r0, [pc, #392]	; (80054fc <MX_GPIO_Init+0x56c>)
 8005372:	f7fd f967 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8005376:	2348      	movs	r3, #72	; 0x48
 8005378:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800537a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800537e:	a90b      	add	r1, sp, #44	; 0x2c
 8005380:	485a      	ldr	r0, [pc, #360]	; (80054ec <MX_GPIO_Init+0x55c>)
 8005382:	f7fd f95f 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005390:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8005392:	a90b      	add	r1, sp, #44	; 0x2c
 8005394:	4858      	ldr	r0, [pc, #352]	; (80054f8 <MX_GPIO_Init+0x568>)
 8005396:	f7fd f955 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80053a4:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80053a6:	a90b      	add	r1, sp, #44	; 0x2c
 80053a8:	4853      	ldr	r0, [pc, #332]	; (80054f8 <MX_GPIO_Init+0x568>)
 80053aa:	f7fd f94b 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80053ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80053b2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053b4:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053b8:	a90b      	add	r1, sp, #44	; 0x2c
 80053ba:	484f      	ldr	r0, [pc, #316]	; (80054f8 <MX_GPIO_Init+0x568>)
 80053bc:	f7fd f942 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80053c0:	2301      	movs	r3, #1
 80053c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80053ca:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80053ce:	a90b      	add	r1, sp, #44	; 0x2c
 80053d0:	484d      	ldr	r0, [pc, #308]	; (8005508 <MX_GPIO_Init+0x578>)
 80053d2:	f7fd f937 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80053d6:	2332      	movs	r3, #50	; 0x32
 80053d8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053de:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053e0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e4:	a90b      	add	r1, sp, #44	; 0x2c
 80053e6:	4848      	ldr	r0, [pc, #288]	; (8005508 <MX_GPIO_Init+0x578>)
 80053e8:	f7fd f92c 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 80053ec:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053ee:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80053f2:	a90b      	add	r1, sp, #44	; 0x2c
 80053f4:	4844      	ldr	r0, [pc, #272]	; (8005508 <MX_GPIO_Init+0x578>)
 80053f6:	f7fd f925 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80053fa:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053fc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005400:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005402:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005406:	a90b      	add	r1, sp, #44	; 0x2c
 8005408:	4840      	ldr	r0, [pc, #256]	; (800550c <MX_GPIO_Init+0x57c>)
 800540a:	f7fd f91b 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 800540e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005412:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005414:	2312      	movs	r3, #18
 8005416:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005418:	2301      	movs	r3, #1
 800541a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800541c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800541e:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8005420:	a90b      	add	r1, sp, #44	; 0x2c
 8005422:	4833      	ldr	r0, [pc, #204]	; (80054f0 <MX_GPIO_Init+0x560>)
 8005424:	f7fd f90e 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8005428:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005430:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8005432:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8005436:	a90b      	add	r1, sp, #44	; 0x2c
 8005438:	482d      	ldr	r0, [pc, #180]	; (80054f0 <MX_GPIO_Init+0x560>)
 800543a:	f7fd f903 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800543e:	2386      	movs	r3, #134	; 0x86
 8005440:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005442:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005444:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005446:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005448:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800544c:	a90b      	add	r1, sp, #44	; 0x2c
 800544e:	4829      	ldr	r0, [pc, #164]	; (80054f4 <MX_GPIO_Init+0x564>)
 8005450:	f7fd f8f8 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8005454:	2301      	movs	r3, #1
 8005456:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005458:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <MX_GPIO_Init+0x580>)
 800545a:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800545e:	a90b      	add	r1, sp, #44	; 0x2c
 8005460:	4824      	ldr	r0, [pc, #144]	; (80054f4 <MX_GPIO_Init+0x564>)
 8005462:	f7fd f8ef 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8005466:	2350      	movs	r3, #80	; 0x50
 8005468:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800546a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800546e:	a90b      	add	r1, sp, #44	; 0x2c
 8005470:	4820      	ldr	r0, [pc, #128]	; (80054f4 <MX_GPIO_Init+0x564>)
 8005472:	f7fd f8e7 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8005476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800547a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005480:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005482:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8005486:	a90b      	add	r1, sp, #44	; 0x2c
 8005488:	4819      	ldr	r0, [pc, #100]	; (80054f0 <MX_GPIO_Init+0x560>)
 800548a:	f7fd f8db 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005492:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8005496:	a90b      	add	r1, sp, #44	; 0x2c
 8005498:	4818      	ldr	r0, [pc, #96]	; (80054fc <MX_GPIO_Init+0x56c>)
 800549a:	f7fd f8d3 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800549e:	2328      	movs	r3, #40	; 0x28
 80054a0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80054a8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ac:	a90b      	add	r1, sp, #44	; 0x2c
 80054ae:	4811      	ldr	r0, [pc, #68]	; (80054f4 <MX_GPIO_Init+0x564>)
 80054b0:	f7fd f8c8 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80054b4:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ba:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80054bc:	230d      	movs	r3, #13
 80054be:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80054c0:	a90b      	add	r1, sp, #44	; 0x2c
 80054c2:	4814      	ldr	r0, [pc, #80]	; (8005514 <MX_GPIO_Init+0x584>)
 80054c4:	f7fd f8be 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80054c8:	2340      	movs	r3, #64	; 0x40
 80054ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054cc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80054d2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80054d6:	a90b      	add	r1, sp, #44	; 0x2c
 80054d8:	4808      	ldr	r0, [pc, #32]	; (80054fc <MX_GPIO_Init+0x56c>)
 80054da:	f7fd f8b3 	bl	8002644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80054de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80054e2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e8:	940e      	str	r4, [sp, #56]	; 0x38
 80054ea:	e015      	b.n	8005518 <MX_GPIO_Init+0x588>
 80054ec:	40021800 	.word	0x40021800
 80054f0:	40020c00 	.word	0x40020c00
 80054f4:	40020000 	.word	0x40020000
 80054f8:	40021400 	.word	0x40021400
 80054fc:	40021c00 	.word	0x40021c00
 8005500:	40022000 	.word	0x40022000
 8005504:	10120000 	.word	0x10120000
 8005508:	40020800 	.word	0x40020800
 800550c:	40020400 	.word	0x40020400
 8005510:	10110000 	.word	0x10110000
 8005514:	40022400 	.word	0x40022400
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005518:	2305      	movs	r3, #5
 800551a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	a90b      	add	r1, sp, #44	; 0x2c
 800551e:	4803      	ldr	r0, [pc, #12]	; (800552c <MX_GPIO_Init+0x59c>)
 8005520:	f7fd f890 	bl	8002644 <HAL_GPIO_Init>

}
 8005524:	b011      	add	sp, #68	; 0x44
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	40020400 	.word	0x40020400

08005530 <CopyBuffer>:
      *
      */
     static void CopyBuffer(int16_t *pbuffer1, int16_t *pbuffer2, uint16_t BufferSize)
     {
         uint32_t i = 0;
         for (i = 0; i < BufferSize; i++)
 8005530:	2300      	movs	r3, #0
 8005532:	4293      	cmp	r3, r2
 8005534:	d20a      	bcs.n	800554c <CopyBuffer+0x1c>
     {
 8005536:	b410      	push	{r4}
         {
             pbuffer1[i] = pbuffer2[i];
 8005538:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
 800553c:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
         for (i = 0; i < BufferSize; i++)
 8005540:	3301      	adds	r3, #1
 8005542:	4293      	cmp	r3, r2
 8005544:	d3f8      	bcc.n	8005538 <CopyBuffer+0x8>
         }
     }
 8005546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	4770      	bx	lr
	...

08005550 <SAIx_In_DeInit>:
     /**
       * @brief  Deinitializes the output Audio Codec audio interface (SAI).
       * @retval None
       */
     static void SAIx_In_DeInit(void)
     {
 8005550:	b510      	push	{r4, lr}
         /* Initialize the haudio_in_sai Instance parameter */
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005552:	4808      	ldr	r0, [pc, #32]	; (8005574 <SAIx_In_DeInit+0x24>)
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <SAIx_In_DeInit+0x28>)
 8005556:	6003      	str	r3, [r0, #0]
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005558:	4c08      	ldr	r4, [pc, #32]	; (800557c <SAIx_In_DeInit+0x2c>)
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <SAIx_In_DeInit+0x30>)
 800555c:	6022      	str	r2, [r4, #0]
         /* Disable SAI peripheral */
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005564:	601a      	str	r2, [r3, #0]

         HAL_SAI_DeInit(&haudio_in_sai);
 8005566:	f7ff f865 	bl	8004634 <HAL_SAI_DeInit>
         HAL_SAI_DeInit(&haudio_out_sai);
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff f862 	bl	8004634 <HAL_SAI_DeInit>
 8005570:	bd10      	pop	{r4, pc}
 8005572:	bf00      	nop
 8005574:	20000364 	.word	0x20000364
 8005578:	40015824 	.word	0x40015824
 800557c:	20000448 	.word	0x20000448
 8005580:	40015804 	.word	0x40015804

08005584 <SAI_AUDIO_IN_MspInit>:
       * @brief  Initializes SAI Audio IN MSP.
       * @param  hsai: SAI handle
       * @retval None
       */
     static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
     {
 8005584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005586:	b08b      	sub	sp, #44	; 0x2c
 8005588:	4607      	mov	r7, r0
         static DMA_HandleTypeDef hdma_sai_rx;
         GPIO_InitTypeDef  gpio_init_structure;

         /* Enable SAI clock */
         AUDIO_IN_SAIx_CLK_ENABLE();
 800558a:	4c3b      	ldr	r4, [pc, #236]	; (8005678 <SAI_AUDIO_IN_MspInit+0xf4>)
 800558c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800558e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005592:	6463      	str	r3, [r4, #68]	; 0x44
 8005594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	9b01      	ldr	r3, [sp, #4]

         /* Enable SD GPIO clock */
         AUDIO_IN_SAIx_SD_ENABLE();
 800559e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055a0:	f043 0310 	orr.w	r3, r3, #16
 80055a4:	6323      	str	r3, [r4, #48]	; 0x30
 80055a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	9302      	str	r3, [sp, #8]
 80055ae:	9b02      	ldr	r3, [sp, #8]
         /* CODEC_SAI pin configuration: SD pin */
         gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80055b0:	2308      	movs	r3, #8
 80055b2:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80055b4:	2502      	movs	r5, #2
 80055b6:	9506      	str	r5, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 80055b8:	2600      	movs	r6, #0
 80055ba:	9607      	str	r6, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80055bc:	9508      	str	r5, [sp, #32]
         gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80055be:	2306      	movs	r3, #6
 80055c0:	9309      	str	r3, [sp, #36]	; 0x24
         HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80055c2:	a905      	add	r1, sp, #20
 80055c4:	482d      	ldr	r0, [pc, #180]	; (800567c <SAI_AUDIO_IN_MspInit+0xf8>)
 80055c6:	f7fd f83d 	bl	8002644 <HAL_GPIO_Init>

         /* Enable Audio INT GPIO clock */
         AUDIO_IN_INT_GPIO_ENABLE();
 80055ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d0:	6323      	str	r3, [r4, #48]	; 0x30
 80055d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d8:	9303      	str	r3, [sp, #12]
 80055da:	9b03      	ldr	r3, [sp, #12]
         /* Audio INT pin configuration: input */
         gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80055dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055e0:	9305      	str	r3, [sp, #20]
         gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80055e2:	9606      	str	r6, [sp, #24]
         gpio_init_structure.Pull = GPIO_NOPULL;
 80055e4:	9607      	str	r6, [sp, #28]
         gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80055e6:	9508      	str	r5, [sp, #32]
         HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80055e8:	a905      	add	r1, sp, #20
 80055ea:	4825      	ldr	r0, [pc, #148]	; (8005680 <SAI_AUDIO_IN_MspInit+0xfc>)
 80055ec:	f7fd f82a 	bl	8002644 <HAL_GPIO_Init>

         /* Enable the DMA clock */
         AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80055f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055f6:	6323      	str	r3, [r4, #48]	; 0x30
 80055f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	9b04      	ldr	r3, [sp, #16]

         if (hsai->Instance == AUDIO_IN_SAIx)
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <SAI_AUDIO_IN_MspInit+0x100>)
 8005606:	429a      	cmp	r2, r3
 8005608:	d011      	beq.n	800562e <SAI_AUDIO_IN_MspInit+0xaa>
             /* Configure the DMA Stream */
             HAL_DMA_Init(&hdma_sai_rx);
         }

         /* SAI DMA IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800560a:	2200      	movs	r2, #0
 800560c:	210f      	movs	r1, #15
 800560e:	203c      	movs	r0, #60	; 0x3c
 8005610:	f7fc fbec 	bl	8001dec <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8005614:	203c      	movs	r0, #60	; 0x3c
 8005616:	f7fc fc19 	bl	8001e4c <HAL_NVIC_EnableIRQ>

         /* Audio INT IRQ Channel configuration */
         HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	210f      	movs	r1, #15
 800561e:	2028      	movs	r0, #40	; 0x28
 8005620:	f7fc fbe4 	bl	8001dec <HAL_NVIC_SetPriority>
         HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8005624:	2028      	movs	r0, #40	; 0x28
 8005626:	f7fc fc11 	bl	8001e4c <HAL_NVIC_EnableIRQ>
     }
 800562a:	b00b      	add	sp, #44	; 0x2c
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
             hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800562e:	4c16      	ldr	r4, [pc, #88]	; (8005688 <SAI_AUDIO_IN_MspInit+0x104>)
 8005630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005634:	6063      	str	r3, [r4, #4]
             hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005636:	60a6      	str	r6, [r4, #8]
             hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005638:	60e6      	str	r6, [r4, #12]
             hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800563a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800563e:	6122      	str	r2, [r4, #16]
             hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005644:	6162      	str	r2, [r4, #20]
             hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8005646:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800564a:	61a2      	str	r2, [r4, #24]
             hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800564c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005650:	61e2      	str	r2, [r4, #28]
             hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005656:	6222      	str	r2, [r4, #32]
             hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005658:	6266      	str	r6, [r4, #36]	; 0x24
             hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800565a:	2203      	movs	r2, #3
 800565c:	62a2      	str	r2, [r4, #40]	; 0x28
             hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800565e:	62e6      	str	r6, [r4, #44]	; 0x2c
             hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8005660:	6326      	str	r6, [r4, #48]	; 0x30
             hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <SAI_AUDIO_IN_MspInit+0x108>)
 8005664:	6023      	str	r3, [r4, #0]
             __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8005666:	673c      	str	r4, [r7, #112]	; 0x70
 8005668:	63a7      	str	r7, [r4, #56]	; 0x38
             HAL_DMA_DeInit(&hdma_sai_rx);
 800566a:	4620      	mov	r0, r4
 800566c:	f7fc fe92 	bl	8002394 <HAL_DMA_DeInit>
             HAL_DMA_Init(&hdma_sai_rx);
 8005670:	4620      	mov	r0, r4
 8005672:	f7fc fe27 	bl	80022c4 <HAL_DMA_Init>
 8005676:	e7c8      	b.n	800560a <SAI_AUDIO_IN_MspInit+0x86>
 8005678:	40023800 	.word	0x40023800
 800567c:	40021000 	.word	0x40021000
 8005680:	40022400 	.word	0x40022400
 8005684:	40015824 	.word	0x40015824
 8005688:	20000294 	.word	0x20000294
 800568c:	40026470 	.word	0x40026470

08005690 <SAIx_In_Init>:
     {
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	b083      	sub	sp, #12
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005696:	4c39      	ldr	r4, [pc, #228]	; (800577c <SAIx_In_Init+0xec>)
 8005698:	4b39      	ldr	r3, [pc, #228]	; (8005780 <SAIx_In_Init+0xf0>)
 800569a:	6023      	str	r3, [r4, #0]
         __HAL_SAI_DISABLE(&haudio_out_sai);
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056a2:	601a      	str	r2, [r3, #0]
         haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80056a4:	2600      	movs	r6, #0
 80056a6:	6266      	str	r6, [r4, #36]	; 0x24
         haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80056a8:	9001      	str	r0, [sp, #4]
 80056aa:	61e0      	str	r0, [r4, #28]
         haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_TX;
 80056ac:	6066      	str	r6, [r4, #4]
         haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 80056ae:	6166      	str	r6, [r4, #20]
         haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 80056b0:	6326      	str	r6, [r4, #48]	; 0x30
         haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 80056b2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80056b6:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
         haudio_out_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 80056ba:	63a6      	str	r6, [r4, #56]	; 0x38
         haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 80056bc:	63e6      	str	r6, [r4, #60]	; 0x3c
         haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 80056be:	60a6      	str	r6, [r4, #8]
         haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 80056c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056c4:	6123      	str	r3, [r4, #16]
         haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 80056c6:	2701      	movs	r7, #1
 80056c8:	61a7      	str	r7, [r4, #24]
         haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80056ca:	60e6      	str	r6, [r4, #12]
         haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 80056cc:	62a6      	str	r6, [r4, #40]	; 0x28
         haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 80056ce:	62e6      	str	r6, [r4, #44]	; 0x2c
         haudio_out_sai.Init.Mckdiv         = 0;
 80056d0:	6226      	str	r6, [r4, #32]
         haudio_out_sai.FrameInit.FrameLength       = 64;
 80056d2:	f04f 0940 	mov.w	r9, #64	; 0x40
 80056d6:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
         haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80056da:	f04f 0820 	mov.w	r8, #32
 80056de:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
         haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80056e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056e6:	64a2      	str	r2, [r4, #72]	; 0x48
         haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80056e8:	64e6      	str	r6, [r4, #76]	; 0x4c
         haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80056ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80056ee:	6522      	str	r2, [r4, #80]	; 0x50
         haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80056f0:	6566      	str	r6, [r4, #84]	; 0x54
         haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 80056f2:	65a6      	str	r6, [r4, #88]	; 0x58
         haudio_out_sai.SlotInit.SlotNumber     = 4;
 80056f4:	2204      	movs	r2, #4
 80056f6:	65e2      	str	r2, [r4, #92]	; 0x5c
         haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 80056f8:	f04f 0b0f 	mov.w	fp, #15
 80056fc:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
         HAL_SAI_Init(&haudio_out_sai);
 8005700:	4620      	mov	r0, r4
 8005702:	f7fe fe97 	bl	8004434 <HAL_SAI_Init>
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005706:	4d1f      	ldr	r5, [pc, #124]	; (8005784 <SAIx_In_Init+0xf4>)
 8005708:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <SAIx_In_Init+0xf8>)
 800570a:	602b      	str	r3, [r5, #0]
         __HAL_SAI_DISABLE(&haudio_in_sai);
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005712:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8005714:	626e      	str	r6, [r5, #36]	; 0x24
         haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8005716:	9b01      	ldr	r3, [sp, #4]
 8005718:	61eb      	str	r3, [r5, #28]
         haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 800571a:	2303      	movs	r3, #3
 800571c:	606b      	str	r3, [r5, #4]
         haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 800571e:	616e      	str	r6, [r5, #20]
         haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8005720:	632e      	str	r6, [r5, #48]	; 0x30
         haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8005722:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
         haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8005726:	63ae      	str	r6, [r5, #56]	; 0x38
         haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005728:	63ee      	str	r6, [r5, #60]	; 0x3c
         haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 800572a:	60af      	str	r7, [r5, #8]
         haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 800572c:	612e      	str	r6, [r5, #16]
         haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 800572e:	61af      	str	r7, [r5, #24]
         haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8005730:	60ee      	str	r6, [r5, #12]
         haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8005732:	62ae      	str	r6, [r5, #40]	; 0x28
         haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8005734:	2310      	movs	r3, #16
 8005736:	62eb      	str	r3, [r5, #44]	; 0x2c
         haudio_in_sai.Init.Mckdiv         = 0;
 8005738:	622e      	str	r6, [r5, #32]
         haudio_in_sai.FrameInit.FrameLength       = 64;
 800573a:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
         haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800573e:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
         haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8005742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005746:	64ab      	str	r3, [r5, #72]	; 0x48
         haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8005748:	64ee      	str	r6, [r5, #76]	; 0x4c
         haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800574a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800574e:	652b      	str	r3, [r5, #80]	; 0x50
         haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8005750:	656e      	str	r6, [r5, #84]	; 0x54
         haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8005752:	65ae      	str	r6, [r5, #88]	; 0x58
         haudio_in_sai.SlotInit.SlotNumber     = 4;
 8005754:	2304      	movs	r3, #4
 8005756:	65eb      	str	r3, [r5, #92]	; 0x5c
         haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_0123;
 8005758:	f8c5 b060 	str.w	fp, [r5, #96]	; 0x60
         HAL_SAI_Init(&haudio_in_sai);
 800575c:	4628      	mov	r0, r5
 800575e:	f7fe fe69 	bl	8004434 <HAL_SAI_Init>
         __HAL_SAI_ENABLE(&haudio_in_sai);
 8005762:	682a      	ldr	r2, [r5, #0]
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	6013      	str	r3, [r2, #0]
         __HAL_SAI_ENABLE(&haudio_out_sai);
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005774:	6013      	str	r3, [r2, #0]
     }
 8005776:	b003      	add	sp, #12
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	20000448 	.word	0x20000448
 8005780:	40015804 	.word	0x40015804
 8005784:	20000364 	.word	0x20000364
 8005788:	40015824 	.word	0x40015824

0800578c <BSP_AUDIO_IN_OUT_Init>:



static uint8_t BSP_AUDIO_IN_OUT_Init(uint32_t AudioFreq)
     {
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	4605      	mov	r5, r0
         uint8_t ret = AUDIO_ERROR;

         /* Disable SAI */
         SAIx_In_DeInit();
 8005790:	f7ff fede 	bl	8005550 <SAIx_In_DeInit>

         /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
         BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8005794:	4c1c      	ldr	r4, [pc, #112]	; (8005808 <BSP_AUDIO_IN_OUT_Init+0x7c>)
 8005796:	2200      	movs	r2, #0
 8005798:	4629      	mov	r1, r5
 800579a:	4620      	mov	r0, r4
 800579c:	f7fc f998 	bl	8001ad0 <BSP_AUDIO_OUT_ClockConfig>
         haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80057a0:	4a1a      	ldr	r2, [pc, #104]	; (800580c <BSP_AUDIO_IN_OUT_Init+0x80>)
 80057a2:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <BSP_AUDIO_IN_OUT_Init+0x84>)
 80057a4:	601a      	str	r2, [r3, #0]
         haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80057a6:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <BSP_AUDIO_IN_OUT_Init+0x88>)
 80057a8:	6023      	str	r3, [r4, #0]
         if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7ff f88d 	bl	80048ca <HAL_SAI_GetState>
 80057b0:	b170      	cbz	r0, 80057d0 <BSP_AUDIO_IN_OUT_Init+0x44>
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
         }


         SAIx_In_Init(AudioFreq); // inclu déja le code de SAIx_Out_Init()
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7ff ff6c 	bl	8005690 <SAIx_In_Init>


         if ((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <BSP_AUDIO_IN_OUT_Init+0x8c>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2034      	movs	r0, #52	; 0x34
 80057be:	4798      	blx	r3
 80057c0:	f648 1394 	movw	r3, #35220	; 0x8994
 80057c4:	4298      	cmp	r0, r3
 80057c6:	d00c      	beq.n	80057e2 <BSP_AUDIO_IN_OUT_Init+0x56>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
             /* Initialize the audio driver structure */
             audio_drv = &wm8994_drv;
             ret = AUDIO_OK;
         } else {
             ret = AUDIO_ERROR;
 80057c8:	2401      	movs	r4, #1
         }

         if (ret == AUDIO_OK)
 80057ca:	b194      	cbz	r4, 80057f2 <BSP_AUDIO_IN_OUT_Init+0x66>
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
         }

         /* Return AUDIO_OK when all operations are correctly done */
         return ret;
     }
 80057cc:	4620      	mov	r0, r4
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
             BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80057d0:	2100      	movs	r1, #0
 80057d2:	480f      	ldr	r0, [pc, #60]	; (8005810 <BSP_AUDIO_IN_OUT_Init+0x84>)
 80057d4:	f7fc f8f8 	bl	80019c8 <BSP_AUDIO_OUT_MspInit>
             SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80057d8:	2100      	movs	r1, #0
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff fed2 	bl	8005584 <SAI_AUDIO_IN_MspInit>
 80057e0:	e7e7      	b.n	80057b2 <BSP_AUDIO_IN_OUT_Init+0x26>
             wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80057e2:	4c0d      	ldr	r4, [pc, #52]	; (8005818 <BSP_AUDIO_IN_OUT_Init+0x8c>)
 80057e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057e6:	2034      	movs	r0, #52	; 0x34
 80057e8:	4798      	blx	r3
             audio_drv = &wm8994_drv;
 80057ea:	4b0c      	ldr	r3, [pc, #48]	; (800581c <BSP_AUDIO_IN_OUT_Init+0x90>)
 80057ec:	661c      	str	r4, [r3, #96]	; 0x60
             ret = AUDIO_OK;
 80057ee:	2400      	movs	r4, #0
 80057f0:	e7eb      	b.n	80057ca <BSP_AUDIO_IN_OUT_Init+0x3e>
             audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_ANALOG_MIC | OUTPUT_DEVICE_HEADPHONE , 100, AudioFreq);
 80057f2:	4b0a      	ldr	r3, [pc, #40]	; (800581c <BSP_AUDIO_IN_OUT_Init+0x90>)
 80057f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f6:	681e      	ldr	r6, [r3, #0]
 80057f8:	462b      	mov	r3, r5
 80057fa:	2264      	movs	r2, #100	; 0x64
 80057fc:	f240 3102 	movw	r1, #770	; 0x302
 8005800:	2034      	movs	r0, #52	; 0x34
 8005802:	47b0      	blx	r6
 8005804:	e7e2      	b.n	80057cc <BSP_AUDIO_IN_OUT_Init+0x40>
 8005806:	bf00      	nop
 8005808:	20000364 	.word	0x20000364
 800580c:	40015804 	.word	0x40015804
 8005810:	20000448 	.word	0x20000448
 8005814:	40015824 	.word	0x40015824
 8005818:	20000000 	.word	0x20000000
 800581c:	20000294 	.word	0x20000294

08005820 <_BSP_AUDIO_OUT_Play>:


     static uint8_t _BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
     {
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4604      	mov	r4, r0
         /* Call the audio Codec Play function */
         if (audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <_BSP_AUDIO_OUT_Play+0x30>)
 8005826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	b28d      	uxth	r5, r1
 800582c:	462a      	mov	r2, r5
 800582e:	4601      	mov	r1, r0
 8005830:	2034      	movs	r0, #52	; 0x34
 8005832:	4798      	blx	r3
 8005834:	b108      	cbz	r0, 800583a <_BSP_AUDIO_OUT_Play+0x1a>
         {
             return AUDIO_ERROR;
 8005836:	2001      	movs	r0, #1
 8005838:	bd38      	pop	{r3, r4, r5, pc}
         }
         else
         {
             /* Update the Media layer and enable it for play */
             //if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE)) !=  HAL_OK)
             if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, Size) !=  HAL_OK)
 800583a:	462a      	mov	r2, r5
 800583c:	4621      	mov	r1, r4
 800583e:	4805      	ldr	r0, [pc, #20]	; (8005854 <_BSP_AUDIO_OUT_Play+0x34>)
 8005840:	f7fe ff1a 	bl	8004678 <HAL_SAI_Transmit_DMA>
 8005844:	b908      	cbnz	r0, 800584a <_BSP_AUDIO_OUT_Play+0x2a>
                 return AUDIO_ERROR;
             return AUDIO_OK;
 8005846:	2000      	movs	r0, #0
         }
     }
 8005848:	bd38      	pop	{r3, r4, r5, pc}
                 return AUDIO_ERROR;
 800584a:	2001      	movs	r0, #1
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	bf00      	nop
 8005850:	20000294 	.word	0x20000294
 8005854:	20000448 	.word	0x20000448

08005858 <__io_putchar>:
     {
 8005858:	b500      	push	{lr}
 800585a:	b083      	sub	sp, #12
 800585c:	a902      	add	r1, sp, #8
 800585e:	f841 0d04 	str.w	r0, [r1, #-4]!
       HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8005862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005866:	2201      	movs	r2, #1
 8005868:	4803      	ldr	r0, [pc, #12]	; (8005878 <__io_putchar+0x20>)
 800586a:	f7ff f863 	bl	8004934 <HAL_UART_Transmit>
     }
 800586e:	9801      	ldr	r0, [sp, #4]
 8005870:	b003      	add	sp, #12
 8005872:	f85d fb04 	ldr.w	pc, [sp], #4
 8005876:	bf00      	nop
 8005878:	20004898 	.word	0x20004898

0800587c <DMA2_Stream4_IRQHandler>:
     {
 800587c:	b508      	push	{r3, lr}
      HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800587e:	4b02      	ldr	r3, [pc, #8]	; (8005888 <DMA2_Stream4_IRQHandler+0xc>)
 8005880:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005882:	f7fc fded 	bl	8002460 <HAL_DMA_IRQHandler>
 8005886:	bd08      	pop	{r3, pc}
 8005888:	20000364 	.word	0x20000364

0800588c <DMA2_Stream1_IRQHandler>:
     {
 800588c:	b508      	push	{r3, lr}
      HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800588e:	4b02      	ldr	r3, [pc, #8]	; (8005898 <DMA2_Stream1_IRQHandler+0xc>)
 8005890:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005892:	f7fc fde5 	bl	8002460 <HAL_DMA_IRQHandler>
 8005896:	bd08      	pop	{r3, pc}
 8005898:	20000448 	.word	0x20000448

0800589c <get_max_val>:
     {
 800589c:	b430      	push	{r4, r5}
 800589e:	b082      	sub	sp, #8
 80058a0:	4604      	mov	r4, r0
 80058a2:	460d      	mov	r5, r1
         int16_t maxval[4] = { -32768, -32768, -32768, -32768};
 80058a4:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <get_max_val+0x74>)
 80058a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058aa:	ab02      	add	r3, sp, #8
 80058ac:	e903 0003 	stmdb	r3, {r0, r1}
         for (idx = 0 ; idx < size ; idx += 4) {
 80058b0:	2300      	movs	r3, #0
 80058b2:	e000      	b.n	80058b6 <get_max_val+0x1a>
 80058b4:	3304      	adds	r3, #4
 80058b6:	42ab      	cmp	r3, r5
 80058b8:	d223      	bcs.n	8005902 <get_max_val+0x66>
             if (buf[idx] > maxval[0])
 80058ba:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
 80058be:	f9bd 0000 	ldrsh.w	r0, [sp]
 80058c2:	4281      	cmp	r1, r0
 80058c4:	dd01      	ble.n	80058ca <get_max_val+0x2e>
                 maxval[0] = buf[idx];
 80058c6:	f8ad 1000 	strh.w	r1, [sp]
             if (buf[idx + 1] > maxval[1])
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 80058d0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80058d4:	4281      	cmp	r1, r0
 80058d6:	dd01      	ble.n	80058dc <get_max_val+0x40>
                 maxval[1] = buf[idx + 1];
 80058d8:	f8ad 1002 	strh.w	r1, [sp, #2]
             if (buf[idx + 2] > maxval[2])
 80058dc:	1c99      	adds	r1, r3, #2
 80058de:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 80058e2:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80058e6:	4281      	cmp	r1, r0
 80058e8:	dd01      	ble.n	80058ee <get_max_val+0x52>
                 maxval[2] = buf[idx + 2];
 80058ea:	f8ad 1004 	strh.w	r1, [sp, #4]
             if (buf[idx + 3] > maxval[3])
 80058ee:	1cd9      	adds	r1, r3, #3
 80058f0:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 80058f4:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80058f8:	4281      	cmp	r1, r0
 80058fa:	dddb      	ble.n	80058b4 <get_max_val+0x18>
                 maxval[3] = buf[idx + 3];
 80058fc:	f8ad 1006 	strh.w	r1, [sp, #6]
 8005900:	e7d8      	b.n	80058b4 <get_max_val+0x18>
         memcpy(amp, maxval, sizeof(maxval));
 8005902:	466b      	mov	r3, sp
 8005904:	cb03      	ldmia	r3!, {r0, r1}
 8005906:	6010      	str	r0, [r2, #0]
 8005908:	6051      	str	r1, [r2, #4]
     }
 800590a:	b002      	add	sp, #8
 800590c:	bc30      	pop	{r4, r5}
 800590e:	4770      	bx	lr
 8005910:	08006e30 	.word	0x08006e30

08005914 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
         audio_tx_buffer_state = 1;
 8005914:	2201      	movs	r2, #1
 8005916:	4b01      	ldr	r3, [pc, #4]	; (800591c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8005918:	665a      	str	r2, [r3, #100]	; 0x64
 800591a:	4770      	bx	lr
 800591c:	20000294 	.word	0x20000294

08005920 <BSP_AUDIO_IN_TransferComplete_CallBack>:
         audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8005920:	2202      	movs	r2, #2
 8005922:	4b01      	ldr	r3, [pc, #4]	; (8005928 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4770      	bx	lr
 8005928:	20004810 	.word	0x20004810

0800592c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
         audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800592c:	2201      	movs	r2, #1
 800592e:	4b01      	ldr	r3, [pc, #4]	; (8005934 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	4770      	bx	lr
 8005934:	20004810 	.word	0x20004810

08005938 <BSP_AUDIO_IN_Error_CallBack>:
     {
 8005938:	4770      	bx	lr
	...

0800593c <AUDIO_LOOPBACK>:



void AUDIO_LOOPBACK(void)
     {
 800593c:	b510      	push	{r4, lr}
 800593e:	b082      	sub	sp, #8
         int16_t amp[4];

         /* Initialize Audio Recorder with 4 channels to be used */
         if (BSP_AUDIO_IN_OUT_Init(BSP_AUDIO_FREQUENCY_44K) == AUDIO_OK)
 8005940:	f64a 4044 	movw	r0, #44100	; 0xac44
 8005944:	f7ff ff22 	bl	800578c <BSP_AUDIO_IN_OUT_Init>
 8005948:	bb00      	cbnz	r0, 800598c <AUDIO_LOOPBACK+0x50>
         {
        	 printf("Audio I/O initialization OK\r\n");
 800594a:	4829      	ldr	r0, [pc, #164]	; (80059f0 <AUDIO_LOOPBACK+0xb4>)
 800594c:	f000 fb70 	bl	8006030 <puts>
         } else {
        	 printf("Audio I/O initialization failed.\r\n");
         }

         /* Start Recording */
         HAL_StatusTypeDef res = HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)RecordBuffer, RECORD_BUFFER_SIZE);
 8005950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005954:	4927      	ldr	r1, [pc, #156]	; (80059f4 <AUDIO_LOOPBACK+0xb8>)
 8005956:	4828      	ldr	r0, [pc, #160]	; (80059f8 <AUDIO_LOOPBACK+0xbc>)
 8005958:	f7fe feee 	bl	8004738 <HAL_SAI_Receive_DMA>
         if (HAL_OK == res)
 800595c:	4601      	mov	r1, r0
 800595e:	b9c8      	cbnz	r0, 8005994 <AUDIO_LOOPBACK+0x58>
         {
        	 printf("SAI receive begin OK\r\n");
 8005960:	4826      	ldr	r0, [pc, #152]	; (80059fc <AUDIO_LOOPBACK+0xc0>)
 8005962:	f000 fb65 	bl	8006030 <puts>
         } else {
             printf("SAI receive error: %d\r\n", res);
         }

         printf("Copying Record buffer to Playback buffer\r\n");
 8005966:	4826      	ldr	r0, [pc, #152]	; (8005a00 <AUDIO_LOOPBACK+0xc4>)
 8005968:	f000 fb62 	bl	8006030 <puts>

         /* Play the recorded buffer */
         if (_BSP_AUDIO_OUT_Play((uint16_t *) &PlaybackBuffer[0], RECORD_BUFFER_SIZE) == AUDIO_OK)
 800596c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005970:	4824      	ldr	r0, [pc, #144]	; (8005a04 <AUDIO_LOOPBACK+0xc8>)
 8005972:	f7ff ff55 	bl	8005820 <_BSP_AUDIO_OUT_Play>
 8005976:	b988      	cbnz	r0, 800599c <AUDIO_LOOPBACK+0x60>
         {
        	 printf("Audio output OK\r\n");
 8005978:	4823      	ldr	r0, [pc, #140]	; (8005a08 <AUDIO_LOOPBACK+0xcc>)
 800597a:	f000 fb59 	bl	8006030 <puts>
         } else {
        	 printf("Audio output error\r\n");
     	 }
         printf("\r\n");
 800597e:	4823      	ldr	r0, [pc, #140]	; (8005a0c <AUDIO_LOOPBACK+0xd0>)
 8005980:	f000 fb56 	bl	8006030 <puts>

         audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005984:	2200      	movs	r2, #0
 8005986:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <AUDIO_LOOPBACK+0xd4>)
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e01e      	b.n	80059ca <AUDIO_LOOPBACK+0x8e>
        	 printf("Audio I/O initialization failed.\r\n");
 800598c:	4821      	ldr	r0, [pc, #132]	; (8005a14 <AUDIO_LOOPBACK+0xd8>)
 800598e:	f000 fb4f 	bl	8006030 <puts>
 8005992:	e7dd      	b.n	8005950 <AUDIO_LOOPBACK+0x14>
             printf("SAI receive error: %d\r\n", res);
 8005994:	4820      	ldr	r0, [pc, #128]	; (8005a18 <AUDIO_LOOPBACK+0xdc>)
 8005996:	f000 fad7 	bl	8005f48 <iprintf>
 800599a:	e7e4      	b.n	8005966 <AUDIO_LOOPBACK+0x2a>
        	 printf("Audio output error\r\n");
 800599c:	481f      	ldr	r0, [pc, #124]	; (8005a1c <AUDIO_LOOPBACK+0xe0>)
 800599e:	f000 fb47 	bl	8006030 <puts>
 80059a2:	e7ec      	b.n	800597e <AUDIO_LOOPBACK+0x42>
             if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
             {
                 /* Copy half of the record buffer to the playback buffer */
                 if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
                 {
                     get_max_val(RecordBuffer, RECORD_BUFFER_SIZE / 2, amp);
 80059a4:	4c13      	ldr	r4, [pc, #76]	; (80059f4 <AUDIO_LOOPBACK+0xb8>)
 80059a6:	466a      	mov	r2, sp
 80059a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059ac:	4620      	mov	r0, r4
 80059ae:	f7ff ff75 	bl	800589c <get_max_val>
                     CopyBuffer(&PlaybackBuffer[0], &RecordBuffer[0], RECORD_BUFFER_SIZE / 2);
 80059b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059b6:	4621      	mov	r1, r4
 80059b8:	4812      	ldr	r0, [pc, #72]	; (8005a04 <AUDIO_LOOPBACK+0xc8>)
 80059ba:	f7ff fdb9 	bl	8005530 <CopyBuffer>
                     CopyBuffer(&PlaybackBuffer[RECORD_BUFFER_SIZE / 2],
                    		      &RecordBuffer[RECORD_BUFFER_SIZE / 2],
								                RECORD_BUFFER_SIZE / 2);
                 }
                 /* Wait for next data */
                 audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80059be:	2200      	movs	r2, #0
 80059c0:	4b13      	ldr	r3, [pc, #76]	; (8005a10 <AUDIO_LOOPBACK+0xd4>)
 80059c2:	601a      	str	r2, [r3, #0]
             }
             if (audio_tx_buffer_state)
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <AUDIO_LOOPBACK+0xe4>)
 80059c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c8:	b973      	cbnz	r3, 80059e8 <AUDIO_LOOPBACK+0xac>
             if (audio_rec_buffer_state != BUFFER_OFFSET_NONE)
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <AUDIO_LOOPBACK+0xd4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f8      	beq.n	80059c4 <AUDIO_LOOPBACK+0x88>
                 if (audio_rec_buffer_state == BUFFER_OFFSET_HALF)
 80059d2:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <AUDIO_LOOPBACK+0xd4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d0e4      	beq.n	80059a4 <AUDIO_LOOPBACK+0x68>
                     CopyBuffer(&PlaybackBuffer[RECORD_BUFFER_SIZE / 2],
 80059da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059de:	4911      	ldr	r1, [pc, #68]	; (8005a24 <AUDIO_LOOPBACK+0xe8>)
 80059e0:	4811      	ldr	r0, [pc, #68]	; (8005a28 <AUDIO_LOOPBACK+0xec>)
 80059e2:	f7ff fda5 	bl	8005530 <CopyBuffer>
 80059e6:	e7ea      	b.n	80059be <AUDIO_LOOPBACK+0x82>
             {
                 audio_tx_buffer_state = 0;
 80059e8:	2200      	movs	r2, #0
 80059ea:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <AUDIO_LOOPBACK+0xe4>)
 80059ec:	665a      	str	r2, [r3, #100]	; 0x64
 80059ee:	e7ec      	b.n	80059ca <AUDIO_LOOPBACK+0x8e>
 80059f0:	08006e60 	.word	0x08006e60
 80059f4:	20000810 	.word	0x20000810
 80059f8:	20000364 	.word	0x20000364
 80059fc:	08006ea4 	.word	0x08006ea4
 8005a00:	08006ed4 	.word	0x08006ed4
 8005a04:	20002810 	.word	0x20002810
 8005a08:	08006f00 	.word	0x08006f00
 8005a0c:	08006ea0 	.word	0x08006ea0
 8005a10:	20004810 	.word	0x20004810
 8005a14:	08006e80 	.word	0x08006e80
 8005a18:	08006ebc 	.word	0x08006ebc
 8005a1c:	08006f14 	.word	0x08006f14
 8005a20:	20000294 	.word	0x20000294
 8005a24:	20001810 	.word	0x20001810
 8005a28:	20003810 	.word	0x20003810

08005a2c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8005a2c:	e7fe      	b.n	8005a2c <_Error_Handler>
	...

08005a30 <SystemClock_Config>:
{
 8005a30:	b500      	push	{lr}
 8005a32:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a34:	4b3b      	ldr	r3, [pc, #236]	; (8005b24 <SystemClock_Config+0xf4>)
 8005a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a48:	4b37      	ldr	r3, [pc, #220]	; (8005b28 <SystemClock_Config+0xf8>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a64:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a66:	2302      	movs	r3, #2
 8005a68:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a6a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005a6e:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8005a70:	2219      	movs	r2, #25
 8005a72:	9233      	str	r2, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8005a74:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8005a78:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a7a:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a80:	a82b      	add	r0, sp, #172	; 0xac
 8005a82:	f7fd fb4f 	bl	8003124 <HAL_RCC_OscConfig>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d13c      	bne.n	8005b04 <SystemClock_Config+0xd4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005a8a:	f7fd fb0d 	bl	80030a8 <HAL_PWREx_EnableOverDrive>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d13c      	bne.n	8005b0c <SystemClock_Config+0xdc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a92:	230f      	movs	r3, #15
 8005a94:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a96:	2302      	movs	r3, #2
 8005a98:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005aa2:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa8:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005aaa:	2107      	movs	r1, #7
 8005aac:	a826      	add	r0, sp, #152	; 0x98
 8005aae:	f7fd fd93 	bl	80035d8 <HAL_RCC_ClockConfig>
 8005ab2:	bb78      	cbnz	r0, 8005b14 <SystemClock_Config+0xe4>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <SystemClock_Config+0xfc>)
 8005ab6:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005ab8:	23c0      	movs	r3, #192	; 0xc0
 8005aba:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8005abc:	2302      	movs	r3, #2
 8005abe:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005ac8:	2201      	movs	r2, #1
 8005aca:	920c      	str	r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005acc:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8005ace:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ad0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8005ad2:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ad4:	a802      	add	r0, sp, #8
 8005ad6:	f7fd fe73 	bl	80037c0 <HAL_RCCEx_PeriphCLKConfig>
 8005ada:	b9f8      	cbnz	r0, 8005b1c <SystemClock_Config+0xec>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005adc:	f7fd fe3e 	bl	800375c <HAL_RCC_GetHCLKFreq>
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <SystemClock_Config+0x100>)
 8005ae2:	fba3 3000 	umull	r3, r0, r3, r0
 8005ae6:	0980      	lsrs	r0, r0, #6
 8005ae8:	f7fc f9bc 	bl	8001e64 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005aec:	2004      	movs	r0, #4
 8005aee:	f7fc f9cf 	bl	8001e90 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005af2:	2200      	movs	r2, #0
 8005af4:	4611      	mov	r1, r2
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	f7fc f977 	bl	8001dec <HAL_NVIC_SetPriority>
}
 8005afe:	b039      	add	sp, #228	; 0xe4
 8005b00:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8005b04:	21c5      	movs	r1, #197	; 0xc5
 8005b06:	480b      	ldr	r0, [pc, #44]	; (8005b34 <SystemClock_Config+0x104>)
 8005b08:	f7ff ff90 	bl	8005a2c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005b0c:	21cc      	movs	r1, #204	; 0xcc
 8005b0e:	4809      	ldr	r0, [pc, #36]	; (8005b34 <SystemClock_Config+0x104>)
 8005b10:	f7ff ff8c 	bl	8005a2c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005b14:	21da      	movs	r1, #218	; 0xda
 8005b16:	4807      	ldr	r0, [pc, #28]	; (8005b34 <SystemClock_Config+0x104>)
 8005b18:	f7ff ff88 	bl	8005a2c <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8005b1c:	21ea      	movs	r1, #234	; 0xea
 8005b1e:	4805      	ldr	r0, [pc, #20]	; (8005b34 <SystemClock_Config+0x104>)
 8005b20:	f7ff ff84 	bl	8005a2c <_Error_Handler>
 8005b24:	40023800 	.word	0x40023800
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	08080040 	.word	0x08080040
 8005b30:	10624dd3 	.word	0x10624dd3
 8005b34:	08006f28 	.word	0x08006f28

08005b38 <main>:
{
 8005b38:	b508      	push	{r3, lr}
  HAL_Init();
 8005b3a:	f7fc f91d 	bl	8001d78 <HAL_Init>
  SystemClock_Config();
 8005b3e:	f7ff ff77 	bl	8005a30 <SystemClock_Config>
  MX_GPIO_Init();
 8005b42:	f7ff fa25 	bl	8004f90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005b46:	f000 f957 	bl	8005df8 <MX_USART1_UART_Init>
  MX_SAI1_Init();
 8005b4a:	f000 f821 	bl	8005b90 <MX_SAI1_Init>
  MX_DFSDM1_Init();
 8005b4e:	f7ff f9c5 	bl	8004edc <MX_DFSDM1_Init>
  BSP_LED_Init(LED_GREEN);
 8005b52:	2001      	movs	r0, #1
 8005b54:	f7fb fa76 	bl	8001044 <BSP_LED_Init>
  BSP_LED_On(LED_GREEN);
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f7fb fa95 	bl	8001088 <BSP_LED_On>
  printf("Connected to STM32F769I-Discovery USART 1\r\n");
 8005b5e:	480a      	ldr	r0, [pc, #40]	; (8005b88 <main+0x50>)
 8005b60:	f000 fa66 	bl	8006030 <puts>
  printf("\r\n");
 8005b64:	4809      	ldr	r0, [pc, #36]	; (8005b8c <main+0x54>)
 8005b66:	f000 fa63 	bl	8006030 <puts>
  BSP_AUDIO_IN_Init(BSP_AUDIO_FREQUENCY_44K, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	f64a 4044 	movw	r0, #44100	; 0xac44
 8005b72:	f7fc f8e3 	bl	8001d3c <BSP_AUDIO_IN_Init>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 50, BSP_AUDIO_FREQUENCY_44K);
 8005b76:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005b7a:	2132      	movs	r1, #50	; 0x32
 8005b7c:	2002      	movs	r0, #2
 8005b7e:	f7fb ffdd 	bl	8001b3c <BSP_AUDIO_OUT_Init>
  AUDIO_LOOPBACK();
 8005b82:	f7ff fedb 	bl	800593c <AUDIO_LOOPBACK>
 8005b86:	bf00      	nop
 8005b88:	08006f38 	.word	0x08006f38
 8005b8c:	08006ea0 	.word	0x08006ea0

08005b90 <MX_SAI1_Init>:

SAI_HandleTypeDef hsai_BlockA1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8005b90:	b508      	push	{r3, lr}

  hsai_BlockA1.Instance = SAI1_Block_A;
 8005b92:	4814      	ldr	r0, [pc, #80]	; (8005be4 <MX_SAI1_Init+0x54>)
 8005b94:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <MX_SAI1_Init+0x58>)
 8005b96:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8005b9c:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_24;
 8005b9e:	22c0      	movs	r2, #192	; 0xc0
 8005ba0:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005ba2:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005ba4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8005ba6:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005ba8:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005baa:	6143      	str	r3, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8005bac:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8005bae:	4a0f      	ldr	r2, [pc, #60]	; (8005bec <MX_SAI1_Init+0x5c>)
 8005bb0:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005bb2:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8005bb4:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8005bb6:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005bb8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8005bba:	2208      	movs	r2, #8
 8005bbc:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8005bc2:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005bc4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8005bc6:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8005bc8:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005bca:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8005bcc:	65c2      	str	r2, [r0, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8005bce:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8005bd0:	f7fe fc30 	bl	8004434 <HAL_SAI_Init>
 8005bd4:	b900      	cbnz	r0, 8005bd8 <MX_SAI1_Init+0x48>
 8005bd6:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8005bd8:	2150      	movs	r1, #80	; 0x50
 8005bda:	4805      	ldr	r0, [pc, #20]	; (8005bf0 <MX_SAI1_Init+0x60>)
 8005bdc:	f7ff ff26 	bl	8005a2c <_Error_Handler>
  }

}
 8005be0:	e7f9      	b.n	8005bd6 <MX_SAI1_Init+0x46>
 8005be2:	bf00      	nop
 8005be4:	20004814 	.word	0x20004814
 8005be8:	40015804 	.word	0x40015804
 8005bec:	0002ee00 	.word	0x0002ee00
 8005bf0:	08006f64 	.word	0x08006f64

08005bf4 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8005bf4:	6802      	ldr	r2, [r0, #0]
 8005bf6:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <HAL_SAI_MspInit+0x60>)
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d000      	beq.n	8005bfe <HAL_SAI_MspInit+0xa>
 8005bfc:	4770      	bx	lr
{
 8005bfe:	b570      	push	{r4, r5, r6, lr}
 8005c00:	b086      	sub	sp, #24
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <HAL_SAI_MspInit+0x64>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	b94b      	cbnz	r3, 8005c1c <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8005c08:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <HAL_SAI_MspInit+0x68>)
 8005c0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005c0c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8005c10:	6451      	str	r1, [r2, #68]	; 0x44
 8005c12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c14:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005c18:	9200      	str	r2, [sp, #0]
 8005c1a:	9a00      	ldr	r2, [sp, #0]
    }
    SAI1_client ++;
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	4a0e      	ldr	r2, [pc, #56]	; (8005c58 <HAL_SAI_MspInit+0x64>)
 8005c20:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8005c22:	2378      	movs	r3, #120	; 0x78
 8005c24:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c26:	2602      	movs	r6, #2
 8005c28:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c2e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8005c30:	2506      	movs	r5, #6
 8005c32:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c34:	a901      	add	r1, sp, #4
 8005c36:	480a      	ldr	r0, [pc, #40]	; (8005c60 <HAL_SAI_MspInit+0x6c>)
 8005c38:	f7fc fd04 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c40:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c42:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c44:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8005c46:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8005c48:	a901      	add	r1, sp, #4
 8005c4a:	4806      	ldr	r0, [pc, #24]	; (8005c64 <HAL_SAI_MspInit+0x70>)
 8005c4c:	f7fc fcfa 	bl	8002644 <HAL_GPIO_Init>

    }
}
 8005c50:	b006      	add	sp, #24
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	40015804 	.word	0x40015804
 8005c58:	200002fc 	.word	0x200002fc
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40021800 	.word	0x40021800

08005c68 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8005c68:	b508      	push	{r3, lr}

/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8005c6a:	6802      	ldr	r2, [r0, #0]
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_SAI_MspDeInit+0x34>)
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d000      	beq.n	8005c74 <HAL_SAI_MspDeInit+0xc>
 8005c72:	bd08      	pop	{r3, pc}
    {
    SAI1_client --;
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <HAL_SAI_MspDeInit+0x38>)
 8005c76:	6813      	ldr	r3, [r2, #0]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8005c7c:	b923      	cbnz	r3, 8005c88 <HAL_SAI_MspDeInit+0x20>
      {
      /* Peripheral clock disable */ 
       __HAL_RCC_SAI1_CLK_DISABLE();
 8005c7e:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <HAL_SAI_MspDeInit+0x3c>)
 8005c80:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005c82:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005c86:	6453      	str	r3, [r2, #68]	; 0x44
    PE3     ------> SAI1_SD_B
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    HAL_GPIO_DeInit(GPIOE, SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin);
 8005c88:	2178      	movs	r1, #120	; 0x78
 8005c8a:	4807      	ldr	r0, [pc, #28]	; (8005ca8 <HAL_SAI_MspDeInit+0x40>)
 8005c8c:	f7fc fdc8 	bl	8002820 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SAI1_MCLKA_GPIO_Port, SAI1_MCLKA_Pin);
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	4806      	ldr	r0, [pc, #24]	; (8005cac <HAL_SAI_MspDeInit+0x44>)
 8005c94:	f7fc fdc4 	bl	8002820 <HAL_GPIO_DeInit>

    }
}
 8005c98:	e7eb      	b.n	8005c72 <HAL_SAI_MspDeInit+0xa>
 8005c9a:	bf00      	nop
 8005c9c:	40015804 	.word	0x40015804
 8005ca0:	200002fc 	.word	0x200002fc
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40021800 	.word	0x40021800

08005cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cb2:	2003      	movs	r0, #3
 8005cb4:	f7fc f888 	bl	8001dc8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4611      	mov	r1, r2
 8005cbc:	f06f 000b 	mvn.w	r0, #11
 8005cc0:	f7fc f894 	bl	8001dec <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	f06f 000a 	mvn.w	r0, #10
 8005ccc:	f7fc f88e 	bl	8001dec <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	f06f 0009 	mvn.w	r0, #9
 8005cd8:	f7fc f888 	bl	8001dec <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4611      	mov	r1, r2
 8005ce0:	f06f 0004 	mvn.w	r0, #4
 8005ce4:	f7fc f882 	bl	8001dec <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4611      	mov	r1, r2
 8005cec:	f06f 0003 	mvn.w	r0, #3
 8005cf0:	f7fc f87c 	bl	8001dec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	f06f 0001 	mvn.w	r0, #1
 8005cfc:	f7fc f876 	bl	8001dec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005d00:	2200      	movs	r2, #0
 8005d02:	4611      	mov	r1, r2
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	f7fc f870 	bl	8001dec <HAL_NVIC_SetPriority>
 8005d0c:	bd08      	pop	{r3, pc}

08005d0e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005d0e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d10:	f7fc f83e 	bl	8001d90 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8005d14:	f7fc f8cd 	bl	8001eb2 <HAL_SYSTICK_IRQHandler>
 8005d18:	bd08      	pop	{r3, pc}

08005d1a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8005d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1c:	460d      	mov	r5, r1
 8005d1e:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d20:	2400      	movs	r4, #0
 8005d22:	e005      	b.n	8005d30 <_read+0x16>
	{
		*ptr++ = __io_getchar();
 8005d24:	1c6e      	adds	r6, r5, #1
 8005d26:	f3af 8000 	nop.w
 8005d2a:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d2c:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8005d2e:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d30:	42bc      	cmp	r4, r7
 8005d32:	dbf7      	blt.n	8005d24 <_read+0xa>
	}

return len;
}
 8005d34:	4638      	mov	r0, r7
 8005d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d38 <_write>:

int _write(int file, char *ptr, int len)
{
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d3c:	2400      	movs	r4, #0
 8005d3e:	e005      	b.n	8005d4c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8005d40:	1c4d      	adds	r5, r1, #1
 8005d42:	7808      	ldrb	r0, [r1, #0]
 8005d44:	f7ff fd88 	bl	8005858 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d48:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8005d4a:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d4c:	42b4      	cmp	r4, r6
 8005d4e:	dbf7      	blt.n	8005d40 <_write+0x8>
	}
	return len;
}
 8005d50:	4630      	mov	r0, r6
 8005d52:	bd70      	pop	{r4, r5, r6, pc}

08005d54 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005d54:	b508      	push	{r3, lr}
 8005d56:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d58:	4a0b      	ldr	r2, [pc, #44]	; (8005d88 <_sbrk+0x34>)
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	b142      	cbz	r2, 8005d70 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	; (8005d88 <_sbrk+0x34>)
 8005d60:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005d62:	4403      	add	r3, r0
 8005d64:	466a      	mov	r2, sp
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d806      	bhi.n	8005d78 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005d6a:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <_sbrk+0x34>)
 8005d6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005d6e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005d70:	4906      	ldr	r1, [pc, #24]	; (8005d8c <_sbrk+0x38>)
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <_sbrk+0x34>)
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	e7f2      	b.n	8005d5e <_sbrk+0xa>
		errno = ENOMEM;
 8005d78:	f000 f8bc 	bl	8005ef4 <__errno>
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	bd08      	pop	{r3, pc}
 8005d86:	bf00      	nop
 8005d88:	20000300 	.word	0x20000300
 8005d8c:	20004910 	.word	0x20004910

08005d90 <_close>:

int _close(int file)
{
	return -1;
}
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	4770      	bx	lr

08005d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d9a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4770      	bx	lr

08005da0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005da0:	2001      	movs	r0, #1
 8005da2:	4770      	bx	lr

08005da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005da4:	2000      	movs	r0, #0
 8005da6:	4770      	bx	lr

08005da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005da8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005daa:	4a0f      	ldr	r2, [pc, #60]	; (8005de8 <SystemInit+0x40>)
 8005dac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005db8:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <SystemInit+0x44>)
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	f041 0101 	orr.w	r1, r1, #1
 8005dc0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005dc6:	681c      	ldr	r4, [r3, #0]
 8005dc8:	4909      	ldr	r1, [pc, #36]	; (8005df0 <SystemInit+0x48>)
 8005dca:	4021      	ands	r1, r4
 8005dcc:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005dce:	4909      	ldr	r1, [pc, #36]	; (8005df4 <SystemInit+0x4c>)
 8005dd0:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005dd2:	6819      	ldr	r1, [r3, #0]
 8005dd4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005dd8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005dda:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de0:	6093      	str	r3, [r2, #8]
#endif
}
 8005de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	e000ed00 	.word	0xe000ed00
 8005dec:	40023800 	.word	0x40023800
 8005df0:	fef6ffff 	.word	0xfef6ffff
 8005df4:	24003010 	.word	0x24003010

08005df8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005df8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8005dfa:	480c      	ldr	r0, [pc, #48]	; (8005e2c <MX_USART1_UART_Init+0x34>)
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <MX_USART1_UART_Init+0x38>)
 8005dfe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8005e00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005e04:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e06:	2300      	movs	r3, #0
 8005e08:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e0a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e0c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e0e:	220c      	movs	r2, #12
 8005e10:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e12:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e14:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e16:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e18:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e1a:	f7ff f82a 	bl	8004e72 <HAL_UART_Init>
 8005e1e:	b900      	cbnz	r0, 8005e22 <MX_USART1_UART_Init+0x2a>
 8005e20:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e22:	2144      	movs	r1, #68	; 0x44
 8005e24:	4803      	ldr	r0, [pc, #12]	; (8005e34 <MX_USART1_UART_Init+0x3c>)
 8005e26:	f7ff fe01 	bl	8005a2c <_Error_Handler>
  }

}
 8005e2a:	e7f9      	b.n	8005e20 <MX_USART1_UART_Init+0x28>
 8005e2c:	20004898 	.word	0x20004898
 8005e30:	40011000 	.word	0x40011000
 8005e34:	08006f74 	.word	0x08006f74

08005e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8005e38:	6802      	ldr	r2, [r0, #0]
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <HAL_UART_MspInit+0x60>)
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d000      	beq.n	8005e42 <HAL_UART_MspInit+0xa>
 8005e40:	4770      	bx	lr
{
 8005e42:	b570      	push	{r4, r5, r6, lr}
 8005e44:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e46:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8005e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4c:	f042 0210 	orr.w	r2, r2, #16
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
 8005e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e54:	f003 0310 	and.w	r3, r3, #16
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e62:	2602      	movs	r6, #2
 8005e64:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e66:	2301      	movs	r3, #1
 8005e68:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e6e:	2507      	movs	r5, #7
 8005e70:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005e72:	4c0a      	ldr	r4, [pc, #40]	; (8005e9c <HAL_UART_MspInit+0x64>)
 8005e74:	a901      	add	r1, sp, #4
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7fc fbe4 	bl	8002644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e80:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e82:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005e8a:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005e8c:	a901      	add	r1, sp, #4
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7fc fbd8 	bl	8002644 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e94:	b006      	add	sp, #24
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	40011000 	.word	0x40011000
 8005e9c:	40020000 	.word	0x40020000

08005ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ed8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ea4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ea6:	e003      	b.n	8005eb0 <LoopCopyDataInit>

08005ea8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005eaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005eac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005eae:	3104      	adds	r1, #4

08005eb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005eb0:	480b      	ldr	r0, [pc, #44]	; (8005ee0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005eb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005eb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005eb8:	d3f6      	bcc.n	8005ea8 <CopyDataInit>
  ldr  r2, =_sbss
 8005eba:	4a0b      	ldr	r2, [pc, #44]	; (8005ee8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ebc:	e002      	b.n	8005ec4 <LoopFillZerobss>

08005ebe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ebe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ec0:	f842 3b04 	str.w	r3, [r2], #4

08005ec4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ec4:	4b09      	ldr	r3, [pc, #36]	; (8005eec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ec6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ec8:	d3f9      	bcc.n	8005ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005eca:	f7ff ff6d 	bl	8005da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ece:	f000 f817 	bl	8005f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ed2:	f7ff fe31 	bl	8005b38 <main>
  bx  lr    
 8005ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ed8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8005edc:	08007024 	.word	0x08007024
  ldr  r0, =_sdata
 8005ee0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005ee4:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8005ee8:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8005eec:	2000490c 	.word	0x2000490c

08005ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ef0:	e7fe      	b.n	8005ef0 <ADC_IRQHandler>
	...

08005ef4 <__errno>:
 8005ef4:	4b01      	ldr	r3, [pc, #4]	; (8005efc <__errno+0x8>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	2000004c 	.word	0x2000004c

08005f00 <__libc_init_array>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4e0d      	ldr	r6, [pc, #52]	; (8005f38 <__libc_init_array+0x38>)
 8005f04:	4c0d      	ldr	r4, [pc, #52]	; (8005f3c <__libc_init_array+0x3c>)
 8005f06:	1ba4      	subs	r4, r4, r6
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	42a5      	cmp	r5, r4
 8005f0e:	d109      	bne.n	8005f24 <__libc_init_array+0x24>
 8005f10:	4e0b      	ldr	r6, [pc, #44]	; (8005f40 <__libc_init_array+0x40>)
 8005f12:	4c0c      	ldr	r4, [pc, #48]	; (8005f44 <__libc_init_array+0x44>)
 8005f14:	f000 ff7c 	bl	8006e10 <_init>
 8005f18:	1ba4      	subs	r4, r4, r6
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	42a5      	cmp	r5, r4
 8005f20:	d105      	bne.n	8005f2e <__libc_init_array+0x2e>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f28:	4798      	blx	r3
 8005f2a:	3501      	adds	r5, #1
 8005f2c:	e7ee      	b.n	8005f0c <__libc_init_array+0xc>
 8005f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f32:	4798      	blx	r3
 8005f34:	3501      	adds	r5, #1
 8005f36:	e7f2      	b.n	8005f1e <__libc_init_array+0x1e>
 8005f38:	0800701c 	.word	0x0800701c
 8005f3c:	0800701c 	.word	0x0800701c
 8005f40:	0800701c 	.word	0x0800701c
 8005f44:	08007020 	.word	0x08007020

08005f48 <iprintf>:
 8005f48:	b40f      	push	{r0, r1, r2, r3}
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <iprintf+0x2c>)
 8005f4c:	b513      	push	{r0, r1, r4, lr}
 8005f4e:	681c      	ldr	r4, [r3, #0]
 8005f50:	b124      	cbz	r4, 8005f5c <iprintf+0x14>
 8005f52:	69a3      	ldr	r3, [r4, #24]
 8005f54:	b913      	cbnz	r3, 8005f5c <iprintf+0x14>
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 fa24 	bl	80063a4 <__sinit>
 8005f5c:	ab05      	add	r3, sp, #20
 8005f5e:	9a04      	ldr	r2, [sp, #16]
 8005f60:	68a1      	ldr	r1, [r4, #8]
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 fbe9 	bl	800673c <_vfiprintf_r>
 8005f6a:	b002      	add	sp, #8
 8005f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr
 8005f74:	2000004c 	.word	0x2000004c

08005f78 <_puts_r>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	460e      	mov	r6, r1
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	b118      	cbz	r0, 8005f88 <_puts_r+0x10>
 8005f80:	6983      	ldr	r3, [r0, #24]
 8005f82:	b90b      	cbnz	r3, 8005f88 <_puts_r+0x10>
 8005f84:	f000 fa0e 	bl	80063a4 <__sinit>
 8005f88:	69ab      	ldr	r3, [r5, #24]
 8005f8a:	68ac      	ldr	r4, [r5, #8]
 8005f8c:	b913      	cbnz	r3, 8005f94 <_puts_r+0x1c>
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 fa08 	bl	80063a4 <__sinit>
 8005f94:	4b23      	ldr	r3, [pc, #140]	; (8006024 <_puts_r+0xac>)
 8005f96:	429c      	cmp	r4, r3
 8005f98:	d117      	bne.n	8005fca <_puts_r+0x52>
 8005f9a:	686c      	ldr	r4, [r5, #4]
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	071b      	lsls	r3, r3, #28
 8005fa0:	d51d      	bpl.n	8005fde <_puts_r+0x66>
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	b1db      	cbz	r3, 8005fde <_puts_r+0x66>
 8005fa6:	3e01      	subs	r6, #1
 8005fa8:	68a3      	ldr	r3, [r4, #8]
 8005faa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	60a3      	str	r3, [r4, #8]
 8005fb2:	b9e9      	cbnz	r1, 8005ff0 <_puts_r+0x78>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da2e      	bge.n	8006016 <_puts_r+0x9e>
 8005fb8:	4622      	mov	r2, r4
 8005fba:	210a      	movs	r1, #10
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f83f 	bl	8006040 <__swbuf_r>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d011      	beq.n	8005fea <_puts_r+0x72>
 8005fc6:	200a      	movs	r0, #10
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <_puts_r+0xb0>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d101      	bne.n	8005fd4 <_puts_r+0x5c>
 8005fd0:	68ac      	ldr	r4, [r5, #8]
 8005fd2:	e7e3      	b.n	8005f9c <_puts_r+0x24>
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <_puts_r+0xb4>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	bf08      	it	eq
 8005fda:	68ec      	ldreq	r4, [r5, #12]
 8005fdc:	e7de      	b.n	8005f9c <_puts_r+0x24>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 f87f 	bl	80060e4 <__swsetup_r>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d0dd      	beq.n	8005fa6 <_puts_r+0x2e>
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	da04      	bge.n	8005ffe <_puts_r+0x86>
 8005ff4:	69a2      	ldr	r2, [r4, #24]
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	db06      	blt.n	8006008 <_puts_r+0x90>
 8005ffa:	290a      	cmp	r1, #10
 8005ffc:	d004      	beq.n	8006008 <_puts_r+0x90>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	6022      	str	r2, [r4, #0]
 8006004:	7019      	strb	r1, [r3, #0]
 8006006:	e7cf      	b.n	8005fa8 <_puts_r+0x30>
 8006008:	4622      	mov	r2, r4
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f818 	bl	8006040 <__swbuf_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d1c9      	bne.n	8005fa8 <_puts_r+0x30>
 8006014:	e7e9      	b.n	8005fea <_puts_r+0x72>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	200a      	movs	r0, #10
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	6022      	str	r2, [r4, #0]
 800601e:	7018      	strb	r0, [r3, #0]
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	bf00      	nop
 8006024:	08006fa8 	.word	0x08006fa8
 8006028:	08006fc8 	.word	0x08006fc8
 800602c:	08006f88 	.word	0x08006f88

08006030 <puts>:
 8006030:	4b02      	ldr	r3, [pc, #8]	; (800603c <puts+0xc>)
 8006032:	4601      	mov	r1, r0
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	f7ff bf9f 	b.w	8005f78 <_puts_r>
 800603a:	bf00      	nop
 800603c:	2000004c 	.word	0x2000004c

08006040 <__swbuf_r>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	460e      	mov	r6, r1
 8006044:	4614      	mov	r4, r2
 8006046:	4605      	mov	r5, r0
 8006048:	b118      	cbz	r0, 8006052 <__swbuf_r+0x12>
 800604a:	6983      	ldr	r3, [r0, #24]
 800604c:	b90b      	cbnz	r3, 8006052 <__swbuf_r+0x12>
 800604e:	f000 f9a9 	bl	80063a4 <__sinit>
 8006052:	4b21      	ldr	r3, [pc, #132]	; (80060d8 <__swbuf_r+0x98>)
 8006054:	429c      	cmp	r4, r3
 8006056:	d12a      	bne.n	80060ae <__swbuf_r+0x6e>
 8006058:	686c      	ldr	r4, [r5, #4]
 800605a:	69a3      	ldr	r3, [r4, #24]
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	071a      	lsls	r2, r3, #28
 8006062:	d52e      	bpl.n	80060c2 <__swbuf_r+0x82>
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b363      	cbz	r3, 80060c2 <__swbuf_r+0x82>
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	1ac0      	subs	r0, r0, r3
 800606e:	6963      	ldr	r3, [r4, #20]
 8006070:	b2f6      	uxtb	r6, r6
 8006072:	4298      	cmp	r0, r3
 8006074:	4637      	mov	r7, r6
 8006076:	db04      	blt.n	8006082 <__swbuf_r+0x42>
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f000 f928 	bl	80062d0 <_fflush_r>
 8006080:	bb28      	cbnz	r0, 80060ce <__swbuf_r+0x8e>
 8006082:	68a3      	ldr	r3, [r4, #8]
 8006084:	3b01      	subs	r3, #1
 8006086:	60a3      	str	r3, [r4, #8]
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	6022      	str	r2, [r4, #0]
 800608e:	701e      	strb	r6, [r3, #0]
 8006090:	6963      	ldr	r3, [r4, #20]
 8006092:	3001      	adds	r0, #1
 8006094:	4298      	cmp	r0, r3
 8006096:	d004      	beq.n	80060a2 <__swbuf_r+0x62>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	07db      	lsls	r3, r3, #31
 800609c:	d519      	bpl.n	80060d2 <__swbuf_r+0x92>
 800609e:	2e0a      	cmp	r6, #10
 80060a0:	d117      	bne.n	80060d2 <__swbuf_r+0x92>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 f913 	bl	80062d0 <_fflush_r>
 80060aa:	b190      	cbz	r0, 80060d2 <__swbuf_r+0x92>
 80060ac:	e00f      	b.n	80060ce <__swbuf_r+0x8e>
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <__swbuf_r+0x9c>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d101      	bne.n	80060b8 <__swbuf_r+0x78>
 80060b4:	68ac      	ldr	r4, [r5, #8]
 80060b6:	e7d0      	b.n	800605a <__swbuf_r+0x1a>
 80060b8:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <__swbuf_r+0xa0>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	bf08      	it	eq
 80060be:	68ec      	ldreq	r4, [r5, #12]
 80060c0:	e7cb      	b.n	800605a <__swbuf_r+0x1a>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 f80d 	bl	80060e4 <__swsetup_r>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0cc      	beq.n	8006068 <__swbuf_r+0x28>
 80060ce:	f04f 37ff 	mov.w	r7, #4294967295
 80060d2:	4638      	mov	r0, r7
 80060d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060d6:	bf00      	nop
 80060d8:	08006fa8 	.word	0x08006fa8
 80060dc:	08006fc8 	.word	0x08006fc8
 80060e0:	08006f88 	.word	0x08006f88

080060e4 <__swsetup_r>:
 80060e4:	4b32      	ldr	r3, [pc, #200]	; (80061b0 <__swsetup_r+0xcc>)
 80060e6:	b570      	push	{r4, r5, r6, lr}
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	4606      	mov	r6, r0
 80060ec:	460c      	mov	r4, r1
 80060ee:	b125      	cbz	r5, 80060fa <__swsetup_r+0x16>
 80060f0:	69ab      	ldr	r3, [r5, #24]
 80060f2:	b913      	cbnz	r3, 80060fa <__swsetup_r+0x16>
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 f955 	bl	80063a4 <__sinit>
 80060fa:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <__swsetup_r+0xd0>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	d10f      	bne.n	8006120 <__swsetup_r+0x3c>
 8006100:	686c      	ldr	r4, [r5, #4]
 8006102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006106:	b29a      	uxth	r2, r3
 8006108:	0715      	lsls	r5, r2, #28
 800610a:	d42c      	bmi.n	8006166 <__swsetup_r+0x82>
 800610c:	06d0      	lsls	r0, r2, #27
 800610e:	d411      	bmi.n	8006134 <__swsetup_r+0x50>
 8006110:	2209      	movs	r2, #9
 8006112:	6032      	str	r2, [r6, #0]
 8006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	bd70      	pop	{r4, r5, r6, pc}
 8006120:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <__swsetup_r+0xd4>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d101      	bne.n	800612a <__swsetup_r+0x46>
 8006126:	68ac      	ldr	r4, [r5, #8]
 8006128:	e7eb      	b.n	8006102 <__swsetup_r+0x1e>
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <__swsetup_r+0xd8>)
 800612c:	429c      	cmp	r4, r3
 800612e:	bf08      	it	eq
 8006130:	68ec      	ldreq	r4, [r5, #12]
 8006132:	e7e6      	b.n	8006102 <__swsetup_r+0x1e>
 8006134:	0751      	lsls	r1, r2, #29
 8006136:	d512      	bpl.n	800615e <__swsetup_r+0x7a>
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	b141      	cbz	r1, 800614e <__swsetup_r+0x6a>
 800613c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006140:	4299      	cmp	r1, r3
 8006142:	d002      	beq.n	800614a <__swsetup_r+0x66>
 8006144:	4630      	mov	r0, r6
 8006146:	f000 fa23 	bl	8006590 <_free_r>
 800614a:	2300      	movs	r3, #0
 800614c:	6363      	str	r3, [r4, #52]	; 0x34
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	2300      	movs	r3, #0
 8006158:	6063      	str	r3, [r4, #4]
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f043 0308 	orr.w	r3, r3, #8
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	6923      	ldr	r3, [r4, #16]
 8006168:	b94b      	cbnz	r3, 800617e <__swsetup_r+0x9a>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006174:	d003      	beq.n	800617e <__swsetup_r+0x9a>
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	f000 f9c1 	bl	8006500 <__smakebuf_r>
 800617e:	89a2      	ldrh	r2, [r4, #12]
 8006180:	f012 0301 	ands.w	r3, r2, #1
 8006184:	d00c      	beq.n	80061a0 <__swsetup_r+0xbc>
 8006186:	2300      	movs	r3, #0
 8006188:	60a3      	str	r3, [r4, #8]
 800618a:	6963      	ldr	r3, [r4, #20]
 800618c:	425b      	negs	r3, r3
 800618e:	61a3      	str	r3, [r4, #24]
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	b953      	cbnz	r3, 80061aa <__swsetup_r+0xc6>
 8006194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006198:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800619c:	d1ba      	bne.n	8006114 <__swsetup_r+0x30>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	0792      	lsls	r2, r2, #30
 80061a2:	bf58      	it	pl
 80061a4:	6963      	ldrpl	r3, [r4, #20]
 80061a6:	60a3      	str	r3, [r4, #8]
 80061a8:	e7f2      	b.n	8006190 <__swsetup_r+0xac>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e7f7      	b.n	800619e <__swsetup_r+0xba>
 80061ae:	bf00      	nop
 80061b0:	2000004c 	.word	0x2000004c
 80061b4:	08006fa8 	.word	0x08006fa8
 80061b8:	08006fc8 	.word	0x08006fc8
 80061bc:	08006f88 	.word	0x08006f88

080061c0 <__sflush_r>:
 80061c0:	898a      	ldrh	r2, [r1, #12]
 80061c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	4605      	mov	r5, r0
 80061c8:	0710      	lsls	r0, r2, #28
 80061ca:	460c      	mov	r4, r1
 80061cc:	d45a      	bmi.n	8006284 <__sflush_r+0xc4>
 80061ce:	684b      	ldr	r3, [r1, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dc05      	bgt.n	80061e0 <__sflush_r+0x20>
 80061d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dc02      	bgt.n	80061e0 <__sflush_r+0x20>
 80061da:	2000      	movs	r0, #0
 80061dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e2:	2e00      	cmp	r6, #0
 80061e4:	d0f9      	beq.n	80061da <__sflush_r+0x1a>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061ec:	682f      	ldr	r7, [r5, #0]
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	d033      	beq.n	800625a <__sflush_r+0x9a>
 80061f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	075a      	lsls	r2, r3, #29
 80061f8:	d505      	bpl.n	8006206 <__sflush_r+0x46>
 80061fa:	6863      	ldr	r3, [r4, #4]
 80061fc:	1ac0      	subs	r0, r0, r3
 80061fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006200:	b10b      	cbz	r3, 8006206 <__sflush_r+0x46>
 8006202:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006204:	1ac0      	subs	r0, r0, r3
 8006206:	2300      	movs	r3, #0
 8006208:	4602      	mov	r2, r0
 800620a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800620c:	6a21      	ldr	r1, [r4, #32]
 800620e:	4628      	mov	r0, r5
 8006210:	47b0      	blx	r6
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	d106      	bne.n	8006226 <__sflush_r+0x66>
 8006218:	6829      	ldr	r1, [r5, #0]
 800621a:	291d      	cmp	r1, #29
 800621c:	d84b      	bhi.n	80062b6 <__sflush_r+0xf6>
 800621e:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <__sflush_r+0x10c>)
 8006220:	40ca      	lsrs	r2, r1
 8006222:	07d6      	lsls	r6, r2, #31
 8006224:	d547      	bpl.n	80062b6 <__sflush_r+0xf6>
 8006226:	2200      	movs	r2, #0
 8006228:	6062      	str	r2, [r4, #4]
 800622a:	04d9      	lsls	r1, r3, #19
 800622c:	6922      	ldr	r2, [r4, #16]
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	d504      	bpl.n	800623c <__sflush_r+0x7c>
 8006232:	1c42      	adds	r2, r0, #1
 8006234:	d101      	bne.n	800623a <__sflush_r+0x7a>
 8006236:	682b      	ldr	r3, [r5, #0]
 8006238:	b903      	cbnz	r3, 800623c <__sflush_r+0x7c>
 800623a:	6560      	str	r0, [r4, #84]	; 0x54
 800623c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800623e:	602f      	str	r7, [r5, #0]
 8006240:	2900      	cmp	r1, #0
 8006242:	d0ca      	beq.n	80061da <__sflush_r+0x1a>
 8006244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006248:	4299      	cmp	r1, r3
 800624a:	d002      	beq.n	8006252 <__sflush_r+0x92>
 800624c:	4628      	mov	r0, r5
 800624e:	f000 f99f 	bl	8006590 <_free_r>
 8006252:	2000      	movs	r0, #0
 8006254:	6360      	str	r0, [r4, #52]	; 0x34
 8006256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625a:	6a21      	ldr	r1, [r4, #32]
 800625c:	2301      	movs	r3, #1
 800625e:	4628      	mov	r0, r5
 8006260:	47b0      	blx	r6
 8006262:	1c41      	adds	r1, r0, #1
 8006264:	d1c6      	bne.n	80061f4 <__sflush_r+0x34>
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0c3      	beq.n	80061f4 <__sflush_r+0x34>
 800626c:	2b1d      	cmp	r3, #29
 800626e:	d001      	beq.n	8006274 <__sflush_r+0xb4>
 8006270:	2b16      	cmp	r3, #22
 8006272:	d101      	bne.n	8006278 <__sflush_r+0xb8>
 8006274:	602f      	str	r7, [r5, #0]
 8006276:	e7b0      	b.n	80061da <__sflush_r+0x1a>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006284:	690f      	ldr	r7, [r1, #16]
 8006286:	2f00      	cmp	r7, #0
 8006288:	d0a7      	beq.n	80061da <__sflush_r+0x1a>
 800628a:	0793      	lsls	r3, r2, #30
 800628c:	680e      	ldr	r6, [r1, #0]
 800628e:	bf08      	it	eq
 8006290:	694b      	ldreq	r3, [r1, #20]
 8006292:	600f      	str	r7, [r1, #0]
 8006294:	bf18      	it	ne
 8006296:	2300      	movne	r3, #0
 8006298:	eba6 0807 	sub.w	r8, r6, r7
 800629c:	608b      	str	r3, [r1, #8]
 800629e:	f1b8 0f00 	cmp.w	r8, #0
 80062a2:	dd9a      	ble.n	80061da <__sflush_r+0x1a>
 80062a4:	4643      	mov	r3, r8
 80062a6:	463a      	mov	r2, r7
 80062a8:	6a21      	ldr	r1, [r4, #32]
 80062aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b0      	blx	r6
 80062b0:	2800      	cmp	r0, #0
 80062b2:	dc07      	bgt.n	80062c4 <__sflush_r+0x104>
 80062b4:	89a3      	ldrh	r3, [r4, #12]
 80062b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ba:	81a3      	strh	r3, [r4, #12]
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	4407      	add	r7, r0
 80062c6:	eba8 0800 	sub.w	r8, r8, r0
 80062ca:	e7e8      	b.n	800629e <__sflush_r+0xde>
 80062cc:	20400001 	.word	0x20400001

080062d0 <_fflush_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	690b      	ldr	r3, [r1, #16]
 80062d4:	4605      	mov	r5, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	b1db      	cbz	r3, 8006312 <_fflush_r+0x42>
 80062da:	b118      	cbz	r0, 80062e4 <_fflush_r+0x14>
 80062dc:	6983      	ldr	r3, [r0, #24]
 80062de:	b90b      	cbnz	r3, 80062e4 <_fflush_r+0x14>
 80062e0:	f000 f860 	bl	80063a4 <__sinit>
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <_fflush_r+0x48>)
 80062e6:	429c      	cmp	r4, r3
 80062e8:	d109      	bne.n	80062fe <_fflush_r+0x2e>
 80062ea:	686c      	ldr	r4, [r5, #4]
 80062ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062f0:	b17b      	cbz	r3, 8006312 <_fflush_r+0x42>
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062fa:	f7ff bf61 	b.w	80061c0 <__sflush_r>
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <_fflush_r+0x4c>)
 8006300:	429c      	cmp	r4, r3
 8006302:	d101      	bne.n	8006308 <_fflush_r+0x38>
 8006304:	68ac      	ldr	r4, [r5, #8]
 8006306:	e7f1      	b.n	80062ec <_fflush_r+0x1c>
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <_fflush_r+0x50>)
 800630a:	429c      	cmp	r4, r3
 800630c:	bf08      	it	eq
 800630e:	68ec      	ldreq	r4, [r5, #12]
 8006310:	e7ec      	b.n	80062ec <_fflush_r+0x1c>
 8006312:	2000      	movs	r0, #0
 8006314:	bd38      	pop	{r3, r4, r5, pc}
 8006316:	bf00      	nop
 8006318:	08006fa8 	.word	0x08006fa8
 800631c:	08006fc8 	.word	0x08006fc8
 8006320:	08006f88 	.word	0x08006f88

08006324 <_cleanup_r>:
 8006324:	4901      	ldr	r1, [pc, #4]	; (800632c <_cleanup_r+0x8>)
 8006326:	f000 b8a9 	b.w	800647c <_fwalk_reent>
 800632a:	bf00      	nop
 800632c:	080062d1 	.word	0x080062d1

08006330 <std.isra.0>:
 8006330:	2300      	movs	r3, #0
 8006332:	b510      	push	{r4, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	6003      	str	r3, [r0, #0]
 8006338:	6043      	str	r3, [r0, #4]
 800633a:	6083      	str	r3, [r0, #8]
 800633c:	8181      	strh	r1, [r0, #12]
 800633e:	6643      	str	r3, [r0, #100]	; 0x64
 8006340:	81c2      	strh	r2, [r0, #14]
 8006342:	6103      	str	r3, [r0, #16]
 8006344:	6143      	str	r3, [r0, #20]
 8006346:	6183      	str	r3, [r0, #24]
 8006348:	4619      	mov	r1, r3
 800634a:	2208      	movs	r2, #8
 800634c:	305c      	adds	r0, #92	; 0x5c
 800634e:	f000 f917 	bl	8006580 <memset>
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <std.isra.0+0x38>)
 8006354:	6263      	str	r3, [r4, #36]	; 0x24
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <std.isra.0+0x3c>)
 8006358:	62a3      	str	r3, [r4, #40]	; 0x28
 800635a:	4b05      	ldr	r3, [pc, #20]	; (8006370 <std.isra.0+0x40>)
 800635c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <std.isra.0+0x44>)
 8006360:	6224      	str	r4, [r4, #32]
 8006362:	6323      	str	r3, [r4, #48]	; 0x30
 8006364:	bd10      	pop	{r4, pc}
 8006366:	bf00      	nop
 8006368:	08006cb5 	.word	0x08006cb5
 800636c:	08006cd7 	.word	0x08006cd7
 8006370:	08006d0f 	.word	0x08006d0f
 8006374:	08006d33 	.word	0x08006d33

08006378 <__sfmoreglue>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	1e4a      	subs	r2, r1, #1
 800637c:	2568      	movs	r5, #104	; 0x68
 800637e:	4355      	muls	r5, r2
 8006380:	460e      	mov	r6, r1
 8006382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006386:	f000 f951 	bl	800662c <_malloc_r>
 800638a:	4604      	mov	r4, r0
 800638c:	b140      	cbz	r0, 80063a0 <__sfmoreglue+0x28>
 800638e:	2100      	movs	r1, #0
 8006390:	e880 0042 	stmia.w	r0, {r1, r6}
 8006394:	300c      	adds	r0, #12
 8006396:	60a0      	str	r0, [r4, #8]
 8006398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800639c:	f000 f8f0 	bl	8006580 <memset>
 80063a0:	4620      	mov	r0, r4
 80063a2:	bd70      	pop	{r4, r5, r6, pc}

080063a4 <__sinit>:
 80063a4:	6983      	ldr	r3, [r0, #24]
 80063a6:	b510      	push	{r4, lr}
 80063a8:	4604      	mov	r4, r0
 80063aa:	bb33      	cbnz	r3, 80063fa <__sinit+0x56>
 80063ac:	6483      	str	r3, [r0, #72]	; 0x48
 80063ae:	64c3      	str	r3, [r0, #76]	; 0x4c
 80063b0:	6503      	str	r3, [r0, #80]	; 0x50
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <__sinit+0x58>)
 80063b4:	4a12      	ldr	r2, [pc, #72]	; (8006400 <__sinit+0x5c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6282      	str	r2, [r0, #40]	; 0x28
 80063ba:	4298      	cmp	r0, r3
 80063bc:	bf04      	itt	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	6183      	streq	r3, [r0, #24]
 80063c2:	f000 f81f 	bl	8006404 <__sfp>
 80063c6:	6060      	str	r0, [r4, #4]
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 f81b 	bl	8006404 <__sfp>
 80063ce:	60a0      	str	r0, [r4, #8]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 f817 	bl	8006404 <__sfp>
 80063d6:	2200      	movs	r2, #0
 80063d8:	60e0      	str	r0, [r4, #12]
 80063da:	2104      	movs	r1, #4
 80063dc:	6860      	ldr	r0, [r4, #4]
 80063de:	f7ff ffa7 	bl	8006330 <std.isra.0>
 80063e2:	2201      	movs	r2, #1
 80063e4:	2109      	movs	r1, #9
 80063e6:	68a0      	ldr	r0, [r4, #8]
 80063e8:	f7ff ffa2 	bl	8006330 <std.isra.0>
 80063ec:	2202      	movs	r2, #2
 80063ee:	2112      	movs	r1, #18
 80063f0:	68e0      	ldr	r0, [r4, #12]
 80063f2:	f7ff ff9d 	bl	8006330 <std.isra.0>
 80063f6:	2301      	movs	r3, #1
 80063f8:	61a3      	str	r3, [r4, #24]
 80063fa:	bd10      	pop	{r4, pc}
 80063fc:	08006f84 	.word	0x08006f84
 8006400:	08006325 	.word	0x08006325

08006404 <__sfp>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <__sfp+0x74>)
 8006408:	681e      	ldr	r6, [r3, #0]
 800640a:	69b3      	ldr	r3, [r6, #24]
 800640c:	4607      	mov	r7, r0
 800640e:	b913      	cbnz	r3, 8006416 <__sfp+0x12>
 8006410:	4630      	mov	r0, r6
 8006412:	f7ff ffc7 	bl	80063a4 <__sinit>
 8006416:	3648      	adds	r6, #72	; 0x48
 8006418:	68b4      	ldr	r4, [r6, #8]
 800641a:	6873      	ldr	r3, [r6, #4]
 800641c:	3b01      	subs	r3, #1
 800641e:	d503      	bpl.n	8006428 <__sfp+0x24>
 8006420:	6833      	ldr	r3, [r6, #0]
 8006422:	b133      	cbz	r3, 8006432 <__sfp+0x2e>
 8006424:	6836      	ldr	r6, [r6, #0]
 8006426:	e7f7      	b.n	8006418 <__sfp+0x14>
 8006428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800642c:	b16d      	cbz	r5, 800644a <__sfp+0x46>
 800642e:	3468      	adds	r4, #104	; 0x68
 8006430:	e7f4      	b.n	800641c <__sfp+0x18>
 8006432:	2104      	movs	r1, #4
 8006434:	4638      	mov	r0, r7
 8006436:	f7ff ff9f 	bl	8006378 <__sfmoreglue>
 800643a:	6030      	str	r0, [r6, #0]
 800643c:	2800      	cmp	r0, #0
 800643e:	d1f1      	bne.n	8006424 <__sfp+0x20>
 8006440:	230c      	movs	r3, #12
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4604      	mov	r4, r0
 8006446:	4620      	mov	r0, r4
 8006448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800644e:	81e3      	strh	r3, [r4, #14]
 8006450:	2301      	movs	r3, #1
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	6665      	str	r5, [r4, #100]	; 0x64
 8006456:	6025      	str	r5, [r4, #0]
 8006458:	60a5      	str	r5, [r4, #8]
 800645a:	6065      	str	r5, [r4, #4]
 800645c:	6125      	str	r5, [r4, #16]
 800645e:	6165      	str	r5, [r4, #20]
 8006460:	61a5      	str	r5, [r4, #24]
 8006462:	2208      	movs	r2, #8
 8006464:	4629      	mov	r1, r5
 8006466:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800646a:	f000 f889 	bl	8006580 <memset>
 800646e:	6365      	str	r5, [r4, #52]	; 0x34
 8006470:	63a5      	str	r5, [r4, #56]	; 0x38
 8006472:	64a5      	str	r5, [r4, #72]	; 0x48
 8006474:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006476:	e7e6      	b.n	8006446 <__sfp+0x42>
 8006478:	08006f84 	.word	0x08006f84

0800647c <_fwalk_reent>:
 800647c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006480:	4680      	mov	r8, r0
 8006482:	4689      	mov	r9, r1
 8006484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006488:	2600      	movs	r6, #0
 800648a:	b914      	cbnz	r4, 8006492 <_fwalk_reent+0x16>
 800648c:	4630      	mov	r0, r6
 800648e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006492:	68a5      	ldr	r5, [r4, #8]
 8006494:	6867      	ldr	r7, [r4, #4]
 8006496:	3f01      	subs	r7, #1
 8006498:	d501      	bpl.n	800649e <_fwalk_reent+0x22>
 800649a:	6824      	ldr	r4, [r4, #0]
 800649c:	e7f5      	b.n	800648a <_fwalk_reent+0xe>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d907      	bls.n	80064b4 <_fwalk_reent+0x38>
 80064a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064a8:	3301      	adds	r3, #1
 80064aa:	d003      	beq.n	80064b4 <_fwalk_reent+0x38>
 80064ac:	4629      	mov	r1, r5
 80064ae:	4640      	mov	r0, r8
 80064b0:	47c8      	blx	r9
 80064b2:	4306      	orrs	r6, r0
 80064b4:	3568      	adds	r5, #104	; 0x68
 80064b6:	e7ee      	b.n	8006496 <_fwalk_reent+0x1a>

080064b8 <__swhatbuf_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	460e      	mov	r6, r1
 80064bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c0:	2900      	cmp	r1, #0
 80064c2:	b090      	sub	sp, #64	; 0x40
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	da07      	bge.n	80064da <__swhatbuf_r+0x22>
 80064ca:	2300      	movs	r3, #0
 80064cc:	602b      	str	r3, [r5, #0]
 80064ce:	89b3      	ldrh	r3, [r6, #12]
 80064d0:	061a      	lsls	r2, r3, #24
 80064d2:	d410      	bmi.n	80064f6 <__swhatbuf_r+0x3e>
 80064d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d8:	e00e      	b.n	80064f8 <__swhatbuf_r+0x40>
 80064da:	aa01      	add	r2, sp, #4
 80064dc:	f000 fc50 	bl	8006d80 <_fstat_r>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	dbf2      	blt.n	80064ca <__swhatbuf_r+0x12>
 80064e4:	9a02      	ldr	r2, [sp, #8]
 80064e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064ee:	425a      	negs	r2, r3
 80064f0:	415a      	adcs	r2, r3
 80064f2:	602a      	str	r2, [r5, #0]
 80064f4:	e7ee      	b.n	80064d4 <__swhatbuf_r+0x1c>
 80064f6:	2340      	movs	r3, #64	; 0x40
 80064f8:	2000      	movs	r0, #0
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	b010      	add	sp, #64	; 0x40
 80064fe:	bd70      	pop	{r4, r5, r6, pc}

08006500 <__smakebuf_r>:
 8006500:	898b      	ldrh	r3, [r1, #12]
 8006502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006504:	079d      	lsls	r5, r3, #30
 8006506:	4606      	mov	r6, r0
 8006508:	460c      	mov	r4, r1
 800650a:	d507      	bpl.n	800651c <__smakebuf_r+0x1c>
 800650c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	2301      	movs	r3, #1
 8006516:	6163      	str	r3, [r4, #20]
 8006518:	b002      	add	sp, #8
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	ab01      	add	r3, sp, #4
 800651e:	466a      	mov	r2, sp
 8006520:	f7ff ffca 	bl	80064b8 <__swhatbuf_r>
 8006524:	9900      	ldr	r1, [sp, #0]
 8006526:	4605      	mov	r5, r0
 8006528:	4630      	mov	r0, r6
 800652a:	f000 f87f 	bl	800662c <_malloc_r>
 800652e:	b948      	cbnz	r0, 8006544 <__smakebuf_r+0x44>
 8006530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006534:	059a      	lsls	r2, r3, #22
 8006536:	d4ef      	bmi.n	8006518 <__smakebuf_r+0x18>
 8006538:	f023 0303 	bic.w	r3, r3, #3
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	e7e3      	b.n	800650c <__smakebuf_r+0xc>
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <__smakebuf_r+0x7c>)
 8006546:	62b3      	str	r3, [r6, #40]	; 0x28
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	6020      	str	r0, [r4, #0]
 800654c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	6163      	str	r3, [r4, #20]
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	6120      	str	r0, [r4, #16]
 800655a:	b15b      	cbz	r3, 8006574 <__smakebuf_r+0x74>
 800655c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006560:	4630      	mov	r0, r6
 8006562:	f000 fc1f 	bl	8006da4 <_isatty_r>
 8006566:	b128      	cbz	r0, 8006574 <__smakebuf_r+0x74>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	431d      	orrs	r5, r3
 8006578:	81a5      	strh	r5, [r4, #12]
 800657a:	e7cd      	b.n	8006518 <__smakebuf_r+0x18>
 800657c:	08006325 	.word	0x08006325

08006580 <memset>:
 8006580:	4402      	add	r2, r0
 8006582:	4603      	mov	r3, r0
 8006584:	4293      	cmp	r3, r2
 8006586:	d100      	bne.n	800658a <memset+0xa>
 8006588:	4770      	bx	lr
 800658a:	f803 1b01 	strb.w	r1, [r3], #1
 800658e:	e7f9      	b.n	8006584 <memset+0x4>

08006590 <_free_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4605      	mov	r5, r0
 8006594:	2900      	cmp	r1, #0
 8006596:	d045      	beq.n	8006624 <_free_r+0x94>
 8006598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659c:	1f0c      	subs	r4, r1, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	18e4      	addlt	r4, r4, r3
 80065a4:	f000 fc20 	bl	8006de8 <__malloc_lock>
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <_free_r+0x98>)
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	4610      	mov	r0, r2
 80065ae:	b933      	cbnz	r3, 80065be <_free_r+0x2e>
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	6014      	str	r4, [r2, #0]
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ba:	f000 bc16 	b.w	8006dea <__malloc_unlock>
 80065be:	42a3      	cmp	r3, r4
 80065c0:	d90c      	bls.n	80065dc <_free_r+0x4c>
 80065c2:	6821      	ldr	r1, [r4, #0]
 80065c4:	1862      	adds	r2, r4, r1
 80065c6:	4293      	cmp	r3, r2
 80065c8:	bf04      	itt	eq
 80065ca:	681a      	ldreq	r2, [r3, #0]
 80065cc:	685b      	ldreq	r3, [r3, #4]
 80065ce:	6063      	str	r3, [r4, #4]
 80065d0:	bf04      	itt	eq
 80065d2:	1852      	addeq	r2, r2, r1
 80065d4:	6022      	streq	r2, [r4, #0]
 80065d6:	6004      	str	r4, [r0, #0]
 80065d8:	e7ec      	b.n	80065b4 <_free_r+0x24>
 80065da:	4613      	mov	r3, r2
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	b10a      	cbz	r2, 80065e4 <_free_r+0x54>
 80065e0:	42a2      	cmp	r2, r4
 80065e2:	d9fa      	bls.n	80065da <_free_r+0x4a>
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	1858      	adds	r0, r3, r1
 80065e8:	42a0      	cmp	r0, r4
 80065ea:	d10b      	bne.n	8006604 <_free_r+0x74>
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	4401      	add	r1, r0
 80065f0:	1858      	adds	r0, r3, r1
 80065f2:	4282      	cmp	r2, r0
 80065f4:	6019      	str	r1, [r3, #0]
 80065f6:	d1dd      	bne.n	80065b4 <_free_r+0x24>
 80065f8:	6810      	ldr	r0, [r2, #0]
 80065fa:	6852      	ldr	r2, [r2, #4]
 80065fc:	605a      	str	r2, [r3, #4]
 80065fe:	4401      	add	r1, r0
 8006600:	6019      	str	r1, [r3, #0]
 8006602:	e7d7      	b.n	80065b4 <_free_r+0x24>
 8006604:	d902      	bls.n	800660c <_free_r+0x7c>
 8006606:	230c      	movs	r3, #12
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	e7d3      	b.n	80065b4 <_free_r+0x24>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	1821      	adds	r1, r4, r0
 8006610:	428a      	cmp	r2, r1
 8006612:	bf04      	itt	eq
 8006614:	6811      	ldreq	r1, [r2, #0]
 8006616:	6852      	ldreq	r2, [r2, #4]
 8006618:	6062      	str	r2, [r4, #4]
 800661a:	bf04      	itt	eq
 800661c:	1809      	addeq	r1, r1, r0
 800661e:	6021      	streq	r1, [r4, #0]
 8006620:	605c      	str	r4, [r3, #4]
 8006622:	e7c7      	b.n	80065b4 <_free_r+0x24>
 8006624:	bd38      	pop	{r3, r4, r5, pc}
 8006626:	bf00      	nop
 8006628:	20000308 	.word	0x20000308

0800662c <_malloc_r>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	1ccd      	adds	r5, r1, #3
 8006630:	f025 0503 	bic.w	r5, r5, #3
 8006634:	3508      	adds	r5, #8
 8006636:	2d0c      	cmp	r5, #12
 8006638:	bf38      	it	cc
 800663a:	250c      	movcc	r5, #12
 800663c:	2d00      	cmp	r5, #0
 800663e:	4606      	mov	r6, r0
 8006640:	db01      	blt.n	8006646 <_malloc_r+0x1a>
 8006642:	42a9      	cmp	r1, r5
 8006644:	d903      	bls.n	800664e <_malloc_r+0x22>
 8006646:	230c      	movs	r3, #12
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	2000      	movs	r0, #0
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	f000 fbcb 	bl	8006de8 <__malloc_lock>
 8006652:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <_malloc_r+0xb4>)
 8006654:	6814      	ldr	r4, [r2, #0]
 8006656:	4621      	mov	r1, r4
 8006658:	b991      	cbnz	r1, 8006680 <_malloc_r+0x54>
 800665a:	4c22      	ldr	r4, [pc, #136]	; (80066e4 <_malloc_r+0xb8>)
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	b91b      	cbnz	r3, 8006668 <_malloc_r+0x3c>
 8006660:	4630      	mov	r0, r6
 8006662:	f000 fb17 	bl	8006c94 <_sbrk_r>
 8006666:	6020      	str	r0, [r4, #0]
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f000 fb12 	bl	8006c94 <_sbrk_r>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d126      	bne.n	80066c2 <_malloc_r+0x96>
 8006674:	230c      	movs	r3, #12
 8006676:	6033      	str	r3, [r6, #0]
 8006678:	4630      	mov	r0, r6
 800667a:	f000 fbb6 	bl	8006dea <__malloc_unlock>
 800667e:	e7e4      	b.n	800664a <_malloc_r+0x1e>
 8006680:	680b      	ldr	r3, [r1, #0]
 8006682:	1b5b      	subs	r3, r3, r5
 8006684:	d41a      	bmi.n	80066bc <_malloc_r+0x90>
 8006686:	2b0b      	cmp	r3, #11
 8006688:	d90f      	bls.n	80066aa <_malloc_r+0x7e>
 800668a:	600b      	str	r3, [r1, #0]
 800668c:	50cd      	str	r5, [r1, r3]
 800668e:	18cc      	adds	r4, r1, r3
 8006690:	4630      	mov	r0, r6
 8006692:	f000 fbaa 	bl	8006dea <__malloc_unlock>
 8006696:	f104 000b 	add.w	r0, r4, #11
 800669a:	1d23      	adds	r3, r4, #4
 800669c:	f020 0007 	bic.w	r0, r0, #7
 80066a0:	1ac3      	subs	r3, r0, r3
 80066a2:	d01b      	beq.n	80066dc <_malloc_r+0xb0>
 80066a4:	425a      	negs	r2, r3
 80066a6:	50e2      	str	r2, [r4, r3]
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
 80066aa:	428c      	cmp	r4, r1
 80066ac:	bf0d      	iteet	eq
 80066ae:	6863      	ldreq	r3, [r4, #4]
 80066b0:	684b      	ldrne	r3, [r1, #4]
 80066b2:	6063      	strne	r3, [r4, #4]
 80066b4:	6013      	streq	r3, [r2, #0]
 80066b6:	bf18      	it	ne
 80066b8:	460c      	movne	r4, r1
 80066ba:	e7e9      	b.n	8006690 <_malloc_r+0x64>
 80066bc:	460c      	mov	r4, r1
 80066be:	6849      	ldr	r1, [r1, #4]
 80066c0:	e7ca      	b.n	8006658 <_malloc_r+0x2c>
 80066c2:	1cc4      	adds	r4, r0, #3
 80066c4:	f024 0403 	bic.w	r4, r4, #3
 80066c8:	42a0      	cmp	r0, r4
 80066ca:	d005      	beq.n	80066d8 <_malloc_r+0xac>
 80066cc:	1a21      	subs	r1, r4, r0
 80066ce:	4630      	mov	r0, r6
 80066d0:	f000 fae0 	bl	8006c94 <_sbrk_r>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d0cd      	beq.n	8006674 <_malloc_r+0x48>
 80066d8:	6025      	str	r5, [r4, #0]
 80066da:	e7d9      	b.n	8006690 <_malloc_r+0x64>
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	bf00      	nop
 80066e0:	20000308 	.word	0x20000308
 80066e4:	2000030c 	.word	0x2000030c

080066e8 <__sfputc_r>:
 80066e8:	6893      	ldr	r3, [r2, #8]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	b410      	push	{r4}
 80066f0:	6093      	str	r3, [r2, #8]
 80066f2:	da09      	bge.n	8006708 <__sfputc_r+0x20>
 80066f4:	6994      	ldr	r4, [r2, #24]
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	db02      	blt.n	8006700 <__sfputc_r+0x18>
 80066fa:	b2cb      	uxtb	r3, r1
 80066fc:	2b0a      	cmp	r3, #10
 80066fe:	d103      	bne.n	8006708 <__sfputc_r+0x20>
 8006700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006704:	f7ff bc9c 	b.w	8006040 <__swbuf_r>
 8006708:	6813      	ldr	r3, [r2, #0]
 800670a:	1c58      	adds	r0, r3, #1
 800670c:	6010      	str	r0, [r2, #0]
 800670e:	7019      	strb	r1, [r3, #0]
 8006710:	b2c8      	uxtb	r0, r1
 8006712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006716:	4770      	bx	lr

08006718 <__sfputs_r>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	4614      	mov	r4, r2
 8006720:	18d5      	adds	r5, r2, r3
 8006722:	42ac      	cmp	r4, r5
 8006724:	d101      	bne.n	800672a <__sfputs_r+0x12>
 8006726:	2000      	movs	r0, #0
 8006728:	e007      	b.n	800673a <__sfputs_r+0x22>
 800672a:	463a      	mov	r2, r7
 800672c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff ffd9 	bl	80066e8 <__sfputc_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d1f3      	bne.n	8006722 <__sfputs_r+0xa>
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800673c <_vfiprintf_r>:
 800673c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006740:	b09d      	sub	sp, #116	; 0x74
 8006742:	460c      	mov	r4, r1
 8006744:	4617      	mov	r7, r2
 8006746:	9303      	str	r3, [sp, #12]
 8006748:	4606      	mov	r6, r0
 800674a:	b118      	cbz	r0, 8006754 <_vfiprintf_r+0x18>
 800674c:	6983      	ldr	r3, [r0, #24]
 800674e:	b90b      	cbnz	r3, 8006754 <_vfiprintf_r+0x18>
 8006750:	f7ff fe28 	bl	80063a4 <__sinit>
 8006754:	4b7c      	ldr	r3, [pc, #496]	; (8006948 <_vfiprintf_r+0x20c>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d157      	bne.n	800680a <_vfiprintf_r+0xce>
 800675a:	6874      	ldr	r4, [r6, #4]
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	0718      	lsls	r0, r3, #28
 8006760:	d55d      	bpl.n	800681e <_vfiprintf_r+0xe2>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d05a      	beq.n	800681e <_vfiprintf_r+0xe2>
 8006768:	2300      	movs	r3, #0
 800676a:	9309      	str	r3, [sp, #36]	; 0x24
 800676c:	2320      	movs	r3, #32
 800676e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006772:	2330      	movs	r3, #48	; 0x30
 8006774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006778:	f04f 0b01 	mov.w	fp, #1
 800677c:	46b8      	mov	r8, r7
 800677e:	4645      	mov	r5, r8
 8006780:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d155      	bne.n	8006834 <_vfiprintf_r+0xf8>
 8006788:	ebb8 0a07 	subs.w	sl, r8, r7
 800678c:	d00b      	beq.n	80067a6 <_vfiprintf_r+0x6a>
 800678e:	4653      	mov	r3, sl
 8006790:	463a      	mov	r2, r7
 8006792:	4621      	mov	r1, r4
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ffbf 	bl	8006718 <__sfputs_r>
 800679a:	3001      	adds	r0, #1
 800679c:	f000 80c4 	beq.w	8006928 <_vfiprintf_r+0x1ec>
 80067a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a2:	4453      	add	r3, sl
 80067a4:	9309      	str	r3, [sp, #36]	; 0x24
 80067a6:	f898 3000 	ldrb.w	r3, [r8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80bc 	beq.w	8006928 <_vfiprintf_r+0x1ec>
 80067b0:	2300      	movs	r3, #0
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	9304      	str	r3, [sp, #16]
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	9205      	str	r2, [sp, #20]
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c2:	931a      	str	r3, [sp, #104]	; 0x68
 80067c4:	2205      	movs	r2, #5
 80067c6:	7829      	ldrb	r1, [r5, #0]
 80067c8:	4860      	ldr	r0, [pc, #384]	; (800694c <_vfiprintf_r+0x210>)
 80067ca:	f7f9 fd39 	bl	8000240 <memchr>
 80067ce:	f105 0801 	add.w	r8, r5, #1
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d131      	bne.n	800683c <_vfiprintf_r+0x100>
 80067d8:	06d9      	lsls	r1, r3, #27
 80067da:	bf44      	itt	mi
 80067dc:	2220      	movmi	r2, #32
 80067de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067e2:	071a      	lsls	r2, r3, #28
 80067e4:	bf44      	itt	mi
 80067e6:	222b      	movmi	r2, #43	; 0x2b
 80067e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80067ec:	782a      	ldrb	r2, [r5, #0]
 80067ee:	2a2a      	cmp	r2, #42	; 0x2a
 80067f0:	d02c      	beq.n	800684c <_vfiprintf_r+0x110>
 80067f2:	9a07      	ldr	r2, [sp, #28]
 80067f4:	2100      	movs	r1, #0
 80067f6:	200a      	movs	r0, #10
 80067f8:	46a8      	mov	r8, r5
 80067fa:	3501      	adds	r5, #1
 80067fc:	f898 3000 	ldrb.w	r3, [r8]
 8006800:	3b30      	subs	r3, #48	; 0x30
 8006802:	2b09      	cmp	r3, #9
 8006804:	d96d      	bls.n	80068e2 <_vfiprintf_r+0x1a6>
 8006806:	b371      	cbz	r1, 8006866 <_vfiprintf_r+0x12a>
 8006808:	e026      	b.n	8006858 <_vfiprintf_r+0x11c>
 800680a:	4b51      	ldr	r3, [pc, #324]	; (8006950 <_vfiprintf_r+0x214>)
 800680c:	429c      	cmp	r4, r3
 800680e:	d101      	bne.n	8006814 <_vfiprintf_r+0xd8>
 8006810:	68b4      	ldr	r4, [r6, #8]
 8006812:	e7a3      	b.n	800675c <_vfiprintf_r+0x20>
 8006814:	4b4f      	ldr	r3, [pc, #316]	; (8006954 <_vfiprintf_r+0x218>)
 8006816:	429c      	cmp	r4, r3
 8006818:	bf08      	it	eq
 800681a:	68f4      	ldreq	r4, [r6, #12]
 800681c:	e79e      	b.n	800675c <_vfiprintf_r+0x20>
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff fc5f 	bl	80060e4 <__swsetup_r>
 8006826:	2800      	cmp	r0, #0
 8006828:	d09e      	beq.n	8006768 <_vfiprintf_r+0x2c>
 800682a:	f04f 30ff 	mov.w	r0, #4294967295
 800682e:	b01d      	add	sp, #116	; 0x74
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	2b25      	cmp	r3, #37	; 0x25
 8006836:	d0a7      	beq.n	8006788 <_vfiprintf_r+0x4c>
 8006838:	46a8      	mov	r8, r5
 800683a:	e7a0      	b.n	800677e <_vfiprintf_r+0x42>
 800683c:	4a43      	ldr	r2, [pc, #268]	; (800694c <_vfiprintf_r+0x210>)
 800683e:	1a80      	subs	r0, r0, r2
 8006840:	fa0b f000 	lsl.w	r0, fp, r0
 8006844:	4318      	orrs	r0, r3
 8006846:	9004      	str	r0, [sp, #16]
 8006848:	4645      	mov	r5, r8
 800684a:	e7bb      	b.n	80067c4 <_vfiprintf_r+0x88>
 800684c:	9a03      	ldr	r2, [sp, #12]
 800684e:	1d11      	adds	r1, r2, #4
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	9103      	str	r1, [sp, #12]
 8006854:	2a00      	cmp	r2, #0
 8006856:	db01      	blt.n	800685c <_vfiprintf_r+0x120>
 8006858:	9207      	str	r2, [sp, #28]
 800685a:	e004      	b.n	8006866 <_vfiprintf_r+0x12a>
 800685c:	4252      	negs	r2, r2
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	9207      	str	r2, [sp, #28]
 8006864:	9304      	str	r3, [sp, #16]
 8006866:	f898 3000 	ldrb.w	r3, [r8]
 800686a:	2b2e      	cmp	r3, #46	; 0x2e
 800686c:	d110      	bne.n	8006890 <_vfiprintf_r+0x154>
 800686e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006872:	2b2a      	cmp	r3, #42	; 0x2a
 8006874:	f108 0101 	add.w	r1, r8, #1
 8006878:	d137      	bne.n	80068ea <_vfiprintf_r+0x1ae>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	9203      	str	r2, [sp, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfb8      	it	lt
 8006886:	f04f 33ff 	movlt.w	r3, #4294967295
 800688a:	f108 0802 	add.w	r8, r8, #2
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	4d31      	ldr	r5, [pc, #196]	; (8006958 <_vfiprintf_r+0x21c>)
 8006892:	f898 1000 	ldrb.w	r1, [r8]
 8006896:	2203      	movs	r2, #3
 8006898:	4628      	mov	r0, r5
 800689a:	f7f9 fcd1 	bl	8000240 <memchr>
 800689e:	b140      	cbz	r0, 80068b2 <_vfiprintf_r+0x176>
 80068a0:	2340      	movs	r3, #64	; 0x40
 80068a2:	1b40      	subs	r0, r0, r5
 80068a4:	fa03 f000 	lsl.w	r0, r3, r0
 80068a8:	9b04      	ldr	r3, [sp, #16]
 80068aa:	4303      	orrs	r3, r0
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	f108 0801 	add.w	r8, r8, #1
 80068b2:	f898 1000 	ldrb.w	r1, [r8]
 80068b6:	4829      	ldr	r0, [pc, #164]	; (800695c <_vfiprintf_r+0x220>)
 80068b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068bc:	2206      	movs	r2, #6
 80068be:	f108 0701 	add.w	r7, r8, #1
 80068c2:	f7f9 fcbd 	bl	8000240 <memchr>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d034      	beq.n	8006934 <_vfiprintf_r+0x1f8>
 80068ca:	4b25      	ldr	r3, [pc, #148]	; (8006960 <_vfiprintf_r+0x224>)
 80068cc:	bb03      	cbnz	r3, 8006910 <_vfiprintf_r+0x1d4>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	3307      	adds	r3, #7
 80068d2:	f023 0307 	bic.w	r3, r3, #7
 80068d6:	3308      	adds	r3, #8
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	444b      	add	r3, r9
 80068de:	9309      	str	r3, [sp, #36]	; 0x24
 80068e0:	e74c      	b.n	800677c <_vfiprintf_r+0x40>
 80068e2:	fb00 3202 	mla	r2, r0, r2, r3
 80068e6:	2101      	movs	r1, #1
 80068e8:	e786      	b.n	80067f8 <_vfiprintf_r+0xbc>
 80068ea:	2300      	movs	r3, #0
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	4618      	mov	r0, r3
 80068f0:	250a      	movs	r5, #10
 80068f2:	4688      	mov	r8, r1
 80068f4:	3101      	adds	r1, #1
 80068f6:	f898 2000 	ldrb.w	r2, [r8]
 80068fa:	3a30      	subs	r2, #48	; 0x30
 80068fc:	2a09      	cmp	r2, #9
 80068fe:	d903      	bls.n	8006908 <_vfiprintf_r+0x1cc>
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0c5      	beq.n	8006890 <_vfiprintf_r+0x154>
 8006904:	9005      	str	r0, [sp, #20]
 8006906:	e7c3      	b.n	8006890 <_vfiprintf_r+0x154>
 8006908:	fb05 2000 	mla	r0, r5, r0, r2
 800690c:	2301      	movs	r3, #1
 800690e:	e7f0      	b.n	80068f2 <_vfiprintf_r+0x1b6>
 8006910:	ab03      	add	r3, sp, #12
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	4622      	mov	r2, r4
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <_vfiprintf_r+0x228>)
 8006918:	a904      	add	r1, sp, #16
 800691a:	4630      	mov	r0, r6
 800691c:	f3af 8000 	nop.w
 8006920:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006924:	4681      	mov	r9, r0
 8006926:	d1d8      	bne.n	80068da <_vfiprintf_r+0x19e>
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	065b      	lsls	r3, r3, #25
 800692c:	f53f af7d 	bmi.w	800682a <_vfiprintf_r+0xee>
 8006930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006932:	e77c      	b.n	800682e <_vfiprintf_r+0xf2>
 8006934:	ab03      	add	r3, sp, #12
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4622      	mov	r2, r4
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <_vfiprintf_r+0x228>)
 800693c:	a904      	add	r1, sp, #16
 800693e:	4630      	mov	r0, r6
 8006940:	f000 f888 	bl	8006a54 <_printf_i>
 8006944:	e7ec      	b.n	8006920 <_vfiprintf_r+0x1e4>
 8006946:	bf00      	nop
 8006948:	08006fa8 	.word	0x08006fa8
 800694c:	08006fe8 	.word	0x08006fe8
 8006950:	08006fc8 	.word	0x08006fc8
 8006954:	08006f88 	.word	0x08006f88
 8006958:	08006fee 	.word	0x08006fee
 800695c:	08006ff2 	.word	0x08006ff2
 8006960:	00000000 	.word	0x00000000
 8006964:	08006719 	.word	0x08006719

08006968 <_printf_common>:
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	4691      	mov	r9, r2
 800696e:	461f      	mov	r7, r3
 8006970:	688a      	ldr	r2, [r1, #8]
 8006972:	690b      	ldr	r3, [r1, #16]
 8006974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006978:	4293      	cmp	r3, r2
 800697a:	bfb8      	it	lt
 800697c:	4613      	movlt	r3, r2
 800697e:	f8c9 3000 	str.w	r3, [r9]
 8006982:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006986:	4606      	mov	r6, r0
 8006988:	460c      	mov	r4, r1
 800698a:	b112      	cbz	r2, 8006992 <_printf_common+0x2a>
 800698c:	3301      	adds	r3, #1
 800698e:	f8c9 3000 	str.w	r3, [r9]
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	0699      	lsls	r1, r3, #26
 8006996:	bf42      	ittt	mi
 8006998:	f8d9 3000 	ldrmi.w	r3, [r9]
 800699c:	3302      	addmi	r3, #2
 800699e:	f8c9 3000 	strmi.w	r3, [r9]
 80069a2:	6825      	ldr	r5, [r4, #0]
 80069a4:	f015 0506 	ands.w	r5, r5, #6
 80069a8:	d107      	bne.n	80069ba <_printf_common+0x52>
 80069aa:	f104 0a19 	add.w	sl, r4, #25
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	f8d9 2000 	ldr.w	r2, [r9]
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	429d      	cmp	r5, r3
 80069b8:	db29      	blt.n	8006a0e <_printf_common+0xa6>
 80069ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069be:	6822      	ldr	r2, [r4, #0]
 80069c0:	3300      	adds	r3, #0
 80069c2:	bf18      	it	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	0692      	lsls	r2, r2, #26
 80069c8:	d42e      	bmi.n	8006a28 <_printf_common+0xc0>
 80069ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069ce:	4639      	mov	r1, r7
 80069d0:	4630      	mov	r0, r6
 80069d2:	47c0      	blx	r8
 80069d4:	3001      	adds	r0, #1
 80069d6:	d021      	beq.n	8006a1c <_printf_common+0xb4>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	68e5      	ldr	r5, [r4, #12]
 80069dc:	f8d9 2000 	ldr.w	r2, [r9]
 80069e0:	f003 0306 	and.w	r3, r3, #6
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	bf08      	it	eq
 80069e8:	1aad      	subeq	r5, r5, r2
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	6922      	ldr	r2, [r4, #16]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	f04f 0900 	mov.w	r9, #0
 8006a02:	341a      	adds	r4, #26
 8006a04:	454d      	cmp	r5, r9
 8006a06:	d11b      	bne.n	8006a40 <_printf_common+0xd8>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4652      	mov	r2, sl
 8006a12:	4639      	mov	r1, r7
 8006a14:	4630      	mov	r0, r6
 8006a16:	47c0      	blx	r8
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d103      	bne.n	8006a24 <_printf_common+0xbc>
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a24:	3501      	adds	r5, #1
 8006a26:	e7c2      	b.n	80069ae <_printf_common+0x46>
 8006a28:	18e1      	adds	r1, r4, r3
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	2030      	movs	r0, #48	; 0x30
 8006a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a32:	4422      	add	r2, r4
 8006a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	e7c4      	b.n	80069ca <_printf_common+0x62>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4622      	mov	r2, r4
 8006a44:	4639      	mov	r1, r7
 8006a46:	4630      	mov	r0, r6
 8006a48:	47c0      	blx	r8
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d0e6      	beq.n	8006a1c <_printf_common+0xb4>
 8006a4e:	f109 0901 	add.w	r9, r9, #1
 8006a52:	e7d7      	b.n	8006a04 <_printf_common+0x9c>

08006a54 <_printf_i>:
 8006a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a58:	4617      	mov	r7, r2
 8006a5a:	7e0a      	ldrb	r2, [r1, #24]
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	2a6e      	cmp	r2, #110	; 0x6e
 8006a60:	4698      	mov	r8, r3
 8006a62:	4606      	mov	r6, r0
 8006a64:	460c      	mov	r4, r1
 8006a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006a6c:	f000 80bc 	beq.w	8006be8 <_printf_i+0x194>
 8006a70:	d81a      	bhi.n	8006aa8 <_printf_i+0x54>
 8006a72:	2a63      	cmp	r2, #99	; 0x63
 8006a74:	d02e      	beq.n	8006ad4 <_printf_i+0x80>
 8006a76:	d80a      	bhi.n	8006a8e <_printf_i+0x3a>
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	f000 80c8 	beq.w	8006c0e <_printf_i+0x1ba>
 8006a7e:	2a58      	cmp	r2, #88	; 0x58
 8006a80:	f000 808a 	beq.w	8006b98 <_printf_i+0x144>
 8006a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006a8c:	e02a      	b.n	8006ae4 <_printf_i+0x90>
 8006a8e:	2a64      	cmp	r2, #100	; 0x64
 8006a90:	d001      	beq.n	8006a96 <_printf_i+0x42>
 8006a92:	2a69      	cmp	r2, #105	; 0x69
 8006a94:	d1f6      	bne.n	8006a84 <_printf_i+0x30>
 8006a96:	6821      	ldr	r1, [r4, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006a9e:	d023      	beq.n	8006ae8 <_printf_i+0x94>
 8006aa0:	1d11      	adds	r1, r2, #4
 8006aa2:	6019      	str	r1, [r3, #0]
 8006aa4:	6813      	ldr	r3, [r2, #0]
 8006aa6:	e027      	b.n	8006af8 <_printf_i+0xa4>
 8006aa8:	2a73      	cmp	r2, #115	; 0x73
 8006aaa:	f000 80b4 	beq.w	8006c16 <_printf_i+0x1c2>
 8006aae:	d808      	bhi.n	8006ac2 <_printf_i+0x6e>
 8006ab0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ab2:	d02a      	beq.n	8006b0a <_printf_i+0xb6>
 8006ab4:	2a70      	cmp	r2, #112	; 0x70
 8006ab6:	d1e5      	bne.n	8006a84 <_printf_i+0x30>
 8006ab8:	680a      	ldr	r2, [r1, #0]
 8006aba:	f042 0220 	orr.w	r2, r2, #32
 8006abe:	600a      	str	r2, [r1, #0]
 8006ac0:	e003      	b.n	8006aca <_printf_i+0x76>
 8006ac2:	2a75      	cmp	r2, #117	; 0x75
 8006ac4:	d021      	beq.n	8006b0a <_printf_i+0xb6>
 8006ac6:	2a78      	cmp	r2, #120	; 0x78
 8006ac8:	d1dc      	bne.n	8006a84 <_printf_i+0x30>
 8006aca:	2278      	movs	r2, #120	; 0x78
 8006acc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006ad0:	496e      	ldr	r1, [pc, #440]	; (8006c8c <_printf_i+0x238>)
 8006ad2:	e064      	b.n	8006b9e <_printf_i+0x14a>
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006ada:	1d11      	adds	r1, r2, #4
 8006adc:	6019      	str	r1, [r3, #0]
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0a3      	b.n	8006c30 <_printf_i+0x1dc>
 8006ae8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006aec:	f102 0104 	add.w	r1, r2, #4
 8006af0:	6019      	str	r1, [r3, #0]
 8006af2:	d0d7      	beq.n	8006aa4 <_printf_i+0x50>
 8006af4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	da03      	bge.n	8006b04 <_printf_i+0xb0>
 8006afc:	222d      	movs	r2, #45	; 0x2d
 8006afe:	425b      	negs	r3, r3
 8006b00:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b04:	4962      	ldr	r1, [pc, #392]	; (8006c90 <_printf_i+0x23c>)
 8006b06:	220a      	movs	r2, #10
 8006b08:	e017      	b.n	8006b3a <_printf_i+0xe6>
 8006b0a:	6820      	ldr	r0, [r4, #0]
 8006b0c:	6819      	ldr	r1, [r3, #0]
 8006b0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006b12:	d003      	beq.n	8006b1c <_printf_i+0xc8>
 8006b14:	1d08      	adds	r0, r1, #4
 8006b16:	6018      	str	r0, [r3, #0]
 8006b18:	680b      	ldr	r3, [r1, #0]
 8006b1a:	e006      	b.n	8006b2a <_printf_i+0xd6>
 8006b1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b20:	f101 0004 	add.w	r0, r1, #4
 8006b24:	6018      	str	r0, [r3, #0]
 8006b26:	d0f7      	beq.n	8006b18 <_printf_i+0xc4>
 8006b28:	880b      	ldrh	r3, [r1, #0]
 8006b2a:	4959      	ldr	r1, [pc, #356]	; (8006c90 <_printf_i+0x23c>)
 8006b2c:	2a6f      	cmp	r2, #111	; 0x6f
 8006b2e:	bf14      	ite	ne
 8006b30:	220a      	movne	r2, #10
 8006b32:	2208      	moveq	r2, #8
 8006b34:	2000      	movs	r0, #0
 8006b36:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006b3a:	6865      	ldr	r5, [r4, #4]
 8006b3c:	60a5      	str	r5, [r4, #8]
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	f2c0 809c 	blt.w	8006c7c <_printf_i+0x228>
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	f020 0004 	bic.w	r0, r0, #4
 8006b4a:	6020      	str	r0, [r4, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d13f      	bne.n	8006bd0 <_printf_i+0x17c>
 8006b50:	2d00      	cmp	r5, #0
 8006b52:	f040 8095 	bne.w	8006c80 <_printf_i+0x22c>
 8006b56:	4675      	mov	r5, lr
 8006b58:	2a08      	cmp	r2, #8
 8006b5a:	d10b      	bne.n	8006b74 <_printf_i+0x120>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07da      	lsls	r2, r3, #31
 8006b60:	d508      	bpl.n	8006b74 <_printf_i+0x120>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	bfde      	ittt	le
 8006b6a:	2330      	movle	r3, #48	; 0x30
 8006b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b74:	ebae 0305 	sub.w	r3, lr, r5
 8006b78:	6123      	str	r3, [r4, #16]
 8006b7a:	f8cd 8000 	str.w	r8, [sp]
 8006b7e:	463b      	mov	r3, r7
 8006b80:	aa03      	add	r2, sp, #12
 8006b82:	4621      	mov	r1, r4
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff feef 	bl	8006968 <_printf_common>
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d155      	bne.n	8006c3a <_printf_i+0x1e6>
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	b005      	add	sp, #20
 8006b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b98:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006b9c:	493c      	ldr	r1, [pc, #240]	; (8006c90 <_printf_i+0x23c>)
 8006b9e:	6822      	ldr	r2, [r4, #0]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ba6:	f100 0504 	add.w	r5, r0, #4
 8006baa:	601d      	str	r5, [r3, #0]
 8006bac:	d001      	beq.n	8006bb2 <_printf_i+0x15e>
 8006bae:	6803      	ldr	r3, [r0, #0]
 8006bb0:	e002      	b.n	8006bb8 <_printf_i+0x164>
 8006bb2:	0655      	lsls	r5, r2, #25
 8006bb4:	d5fb      	bpl.n	8006bae <_printf_i+0x15a>
 8006bb6:	8803      	ldrh	r3, [r0, #0]
 8006bb8:	07d0      	lsls	r0, r2, #31
 8006bba:	bf44      	itt	mi
 8006bbc:	f042 0220 	orrmi.w	r2, r2, #32
 8006bc0:	6022      	strmi	r2, [r4, #0]
 8006bc2:	b91b      	cbnz	r3, 8006bcc <_printf_i+0x178>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	f022 0220 	bic.w	r2, r2, #32
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	2210      	movs	r2, #16
 8006bce:	e7b1      	b.n	8006b34 <_printf_i+0xe0>
 8006bd0:	4675      	mov	r5, lr
 8006bd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bd6:	fb02 3310 	mls	r3, r2, r0, r3
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006be0:	4603      	mov	r3, r0
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d1f5      	bne.n	8006bd2 <_printf_i+0x17e>
 8006be6:	e7b7      	b.n	8006b58 <_printf_i+0x104>
 8006be8:	6808      	ldr	r0, [r1, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	6949      	ldr	r1, [r1, #20]
 8006bee:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006bf2:	d004      	beq.n	8006bfe <_printf_i+0x1aa>
 8006bf4:	1d10      	adds	r0, r2, #4
 8006bf6:	6018      	str	r0, [r3, #0]
 8006bf8:	6813      	ldr	r3, [r2, #0]
 8006bfa:	6019      	str	r1, [r3, #0]
 8006bfc:	e007      	b.n	8006c0e <_printf_i+0x1ba>
 8006bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c02:	f102 0004 	add.w	r0, r2, #4
 8006c06:	6018      	str	r0, [r3, #0]
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	d0f6      	beq.n	8006bfa <_printf_i+0x1a6>
 8006c0c:	8019      	strh	r1, [r3, #0]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	4675      	mov	r5, lr
 8006c14:	e7b1      	b.n	8006b7a <_printf_i+0x126>
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	1d11      	adds	r1, r2, #4
 8006c1a:	6019      	str	r1, [r3, #0]
 8006c1c:	6815      	ldr	r5, [r2, #0]
 8006c1e:	6862      	ldr	r2, [r4, #4]
 8006c20:	2100      	movs	r1, #0
 8006c22:	4628      	mov	r0, r5
 8006c24:	f7f9 fb0c 	bl	8000240 <memchr>
 8006c28:	b108      	cbz	r0, 8006c2e <_printf_i+0x1da>
 8006c2a:	1b40      	subs	r0, r0, r5
 8006c2c:	6060      	str	r0, [r4, #4]
 8006c2e:	6863      	ldr	r3, [r4, #4]
 8006c30:	6123      	str	r3, [r4, #16]
 8006c32:	2300      	movs	r3, #0
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c38:	e79f      	b.n	8006b7a <_printf_i+0x126>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	4639      	mov	r1, r7
 8006c40:	4630      	mov	r0, r6
 8006c42:	47c0      	blx	r8
 8006c44:	3001      	adds	r0, #1
 8006c46:	d0a2      	beq.n	8006b8e <_printf_i+0x13a>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	079b      	lsls	r3, r3, #30
 8006c4c:	d507      	bpl.n	8006c5e <_printf_i+0x20a>
 8006c4e:	2500      	movs	r5, #0
 8006c50:	f104 0919 	add.w	r9, r4, #25
 8006c54:	68e3      	ldr	r3, [r4, #12]
 8006c56:	9a03      	ldr	r2, [sp, #12]
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	429d      	cmp	r5, r3
 8006c5c:	db05      	blt.n	8006c6a <_printf_i+0x216>
 8006c5e:	68e0      	ldr	r0, [r4, #12]
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	4298      	cmp	r0, r3
 8006c64:	bfb8      	it	lt
 8006c66:	4618      	movlt	r0, r3
 8006c68:	e793      	b.n	8006b92 <_printf_i+0x13e>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	464a      	mov	r2, r9
 8006c6e:	4639      	mov	r1, r7
 8006c70:	4630      	mov	r0, r6
 8006c72:	47c0      	blx	r8
 8006c74:	3001      	adds	r0, #1
 8006c76:	d08a      	beq.n	8006b8e <_printf_i+0x13a>
 8006c78:	3501      	adds	r5, #1
 8006c7a:	e7eb      	b.n	8006c54 <_printf_i+0x200>
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1a7      	bne.n	8006bd0 <_printf_i+0x17c>
 8006c80:	780b      	ldrb	r3, [r1, #0]
 8006c82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c8a:	e765      	b.n	8006b58 <_printf_i+0x104>
 8006c8c:	0800700a 	.word	0x0800700a
 8006c90:	08006ff9 	.word	0x08006ff9

08006c94 <_sbrk_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4c06      	ldr	r4, [pc, #24]	; (8006cb0 <_sbrk_r+0x1c>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	6023      	str	r3, [r4, #0]
 8006ca0:	f7ff f858 	bl	8005d54 <_sbrk>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_sbrk_r+0x1a>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_sbrk_r+0x1a>
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	20004908 	.word	0x20004908

08006cb4 <__sread>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f000 f896 	bl	8006dec <_read_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	bfab      	itete	ge
 8006cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc8:	181b      	addge	r3, r3, r0
 8006cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cce:	bfac      	ite	ge
 8006cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cd2:	81a3      	strhlt	r3, [r4, #12]
 8006cd4:	bd10      	pop	{r4, pc}

08006cd6 <__swrite>:
 8006cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	461f      	mov	r7, r3
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	05db      	lsls	r3, r3, #23
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	d505      	bpl.n	8006cf4 <__swrite+0x1e>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	2200      	movs	r2, #0
 8006cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf0:	f000 f868 	bl	8006dc4 <_lseek_r>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	4632      	mov	r2, r6
 8006d02:	463b      	mov	r3, r7
 8006d04:	4628      	mov	r0, r5
 8006d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	f000 b817 	b.w	8006d3c <_write_r>

08006d0e <__sseek>:
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	460c      	mov	r4, r1
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 f855 	bl	8006dc4 <_lseek_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	bf15      	itete	ne
 8006d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d2a:	81a3      	strheq	r3, [r4, #12]
 8006d2c:	bf18      	it	ne
 8006d2e:	81a3      	strhne	r3, [r4, #12]
 8006d30:	bd10      	pop	{r4, pc}

08006d32 <__sclose>:
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 b813 	b.w	8006d60 <_close_r>
	...

08006d3c <_write_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4c07      	ldr	r4, [pc, #28]	; (8006d5c <_write_r+0x20>)
 8006d40:	4605      	mov	r5, r0
 8006d42:	4608      	mov	r0, r1
 8006d44:	4611      	mov	r1, r2
 8006d46:	2200      	movs	r2, #0
 8006d48:	6022      	str	r2, [r4, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f7fe fff4 	bl	8005d38 <_write>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d102      	bne.n	8006d5a <_write_r+0x1e>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	b103      	cbz	r3, 8006d5a <_write_r+0x1e>
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	20004908 	.word	0x20004908

08006d60 <_close_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4c06      	ldr	r4, [pc, #24]	; (8006d7c <_close_r+0x1c>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4605      	mov	r5, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	f7ff f810 	bl	8005d90 <_close>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_close_r+0x1a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_close_r+0x1a>
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20004908 	.word	0x20004908

08006d80 <_fstat_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4c07      	ldr	r4, [pc, #28]	; (8006da0 <_fstat_r+0x20>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4605      	mov	r5, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	f7ff f802 	bl	8005d96 <_fstat>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	d102      	bne.n	8006d9c <_fstat_r+0x1c>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	b103      	cbz	r3, 8006d9c <_fstat_r+0x1c>
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	bd38      	pop	{r3, r4, r5, pc}
 8006d9e:	bf00      	nop
 8006da0:	20004908 	.word	0x20004908

08006da4 <_isatty_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4c06      	ldr	r4, [pc, #24]	; (8006dc0 <_isatty_r+0x1c>)
 8006da8:	2300      	movs	r3, #0
 8006daa:	4605      	mov	r5, r0
 8006dac:	4608      	mov	r0, r1
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	f7fe fff6 	bl	8005da0 <_isatty>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_isatty_r+0x1a>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_isatty_r+0x1a>
 8006dbc:	602b      	str	r3, [r5, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	20004908 	.word	0x20004908

08006dc4 <_lseek_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4c07      	ldr	r4, [pc, #28]	; (8006de4 <_lseek_r+0x20>)
 8006dc8:	4605      	mov	r5, r0
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f7fe ffe6 	bl	8005da4 <_lseek>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_lseek_r+0x1e>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_lseek_r+0x1e>
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20004908 	.word	0x20004908

08006de8 <__malloc_lock>:
 8006de8:	4770      	bx	lr

08006dea <__malloc_unlock>:
 8006dea:	4770      	bx	lr

08006dec <_read_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4c07      	ldr	r4, [pc, #28]	; (8006e0c <_read_r+0x20>)
 8006df0:	4605      	mov	r5, r0
 8006df2:	4608      	mov	r0, r1
 8006df4:	4611      	mov	r1, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7fe ff8d 	bl	8005d1a <_read>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_read_r+0x1e>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_read_r+0x1e>
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	20004908 	.word	0x20004908

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
