
TESTING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800dba0  0800dba0  0001dba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbe0  0800dbe0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbe0  0800dbe0  0001dbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbe8  0800dbe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbe8  0800dbe8  0001dbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800dbf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f04  2000000c  0800dbfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f10  0800dbfc  00028f10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031cc3  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005aba  00000000  00000000  00051cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002bc8  00000000  00000000  000577b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002908  00000000  00000000  0005a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000390a1  00000000  00000000  0005cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000271a7  00000000  00000000  00095d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014f579  00000000  00000000  000bced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020c449  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbe4  00000000  00000000  0020c4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000000c 	.word	0x2000000c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800db88 	.word	0x0800db88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000010 	.word	0x20000010
 800023c:	0800db88 	.word	0x0800db88

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 fcd2 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f00d f9e2 	bl	800d914 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f00c f8ce 	bl	800c6f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x20>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_IncTick+0x24>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_IncTick+0x24>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000
 8000580:	20008180 	.word	0x20008180

08000584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return uwTick;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <HAL_GetTick+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20008180 	.word	0x20008180

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a4:	f7ff ffee 	bl	8000584 <HAL_GetTick>
 80005a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005b4:	d005      	beq.n	80005c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <HAL_Delay+0x40>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005c2:	bf00      	nop
 80005c4:	f7ff ffde 	bl	8000584 <HAL_GetTick>
 80005c8:	4602      	mov	r2, r0
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8f7      	bhi.n	80005c4 <HAL_Delay+0x28>
  {
  }
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000

080005e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e031      	b.n	800065a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d109      	bne.n	8000612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f00c f89e 	bl	800c740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	2b00      	cmp	r3, #0
 800061c:	d116      	bne.n	800064c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_ADC_Init+0x84>)
 8000624:	4013      	ands	r3, r2
 8000626:	f043 0202 	orr.w	r2, r3, #2
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f94e 	bl	80008d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	f023 0303 	bic.w	r3, r3, #3
 8000642:	f043 0201 	orr.w	r2, r3, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	641a      	str	r2, [r3, #64]	; 0x40
 800064a:	e001      	b.n	8000650 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	ffffeefd 	.word	0xffffeefd

08000668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800067c:	2b01      	cmp	r3, #1
 800067e:	d101      	bne.n	8000684 <HAL_ADC_ConfigChannel+0x1c>
 8000680:	2302      	movs	r3, #2
 8000682:	e115      	b.n	80008b0 <HAL_ADC_ConfigChannel+0x248>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2201      	movs	r2, #1
 8000688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b09      	cmp	r3, #9
 8000692:	d935      	bls.n	8000700 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68d9      	ldr	r1, [r3, #12]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	4613      	mov	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4413      	add	r3, r2
 80006a8:	3b1e      	subs	r3, #30
 80006aa:	2207      	movs	r2, #7
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	43da      	mvns	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	400a      	ands	r2, r1
 80006b8:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a7f      	ldr	r2, [pc, #508]	; (80008bc <HAL_ADC_ConfigChannel+0x254>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d10a      	bne.n	80006da <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68d9      	ldr	r1, [r3, #12]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	061a      	lsls	r2, r3, #24
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	e035      	b.n	8000746 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68d9      	ldr	r1, [r3, #12]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	4603      	mov	r3, r0
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4403      	add	r3, r0
 80006f2:	3b1e      	subs	r3, #30
 80006f4:	409a      	lsls	r2, r3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	e022      	b.n	8000746 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6919      	ldr	r1, [r3, #16]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b29b      	uxth	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	4613      	mov	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	2207      	movs	r2, #7
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	43da      	mvns	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	400a      	ands	r2, r1
 8000722:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6919      	ldr	r1, [r3, #16]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	4603      	mov	r3, r0
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4403      	add	r3, r0
 800073c:	409a      	lsls	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	430a      	orrs	r2, r1
 8000744:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2b06      	cmp	r3, #6
 800074c:	d824      	bhi.n	8000798 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	3b05      	subs	r3, #5
 8000760:	221f      	movs	r2, #31
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43da      	mvns	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	400a      	ands	r2, r1
 800076e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	b29b      	uxth	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	3b05      	subs	r3, #5
 800078a:	fa00 f203 	lsl.w	r2, r0, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	430a      	orrs	r2, r1
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
 8000796:	e04c      	b.n	8000832 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b0c      	cmp	r3, #12
 800079e:	d824      	bhi.n	80007ea <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	3b23      	subs	r3, #35	; 0x23
 80007b2:	221f      	movs	r2, #31
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	43da      	mvns	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	400a      	ands	r2, r1
 80007c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	3b23      	subs	r3, #35	; 0x23
 80007dc:	fa00 f203 	lsl.w	r2, r0, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	430a      	orrs	r2, r1
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
 80007e8:	e023      	b.n	8000832 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	3b41      	subs	r3, #65	; 0x41
 80007fc:	221f      	movs	r2, #31
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	400a      	ands	r2, r1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	3b41      	subs	r3, #65	; 0x41
 8000826:	fa00 f203 	lsl.w	r2, r0, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	430a      	orrs	r2, r1
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <HAL_ADC_ConfigChannel+0x258>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d109      	bne.n	8000850 <HAL_ADC_ConfigChannel+0x1e8>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b12      	cmp	r3, #18
 8000842:	d105      	bne.n	8000850 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <HAL_ADC_ConfigChannel+0x25c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <HAL_ADC_ConfigChannel+0x25c>)
 800084a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800084e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <HAL_ADC_ConfigChannel+0x258>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d125      	bne.n	80008a6 <HAL_ADC_ConfigChannel+0x23e>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_ADC_ConfigChannel+0x254>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d003      	beq.n	800086c <HAL_ADC_ConfigChannel+0x204>
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b11      	cmp	r3, #17
 800086a:	d11c      	bne.n	80008a6 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_ADC_ConfigChannel+0x25c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_ADC_ConfigChannel+0x25c>)
 8000872:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000876:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_ADC_ConfigChannel+0x254>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d111      	bne.n	80008a6 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_ADC_ConfigChannel+0x260>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_ADC_ConfigChannel+0x264>)
 8000888:	fba2 2303 	umull	r2, r3, r2, r3
 800088c:	0c9a      	lsrs	r2, r3, #18
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000898:	e002      	b.n	80008a0 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3b01      	subs	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1f9      	bne.n	800089a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	10000012 	.word	0x10000012
 80008c0:	40012000 	.word	0x40012000
 80008c4:	40012300 	.word	0x40012300
 80008c8:	20000008 	.word	0x20000008
 80008cc:	431bde83 	.word	0x431bde83

080008d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008d8:	4b78      	ldr	r3, [pc, #480]	; (8000abc <ADC_Init+0x1ec>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a77      	ldr	r2, [pc, #476]	; (8000abc <ADC_Init+0x1ec>)
 80008de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008e4:	4b75      	ldr	r3, [pc, #468]	; (8000abc <ADC_Init+0x1ec>)
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	4973      	ldr	r1, [pc, #460]	; (8000abc <ADC_Init+0x1ec>)
 80008ee:	4313      	orrs	r3, r2
 80008f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6859      	ldr	r1, [r3, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	691b      	ldr	r3, [r3, #16]
 800090c:	021a      	lsls	r2, r3, #8
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	430a      	orrs	r2, r1
 8000914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6859      	ldr	r1, [r3, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	430a      	orrs	r2, r1
 8000936:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6899      	ldr	r1, [r3, #8]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	430a      	orrs	r2, r1
 8000958:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095e:	4a58      	ldr	r2, [pc, #352]	; (8000ac0 <ADC_Init+0x1f0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d022      	beq.n	80009aa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000972:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6899      	ldr	r1, [r3, #8]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6899      	ldr	r1, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	e00f      	b.n	80009ca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0202 	bic.w	r2, r2, #2
 80009d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6899      	ldr	r1, [r3, #8]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	005a      	lsls	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d01b      	beq.n	8000a30 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6859      	ldr	r1, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	3b01      	subs	r3, #1
 8000a24:	035a      	lsls	r2, r3, #13
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	e007      	b.n	8000a40 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	051a      	lsls	r2, r3, #20
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6899      	ldr	r1, [r3, #8]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a82:	025a      	lsls	r2, r3, #9
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6899      	ldr	r1, [r3, #8]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	029a      	lsls	r2, r3, #10
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	609a      	str	r2, [r3, #8]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40012300 	.word	0x40012300
 8000ac0:	0f000001 	.word	0x0f000001

08000ac4 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_CEC_Init+0x16>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e04f      	b.n	8000b7e <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d106      	bne.n	8000af4 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f00b ffd8 	bl	800caa4 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2224      	movs	r2, #36	; 0x24
 8000af8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8000b1e:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	431a      	orrs	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8000b30:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8000b44:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8000b46:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6959      	ldr	r1, [r3, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f042 0201 	orr.w	r2, r2, #1
 8000b68:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2220      	movs	r2, #32
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2220      	movs	r2, #32
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00a      	beq.n	8000bb6 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bb4:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d01c      	beq.n	8000bfa <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2222      	movs	r2, #34	; 0x22
 8000bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f042 0201 	orr.w	r2, r2, #1
 8000bf8:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01e      	beq.n	8000c42 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2220      	movs	r2, #32
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000c28:	425b      	negs	r3, r3
 8000c2a:	441a      	add	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000c34:	4619      	mov	r1, r3
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f897 	bl	8000d6a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d030      	beq.n	8000cae <HAL_CEC_IRQHandler+0x128>
  {
    if (hcec->TxXferCount == 0U)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d113      	bne.n	8000c7c <HAL_CEC_IRQHandler+0xf6>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0204 	orr.w	r2, r2, #4
 8000c62:	601a      	str	r2, [r3, #0]
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c7a:	e010      	b.n	8000c9e <HAL_CEC_IRQHandler+0x118>
    }
    else
    {
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
      hcec->TxXferCount--;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cac:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d014      	beq.n	8000ce2 <HAL_CEC_IRQHandler+0x15c>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	691a      	ldr	r2, [r3, #16]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2220      	movs	r2, #32
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f83a 	bl	8000d56 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d02f      	beq.n	8000d4e <HAL_CEC_IRQHandler+0x1c8>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6919      	ldr	r1, [r3, #16]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8000d02:	430b      	orrs	r3, r1
 8000d04:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00e      	beq.n	8000d2e <HAL_CEC_IRQHandler+0x1a8>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000d18:	425b      	negs	r3, r3
 8000d1a:	441a      	add	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2220      	movs	r2, #32
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d2c:	e00c      	b.n	8000d48 <HAL_CEC_IRQHandler+0x1c2>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d107      	bne.n	8000d48 <HAL_CEC_IRQHandler+0x1c2>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <HAL_CEC_IRQHandler+0x1c2>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2220      	movs	r2, #32
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f819 	bl	8000d80 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	05fa0000 	.word	0x05fa0000

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4c 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb1 	bl	8000e88 <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff80 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff54 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e054      	b.n	8001014 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f5b      	ldrb	r3, [r3, #29]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d105      	bne.n	8000f80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f00b fc68 	bl	800c850 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2202      	movs	r2, #2
 8000f84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	791b      	ldrb	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_CRC_Init+0xc4>)
 8000f94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0218 	bic.w	r2, r2, #24
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	e00c      	b.n	8000fc2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6899      	ldr	r1, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f834 	bl	8001020 <HAL_CRCEx_Polynomial_Set>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e028      	b.n	8001014 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	795b      	ldrb	r3, [r3, #5]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	e004      	b.n	8000fe0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6912      	ldr	r2, [r2, #16]
 8000fde:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2201      	movs	r2, #1
 8001010:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	04c11db7 	.word	0x04c11db7

08001020 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001030:	231f      	movs	r3, #31
 8001032:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001034:	bf00      	nop
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1e5a      	subs	r2, r3, #1
 800103a:	613a      	str	r2, [r7, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <HAL_CRCEx_Polynomial_Set+0x34>
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b18      	cmp	r3, #24
 8001058:	d846      	bhi.n	80010e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <HAL_CRCEx_Polynomial_Set+0x40>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	080010ef 	.word	0x080010ef
 8001064:	080010e9 	.word	0x080010e9
 8001068:	080010e9 	.word	0x080010e9
 800106c:	080010e9 	.word	0x080010e9
 8001070:	080010e9 	.word	0x080010e9
 8001074:	080010e9 	.word	0x080010e9
 8001078:	080010e9 	.word	0x080010e9
 800107c:	080010e9 	.word	0x080010e9
 8001080:	080010dd 	.word	0x080010dd
 8001084:	080010e9 	.word	0x080010e9
 8001088:	080010e9 	.word	0x080010e9
 800108c:	080010e9 	.word	0x080010e9
 8001090:	080010e9 	.word	0x080010e9
 8001094:	080010e9 	.word	0x080010e9
 8001098:	080010e9 	.word	0x080010e9
 800109c:	080010e9 	.word	0x080010e9
 80010a0:	080010d1 	.word	0x080010d1
 80010a4:	080010e9 	.word	0x080010e9
 80010a8:	080010e9 	.word	0x080010e9
 80010ac:	080010e9 	.word	0x080010e9
 80010b0:	080010e9 	.word	0x080010e9
 80010b4:	080010e9 	.word	0x080010e9
 80010b8:	080010e9 	.word	0x080010e9
 80010bc:	080010e9 	.word	0x080010e9
 80010c0:	080010c5 	.word	0x080010c5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d913      	bls.n	80010f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80010ce:	e010      	b.n	80010f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d90f      	bls.n	80010f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80010da:	e00c      	b.n	80010f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d90b      	bls.n	80010fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80010e6:	e008      	b.n	80010fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	75fb      	strb	r3, [r7, #23]
      break;
 80010ec:	e006      	b.n	80010fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010ee:	bf00      	nop
 80010f0:	e004      	b.n	80010fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010f2:	bf00      	nop
 80010f4:	e002      	b.n	80010fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010f6:	bf00      	nop
 80010f8:	e000      	b.n	80010fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80010fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10d      	bne.n	800111e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f023 0118 	bic.w	r1, r3, #24
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	430a      	orrs	r2, r1
 800111c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e049      	b.n	80011d2 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d106      	bne.n	8001158 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f00b fb9c 	bl	800c890 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2202      	movs	r2, #2
 800115c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	f023 0107 	bic.w	r1, r3, #7
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_DMA2D_Init+0xb0>)
 8001194:	4013      	ands	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68d1      	ldr	r1, [r2, #12]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	430b      	orrs	r3, r1
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	051a      	lsls	r2, r3, #20
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	055b      	lsls	r3, r3, #21
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	ffffc000 	.word	0xffffc000

080011e0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d026      	beq.n	8001250 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d021      	beq.n	8001250 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800121a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2201      	movs	r2, #1
 800122e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0320 	and.w	r3, r3, #32
 8001256:	2b00      	cmp	r3, #0
 8001258:	d026      	beq.n	80012a8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d021      	beq.n	80012a8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001272:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2220      	movs	r2, #32
 800127a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f043 0202 	orr.w	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2204      	movs	r2, #4
 800128c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d026      	beq.n	8001300 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2208      	movs	r2, #8
 80012d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	f043 0204 	orr.w	r2, r3, #4
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferErrorCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001322:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2204      	movs	r2, #4
 800132a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f853 	bl	80013d8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d024      	beq.n	8001386 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01f      	beq.n	8001386 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001354:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2202      	movs	r2, #2
 800135c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if(hdma2d->XferCpltCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01f      	beq.n	80013d0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d01a      	beq.n	80013d0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2210      	movs	r2, #16
 80013b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f80e 	bl	80013ec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_DMA2D_ConfigLayer+0x20>
 800141c:	2302      	movs	r3, #2
 800141e:	e084      	b.n	800152a <HAL_DMA2D_ConfigLayer+0x12a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	3320      	adds	r3, #32
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	041b      	lsls	r3, r3, #16
 800144c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8001454:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001460:	4b35      	ldr	r3, [pc, #212]	; (8001538 <HAL_DMA2D_ConfigLayer+0x138>)
 8001462:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b0a      	cmp	r3, #10
 800146a:	d003      	beq.n	8001474 <HAL_DMA2D_ConfigLayer+0x74>
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b09      	cmp	r3, #9
 8001472:	d107      	bne.n	8001484 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e005      	b.n	8001490 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4313      	orrs	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d120      	bne.n	80014d8 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	ea02 0103 	and.w	r1, r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b0a      	cmp	r3, #10
 80014be:	d003      	beq.n	80014c8 <HAL_DMA2D_ConfigLayer+0xc8>
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	d127      	bne.n	8001518 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
 80014d6:	e01f      	b.n	8001518 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	69da      	ldr	r2, [r3, #28]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	ea02 0103 	and.w	r1, r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d003      	beq.n	800150a <HAL_DMA2D_ConfigLayer+0x10a>
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b09      	cmp	r3, #9
 8001508:	d106      	bne.n	8001518 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001516:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	ff33000f 	.word	0xff33000f

0800153c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e106      	b.n	800175e <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7c5b      	ldrb	r3, [r3, #17]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f00b f9be 	bl	800c8dc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800157a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800158e:	f7fe fff9 	bl	8000584 <HAL_GetTick>
 8001592:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8001594:	e009      	b.n	80015aa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001596:	f7fe fff5 	bl	8000584 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a4:	d901      	bls.n	80015aa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0d9      	b.n	800175e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0ed      	beq.n	8001596 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_DSI_Init+0x22c>)
 80015c8:	400b      	ands	r3, r1
 80015ca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	009a      	lsls	r2, r3, #2
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	02db      	lsls	r3, r3, #11
 80015e2:	431a      	orrs	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161e:	f7fe ffb1 	bl	8000584 <HAL_GetTick>
 8001622:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8001624:	e009      	b.n	800163a <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001626:	f7fe ffad 	bl	8000584 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001634:	d901      	bls.n	800163a <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e091      	b.n	800175e <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ed      	beq.n	8001626 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0206 	orr.w	r2, r2, #6
 800165a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0203 	bic.w	r2, r2, #3
 800166e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0203 	bic.w	r2, r2, #3
 800169c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016c4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_DSI_Init+0x1aa>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	e000      	b.n	80016e8 <HAL_DSI_Init+0x1ac>
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_DSI_Init+0x230>)
 80016ee:	fb02 f203 	mul.w	r2, r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	409a      	lsls	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800171e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	430a      	orrs	r2, r1
 8001732:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2200      	movs	r2, #0
 800173c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	fffc8603 	.word	0xfffc8603
 800176c:	003d0900 	.word	0x003d0900

08001770 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7c1b      	ldrb	r3, [r3, #16]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_DSI_ConfigErrorMonitor+0x16>
 8001782:	2302      	movs	r3, #2
 8001784:	e0aa      	b.n	80018dc <HAL_DSI_ConfigErrorMonitor+0x16c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c0:	430b      	orrs	r3, r1
 80017c2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80017e0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0202 	orr.w	r2, r2, #2
 800181c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 020c 	orr.w	r2, r2, #12
 800183a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d009      	beq.n	800185c <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0210 	orr.w	r2, r2, #16
 8001858:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0220 	orr.w	r2, r2, #32
 8001876:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001894:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d009      	beq.n	80018d4 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80018d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00f      	beq.n	8001920 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f8ad 	bl	8001a7a <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00f      	beq.n	8001950 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2202      	movs	r2, #2
 8001946:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f89f 	bl	8001a8e <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808c 	beq.w	8001a72 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001962:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800197a:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4013      	ands	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	b29b      	uxth	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f043 0204 	orr.w	r2, r3, #4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f043 0208 	orr.w	r2, r3, #8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f043 0210 	orr.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f043 0220 	orr.w	r2, r3, #32
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f818 	bl	8001aa2 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7c1b      	ldrb	r3, [r3, #16]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_DSI_SetGenericVCID+0x16>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e016      	b.n	8001afa <HAL_DSI_SetGenericVCID+0x44>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0203 	bic.w	r2, r2, #3
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7c1b      	ldrb	r3, [r3, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0c5      	b.n	8001caa <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0201 	orr.w	r2, r2, #1
 8001b58:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0203 	bic.w	r2, r2, #3
 8001b6a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68d9      	ldr	r1, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0207 	bic.w	r2, r2, #7
 8001b8c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6959      	ldr	r1, [r3, #20]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 020f 	bic.w	r2, r2, #15
 8001bba:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6919      	ldr	r1, [r3, #16]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 020e 	bic.w	r2, r2, #14
 8001bde:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	005a      	lsls	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8001c06:	400b      	ands	r3, r1
 8001c08:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0202 	orr.w	r2, r2, #2
 8001c9e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	ffff0000 	.word	0xffff0000

08001cbc <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7c1b      	ldrb	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DSI_ConfigCommand+0x16>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e049      	b.n	8001d66 <HAL_DSI_ConfigCommand+0xaa>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_DSI_ConfigCommand+0xb8>)
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8001cf6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8001cfc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8001d02:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8001d08:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8001d0e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8001d14:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8001d1a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8001d20:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8001d26:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8001d2c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8001d32:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0202 	bic.w	r2, r2, #2
 8001d4a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	fef080ff 	.word	0xfef080ff

08001d78 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7c1b      	ldrb	r3, [r3, #16]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_DSI_ConfigFlowControl+0x16>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e016      	b.n	8001dbc <HAL_DSI_ConfigFlowControl+0x44>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 021f 	bic.w	r2, r2, #31
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7c1b      	ldrb	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_DSI_ConfigPhyTimer+0x16>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e058      	b.n	8001e90 <HAL_DSI_ConfigPhyTimer+0xc8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf38      	it	cc
 8001df0:	4613      	movcc	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8001e04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	041a      	lsls	r2, r3, #16
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001e32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	021a      	lsls	r2, r3, #8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7c1b      	ldrb	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_DSI_ConfigHostTimeouts+0x16>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0b4      	b.n	800201c <HAL_DSI_ConfigHostTimeouts+0x180>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ec6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	021a      	lsls	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001f50:	400b      	ands	r3, r1
 8001f52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001fce:	400b      	ands	r3, r1
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6a1a      	ldr	r2, [r3, #32]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	ffff0000 	.word	0xffff0000

0800202c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7c1b      	ldrb	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800203e:	2302      	movs	r3, #2
 8002040:	e01b      	b.n	800207a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002058:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	065a      	lsls	r2, r3, #25
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002098:	4ba9      	ldr	r3, [pc, #676]	; (8002340 <HAL_ETH_Init+0x2b8>)
 800209a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e183      	b.n	80023b6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f00a fc56 	bl	800c974 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_ETH_Init+0x2bc>)
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	4a9d      	ldr	r2, [pc, #628]	; (8002344 <HAL_ETH_Init+0x2bc>)
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d2:	6453      	str	r3, [r2, #68]	; 0x44
 80020d4:	4b9b      	ldr	r3, [pc, #620]	; (8002344 <HAL_ETH_Init+0x2bc>)
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020e0:	4b99      	ldr	r3, [pc, #612]	; (8002348 <HAL_ETH_Init+0x2c0>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_ETH_Init+0x2c0>)
 80020e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020ea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020ec:	4b96      	ldr	r3, [pc, #600]	; (8002348 <HAL_ETH_Init+0x2c0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4994      	ldr	r1, [pc, #592]	; (8002348 <HAL_ETH_Init+0x2c0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002110:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002112:	f7fe fa37 	bl	8000584 <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002118:	e011      	b.n	800213e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800211a:	f7fe fa33 	bl	8000584 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002128:	d909      	bls.n	800213e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2203      	movs	r2, #3
 800212e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e13b      	b.n	80023b6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e4      	bne.n	800211a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f023 031c 	bic.w	r3, r3, #28
 800215e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002160:	f003 fc54 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8002164:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4a78      	ldr	r2, [pc, #480]	; (800234c <HAL_ETH_Init+0x2c4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d908      	bls.n	8002180 <HAL_ETH_Init+0xf8>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4a77      	ldr	r2, [pc, #476]	; (8002350 <HAL_ETH_Init+0x2c8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d804      	bhi.n	8002180 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e027      	b.n	80021d0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4a73      	ldr	r2, [pc, #460]	; (8002350 <HAL_ETH_Init+0x2c8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d908      	bls.n	800219a <HAL_ETH_Init+0x112>
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4a72      	ldr	r2, [pc, #456]	; (8002354 <HAL_ETH_Init+0x2cc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d804      	bhi.n	800219a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f043 030c 	orr.w	r3, r3, #12
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	e01a      	b.n	80021d0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4a6d      	ldr	r2, [pc, #436]	; (8002354 <HAL_ETH_Init+0x2cc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d903      	bls.n	80021aa <HAL_ETH_Init+0x122>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4a6c      	ldr	r2, [pc, #432]	; (8002358 <HAL_ETH_Init+0x2d0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d911      	bls.n	80021ce <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_ETH_Init+0x2d0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d908      	bls.n	80021c4 <HAL_ETH_Init+0x13c>
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_ETH_Init+0x2d4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d804      	bhi.n	80021c4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e005      	b.n	80021d0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e000      	b.n	80021d0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021ce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80021d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021dc:	2100      	movs	r1, #0
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f956 	bl	8002490 <HAL_ETH_WritePHYRegister>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80021ee:	6939      	ldr	r1, [r7, #16]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f9b3 	bl	800255c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0d9      	b.n	80023b6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002202:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002206:	f7fe f9c9 	bl	800059c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80a6 	beq.w	8002360 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002214:	f7fe f9b6 	bl	8000584 <HAL_GetTick>
 8002218:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	461a      	mov	r2, r3
 8002220:	2101      	movs	r1, #1
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f8cc 	bl	80023c0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002228:	f7fe f9ac 	bl	8000584 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	; 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d90f      	bls.n	800225a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800223e:	6939      	ldr	r1, [r7, #16]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f98b 	bl	800255c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0ad      	b.n	80023b6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0da      	beq.n	800221a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f910 	bl	8002490 <HAL_ETH_WritePHYRegister>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f96d 	bl	800255c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800228a:	2301      	movs	r3, #1
 800228c:	e093      	b.n	80023b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800228e:	f7fe f979 	bl	8000584 <HAL_GetTick>
 8002292:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	461a      	mov	r2, r3
 800229a:	2101      	movs	r1, #1
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f88f 	bl	80023c0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80022a2:	f7fe f96f 	bl	8000584 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d90f      	bls.n	80022d4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f94e 	bl	800255c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e070      	b.n	80023b6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0da      	beq.n	8002294 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	461a      	mov	r2, r3
 80022e4:	211f      	movs	r1, #31
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f86a 	bl	80023c0 <HAL_ETH_ReadPHYRegister>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80022f6:	6939      	ldr	r1, [r7, #16]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f92f 	bl	800255c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002306:	2301      	movs	r3, #1
 8002308:	e055      	b.n	80023b6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	e002      	b.n	8002324 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e036      	b.n	80023a4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e031      	b.n	80023a4 <HAL_ETH_Init+0x31c>
 8002340:	03938700 	.word	0x03938700
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	01312cff 	.word	0x01312cff
 8002350:	02160ebf 	.word	0x02160ebf
 8002354:	039386ff 	.word	0x039386ff
 8002358:	05f5e0ff 	.word	0x05f5e0ff
 800235c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002370:	4313      	orrs	r3, r2
 8002372:	b29b      	uxth	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	2100      	movs	r1, #0
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f889 	bl	8002490 <HAL_ETH_WritePHYRegister>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002388:	6939      	ldr	r1, [r7, #16]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8e6 	bl	800255c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e00c      	b.n	80023b6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800239c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80023a0:	f7fe f8fc 	bl	800059c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80023a4:	6939      	ldr	r1, [r7, #16]
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8d8 	bl	800255c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop

080023c0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	460b      	mov	r3, r1
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b82      	cmp	r3, #130	; 0x82
 80023e0:	d101      	bne.n	80023e6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
 80023e4:	e050      	b.n	8002488 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2282      	movs	r2, #130	; 0x82
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 031c 	and.w	r3, r3, #28
 80023fc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8a1b      	ldrh	r3, [r3, #16]
 8002402:	02db      	lsls	r3, r3, #11
 8002404:	b29b      	uxth	r3, r3
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800240c:	897b      	ldrh	r3, [r7, #10]
 800240e:	019b      	lsls	r3, r3, #6
 8002410:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 0302 	bic.w	r3, r3, #2
 8002420:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002432:	f7fe f8a7 	bl	8000584 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002438:	e015      	b.n	8002466 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800243a:	f7fe f8a3 	bl	8000584 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d309      	bcc.n	800245e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e014      	b.n	8002488 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e4      	bne.n	800243a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	b29b      	uxth	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	460b      	mov	r3, r1
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b42      	cmp	r3, #66	; 0x42
 80024b0:	d101      	bne.n	80024b6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
 80024b4:	e04e      	b.n	8002554 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2242      	movs	r2, #66	; 0x42
 80024ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 031c 	and.w	r3, r3, #28
 80024cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8a1b      	ldrh	r3, [r3, #16]
 80024d2:	02db      	lsls	r3, r3, #11
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80024dc:	897b      	ldrh	r3, [r7, #10]
 80024de:	019b      	lsls	r3, r3, #6
 80024e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800250c:	f7fe f83a 	bl	8000584 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002512:	e015      	b.n	8002540 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002514:	f7fe f836 	bl	8000584 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d309      	bcc.n	8002538 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e00d      	b.n	8002554 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1e4      	bne.n	8002514 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0b0      	sub	sp, #192	; 0xc0
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002578:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002580:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800258a:	2300      	movs	r3, #0
 800258c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80025a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a6:	663b      	str	r3, [r7, #96]	; 0x60
 80025a8:	e001      	b.n	80025ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80025ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025b8:	2300      	movs	r3, #0
 80025ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800261a:	2300      	movs	r3, #0
 800261c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002630:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002634:	4bab      	ldr	r3, [pc, #684]	; (80028e4 <ETH_MACDMAConfig+0x388>)
 8002636:	4013      	ands	r3, r2
 8002638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800263c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002640:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002644:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002648:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800264e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002652:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002656:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800265c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800265e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002660:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002664:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002668:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800266a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800266c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800266e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002670:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002672:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002684:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002690:	2001      	movs	r0, #1
 8002692:	f7fd ff83 	bl	800059c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800269e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80026a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80026a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80026a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80026aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80026ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80026b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80026b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80026b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80026ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80026bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80026c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80026c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80026cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fd ff5e 	bl	800059c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80026fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800270c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002710:	4013      	ands	r3, r2
 8002712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800271a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800271c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002720:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002726:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800272c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002732:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002738:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800273a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800274c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002758:	2001      	movs	r0, #1
 800275a:	f7fd ff1f 	bl	800059c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002766:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002768:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800276c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002782:	2001      	movs	r0, #1
 8002784:	f7fd ff0a 	bl	800059c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80027a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027a4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80027b6:	2304      	movs	r3, #4
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80027ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80027c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027da:	2300      	movs	r3, #0
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80027e6:	4413      	add	r3, r2
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80027ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <ETH_MACDMAConfig+0x38c>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027fa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80027fc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027fe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002800:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002802:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002804:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002806:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002808:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800280a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800280c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800280e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002810:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002812:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002816:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800281a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800281c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	f241 0318 	movw	r3, #4120	; 0x1018
 800282e:	4413      	add	r3, r2
 8002830:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002834:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f241 0318 	movw	r3, #4120	; 0x1018
 800283e:	4413      	add	r3, r2
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002846:	2001      	movs	r0, #1
 8002848:	f7fd fea8 	bl	800059c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f241 0318 	movw	r3, #4120	; 0x1018
 8002854:	4413      	add	r3, r2
 8002856:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800285a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800285c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002860:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002864:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002868:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800286a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800286c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800286e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002870:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002872:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002876:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002884:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002894:	2001      	movs	r0, #1
 8002896:	f7fd fe81 	bl	800059c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028a6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10d      	bne.n	80028cc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80028b8:	4413      	add	r3, r2
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6811      	ldr	r1, [r2, #0]
 80028c0:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <ETH_MACDMAConfig+0x390>)
 80028c2:	431a      	orrs	r2, r3
 80028c4:	f241 031c 	movw	r3, #4124	; 0x101c
 80028c8:	440b      	add	r3, r1
 80028ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	461a      	mov	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f80b 	bl	80028f0 <ETH_MACAddressConfig>
}
 80028da:	bf00      	nop
 80028dc:	37c0      	adds	r7, #192	; 0xc0
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	ff20810f 	.word	0xff20810f
 80028e8:	f8de3f23 	.word	0xf8de3f23
 80028ec:	00010040 	.word	0x00010040

080028f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3305      	adds	r3, #5
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	3204      	adds	r2, #4
 8002908:	7812      	ldrb	r2, [r2, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <ETH_MACAddressConfig+0x68>)
 8002912:	4413      	add	r3, r2
 8002914:	461a      	mov	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3303      	adds	r3, #3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	061a      	lsls	r2, r3, #24
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3302      	adds	r3, #2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3301      	adds	r3, #1
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	4313      	orrs	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <ETH_MACAddressConfig+0x6c>)
 8002942:	4413      	add	r3, r2
 8002944:	461a      	mov	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	6013      	str	r3, [r2, #0]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40028040 	.word	0x40028040
 800295c:	40028044 	.word	0x40028044

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e175      	b.n	8002c6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	f040 8164 	bne.w	8002c66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x4e>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	d123      	bne.n	80029f6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	69b9      	ldr	r1, [r7, #24]
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0203 	and.w	r2, r3, #3
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00b      	beq.n	8002a4a <HAL_GPIO_Init+0xea>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3e:	2b11      	cmp	r3, #17
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80be 	beq.w	8002c66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a64      	ldr	r2, [pc, #400]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b02:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a57      	ldr	r2, [pc, #348]	; (8002c88 <HAL_GPIO_Init+0x328>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d037      	beq.n	8002b9e <HAL_GPIO_Init+0x23e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <HAL_GPIO_Init+0x32c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d031      	beq.n	8002b9a <HAL_GPIO_Init+0x23a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <HAL_GPIO_Init+0x330>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d02b      	beq.n	8002b96 <HAL_GPIO_Init+0x236>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a54      	ldr	r2, [pc, #336]	; (8002c94 <HAL_GPIO_Init+0x334>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d025      	beq.n	8002b92 <HAL_GPIO_Init+0x232>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a53      	ldr	r2, [pc, #332]	; (8002c98 <HAL_GPIO_Init+0x338>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01f      	beq.n	8002b8e <HAL_GPIO_Init+0x22e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x33c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0x22a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a51      	ldr	r2, [pc, #324]	; (8002ca0 <HAL_GPIO_Init+0x340>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0x226>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <HAL_GPIO_Init+0x344>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00d      	beq.n	8002b82 <HAL_GPIO_Init+0x222>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <HAL_GPIO_Init+0x348>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <HAL_GPIO_Init+0x21e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4e      	ldr	r2, [pc, #312]	; (8002cac <HAL_GPIO_Init+0x34c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_GPIO_Init+0x21a>
 8002b76:	2309      	movs	r3, #9
 8002b78:	e012      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	e010      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b7e:	2308      	movs	r3, #8
 8002b80:	e00e      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b82:	2307      	movs	r3, #7
 8002b84:	e00c      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b86:	2306      	movs	r3, #6
 8002b88:	e00a      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	e008      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e004      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e002      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_GPIO_Init+0x240>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f002 0203 	and.w	r2, r2, #3
 8002ba6:	0092      	lsls	r2, r2, #2
 8002ba8:	4093      	lsls	r3, r2
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bb0:	4934      	ldr	r1, [pc, #208]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bbe:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c12:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c36:	4a1e      	ldr	r2, [pc, #120]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c60:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_GPIO_Init+0x350>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	f67f ae86 	bls.w	8002980 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c74:	bf00      	nop
 8002c76:	3724      	adds	r7, #36	; 0x24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40021800 	.word	0x40021800
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40022400 	.word	0x40022400
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	807b      	strh	r3, [r7, #2]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc4:	787b      	ldrb	r3, [r7, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cd0:	e003      	b.n	8002cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	041a      	lsls	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e07f      	b.n	8002dfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f009 ff14 	bl	800cb3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2224      	movs	r2, #36	; 0x24
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d107      	bne.n	8002d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e006      	b.n	8002d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d104      	bne.n	8002d82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_I2C_Init+0x11c>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	ea42 0103 	orr.w	r1, r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69d9      	ldr	r1, [r3, #28]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	02008000 	.word	0x02008000

08002e08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d138      	bne.n	8002e90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e032      	b.n	8002e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6819      	ldr	r1, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d139      	bne.n	8002f28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e033      	b.n	8002f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2224      	movs	r2, #36	; 0x24
 8002ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002f50:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f245 5255 	movw	r2, #21845	; 0x5555
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6852      	ldr	r2, [r2, #4]
 8002f64:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002f70:	f7fd fb08 	bl	8000584 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002f76:	e008      	b.n	8002f8a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f78:	f7fd fb04 	bl	8000584 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b30      	cmp	r3, #48	; 0x30
 8002f84:	d901      	bls.n	8002f8a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e017      	b.n	8002fba <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f1      	bne.n	8002f78 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d005      	beq.n	8002fae <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	611a      	str	r2, [r3, #16]
 8002fac:	e004      	b.n	8002fb8 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0bf      	b.n	8003156 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f009 fe3a 	bl	800cc64 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003006:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6999      	ldr	r1, [r3, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800301c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_LTDC_Init+0x19c>)
 8003038:	400b      	ands	r3, r1
 800303a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68d9      	ldr	r1, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_LTDC_Init+0x19c>)
 8003066:	400b      	ands	r3, r1
 8003068:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	041b      	lsls	r3, r3, #16
 8003070:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6919      	ldr	r1, [r3, #16]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_LTDC_Init+0x19c>)
 8003094:	400b      	ands	r3, r1
 8003096:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6919      	ldr	r1, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6959      	ldr	r1, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_LTDC_Init+0x19c>)
 80030c2:	400b      	ands	r3, r1
 80030c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6959      	ldr	r1, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003106:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0206 	orr.w	r2, r2, #6
 8003132:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	f000f800 	.word	0xf000f800

08003164 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d023      	beq.n	80031ce <HAL_LTDC_IRQHandler+0x6a>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01e      	beq.n	80031ce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2204      	movs	r2, #4
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2204      	movs	r2, #4
 80031bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f86f 	bl	80032ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d023      	beq.n	8003220 <HAL_LTDC_IRQHandler+0xbc>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01e      	beq.n	8003220 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0202 	bic.w	r2, r2, #2
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2202      	movs	r2, #2
 80031f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003200:	f043 0202 	orr.w	r2, r3, #2
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2204      	movs	r2, #4
 800320e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f846 	bl	80032ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01b      	beq.n	8003262 <HAL_LTDC_IRQHandler+0xfe>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d016      	beq.n	8003262 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f82f 	bl	80032c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_LTDC_IRQHandler+0x140>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0208 	bic.w	r2, r2, #8
 8003284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2208      	movs	r2, #8
 800328c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f818 	bl	80032d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_LTDC_ConfigLayer+0x1a>
 80032fe:	2302      	movs	r3, #2
 8003300:	e02c      	b.n	800335c <HAL_LTDC_ConfigLayer+0x74>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2134      	movs	r1, #52	; 0x34
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800332a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800332c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800332e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003334:	682b      	ldr	r3, [r5, #0]
 8003336:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f811 	bl	8003364 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bdb0      	pop	{r4, r5, r7, pc}

08003364 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	0c1b      	lsrs	r3, r3, #16
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	4413      	add	r3, r2
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	01db      	lsls	r3, r3, #7
 8003390:	4413      	add	r3, r2
 8003392:	3384      	adds	r3, #132	; 0x84
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4611      	mov	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	01d2      	lsls	r2, r2, #7
 80033a0:	440a      	add	r2, r1
 80033a2:	3284      	adds	r2, #132	; 0x84
 80033a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80033a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ba:	4413      	add	r3, r2
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4619      	mov	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	440b      	add	r3, r1
 80033ca:	3384      	adds	r3, #132	; 0x84
 80033cc:	4619      	mov	r1, r3
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e2:	4413      	add	r3, r2
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	01db      	lsls	r3, r3, #7
 80033f2:	4413      	add	r3, r2
 80033f4:	3384      	adds	r3, #132	; 0x84
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4611      	mov	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	01d2      	lsls	r2, r2, #7
 8003402:	440a      	add	r2, r1
 8003404:	3284      	adds	r2, #132	; 0x84
 8003406:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800340a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341a:	4413      	add	r3, r2
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	01db      	lsls	r3, r3, #7
 8003428:	440b      	add	r3, r1
 800342a:	3384      	adds	r3, #132	; 0x84
 800342c:	4619      	mov	r1, r3
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	01db      	lsls	r3, r3, #7
 800343e:	4413      	add	r3, r2
 8003440:	3384      	adds	r3, #132	; 0x84
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4611      	mov	r1, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	01d2      	lsls	r2, r2, #7
 800344e:	440a      	add	r2, r1
 8003450:	3284      	adds	r2, #132	; 0x84
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	01db      	lsls	r3, r3, #7
 8003462:	4413      	add	r3, r2
 8003464:	3384      	adds	r3, #132	; 0x84
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	01db      	lsls	r3, r3, #7
 8003494:	4413      	add	r3, r2
 8003496:	3384      	adds	r3, #132	; 0x84
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	01db      	lsls	r3, r3, #7
 80034a4:	4413      	add	r3, r2
 80034a6:	3384      	adds	r3, #132	; 0x84
 80034a8:	461a      	mov	r2, r3
 80034aa:	2300      	movs	r3, #0
 80034ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034b4:	461a      	mov	r2, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4619      	mov	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	01db      	lsls	r3, r3, #7
 80034c8:	440b      	add	r3, r1
 80034ca:	3384      	adds	r3, #132	; 0x84
 80034cc:	4619      	mov	r1, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	01db      	lsls	r3, r3, #7
 80034de:	4413      	add	r3, r2
 80034e0:	3384      	adds	r3, #132	; 0x84
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	4611      	mov	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	01d2      	lsls	r2, r2, #7
 80034ee:	440a      	add	r2, r1
 80034f0:	3284      	adds	r2, #132	; 0x84
 80034f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	01db      	lsls	r3, r3, #7
 8003502:	4413      	add	r3, r2
 8003504:	3384      	adds	r3, #132	; 0x84
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	01db      	lsls	r3, r3, #7
 8003518:	4413      	add	r3, r2
 800351a:	3384      	adds	r3, #132	; 0x84
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4619      	mov	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	01db      	lsls	r3, r3, #7
 8003528:	440b      	add	r3, r1
 800352a:	3384      	adds	r3, #132	; 0x84
 800352c:	4619      	mov	r1, r3
 800352e:	4b58      	ldr	r3, [pc, #352]	; (8003690 <LTDC_SetConfig+0x32c>)
 8003530:	4013      	ands	r3, r2
 8003532:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	6809      	ldr	r1, [r1, #0]
 8003540:	4608      	mov	r0, r1
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	01c9      	lsls	r1, r1, #7
 8003546:	4401      	add	r1, r0
 8003548:	3184      	adds	r1, #132	; 0x84
 800354a:	4313      	orrs	r3, r2
 800354c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	01db      	lsls	r3, r3, #7
 8003558:	4413      	add	r3, r2
 800355a:	3384      	adds	r3, #132	; 0x84
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	01db      	lsls	r3, r3, #7
 8003568:	4413      	add	r3, r2
 800356a:	3384      	adds	r3, #132	; 0x84
 800356c:	461a      	mov	r2, r3
 800356e:	2300      	movs	r3, #0
 8003570:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	01db      	lsls	r3, r3, #7
 800357c:	4413      	add	r3, r2
 800357e:	3384      	adds	r3, #132	; 0x84
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003590:	2304      	movs	r3, #4
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e01b      	b.n	80035ce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800359e:	2303      	movs	r3, #3
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e014      	b.n	80035ce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d00b      	beq.n	80035c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d007      	beq.n	80035c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80035c0:	2b07      	cmp	r3, #7
 80035c2:	d102      	bne.n	80035ca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80035c4:	2302      	movs	r3, #2
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e001      	b.n	80035ce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	4413      	add	r3, r2
 80035da:	3384      	adds	r3, #132	; 0x84
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	4611      	mov	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	01d2      	lsls	r2, r2, #7
 80035e8:	440a      	add	r2, r1
 80035ea:	3284      	adds	r2, #132	; 0x84
 80035ec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	041a      	lsls	r2, r3, #16
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1acb      	subs	r3, r1, r3
 8003608:	69f9      	ldr	r1, [r7, #28]
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	3303      	adds	r3, #3
 8003610:	68f9      	ldr	r1, [r7, #12]
 8003612:	6809      	ldr	r1, [r1, #0]
 8003614:	4608      	mov	r0, r1
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	01c9      	lsls	r1, r1, #7
 800361a:	4401      	add	r1, r0
 800361c:	3184      	adds	r1, #132	; 0x84
 800361e:	4313      	orrs	r3, r2
 8003620:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	4413      	add	r3, r2
 800362e:	3384      	adds	r3, #132	; 0x84
 8003630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	440b      	add	r3, r1
 800363e:	3384      	adds	r3, #132	; 0x84
 8003640:	4619      	mov	r1, r3
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <LTDC_SetConfig+0x330>)
 8003644:	4013      	ands	r3, r2
 8003646:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	01db      	lsls	r3, r3, #7
 8003652:	4413      	add	r3, r2
 8003654:	3384      	adds	r3, #132	; 0x84
 8003656:	461a      	mov	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	4413      	add	r3, r2
 800366a:	3384      	adds	r3, #132	; 0x84
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	4611      	mov	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	01d2      	lsls	r2, r2, #7
 8003678:	440a      	add	r2, r1
 800367a:	3284      	adds	r2, #132	; 0x84
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	; 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	fffff8f8 	.word	0xfffff8f8
 8003694:	fffff800 	.word	0xfffff800

08003698 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc Pointer to the MMC handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e01d      	b.n	80036e6 <HAL_MMC_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f009 fbc1 	bl	800ce44 <HAL_MMC_MspInit>
#endif	
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_MMC_InitCard(hmmc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f80f 	bl	80036ee <HAL_MMC_InitCard>

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80036ee:	b5b0      	push	{r4, r5, r7, lr}
 80036f0:	b08e      	sub	sp, #56	; 0x38
 80036f2:	af04      	add	r7, sp, #16
 80036f4:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
  MMC_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800370e:	2376      	movs	r3, #118	; 0x76
 8003710:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hmmc->Instance, Init);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681d      	ldr	r5, [r3, #0]
 8003716:	466c      	mov	r4, sp
 8003718:	f107 0318 	add.w	r3, r7, #24
 800371c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372a:	4628      	mov	r0, r5
 800372c:	f005 fa58 	bl	8008be0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800373e:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hmmc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f005 fa77 	bl	8008c38 <SDMMC_PowerState_ON>
  
  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800375a:	2002      	movs	r0, #2
 800375c:	f7fc ff1e 	bl	800059c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fbd5 	bl	8003f10 <MMC_PowerON>
 8003766:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_MMC_ERROR_NONE)
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_MMC_InitCard+0x98>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e013      	b.n	80037ae <HAL_MMC_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fb06 	bl	8003d98 <MMC_InitCard>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_MMC_ERROR_NONE)
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <HAL_MMC_InitCard+0xbe>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_MMC_InitCard+0xc0>
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3728      	adds	r7, #40	; 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}

080037b6 <HAL_MMC_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_MMC_CardInfoTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hmmc->CSD[0] & 0xFF000000U) >> 24;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	0e1b      	lsrs	r3, r3, #24
 80037ca:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hmmc->CSD[0] & 0x00FF0000) >> 16;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	b2db      	uxtb	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hmmc->CSD[0] & 0x0000FF00) >> 8;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	b2db      	uxtb	r3, r3
 8003814:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hmmc->CSD[0] & 0x000000FF;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	b2db      	uxtb	r3, r3
 8003824:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hmmc->CSD[1] & 0xFF000000U) >> 24;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003832:	0e1b      	lsrs	r3, r3, #24
 8003834:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	b29b      	uxth	r3, r3
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	b29a      	uxth	r2, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hmmc->CSD[1] & 0x00FF0000U) >> 16;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	0c1b      	lsrs	r3, r3, #16
 8003848:	b2db      	uxtb	r3, r3
 800384a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	88db      	ldrh	r3, [r3, #6]
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	b29b      	uxth	r3, r3
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	b29b      	uxth	r3, r3
 800385e:	4313      	orrs	r3, r2
 8003860:	b29a      	uxth	r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	b2da      	uxtb	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hmmc->CSD[1] & 0x0000FF00U) >> 8;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	0a1b      	lsrs	r3, r3, #8
 800387a:	b2db      	uxtb	r3, r3
 800387c:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	09db      	lsrs	r3, r3, #7
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	099b      	lsrs	r3, r3, #6
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2200      	movs	r2, #0
 80038c2:	735a      	strb	r2, [r3, #13]
  
  pCSD->DeviceSize = (tmp & 0x03) << 10;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	611a      	str	r2, [r3, #16]
  
  /* Byte 7 */
  tmp = (uint8_t)(hmmc->CSD[1] & 0x000000FFU);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSize |= (tmp) << 2;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	431a      	orrs	r2, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	611a      	str	r2, [r3, #16]
  
  /* Byte 8 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0xFF000000U) >> 24);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	0e1b      	lsrs	r3, r3, #24
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	431a      	orrs	r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	611a      	str	r2, [r3, #16]
  
  pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	b2da      	uxtb	r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	751a      	strb	r2, [r3, #20]
  pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	b2da      	uxtb	r2, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	755a      	strb	r2, [r3, #21]
  
  /* Byte 9 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0x00FF0000U) >> 16);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2db      	uxtb	r3, r3
 8003928:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	b2da      	uxtb	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	759a      	strb	r2, [r3, #22]
  pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	b2da      	uxtb	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	75da      	strb	r2, [r3, #23]
  pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0306 	and.w	r3, r3, #6
 8003956:	b2da      	uxtb	r2, r3
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	761a      	strb	r2, [r3, #24]
  /* Byte 10 */
  tmp = (uint8_t)((hmmc->CSD[2] & 0x0000FF00U) >> 8);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	b2db      	uxtb	r3, r3
 8003964:	60fb      	str	r3, [r7, #12]
  pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	7e1b      	ldrb	r3, [r3, #24]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	09db      	lsrs	r3, r3, #7
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b2da      	uxtb	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	761a      	strb	r2, [r3, #24]
  
  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	7e1b      	ldrb	r3, [r3, #24]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	3302      	adds	r3, #2
 8003992:	2201      	movs	r2, #1
 8003994:	409a      	lsls	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399a:	fb02 f203 	mul.w	r2, r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	7a1b      	ldrb	r3, [r3, #8]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	2301      	movs	r3, #1
 80039ac:	4093      	lsls	r3, r2
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
  
  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512); 
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80039bc:	0a52      	lsrs	r2, r2, #9
 80039be:	fb02 f203 	mul.w	r2, r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039cc:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hmmc->CSD[2] & 0x000000FF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	7e9b      	ldrb	r3, [r3, #26]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	09db      	lsrs	r3, r3, #7
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0xFF000000U) >> 24);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	09db      	lsrs	r3, r3, #7
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0x00FF0000) >> 16);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	7fdb      	ldrb	r3, [r3, #31]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	095b      	lsrs	r3, r3, #5
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hmmc->CSD[3] & 0x0000FF00) >> 8);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	09db      	lsrs	r3, r3, #7
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hmmc->CSD[3] & 0x000000FF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
	...

08003b60 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	b090      	sub	sp, #64	; 0x40
 8003b64:	af04      	add	r7, sp, #16
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t response = 0, busy = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b76:	2300      	movs	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
	
	/* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
	
  /* Chnage Satte */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Update Clock for Bus mode update */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
  Init.BusWide             = WideMode;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003b96:	2376      	movs	r3, #118	; 0x76
 8003b98:	61fb      	str	r3, [r7, #28]
  /* Initialize SDMMC*/
  SDMMC_Init(hmmc->Instance, Init); 
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681d      	ldr	r5, [r3, #0]
 8003b9e:	466c      	mov	r4, sp
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bac:	f107 0308 	add.w	r3, r7, #8
 8003bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f005 f814 	bl	8008be0 <SDMMC_Init>
    
  if(WideMode == SDMMC_BUS_WIDE_8B)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	d110      	bne.n	8003be2 <HAL_MMC_ConfigWideBusOperation+0x82>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4971      	ldr	r1, [pc, #452]	; (8003d8c <HAL_MMC_ConfigWideBusOperation+0x22c>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f005 f98c 	bl	8008ee4 <SDMMC_CmdSwitch>
 8003bcc:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d06b      	beq.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
 8003be0:	e064      	b.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003be8:	d110      	bne.n	8003c0c <HAL_MMC_ConfigWideBusOperation+0xac>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4968      	ldr	r1, [pc, #416]	; (8003d90 <HAL_MMC_ConfigWideBusOperation+0x230>)
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f005 f977 	bl	8008ee4 <SDMMC_CmdSwitch>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d056      	beq.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
 8003c0a:	e04f      	b.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d110      	bne.n	8003c34 <HAL_MMC_ConfigWideBusOperation+0xd4>
  {
    errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	495f      	ldr	r1, [pc, #380]	; (8003d94 <HAL_MMC_ConfigWideBusOperation+0x234>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f005 f963 	bl	8008ee4 <SDMMC_CmdSwitch>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d042      	beq.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
    {
      hmmc->ErrorCode |= errorstate;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
 8003c32:	e03b      	b.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
    }
  }
  else
  {
    /* WideMode is not a valid argument*/
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Check for switch error and violation of the trial number of sending CMD 13 */
  while(busy == 0)
 8003c40:	e034      	b.n	8003cac <HAL_MMC_ConfigWideBusOperation+0x14c>
  {
    if(count++ == SDMMC_MAX_TRIAL)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	623a      	str	r2, [r7, #32]
 8003c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10b      	bne.n	8003c68 <HAL_MMC_ConfigWideBusOperation+0x108>
    {
      hmmc->State = HAL_MMC_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e08c      	b.n	8003d82 <HAL_MMC_ConfigWideBusOperation+0x222>
    }
    
    /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
    errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f005 f8f0 	bl	8008e5a <SDMMC_CmdSendStatus>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_MMC_ConfigWideBusOperation+0x12e>
    {
      hmmc->ErrorCode |= errorstate;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2100      	movs	r1, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f005 f822 	bl	8008cde <SDMMC_GetResponse>
 8003c9a:	62f8      	str	r0, [r7, #44]	; 0x2c
    
    /* Get operating voltage*/
    busy = (((response >> 7) == 1) ? 0 : 1);
 8003c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(busy == 0)
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0c7      	beq.n	8003c42 <HAL_MMC_ConfigWideBusOperation+0xe2>
  }
      
  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  count = SDMMC_DATATIMEOUT;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cb6:	623b      	str	r3, [r7, #32]
  while((response & 0x00000100) == 0)
 8003cb8:	e02a      	b.n	8003d10 <HAL_MMC_ConfigWideBusOperation+0x1b0>
  {
    if(count-- == 0)
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	623a      	str	r2, [r7, #32]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_MMC_ConfigWideBusOperation+0x17c>
    {
      hmmc->State = HAL_MMC_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hmmc->ErrorCode |= HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e052      	b.n	8003d82 <HAL_MMC_ConfigWideBusOperation+0x222>
    }
    
    /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
    errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f005 f8b6 	bl	8008e5a <SDMMC_CmdSendStatus>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24
    if(errorstate != HAL_MMC_ERROR_NONE)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_MMC_ConfigWideBusOperation+0x1a2>
    {
      hmmc->ErrorCode |= errorstate;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f004 ffe8 	bl	8008cde <SDMMC_GetResponse>
 8003d0e:	62f8      	str	r0, [r7, #44]	; 0x2c
  while((response & 0x00000100) == 0)
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0cf      	beq.n	8003cba <HAL_MMC_ConfigWideBusOperation+0x15a>
  }
  
  if(hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_MMC_ConfigWideBusOperation+0x1d8>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e024      	b.n	8003d82 <HAL_MMC_ConfigWideBusOperation+0x222>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hmmc->Init.ClockEdge;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hmmc->Init.ClockBypass;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hmmc->Init.ClockPowerSave;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hmmc->Init.HardwareFlowControl;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hmmc->Init.ClockDiv;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	61fb      	str	r3, [r7, #28]
    SDMMC_Init(hmmc->Instance, Init);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	466c      	mov	r4, sp
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d6c:	f107 0308 	add.w	r3, r7, #8
 8003d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d72:	4628      	mov	r0, r5
 8003d74:	f004 ff34 	bl	8008be0 <SDMMC_Init>
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3730      	adds	r7, #48	; 0x30
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	03b70200 	.word	0x03b70200
 8003d90:	03b70100 	.word	0x03b70100
 8003d94:	03b70000 	.word	0x03b70000

08003d98 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8003d98:	b5b0      	push	{r4, r5, r7, lr}
 8003d9a:	b094      	sub	sp, #80	; 0x50
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t mmc_rca = 1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0) 
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f004 ff51 	bl	8008c54 <SDMMC_GetPowerState>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <MMC_InitCard+0x26>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8003db8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003dbc:	e0a4      	b.n	8003f08 <MMC_InitCard+0x170>
  }
  
  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f004 ffe5 	bl	8008d92 <SDMMC_CmdSendCID>
 8003dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8003dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MMC_InitCard+0x3c>
  {
    return errorstate;
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	e099      	b.n	8003f08 <MMC_InitCard+0x170>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f004 ff7f 	bl	8008cde <SDMMC_GetResponse>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2104      	movs	r1, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 ff76 	bl	8008cde <SDMMC_GetResponse>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2108      	movs	r1, #8
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 ff6d 	bl	8008cde <SDMMC_GetResponse>
 8003e04:	4602      	mov	r2, r0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	210c      	movs	r1, #12
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 ff64 	bl	8008cde <SDMMC_GetResponse>
 8003e16:	4602      	mov	r2, r0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	67da      	str	r2, [r3, #124]	; 0x7c
  }
  
  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f107 020e 	add.w	r2, r7, #14
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f004 fff4 	bl	8008e14 <SDMMC_CmdSetRelAdd>
 8003e2c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MMC_InitCard+0xa0>
  {
    return errorstate;
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	e067      	b.n	8003f08 <MMC_InitCard+0x170>
  }
  
  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8003e38:	89fb      	ldrh	r3, [r7, #14]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f004 ffc0 	bl	8008dd2 <SDMMC_CmdSendCSD>
 8003e52:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MMC_InitCard+0xc6>
  {
    return errorstate;
 8003e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5c:	e054      	b.n	8003f08 <MMC_InitCard+0x170>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 ff3a 	bl	8008cde <SDMMC_GetResponse>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2104      	movs	r1, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 ff31 	bl	8008cde <SDMMC_GetResponse>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2108      	movs	r1, #8
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 ff28 	bl	8008cde <SDMMC_GetResponse>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	210c      	movs	r1, #12
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 ff1f 	bl	8008cde <SDMMC_GetResponse>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  
  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2104      	movs	r1, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 ff16 	bl	8008cde <SDMMC_GetResponse>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	0d1a      	lsrs	r2, r3, #20
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Get CSD parameters */
  HAL_MMC_GetCardCSD(hmmc, &CSD);
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fc78 	bl	80037b6 <HAL_MMC_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	f04f 0400 	mov.w	r4, #0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	4608      	mov	r0, r1
 8003eda:	f004 ff15 	bl	8008d08 <SDMMC_CmdSelDesel>
 8003ede:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MMC_InitCard+0x152>
  {
    return errorstate;
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	e00e      	b.n	8003f08 <MMC_InitCard+0x170>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hmmc->Instance, hmmc->Init);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681d      	ldr	r5, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	466c      	mov	r4, sp
 8003ef2:	f103 0210 	add.w	r2, r3, #16
 8003ef6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003efc:	3304      	adds	r3, #4
 8003efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f00:	4628      	mov	r0, r5
 8003f02:	f004 fe6d 	bl	8008be0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3740      	adds	r7, #64	; 0x40
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bdb0      	pop	{r4, r5, r7, pc}

08003f10 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 ff10 	bl	8008d52 <SDMMC_CmdGoIdleState>
 8003f32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d027      	beq.n	8003f8a <MMC_PowerON+0x7a>
  {
    return errorstate;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	e036      	b.n	8003fac <MMC_PowerON+0x9c>
  }
  
  while(validvoltage == 0)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	60ba      	str	r2, [r7, #8]
 8003f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d102      	bne.n	8003f52 <MMC_PowerON+0x42>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8003f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f50:	e02c      	b.n	8003fac <MMC_PowerON+0x9c>
    }
    
    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4917      	ldr	r1, [pc, #92]	; (8003fb4 <MMC_PowerON+0xa4>)
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 ffa2 	bl	8008ea2 <SDMMC_CmdOpCondition>
 8003f5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <MMC_PowerON+0x5c>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8003f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f6a:	e01f      	b.n	8003fac <MMC_PowerON+0x9c>
    }
    
    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f004 feb3 	bl	8008cde <SDMMC_GetResponse>
 8003f78:	6178      	str	r0, [r7, #20]
    
    /* Get operating voltage*/
    validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	0fdb      	lsrs	r3, r3, #31
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0d6      	beq.n	8003f3e <MMC_PowerON+0x2e>
  }
  
  /* When power routine is finished and command returns valid voltage */
  if ((response & MMC_HIGH_VOLTAGE_RANGE) == MMC_HIGH_VOLTAGE_RANGE)
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <MMC_PowerON+0xa8>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <MMC_PowerON+0xa8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d103      	bne.n	8003fa4 <MMC_PowerON+0x94>
  {
    /* When voltage range of the card is within 2.7V and 3.6V */
    hmmc->MmcCard.CardType = MMC_HIGH_VOLTAGE_CARD;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8003fa2:	e002      	b.n	8003faa <MMC_PowerON+0x9a>
  }
  else
  {
    /* When voltage range of the card is within 1.65V and 1.95V or 2.7V and 3.6V */
    hmmc->MmcCard.CardType = MMC_DUAL_VOLTAGE_CARD;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  return HAL_MMC_ERROR_NONE;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	c0ff8000 	.word	0xc0ff8000
 8003fb8:	80ff8000 	.word	0x80ff8000

08003fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	b08f      	sub	sp, #60	; 0x3c
 8003fc0:	af0a      	add	r7, sp, #40	; 0x28
 8003fc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e10a      	b.n	80041e4 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f009 fa5e 	bl	800d4a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2203      	movs	r2, #3
 8003fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f005 fa85 	bl	8009504 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	687e      	ldr	r6, [r7, #4]
 8004002:	466d      	mov	r5, sp
 8004004:	f106 0410 	add.w	r4, r6, #16
 8004008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004014:	e885 0003 	stmia.w	r5, {r0, r1}
 8004018:	1d33      	adds	r3, r6, #4
 800401a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800401c:	6838      	ldr	r0, [r7, #0]
 800401e:	f005 f977 	bl	8009310 <USB_CoreInit>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0d7      	b.n	80041e4 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f005 fa73 	bl	8009526 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e04a      	b.n	80040dc <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	333d      	adds	r3, #61	; 0x3d
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	333c      	adds	r3, #60	; 0x3c
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	b298      	uxth	r0, r3
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	3342      	adds	r3, #66	; 0x42
 8004082:	4602      	mov	r2, r0
 8004084:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	333f      	adds	r3, #63	; 0x3f
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3344      	adds	r3, #68	; 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	3348      	adds	r3, #72	; 0x48
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3350      	adds	r3, #80	; 0x50
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	3301      	adds	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3af      	bcc.n	8004046 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e044      	b.n	8004176 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800412e:	7bfa      	ldrb	r2, [r7, #15]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	3301      	adds	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d3b5      	bcc.n	80040ec <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	687e      	ldr	r6, [r7, #4]
 8004188:	466d      	mov	r5, sp
 800418a:	f106 0410 	add.w	r4, r6, #16
 800418e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004196:	e894 0003 	ldmia.w	r4, {r0, r1}
 800419a:	e885 0003 	stmia.w	r5, {r0, r1}
 800419e:	1d33      	adds	r3, r6, #4
 80041a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a2:	6838      	ldr	r0, [r7, #0]
 80041a4:	f005 f9ea 	bl	800957c <USB_DevInit>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e014      	b.n	80041e4 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d102      	bne.n	80041d8 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fe4a 	bl	8004e6c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f005 fc2d 	bl	8009a3c <USB_DevDisconnect>

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b08d      	sub	sp, #52	; 0x34
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f005 fcc3 	bl	8009b92 <USB_GetMode>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 83bd 	bne.w	800498e <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f005 fc27 	bl	8009a6c <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 83b3 	beq.w	800498c <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f005 fc1e 	bl	8009a6c <USB_ReadInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d107      	bne.n	800424a <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f002 0202 	and.w	r2, r2, #2
 8004248:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f005 fc0c 	bl	8009a6c <USB_ReadInterrupts>
 8004254:	4603      	mov	r3, r0
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800425e:	d17b      	bne.n	8004358 <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f005 fc12 	bl	8009a92 <USB_ReadDevAllOutEpInterrupt>
 800426e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004270:	e06f      	b.n	8004352 <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d064      	beq.n	8004346 <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f005 fc37 	bl	8009afa <USB_ReadDevOutEPInterrupt>
 800428c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	461a      	mov	r2, r3
 80042a6:	2301      	movs	r3, #1
 80042a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fc75 	bl	8004b9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80042bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fd74 	bl	8004dac <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d0:	461a      	mov	r2, r3
 80042d2:	2308      	movs	r3, #8
 80042d4:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	2310      	movs	r3, #16
 80042f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d108      	bne.n	8004316 <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800430e:	461a      	mov	r2, r3
 8004310:	2101      	movs	r1, #1
 8004312:	f005 fc83 	bl	8009c1c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004322:	461a      	mov	r2, r3
 8004324:	2320      	movs	r3, #32
 8004326:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	461a      	mov	r2, r3
 8004340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004344:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	3301      	adds	r3, #1
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d18c      	bne.n	8004272 <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f005 fb85 	bl	8009a6c <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800436c:	f040 80c4 	bne.w	80044f8 <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f005 fba6 	bl	8009ac6 <USB_ReadDevAllInEpInterrupt>
 800437a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004380:	e0b6      	b.n	80044f0 <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80ab 	beq.w	80044e4 <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f005 fbcc 	bl	8009b36 <USB_ReadDevInEPInterrupt>
 800439e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d05b      	beq.n	8004462 <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	2201      	movs	r2, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ca:	4013      	ands	r3, r2
 80043cc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	461a      	mov	r2, r3
 80043dc:	2301      	movs	r3, #1
 80043de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d11b      	bne.n	8004420 <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3348      	adds	r3, #72	; 0x48
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4403      	add	r3, r0
 8004408:	3344      	adds	r3, #68	; 0x44
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4419      	add	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4403      	add	r3, r0
 800441c:	3348      	adds	r3, #72	; 0x48
 800441e:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fac0 	bl	80049ac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d116      	bne.n	8004462 <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d113      	bne.n	8004462 <HAL_PCD_IRQHandler+0x276>
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	3350      	adds	r3, #80	; 0x50
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800445a:	461a      	mov	r2, r3
 800445c:	2101      	movs	r1, #1
 800445e:	f005 fbdd 	bl	8009c1c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	461a      	mov	r2, r3
 800447a:	2308      	movs	r3, #8
 800447c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	461a      	mov	r2, r3
 8004496:	2310      	movs	r3, #16
 8004498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	461a      	mov	r2, r3
 80044b2:	2340      	movs	r3, #64	; 0x40
 80044b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044cc:	461a      	mov	r2, r3
 80044ce:	2302      	movs	r3, #2
 80044d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80044dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 face 	bl	8004a80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	3301      	adds	r3, #1
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f47f af45 	bne.w	8004382 <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f005 fab5 	bl	8009a6c <USB_ReadInterrupts>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450c:	d122      	bne.n	8004554 <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004528:	2b01      	cmp	r3, #1
 800452a:	d108      	bne.n	800453e <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004534:	2100      	movs	r1, #0
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fcbc 	bl	8004eb4 <HAL_PCDEx_LPM_Callback>
 800453c:	e002      	b.n	8004544 <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa68 	bl	8004a14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f005 fa87 	bl	8009a6c <USB_ReadInterrupts>
 800455e:	4603      	mov	r3, r0
 8004560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004568:	d112      	bne.n	8004590 <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d102      	bne.n	8004580 <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa40 	bl	8004a00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800458e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f005 fa69 	bl	8009a6c <USB_ReadInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a4:	d121      	bne.n	80045ea <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80045b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d111      	bne.n	80045e4 <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	f003 020f 	and.w	r2, r3, #15
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80045da:	2101      	movs	r1, #1
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fc69 	bl	8004eb4 <HAL_PCDEx_LPM_Callback>
 80045e2:	e002      	b.n	80045ea <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fa0b 	bl	8004a00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f005 fa3c 	bl	8009a6c <USB_ReadInterrupts>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fe:	f040 80a7 	bne.w	8004750 <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2110      	movs	r1, #16
 800461c:	4618      	mov	r0, r3
 800461e:	f005 f929 	bl	8009874 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004622:	2300      	movs	r3, #0
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004626:	e036      	b.n	8004696 <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004634:	461a      	mov	r2, r3
 8004636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800463a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800465a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800466e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800468e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	3301      	adds	r3, #1
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d3c3      	bcc.n	8004628 <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80046b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d016      	beq.n	80046ea <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046cc:	f043 030b 	orr.w	r3, r3, #11
 80046d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e2:	f043 030b 	orr.w	r3, r3, #11
 80046e6:	6453      	str	r3, [r2, #68]	; 0x44
 80046e8:	e015      	b.n	8004716 <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	4619      	mov	r1, r3
 80046fa:	f242 032b 	movw	r3, #8235	; 0x202b
 80046fe:	4313      	orrs	r3, r2
 8004700:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004710:	f043 030b 	orr.w	r3, r3, #11
 8004714:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004724:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004728:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800473a:	461a      	mov	r2, r3
 800473c:	f005 fa6e 	bl	8009c1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800474e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f005 f989 	bl	8009a6c <USB_ReadInterrupts>
 800475a:	4603      	mov	r3, r0
 800475c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d12a      	bne.n	80047bc <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f005 fa20 	bl	8009bb0 <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f005 f8de 	bl	8009936 <USB_GetDevSpeed>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d103      	bne.n	8004788 <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	e002      	b.n	800478e <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2203      	movs	r2, #3
 800478c:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681c      	ldr	r4, [r3, #0]
 8004792:	f001 f93b 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8004796:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	4620      	mov	r0, r4
 80047a2:	f004 fe0d 	bl	80093c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f920 	bl	80049ec <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80047ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f005 f953 	bl	8009a6c <USB_ReadInterrupts>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d161      	bne.n	8004894 <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0210 	bic.w	r2, r2, #16
 80047de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f003 020f 	and.w	r2, r3, #15
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4413      	add	r3, r2
 80047fc:	3304      	adds	r3, #4
 80047fe:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	0c5b      	lsrs	r3, r3, #17
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2b02      	cmp	r3, #2
 800480a:	d124      	bne.n	8004856 <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d035      	beq.n	8004884 <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6a38      	ldr	r0, [r7, #32]
 800482c:	f005 f8dd 	bl	80099ea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	091b      	lsrs	r3, r3, #4
 8004838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483c:	441a      	add	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800484e:	441a      	add	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	619a      	str	r2, [r3, #24]
 8004854:	e016      	b.n	8004884 <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	0c5b      	lsrs	r3, r3, #17
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	2b06      	cmp	r3, #6
 8004860:	d110      	bne.n	8004884 <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004868:	2208      	movs	r2, #8
 800486a:	4619      	mov	r1, r3
 800486c:	6a38      	ldr	r0, [r7, #32]
 800486e:	f005 f8bc 	bl	80099ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487e:	441a      	add	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0210 	orr.w	r2, r2, #16
 8004892:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f005 f8e7 	bl	8009a6c <USB_ReadInterrupts>
 800489e:	4603      	mov	r3, r0
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d10a      	bne.n	80048be <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f895 	bl	80049d8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f002 0208 	and.w	r2, r2, #8
 80048bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f005 f8d2 	bl	8009a6c <USB_ReadInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d2:	d10d      	bne.n	80048f0 <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8b0 	bl	8004a40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695a      	ldr	r2, [r3, #20]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80048ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f005 f8b9 	bl	8009a6c <USB_ReadInterrupts>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004904:	d10d      	bne.n	8004922 <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f88b 	bl	8004a28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f005 f8a0 	bl	8009a6c <USB_ReadInterrupts>
 800492c:	4603      	mov	r3, r0
 800492e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d10a      	bne.n	800494e <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f88d 	bl	8004a58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800494c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f005 f88a 	bl	8009a6c <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b04      	cmp	r3, #4
 8004960:	d115      	bne.n	800498e <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f879 	bl	8004a6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	e000      	b.n	800498e <HAL_PCD_IRQHandler+0x7a2>
      return;
 800498c:	bf00      	nop
    }
  }
}
 800498e:	3734      	adds	r7, #52	; 0x34
 8004990:	46bd      	mov	sp, r7
 8004992:	bd90      	pop	{r4, r7, pc}

08004994 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	3338      	adds	r3, #56	; 0x38
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d901      	bls.n	8004ab8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e06c      	b.n	8004b92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d902      	bls.n	8004ad4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3303      	adds	r3, #3
 8004ad8:	089b      	lsrs	r3, r3, #2
 8004ada:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004adc:	e02b      	b.n	8004b36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d902      	bls.n	8004afa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3303      	adds	r3, #3
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68d9      	ldr	r1, [r3, #12]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4603      	mov	r3, r0
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f004 ff31 	bl	8009980 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d809      	bhi.n	8004b60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d203      	bcs.n	8004b60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1be      	bne.n	8004ade <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d811      	bhi.n	8004b90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	2201      	movs	r2, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	6939      	ldr	r1, [r7, #16]
 8004b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3720      	adds	r7, #32
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	333c      	adds	r3, #60	; 0x3c
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	f040 80b3 	bne.w	8004d3a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d028      	beq.n	8004c30 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a70      	ldr	r2, [pc, #448]	; (8004da4 <PCD_EP_OutXfrComplete_int+0x208>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d90e      	bls.n	8004c04 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fedd 	bl	80049c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c14:	461a      	mov	r2, r3
 8004c16:	2101      	movs	r1, #1
 8004c18:	f005 f800 	bl	8009c1c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	6093      	str	r3, [r2, #8]
 8004c2e:	e0b3      	b.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	461a      	mov	r2, r3
 8004c48:	2320      	movs	r3, #32
 8004c4a:	6093      	str	r3, [r2, #8]
 8004c4c:	e0a4      	b.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f040 809f 	bne.w	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a51      	ldr	r2, [pc, #324]	; (8004da4 <PCD_EP_OutXfrComplete_int+0x208>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d90f      	bls.n	8004c82 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7e:	6093      	str	r3, [r2, #8]
 8004c80:	e08a      	b.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c94:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004ca8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4403      	add	r3, r0
 8004cb8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004cbc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4403      	add	r3, r0
 8004ce0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4419      	add	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4403      	add	r3, r0
 8004cf6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cfa:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fe46 	bl	8004994 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d144      	bne.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d138      	bne.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d30:	461a      	mov	r2, r3
 8004d32:	2101      	movs	r1, #1
 8004d34:	f004 ff72 	bl	8009c1c <USB_EP0_OutStart>
 8004d38:	e02e      	b.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d124      	bne.n	8004d8c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5e:	6093      	str	r3, [r2, #8]
 8004d60:	e01a      	b.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	4619      	mov	r1, r3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fe05 	bl	8004994 <HAL_PCD_DataOutStageCallback>
 8004d8a:	e005      	b.n	8004d98 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fdfe 	bl	8004994 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	4f54300a 	.word	0x4f54300a
 8004da8:	4f54310a 	.word	0x4f54310a

08004dac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	333c      	adds	r3, #60	; 0x3c
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d113      	bne.n	8004e0a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d922      	bls.n	8004e30 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01d      	beq.n	8004e30 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	461a      	mov	r2, r3
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	6093      	str	r3, [r2, #8]
 8004e08:	e012      	b.n	8004e30 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <PCD_EP_OutSetupPacket_int+0xbc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10e      	bne.n	8004e30 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fdc7 	bl	80049c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <PCD_EP_OutSetupPacket_int+0xb8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d90c      	bls.n	8004e58 <PCD_EP_OutSetupPacket_int+0xac>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d108      	bne.n	8004e58 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e50:	461a      	mov	r2, r3
 8004e52:	2101      	movs	r1, #1
 8004e54:	f004 fee2 	bl	8009c1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	4f54300a 	.word	0x4f54300a
 8004e68:	4f54310a 	.word	0x4f54310a

08004e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	10000003 	.word	0x10000003

08004eb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40007000 	.word	0x40007000

08004eec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6413      	str	r3, [r2, #64]	; 0x40
 8004f02:	4b20      	ldr	r3, [pc, #128]	; (8004f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f1a:	f7fb fb33 	bl	8000584 <HAL_GetTick>
 8004f1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f20:	e009      	b.n	8004f36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f22:	f7fb fb2f 	bl	8000584 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f30:	d901      	bls.n	8004f36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e022      	b.n	8004f7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f42:	d1ee      	bne.n	8004f22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f50:	f7fb fb18 	bl	8000584 <HAL_GetTick>
 8004f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f56:	e009      	b.n	8004f6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f58:	f7fb fb14 	bl	8000584 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f66:	d901      	bls.n	8004f6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e007      	b.n	8004f7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f78:	d1ee      	bne.n	8004f58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40007000 	.word	0x40007000

08004f8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004f98:	f7fb faf4 	bl	8000584 <HAL_GetTick>
 8004f9c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e073      	b.n	8005090 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_QSPI_Init+0x2c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e06b      	b.n	8005090 <HAL_QSPI_Init+0x104>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f007 fe6b 	bl	800ccb0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004fda:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f85e 	bl	80050a0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	2120      	movs	r1, #32
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f856 	bl	80050bc <QSPI_WaitFlagStateUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d135      	bne.n	8005086 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <HAL_QSPI_Init+0x10c>)
 8005022:	4013      	ands	r3, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6852      	ldr	r2, [r2, #4]
 8005028:	0611      	lsls	r1, r2, #24
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	69d2      	ldr	r2, [r2, #28]
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a12      	ldr	r2, [r2, #32]
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	430b      	orrs	r3, r1
 8005042:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <HAL_QSPI_Init+0x110>)
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6912      	ldr	r2, [r2, #16]
 8005052:	0411      	lsls	r1, r2, #16
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6952      	ldr	r2, [r2, #20]
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6992      	ldr	r2, [r2, #24]
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	430b      	orrs	r3, r1
 8005066:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	00ffff2f 	.word	0x00ffff2f
 800509c:	ffe0f8fe 	.word	0xffe0f8fe

080050a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	649a      	str	r2, [r3, #72]	; 0x48
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050cc:	e01a      	b.n	8005104 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d4:	d016      	beq.n	8005104 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050dc:	f7fb fa52 	bl	8000584 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d20b      	bcs.n	8005104 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2204      	movs	r2, #4
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	f043 0201 	orr.w	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e00e      	b.n	8005122 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4013      	ands	r3, r2
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	429a      	cmp	r2, r3
 800511e:	d1d6      	bne.n	80050ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e25e      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8087 	beq.w	800525e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005150:	4b96      	ldr	r3, [pc, #600]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
 8005158:	2b04      	cmp	r3, #4
 800515a:	d00c      	beq.n	8005176 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800515c:	4b93      	ldr	r3, [pc, #588]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 030c 	and.w	r3, r3, #12
 8005164:	2b08      	cmp	r3, #8
 8005166:	d112      	bne.n	800518e <HAL_RCC_OscConfig+0x62>
 8005168:	4b90      	ldr	r3, [pc, #576]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005174:	d10b      	bne.n	800518e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005176:	4b8d      	ldr	r3, [pc, #564]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d06c      	beq.n	800525c <HAL_RCC_OscConfig+0x130>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d168      	bne.n	800525c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e238      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_OscConfig+0x7a>
 8005198:	4b84      	ldr	r3, [pc, #528]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a83      	ldr	r2, [pc, #524]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800519e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e02e      	b.n	8005204 <HAL_RCC_OscConfig+0xd8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x9c>
 80051ae:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a7e      	ldr	r2, [pc, #504]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b7c      	ldr	r3, [pc, #496]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7b      	ldr	r2, [pc, #492]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e01d      	b.n	8005204 <HAL_RCC_OscConfig+0xd8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0xc0>
 80051d2:	4b76      	ldr	r3, [pc, #472]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a75      	ldr	r2, [pc, #468]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b73      	ldr	r3, [pc, #460]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a72      	ldr	r2, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e00b      	b.n	8005204 <HAL_RCC_OscConfig+0xd8>
 80051ec:	4b6f      	ldr	r3, [pc, #444]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6e      	ldr	r2, [pc, #440]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b6c      	ldr	r3, [pc, #432]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a6b      	ldr	r2, [pc, #428]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fb f9ba 	bl	8000584 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005214:	f7fb f9b6 	bl	8000584 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1ec      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005226:	4b61      	ldr	r3, [pc, #388]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0xe8>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fb f9a6 	bl	8000584 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800523c:	f7fb f9a2 	bl	8000584 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e1d8      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524e:	4b57      	ldr	r3, [pc, #348]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x110>
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d069      	beq.n	800533e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800526a:	4b50      	ldr	r3, [pc, #320]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005276:	4b4d      	ldr	r3, [pc, #308]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b08      	cmp	r3, #8
 8005280:	d11c      	bne.n	80052bc <HAL_RCC_OscConfig+0x190>
 8005282:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d116      	bne.n	80052bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528e:	4b47      	ldr	r3, [pc, #284]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCC_OscConfig+0x17a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e1ac      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a6:	4b41      	ldr	r3, [pc, #260]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	493d      	ldr	r1, [pc, #244]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ba:	e040      	b.n	800533e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c4:	4b39      	ldr	r3, [pc, #228]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a38      	ldr	r2, [pc, #224]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d0:	f7fb f958 	bl	8000584 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052d8:	f7fb f954 	bl	8000584 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e18a      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ea:	4b30      	ldr	r3, [pc, #192]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4929      	ldr	r1, [pc, #164]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005306:	4313      	orrs	r3, r2
 8005308:	600b      	str	r3, [r1, #0]
 800530a:	e018      	b.n	800533e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fb f934 	bl	8000584 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005320:	f7fb f930 	bl	8000584 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e166      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005332:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d038      	beq.n	80053bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d019      	beq.n	8005386 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b16      	ldr	r3, [pc, #88]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005356:	4a15      	ldr	r2, [pc, #84]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535e:	f7fb f911 	bl	8000584 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005366:	f7fb f90d 	bl	8000584 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e143      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800537a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x23a>
 8005384:	e01a      	b.n	80053bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005392:	f7fb f8f7 	bl	8000584 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005398:	e00a      	b.n	80053b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539a:	f7fb f8f3 	bl	8000584 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d903      	bls.n	80053b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e129      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
 80053ac:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b0:	4b95      	ldr	r3, [pc, #596]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ee      	bne.n	800539a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a4 	beq.w	8005512 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ca:	4b8f      	ldr	r3, [pc, #572]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d6:	4b8c      	ldr	r3, [pc, #560]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	4a8b      	ldr	r2, [pc, #556]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e0:	6413      	str	r3, [r2, #64]	; 0x40
 80053e2:	4b89      	ldr	r3, [pc, #548]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f2:	4b86      	ldr	r3, [pc, #536]	; (800560c <HAL_RCC_OscConfig+0x4e0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d118      	bne.n	8005430 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053fe:	4b83      	ldr	r3, [pc, #524]	; (800560c <HAL_RCC_OscConfig+0x4e0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a82      	ldr	r2, [pc, #520]	; (800560c <HAL_RCC_OscConfig+0x4e0>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800540a:	f7fb f8bb 	bl	8000584 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005412:	f7fb f8b7 	bl	8000584 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b64      	cmp	r3, #100	; 0x64
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0ed      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005424:	4b79      	ldr	r3, [pc, #484]	; (800560c <HAL_RCC_OscConfig+0x4e0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d106      	bne.n	8005446 <HAL_RCC_OscConfig+0x31a>
 8005438:	4b73      	ldr	r3, [pc, #460]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	4a72      	ldr	r2, [pc, #456]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	6713      	str	r3, [r2, #112]	; 0x70
 8005444:	e02d      	b.n	80054a2 <HAL_RCC_OscConfig+0x376>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10c      	bne.n	8005468 <HAL_RCC_OscConfig+0x33c>
 800544e:	4b6e      	ldr	r3, [pc, #440]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	4a6d      	ldr	r2, [pc, #436]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6713      	str	r3, [r2, #112]	; 0x70
 800545a:	4b6b      	ldr	r3, [pc, #428]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	4a6a      	ldr	r2, [pc, #424]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
 8005466:	e01c      	b.n	80054a2 <HAL_RCC_OscConfig+0x376>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b05      	cmp	r3, #5
 800546e:	d10c      	bne.n	800548a <HAL_RCC_OscConfig+0x35e>
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005474:	4a64      	ldr	r2, [pc, #400]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	6713      	str	r3, [r2, #112]	; 0x70
 800547c:	4b62      	ldr	r3, [pc, #392]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	4a61      	ldr	r2, [pc, #388]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6713      	str	r3, [r2, #112]	; 0x70
 8005488:	e00b      	b.n	80054a2 <HAL_RCC_OscConfig+0x376>
 800548a:	4b5f      	ldr	r3, [pc, #380]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	4a5e      	ldr	r2, [pc, #376]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	6713      	str	r3, [r2, #112]	; 0x70
 8005496:	4b5c      	ldr	r3, [pc, #368]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	4a5b      	ldr	r2, [pc, #364]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800549c:	f023 0304 	bic.w	r3, r3, #4
 80054a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d015      	beq.n	80054d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fb f86b 	bl	8000584 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b0:	e00a      	b.n	80054c8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b2:	f7fb f867 	bl	8000584 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e09b      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c8:	4b4f      	ldr	r3, [pc, #316]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0ee      	beq.n	80054b2 <HAL_RCC_OscConfig+0x386>
 80054d4:	e014      	b.n	8005500 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d6:	f7fb f855 	bl	8000584 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054de:	f7fb f851 	bl	8000584 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e085      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f4:	4b44      	ldr	r3, [pc, #272]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ee      	bne.n	80054de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d105      	bne.n	8005512 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005506:	4b40      	ldr	r3, [pc, #256]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	4a3f      	ldr	r2, [pc, #252]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800550c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d071      	beq.n	80055fe <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800551a:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b08      	cmp	r3, #8
 8005524:	d069      	beq.n	80055fa <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d14b      	bne.n	80055c6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552e:	4b36      	ldr	r3, [pc, #216]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a35      	ldr	r2, [pc, #212]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fb f823 	bl	8000584 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005542:	f7fb f81f 	bl	8000584 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e055      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005554:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	019b      	lsls	r3, r3, #6
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	3b01      	subs	r3, #1
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	071b      	lsls	r3, r3, #28
 800558c:	491e      	ldr	r1, [pc, #120]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 8005598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559e:	f7fa fff1 	bl	8000584 <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a6:	f7fa ffed 	bl	8000584 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e023      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x47a>
 80055c4:	e01b      	b.n	80055fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80055cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fa ffd7 	bl	8000584 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055da:	f7fa ffd3 	bl	8000584 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e009      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_RCC_OscConfig+0x4dc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0x4ae>
 80055f8:	e001      	b.n	80055fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	40007000 	.word	0x40007000

08005610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0ce      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005628:	4b69      	ldr	r3, [pc, #420]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d910      	bls.n	8005658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 020f 	bic.w	r2, r3, #15
 800563e:	4964      	ldr	r1, [pc, #400]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	4313      	orrs	r3, r2
 8005644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b62      	ldr	r3, [pc, #392]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0b6      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005670:	4b58      	ldr	r3, [pc, #352]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a57      	ldr	r2, [pc, #348]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800567a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005688:	4b52      	ldr	r3, [pc, #328]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a51      	ldr	r2, [pc, #324]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 800568e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005692:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b4f      	ldr	r3, [pc, #316]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	494c      	ldr	r1, [pc, #304]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d040      	beq.n	8005734 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b46      	ldr	r3, [pc, #280]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d115      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07d      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d107      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d2:	4b40      	ldr	r3, [pc, #256]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e071      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e2:	4b3c      	ldr	r3, [pc, #240]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e069      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056f2:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 0203 	bic.w	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4935      	ldr	r1, [pc, #212]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005700:	4313      	orrs	r3, r2
 8005702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005704:	f7fa ff3e 	bl	8000584 <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570a:	e00a      	b.n	8005722 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570c:	f7fa ff3a 	bl	8000584 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	f241 3288 	movw	r2, #5000	; 0x1388
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e051      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005722:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 020c 	and.w	r2, r3, #12
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	429a      	cmp	r2, r3
 8005732:	d1eb      	bne.n	800570c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005734:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d210      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 020f 	bic.w	r2, r3, #15
 800574a:	4921      	ldr	r1, [pc, #132]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e030      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4915      	ldr	r1, [pc, #84]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800578e:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	490d      	ldr	r1, [pc, #52]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057a2:	f000 f881 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 80057a6:	4601      	mov	r1, r0
 80057a8:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <HAL_RCC_ClockConfig+0x1c8>)
 80057b4:	5cd3      	ldrb	r3, [r2, r3]
 80057b6:	fa21 f303 	lsr.w	r3, r1, r3
 80057ba:	4a08      	ldr	r2, [pc, #32]	; (80057dc <HAL_RCC_ClockConfig+0x1cc>)
 80057bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80057be:	2000      	movs	r0, #0
 80057c0:	f008 f8a8 	bl	800d914 <HAL_InitTick>

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40023c00 	.word	0x40023c00
 80057d4:	40023800 	.word	0x40023800
 80057d8:	0800dbc8 	.word	0x0800dbc8
 80057dc:	20000008 	.word	0x20000008

080057e0 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	; 0x30
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d127      	bne.n	8005842 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80057f2:	4b2a      	ldr	r3, [pc, #168]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	4a29      	ldr	r2, [pc, #164]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6313      	str	r3, [r2, #48]	; 0x30
 80057fe:	4b27      	ldr	r3, [pc, #156]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800580a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800580e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005814:	2303      	movs	r3, #3
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005820:	f107 031c 	add.w	r3, r7, #28
 8005824:	4619      	mov	r1, r3
 8005826:	481e      	ldr	r0, [pc, #120]	; (80058a0 <HAL_RCC_MCOConfig+0xc0>)
 8005828:	f7fd f89a 	bl	8002960 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	430b      	orrs	r3, r1
 800583a:	4918      	ldr	r1, [pc, #96]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 800583c:	4313      	orrs	r3, r2
 800583e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8005840:	e027      	b.n	8005892 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8005842:	4b16      	ldr	r3, [pc, #88]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 8005848:	f043 0304 	orr.w	r3, r3, #4
 800584c:	6313      	str	r3, [r2, #48]	; 0x30
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800585a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800585e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005860:	2302      	movs	r3, #2
 8005862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005864:	2303      	movs	r3, #3
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005868:	2300      	movs	r3, #0
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800586c:	2300      	movs	r3, #0
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005870:	f107 031c 	add.w	r3, r7, #28
 8005874:	4619      	mov	r1, r3
 8005876:	480b      	ldr	r0, [pc, #44]	; (80058a4 <HAL_RCC_MCOConfig+0xc4>)
 8005878:	f7fd f872 	bl	8002960 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800587c:	4b07      	ldr	r3, [pc, #28]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	00d9      	lsls	r1, r3, #3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	430b      	orrs	r3, r1
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <HAL_RCC_MCOConfig+0xbc>)
 800588e:	4313      	orrs	r3, r2
 8005890:	608b      	str	r3, [r1, #8]
}
 8005892:	bf00      	nop
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	40020000 	.word	0x40020000
 80058a4:	40020800 	.word	0x40020800

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	2300      	movs	r3, #0
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058be:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d007      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0x32>
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d008      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x38>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 808d 	bne.w	80059ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d4:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x15c>)
 80058d6:	60bb      	str	r3, [r7, #8]
       break;
 80058d8:	e08c      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058da:	4b4b      	ldr	r3, [pc, #300]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80058dc:	60bb      	str	r3, [r7, #8]
      break;
 80058de:	e089      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e0:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058ea:	4b45      	ldr	r3, [pc, #276]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d023      	beq.n	800593e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b42      	ldr	r3, [pc, #264]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	f04f 0400 	mov.w	r4, #0
 8005900:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	ea03 0501 	and.w	r5, r3, r1
 800590c:	ea04 0602 	and.w	r6, r4, r2
 8005910:	4a3d      	ldr	r2, [pc, #244]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005912:	fb02 f106 	mul.w	r1, r2, r6
 8005916:	2200      	movs	r2, #0
 8005918:	fb02 f205 	mul.w	r2, r2, r5
 800591c:	440a      	add	r2, r1
 800591e:	493a      	ldr	r1, [pc, #232]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8005920:	fba5 0101 	umull	r0, r1, r5, r1
 8005924:	1853      	adds	r3, r2, r1
 8005926:	4619      	mov	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f04f 0400 	mov.w	r4, #0
 800592e:	461a      	mov	r2, r3
 8005930:	4623      	mov	r3, r4
 8005932:	f7fa fc85 	bl	8000240 <__aeabi_uldivmod>
 8005936:	4603      	mov	r3, r0
 8005938:	460c      	mov	r4, r1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e049      	b.n	80059d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800593e:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x158>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	099b      	lsrs	r3, r3, #6
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	f240 11ff 	movw	r1, #511	; 0x1ff
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	ea03 0501 	and.w	r5, r3, r1
 8005954:	ea04 0602 	and.w	r6, r4, r2
 8005958:	4629      	mov	r1, r5
 800595a:	4632      	mov	r2, r6
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	0154      	lsls	r4, r2, #5
 8005966:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800596a:	014b      	lsls	r3, r1, #5
 800596c:	4619      	mov	r1, r3
 800596e:	4622      	mov	r2, r4
 8005970:	1b49      	subs	r1, r1, r5
 8005972:	eb62 0206 	sbc.w	r2, r2, r6
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	f04f 0400 	mov.w	r4, #0
 800597e:	0194      	lsls	r4, r2, #6
 8005980:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005984:	018b      	lsls	r3, r1, #6
 8005986:	1a5b      	subs	r3, r3, r1
 8005988:	eb64 0402 	sbc.w	r4, r4, r2
 800598c:	f04f 0100 	mov.w	r1, #0
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	00e2      	lsls	r2, r4, #3
 8005996:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800599a:	00d9      	lsls	r1, r3, #3
 800599c:	460b      	mov	r3, r1
 800599e:	4614      	mov	r4, r2
 80059a0:	195b      	adds	r3, r3, r5
 80059a2:	eb44 0406 	adc.w	r4, r4, r6
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	02a2      	lsls	r2, r4, #10
 80059b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80059b4:	0299      	lsls	r1, r3, #10
 80059b6:	460b      	mov	r3, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	4621      	mov	r1, r4
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	461a      	mov	r2, r3
 80059c6:	4623      	mov	r3, r4
 80059c8:	f7fa fc3a 	bl	8000240 <__aeabi_uldivmod>
 80059cc:	4603      	mov	r3, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0c1b      	lsrs	r3, r3, #16
 80059d8:	f003 0303 	and.w	r3, r3, #3
 80059dc:	3301      	adds	r3, #1
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	60bb      	str	r3, [r7, #8]
      break;
 80059ec:	e002      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ee:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x15c>)
 80059f0:	60bb      	str	r3, [r7, #8]
      break;
 80059f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059f4:	68bb      	ldr	r3, [r7, #8]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	00f42400 	.word	0x00f42400
 8005a08:	017d7840 	.word	0x017d7840

08005a0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000008 	.word	0x20000008

08005a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a28:	f7ff fff0 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0a9b      	lsrs	r3, r3, #10
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4a03      	ldr	r2, [pc, #12]	; (8005a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a3a:	5cd3      	ldrb	r3, [r2, r3]
 8005a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	0800dbd8 	.word	0x0800dbd8

08005a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a50:	f7ff ffdc 	bl	8005a0c <HAL_RCC_GetHCLKFreq>
 8005a54:	4601      	mov	r1, r0
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	0b5b      	lsrs	r3, r3, #13
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	4a03      	ldr	r2, [pc, #12]	; (8005a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	0800dbd8 	.word	0x0800dbd8

08005a74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	220f      	movs	r2, #15
 8005a82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0203 	and.w	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ab6:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <HAL_RCC_GetClockConfig+0x60>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 020f 	and.w	r2, r3, #15
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40023c00 	.word	0x40023c00

08005ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b00:	4b69      	ldr	r3, [pc, #420]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a68      	ldr	r2, [pc, #416]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b0a:	6093      	str	r3, [r2, #8]
 8005b0c:	4b66      	ldr	r3, [pc, #408]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	4964      	ldr	r1, [pc, #400]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b22:	2301      	movs	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d017      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b32:	4b5d      	ldr	r3, [pc, #372]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	4959      	ldr	r1, [pc, #356]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b50:	d101      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d017      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b6e:	4b4e      	ldr	r3, [pc, #312]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	494a      	ldr	r1, [pc, #296]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d101      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 808b 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	4a39      	ldr	r2, [pc, #228]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc8:	4b37      	ldr	r3, [pc, #220]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bd4:	4b35      	ldr	r3, [pc, #212]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a34      	ldr	r2, [pc, #208]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be0:	f7fa fcd0 	bl	8000584 <HAL_GetTick>
 8005be4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be8:	f7fa fccc 	bl	8000584 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b64      	cmp	r3, #100	; 0x64
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e38d      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bfa:	4b2c      	ldr	r3, [pc, #176]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c06:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d035      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d02e      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c4c:	4b16      	ldr	r3, [pc, #88]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d114      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c58:	f7fa fc94 	bl	8000584 <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fa fc90 	bl	8000584 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e34f      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ee      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c8e:	d111      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c9c:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c9e:	400b      	ands	r3, r1
 8005ca0:	4901      	ldr	r1, [pc, #4]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	608b      	str	r3, [r1, #8]
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	0ffffcff 	.word	0x0ffffcff
 8005cb4:	4bb3      	ldr	r3, [pc, #716]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4ab2      	ldr	r2, [pc, #712]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cbe:	6093      	str	r3, [r2, #8]
 8005cc0:	4bb0      	ldr	r3, [pc, #704]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ccc:	49ad      	ldr	r1, [pc, #692]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cde:	4ba9      	ldr	r3, [pc, #676]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce4:	4aa7      	ldr	r2, [pc, #668]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005cee:	4ba5      	ldr	r3, [pc, #660]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	49a2      	ldr	r1, [pc, #648]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d0c:	4b9d      	ldr	r3, [pc, #628]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d1a:	499a      	ldr	r1, [pc, #616]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d2e:	4b95      	ldr	r3, [pc, #596]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d3c:	4991      	ldr	r1, [pc, #580]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d50:	4b8c      	ldr	r3, [pc, #560]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5e:	4989      	ldr	r1, [pc, #548]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d72:	4b84      	ldr	r3, [pc, #528]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	4980      	ldr	r1, [pc, #512]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d94:	4b7b      	ldr	r3, [pc, #492]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f023 0203 	bic.w	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	4978      	ldr	r1, [pc, #480]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005db6:	4b73      	ldr	r3, [pc, #460]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f023 020c 	bic.w	r2, r3, #12
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	496f      	ldr	r1, [pc, #444]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dd8:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de6:	4967      	ldr	r1, [pc, #412]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dfa:	4b62      	ldr	r3, [pc, #392]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	495e      	ldr	r1, [pc, #376]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e1c:	4b59      	ldr	r3, [pc, #356]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	4956      	ldr	r1, [pc, #344]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e3e:	4b51      	ldr	r3, [pc, #324]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	494d      	ldr	r1, [pc, #308]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e60:	4b48      	ldr	r3, [pc, #288]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	4945      	ldr	r1, [pc, #276]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e82:	4b40      	ldr	r3, [pc, #256]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e90:	493c      	ldr	r1, [pc, #240]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ea4:	4b37      	ldr	r3, [pc, #220]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb2:	4934      	ldr	r1, [pc, #208]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ecc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed4:	492b      	ldr	r1, [pc, #172]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee4:	d101      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f06:	4b1f      	ldr	r3, [pc, #124]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f14:	491b      	ldr	r1, [pc, #108]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f28:	4b16      	ldr	r3, [pc, #88]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f38:	4912      	ldr	r1, [pc, #72]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5c:	4909      	ldr	r1, [pc, #36]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00f      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	4985      	ldr	r1, [pc, #532]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f9c:	4b80      	ldr	r3, [pc, #512]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fac:	497c      	ldr	r1, [pc, #496]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d005      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc2:	f040 80d6 	bne.w	8006172 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fc6:	4b76      	ldr	r3, [pc, #472]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a75      	ldr	r2, [pc, #468]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd2:	f7fa fad7 	bl	8000584 <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fda:	f7fa fad3 	bl	8000584 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	; 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e194      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fec:	4b6c      	ldr	r3, [pc, #432]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f0      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d021      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11d      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800600c:	4b64      	ldr	r3, [pc, #400]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800600e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800601a:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800601c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006020:	0e1b      	lsrs	r3, r3, #24
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	019a      	lsls	r2, r3, #6
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	431a      	orrs	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	4957      	ldr	r1, [pc, #348]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006066:	2b00      	cmp	r3, #0
 8006068:	d02e      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006072:	d129      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006074:	4b4a      	ldr	r3, [pc, #296]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006082:	4b47      	ldr	r3, [pc, #284]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006088:	0f1b      	lsrs	r3, r3, #28
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	019a      	lsls	r2, r3, #6
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	041b      	lsls	r3, r3, #16
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	431a      	orrs	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	071b      	lsls	r3, r3, #28
 80060a8:	493d      	ldr	r1, [pc, #244]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060b0:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b6:	f023 021f 	bic.w	r2, r3, #31
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	3b01      	subs	r3, #1
 80060c0:	4937      	ldr	r1, [pc, #220]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01d      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060d4:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060da:	0e1b      	lsrs	r3, r3, #24
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e8:	0f1b      	lsrs	r3, r3, #28
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	019a      	lsls	r2, r3, #6
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	431a      	orrs	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	431a      	orrs	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	071b      	lsls	r3, r3, #28
 8006108:	4925      	ldr	r1, [pc, #148]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d011      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	019a      	lsls	r2, r3, #6
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	071b      	lsls	r3, r3, #28
 8006138:	4919      	ldr	r1, [pc, #100]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006140:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a16      	ldr	r2, [pc, #88]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800614a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800614c:	f7fa fa1a 	bl	8000584 <HAL_GetTick>
 8006150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006154:	f7fa fa16 	bl	8000584 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	; 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e0d7      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b01      	cmp	r3, #1
 8006176:	f040 80cd 	bne.w	8006314 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006186:	f7fa f9fd 	bl	8000584 <HAL_GetTick>
 800618a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800618c:	e00a      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800618e:	f7fa f9f9 	bl	8000584 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b64      	cmp	r3, #100	; 0x64
 800619a:	d903      	bls.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e0ba      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80061a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061a4:	4b5e      	ldr	r3, [pc, #376]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b0:	d0ed      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02e      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d12a      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061da:	4b51      	ldr	r3, [pc, #324]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	0c1b      	lsrs	r3, r3, #16
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061e8:	4b4d      	ldr	r3, [pc, #308]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ee:	0f1b      	lsrs	r3, r3, #28
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	019a      	lsls	r2, r3, #6
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	431a      	orrs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	071b      	lsls	r3, r3, #28
 800620e:	4944      	ldr	r1, [pc, #272]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006216:	4b42      	ldr	r3, [pc, #264]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800621c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	3b01      	subs	r3, #1
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	493d      	ldr	r1, [pc, #244]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d022      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006244:	d11d      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006246:	4b36      	ldr	r3, [pc, #216]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	0e1b      	lsrs	r3, r3, #24
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006254:	4b32      	ldr	r3, [pc, #200]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	0f1b      	lsrs	r3, r3, #28
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	019a      	lsls	r2, r3, #6
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	041b      	lsls	r3, r3, #16
 800626e:	431a      	orrs	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	431a      	orrs	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	071b      	lsls	r3, r3, #28
 800627a:	4929      	ldr	r1, [pc, #164]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d028      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800628e:	4b24      	ldr	r3, [pc, #144]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	0e1b      	lsrs	r3, r3, #24
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800629c:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	0c1b      	lsrs	r3, r3, #16
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	019a      	lsls	r2, r3, #6
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	431a      	orrs	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	061b      	lsls	r3, r3, #24
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	071b      	lsls	r3, r3, #28
 80062c2:	4917      	ldr	r1, [pc, #92]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4911      	ldr	r1, [pc, #68]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a0e      	ldr	r2, [pc, #56]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ec:	f7fa f94a 	bl	8000584 <HAL_GetTick>
 80062f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062f4:	f7fa f946 	bl	8000584 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	; 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e007      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800630e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006312:	d1ef      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023800 	.word	0x40023800

08006324 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006342:	f040 8099 	bne.w	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006346:	4ba0      	ldr	r3, [pc, #640]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006354:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800635c:	d045      	beq.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800635e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006362:	d802      	bhi.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006368:	e087      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
    switch (saiclocksource)
 800636a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800636e:	d074      	beq.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8006370:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006374:	d074      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8006376:	e080      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006378:	4b93      	ldr	r3, [pc, #588]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d108      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006384:	4b90      	ldr	r3, [pc, #576]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800638c:	4a8f      	ldr	r2, [pc, #572]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800638e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e007      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006396:	4b8c      	ldr	r3, [pc, #560]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639e:	4a8c      	ldr	r2, [pc, #560]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	0e1b      	lsrs	r3, r3, #24
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80063b4:	4b84      	ldr	r3, [pc, #528]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	fb02 f203 	mul.w	r2, r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80063ce:	4b7e      	ldr	r3, [pc, #504]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d4:	0a1b      	lsrs	r3, r3, #8
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	617b      	str	r3, [r7, #20]
        break;
 80063e8:	e047      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80063ea:	4b77      	ldr	r3, [pc, #476]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d108      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063f6:	4b74      	ldr	r3, [pc, #464]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063fe:	4a73      	ldr	r2, [pc, #460]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006400:	fbb2 f3f3 	udiv	r3, r2, r3
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e007      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006408:	4b6f      	ldr	r3, [pc, #444]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006410:	4a6f      	ldr	r2, [pc, #444]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006418:	4b6b      	ldr	r3, [pc, #428]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800641a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641e:	0e1b      	lsrs	r3, r3, #24
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006426:	4b68      	ldr	r3, [pc, #416]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	fb02 f203 	mul.w	r2, r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	fbb2 f3f3 	udiv	r3, r2, r3
 800643e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006440:	4b61      	ldr	r3, [pc, #388]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	617b      	str	r3, [r7, #20]
        break;
 8006458:	e00f      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        frequency = EXTERNAL_CLOCK_VALUE;
 800645a:	4b5e      	ldr	r3, [pc, #376]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800645c:	617b      	str	r3, [r7, #20]
        break;
 800645e:	e00c      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006460:	4b59      	ldr	r3, [pc, #356]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          frequency = HSI_VALUE;
 800646c:	4b57      	ldr	r3, [pc, #348]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800646e:	617b      	str	r3, [r7, #20]
        break;
 8006470:	e003      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = HSE_VALUE;
 8006472:	4b57      	ldr	r3, [pc, #348]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8006474:	617b      	str	r3, [r7, #20]
        break;
 8006476:	e000      	b.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      }
    }
  }
 8006478:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006480:	f040 8099 	bne.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006484:	4b50      	ldr	r3, [pc, #320]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006492:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649a:	d045      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800649c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a0:	d802      	bhi.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d007      	beq.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80064a6:	e087      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    switch (saiclocksource)
 80064a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ac:	d074      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80064ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064b2:	d074      	beq.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        break;
 80064b4:	e080      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d108      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ca:	4a40      	ldr	r2, [pc, #256]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e007      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80064d4:	4b3c      	ldr	r3, [pc, #240]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	4a3c      	ldr	r2, [pc, #240]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80064e4:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	0e1b      	lsrs	r3, r3, #24
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80064f2:	4b35      	ldr	r3, [pc, #212]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	fb02 f203 	mul.w	r2, r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	fbb2 f3f3 	udiv	r3, r2, r3
 800650a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800650c:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800650e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	3301      	adds	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
        break;
 8006526:	e047      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006528:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d108      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800653c:	4a23      	ldr	r2, [pc, #140]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	e007      	b.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006546:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800654e:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006556:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655c:	0e1b      	lsrs	r3, r3, #24
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800656a:	099b      	lsrs	r3, r3, #6
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	fb02 f203 	mul.w	r2, r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	fbb2 f3f3 	udiv	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	3301      	adds	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]
        break;
 8006596:	e00f      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800659a:	617b      	str	r3, [r7, #20]
        break;
 800659c:	e00c      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
          frequency = HSI_VALUE;
 80065aa:	4b08      	ldr	r3, [pc, #32]	; (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80065ac:	617b      	str	r3, [r7, #20]
        break;
 80065ae:	e003      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = HSE_VALUE;
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80065b2:	617b      	str	r3, [r7, #20]
        break;
 80065b4:	e000      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      }
    }
  }
 80065b6:	bf00      	nop

  return frequency;
 80065b8:	697b      	ldr	r3, [r7, #20]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800
 80065cc:	00f42400 	.word	0x00f42400
 80065d0:	017d7840 	.word	0x017d7840
 80065d4:	00bb8000 	.word	0x00bb8000

080065d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e06b      	b.n	80066c2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7f5b      	ldrb	r3, [r3, #29]
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f006 fc08 	bl	800ce10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	22ca      	movs	r2, #202	; 0xca
 800660c:	625a      	str	r2, [r3, #36]	; 0x24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2253      	movs	r2, #83	; 0x53
 8006614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fb00 	bl	8006c1c <RTC_EnterInitMode>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e046      	b.n	80066c2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6899      	ldr	r1, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b23      	ldr	r3, [pc, #140]	; (80066cc <HAL_RTC_Init+0xf4>)
 8006640:	400b      	ands	r3, r1
 8006642:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6899      	ldr	r1, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68d2      	ldr	r2, [r2, #12]
 800666a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6919      	ldr	r1, [r3, #16]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	041a      	lsls	r2, r3, #16
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0208 	bic.w	r2, r2, #8
 800669e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	22ff      	movs	r2, #255	; 0xff
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
  }
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	ff8fffbf 	.word	0xff8fffbf

080066d0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	7f1b      	ldrb	r3, [r3, #28]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_RTC_SetTime+0x1c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e0a8      	b.n	800683e <HAL_RTC_SetTime+0x16e>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2201      	movs	r2, #1
 80066f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2202      	movs	r2, #2
 80066f6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d126      	bne.n	800674c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d102      	bne.n	8006712 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 faac 	bl	8006c74 <RTC_ByteToBcd2>
 800671c:	4603      	mov	r3, r0
 800671e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	4618      	mov	r0, r3
 8006726:	f000 faa5 	bl	8006c74 <RTC_ByteToBcd2>
 800672a:	4603      	mov	r3, r0
 800672c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800672e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fa9d 	bl	8006c74 <RTC_ByteToBcd2>
 800673a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800673c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	7b1b      	ldrb	r3, [r3, #12]
 8006744:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	e018      	b.n	800677e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	785b      	ldrb	r3, [r3, #1]
 800676a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800676c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006772:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	7b1b      	ldrb	r3, [r3, #12]
 8006778:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ca      	movs	r2, #202	; 0xca
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2253      	movs	r2, #83	; 0x53
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fa44 	bl	8006c1c <RTC_EnterInitMode>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2204      	movs	r2, #4
 80067a6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e045      	b.n	800683e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	4b23      	ldr	r3, [pc, #140]	; (8006848 <HAL_RTC_SetTime+0x178>)
 80067ba:	400b      	ands	r3, r1
 80067bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6899      	ldr	r1, [r3, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d111      	bne.n	8006828 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f9e1 	bl	8006bcc <HAL_RTC_WaitForSynchro>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	22ff      	movs	r2, #255	; 0xff
 8006816:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2204      	movs	r2, #4
 800681c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e00a      	b.n	800683e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800683c:	2300      	movs	r3, #0
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	bd90      	pop	{r4, r7, pc}
 8006846:	bf00      	nop
 8006848:	007f7f7f 	.word	0x007f7f7f

0800684c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	7f1b      	ldrb	r3, [r3, #28]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_RTC_SetDate+0x1c>
 8006864:	2302      	movs	r3, #2
 8006866:	e092      	b.n	800698e <HAL_RTC_SetDate+0x142>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2201      	movs	r2, #1
 800686c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2202      	movs	r2, #2
 8006872:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10e      	bne.n	8006898 <HAL_RTC_SetDate+0x4c>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b00      	cmp	r3, #0
 8006884:	d008      	beq.n	8006898 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	f023 0310 	bic.w	r3, r3, #16
 800688e:	b2db      	uxtb	r3, r3
 8006890:	330a      	adds	r3, #10
 8006892:	b2da      	uxtb	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d11c      	bne.n	80068d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f9e6 	bl	8006c74 <RTC_ByteToBcd2>
 80068a8:	4603      	mov	r3, r0
 80068aa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 f9df 	bl	8006c74 <RTC_ByteToBcd2>
 80068b6:	4603      	mov	r3, r0
 80068b8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80068ba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	789b      	ldrb	r3, [r3, #2]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f9d7 	bl	8006c74 <RTC_ByteToBcd2>
 80068c6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80068c8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e00e      	b.n	80068f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	78db      	ldrb	r3, [r3, #3]
 80068dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80068e4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80068ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	22ca      	movs	r2, #202	; 0xca
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2253      	movs	r2, #83	; 0x53
 8006904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f988 	bl	8006c1c <RTC_EnterInitMode>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	22ff      	movs	r2, #255	; 0xff
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2204      	movs	r2, #4
 800691e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e031      	b.n	800698e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	6979      	ldr	r1, [r7, #20]
 8006930:	4b19      	ldr	r3, [pc, #100]	; (8006998 <HAL_RTC_SetDate+0x14c>)
 8006932:	400b      	ands	r3, r1
 8006934:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006944:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d111      	bne.n	8006978 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f939 	bl	8006bcc <HAL_RTC_WaitForSynchro>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2204      	movs	r2, #4
 800696c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e00a      	b.n	800698e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800698c:	2300      	movs	r3, #0
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd90      	pop	{r4, r7, pc}
 8006996:	bf00      	nop
 8006998:	00ffff3f 	.word	0x00ffff3f

0800699c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b089      	sub	sp, #36	; 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	7f1b      	ldrb	r3, [r3, #28]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_RTC_SetAlarm+0x24>
 80069bc:	2302      	movs	r3, #2
 80069be:	e101      	b.n	8006bc4 <HAL_RTC_SetAlarm+0x228>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2201      	movs	r2, #1
 80069c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2202      	movs	r2, #2
 80069ca:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d137      	bne.n	8006a42 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2200      	movs	r2, #0
 80069e4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f942 	bl	8006c74 <RTC_ByteToBcd2>
 80069f0:	4603      	mov	r3, r0
 80069f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 f93b 	bl	8006c74 <RTC_ByteToBcd2>
 80069fe:	4603      	mov	r3, r0
 8006a00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006a02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	789b      	ldrb	r3, [r3, #2]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f933 	bl	8006c74 <RTC_ByteToBcd2>
 8006a0e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006a10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	7b1b      	ldrb	r3, [r3, #12]
 8006a18:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006a1a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 f925 	bl	8006c74 <RTC_ByteToBcd2>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006a2e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006a36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e023      	b.n	8006a8a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006a62:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006a68:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7b1b      	ldrb	r3, [r3, #12]
 8006a6e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006a70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006a7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006a80:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006a86:	4313      	orrs	r3, r2
 8006a88:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	22ca      	movs	r2, #202	; 0xca
 8006a9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2253      	movs	r2, #83	; 0x53
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aae:	d13f      	bne.n	8006b30 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006abe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ace:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ad0:	f7f9 fd58 	bl	8000584 <HAL_GetTick>
 8006ad4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006ad6:	e013      	b.n	8006b00 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ad8:	f7f9 fd54 	bl	8000584 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae6:	d90b      	bls.n	8006b00 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	22ff      	movs	r2, #255	; 0xff
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2203      	movs	r2, #3
 8006af4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e061      	b.n	8006bc4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e4      	beq.n	8006ad8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b2c:	609a      	str	r2, [r3, #8]
 8006b2e:	e03e      	b.n	8006bae <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b3e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b4e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b50:	f7f9 fd18 	bl	8000584 <HAL_GetTick>
 8006b54:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006b56:	e013      	b.n	8006b80 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b58:	f7f9 fd14 	bl	8000584 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b66:	d90b      	bls.n	8006b80 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	22ff      	movs	r2, #255	; 0xff
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2203      	movs	r2, #3
 8006b74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e021      	b.n	8006bc4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0e4      	beq.n	8006b58 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3724      	adds	r7, #36	; 0x24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd90      	pop	{r4, r7, pc}

08006bcc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006be8:	f7f9 fccc 	bl	8000584 <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bee:	e009      	b.n	8006c04 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bf0:	f7f9 fcc8 	bl	8000584 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bfe:	d901      	bls.n	8006c04 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e007      	b.n	8006c14 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0ee      	beq.n	8006bf0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d119      	bne.n	8006c6a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c40:	f7f9 fca0 	bl	8000584 <HAL_GetTick>
 8006c44:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c46:	e009      	b.n	8006c5c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c48:	f7f9 fc9c 	bl	8000584 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c56:	d901      	bls.n	8006c5c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e007      	b.n	8006c6c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0ee      	beq.n	8006c48 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006c82:	e005      	b.n	8006c90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3301      	adds	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	3b0a      	subs	r3, #10
 8006c8e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	2b09      	cmp	r3, #9
 8006c94:	d8f6      	bhi.n	8006c84 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b2db      	uxtb	r3, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e149      	b.n	8006f62 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f006 fd6c 	bl	800d7c0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f94f 	bl	8006f94 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d007      	beq.n	8006d0e <HAL_SAI_Init+0x5e>
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d302      	bcc.n	8006d08 <HAL_SAI_Init+0x58>
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d006      	beq.n	8006d14 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006d06:	e008      	b.n	8006d1a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61fb      	str	r3, [r7, #28]
      break;
 8006d0c:	e005      	b.n	8006d1a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006d0e:	2310      	movs	r3, #16
 8006d10:	61fb      	str	r3, [r7, #28]
      break;
 8006d12:	e002      	b.n	8006d1a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006d14:	2320      	movs	r3, #32
 8006d16:	61fb      	str	r3, [r7, #28]
      break;
 8006d18:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d81d      	bhi.n	8006d5e <HAL_SAI_Init+0xae>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_SAI_Init+0x78>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d3f 	.word	0x08006d3f
 8006d30:	08006d47 	.word	0x08006d47
 8006d34:	08006d4f 	.word	0x08006d4f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]
      }
      break;
 8006d3c:	e010      	b.n	8006d60 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8006d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d42:	617b      	str	r3, [r7, #20]
      }
      break;
 8006d44:	e00c      	b.n	8006d60 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d4a:	617b      	str	r3, [r7, #20]
      }
      break;
 8006d4c:	e008      	b.n	8006d60 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d52:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f043 0301 	orr.w	r3, r3, #1
 8006d5a:	61fb      	str	r3, [r7, #28]
      }
      break;
 8006d5c:	e000      	b.n	8006d60 <HAL_SAI_Init+0xb0>
  default:
    break;
 8006d5e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a81      	ldr	r2, [pc, #516]	; (8006f6c <HAL_SAI_Init+0x2bc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_SAI_Init+0xc4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a80      	ldr	r2, [pc, #512]	; (8006f70 <HAL_SAI_Init+0x2c0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d103      	bne.n	8006d7c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8006d74:	4a7f      	ldr	r2, [pc, #508]	; (8006f74 <HAL_SAI_Init+0x2c4>)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e002      	b.n	8006d82 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006d7c:	4a7e      	ldr	r2, [pc, #504]	; (8006f78 <HAL_SAI_Init+0x2c8>)
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d043      	beq.n	8006e12 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a76      	ldr	r2, [pc, #472]	; (8006f6c <HAL_SAI_Init+0x2bc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_SAI_Init+0xf2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a74      	ldr	r2, [pc, #464]	; (8006f70 <HAL_SAI_Init+0x2c0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d104      	bne.n	8006dac <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006da2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006da6:	f7ff fabd 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 8006daa:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a72      	ldr	r2, [pc, #456]	; (8006f7c <HAL_SAI_Init+0x2cc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d004      	beq.n	8006dc0 <HAL_SAI_Init+0x110>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a71      	ldr	r2, [pc, #452]	; (8006f80 <HAL_SAI_Init+0x2d0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d104      	bne.n	8006dca <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006dc0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006dc4:	f7ff faae 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dc8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	025b      	lsls	r3, r3, #9
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a67      	ldr	r2, [pc, #412]	; (8006f84 <HAL_SAI_Init+0x2d4>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	08da      	lsrs	r2, r3, #3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	4b64      	ldr	r3, [pc, #400]	; (8006f84 <HAL_SAI_Init+0x2d4>)
 8006df4:	fba3 2301 	umull	r2, r3, r3, r1
 8006df8:	08da      	lsrs	r2, r3, #3
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	1aca      	subs	r2, r1, r3
 8006e04:	2a08      	cmp	r2, #8
 8006e06:	d904      	bls.n	8006e12 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_SAI_Init+0x172>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d109      	bne.n	8006e36 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_SAI_Init+0x17e>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e001      	b.n	8006e32 <HAL_SAI_Init+0x182>
 8006e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e008      	b.n	8006e48 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d102      	bne.n	8006e44 <HAL_SAI_Init+0x194>
 8006e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e42:	e000      	b.n	8006e46 <HAL_SAI_Init+0x196>
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6819      	ldr	r1, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b4d      	ldr	r3, [pc, #308]	; (8006f88 <HAL_SAI_Init+0x2d8>)
 8006e54:	400b      	ands	r3, r1
 8006e56:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6819      	ldr	r1, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e6c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	431a      	orrs	r2, r3
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8006e80:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006e8c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	051b      	lsls	r3, r3, #20
 8006e94:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6859      	ldr	r1, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4b38      	ldr	r3, [pc, #224]	; (8006f8c <HAL_SAI_Init+0x2dc>)
 8006eaa:	400b      	ands	r3, r1
 8006eac:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6899      	ldr	r1, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	; (8006f90 <HAL_SAI_Init+0x2e0>)
 8006ed8:	400b      	ands	r3, r1
 8006eda:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6899      	ldr	r1, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006eec:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8006ef2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006ef8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	3b01      	subs	r3, #1
 8006f00:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006f02:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68d9      	ldr	r1, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006f1a:	400b      	ands	r3, r1
 8006f1c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68d9      	ldr	r1, [r3, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3720      	adds	r7, #32
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	40015804 	.word	0x40015804
 8006f70:	40015824 	.word	0x40015824
 8006f74:	40015800 	.word	0x40015800
 8006f78:	40015c00 	.word	0x40015c00
 8006f7c:	40015c04 	.word	0x40015c04
 8006f80:	40015c24 	.word	0x40015c24
 8006f84:	cccccccd 	.word	0xcccccccd
 8006f88:	ff05c010 	.word	0xff05c010
 8006f8c:	ffff1ff0 	.word	0xffff1ff0
 8006f90:	fff88000 	.word	0xfff88000

08006f94 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006f94:	b490      	push	{r4, r7}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006f9c:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <SAI_Disable+0x64>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a16      	ldr	r2, [pc, #88]	; (8006ffc <SAI_Disable+0x68>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	0b1b      	lsrs	r3, r3, #12
 8006fa8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fbc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	1e5c      	subs	r4, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006fda:	e006      	b.n	8006fea <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e9      	bne.n	8006fbe <SAI_Disable+0x2a>

  return status;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc90      	pop	{r4, r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20000008 	.word	0x20000008
 8006ffc:	95cbec1b 	.word	0x95cbec1b

08007000 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e025      	b.n	8007060 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f006 fbbf 	bl	800d7ac <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f001 fcdb 	bl	80089fc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	461a      	mov	r2, r3
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	f001 fd45 	bl	8008ae0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e04c      	b.n	8007114 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f005 ff58 	bl	800cf44 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0203 	bic.w	r2, r2, #3
 80070aa:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4b19      	ldr	r3, [pc, #100]	; (800711c <HAL_SPDIFRX_Init+0xb4>)
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80070c4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80070ca:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80070d0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80070d6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80070dc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80070e2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80070e8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80070ee:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80070f4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	fff88407 	.word	0xfff88407

08007120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e084      	b.n	800723c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f005 ff3b 	bl	800cfc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007168:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007172:	d902      	bls.n	800717a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e002      	b.n	8007180 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800717a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800717e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007188:	d007      	beq.n	800719a <HAL_SPI_Init+0x7a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007192:	d002      	beq.n	800719a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071aa:	d903      	bls.n	80071b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
 80071b2:	e002      	b.n	80071ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	ea42 0103 	orr.w	r1, r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	f003 0204 	and.w	r2, r3, #4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	ea42 0103 	orr.w	r1, r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69da      	ldr	r2, [r3, #28]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800722a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e01d      	b.n	8007292 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f005 ff20 	bl	800d0b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f000 fb78 	bl	8007978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <HAL_TIM_Base_Start_IT+0x50>)
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	d00b      	beq.n	80072de <HAL_TIM_Base_Start_IT+0x42>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072cc:	d007      	beq.n	80072de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	00010007 	.word	0x00010007

080072f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e01d      	b.n	800733e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f005 ff12 	bl	800d140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f000 fb22 	bl	8007978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b02      	cmp	r3, #2
 800735a:	d122      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b02      	cmp	r3, #2
 8007368:	d11b      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0202 	mvn.w	r2, #2
 8007372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fad7 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fac9 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fada 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d122      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d11b      	bne.n	80073f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f06f 0204 	mvn.w	r2, #4
 80073c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 faad 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 80073e2:	e005      	b.n	80073f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fa9f 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fab0 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d122      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b08      	cmp	r3, #8
 8007410:	d11b      	bne.n	800744a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f06f 0208 	mvn.w	r2, #8
 800741a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa83 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 8007436:	e005      	b.n	8007444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa75 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa86 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d122      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b10      	cmp	r3, #16
 8007464:	d11b      	bne.n	800749e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f06f 0210 	mvn.w	r2, #16
 800746e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2208      	movs	r2, #8
 8007474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa59 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 800748a:	e005      	b.n	8007498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fa4b 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa5c 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d10e      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d107      	bne.n	80074ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f06f 0201 	mvn.w	r2, #1
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f005 f8f9 	bl	800c6bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d4:	2b80      	cmp	r3, #128	; 0x80
 80074d6:	d10e      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fe3f 	bl	8008174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007504:	d10e      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d107      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fe32 	bl	8008188 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa0a 	bl	8007964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0220 	mvn.w	r2, #32
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fdf2 	bl	8008160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800759a:	2302      	movs	r3, #2
 800759c:	e105      	b.n	80077aa <HAL_TIM_PWM_ConfigChannel+0x226>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b14      	cmp	r3, #20
 80075b2:	f200 80f0 	bhi.w	8007796 <HAL_TIM_PWM_ConfigChannel+0x212>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	08007611 	.word	0x08007611
 80075c0:	08007797 	.word	0x08007797
 80075c4:	08007797 	.word	0x08007797
 80075c8:	08007797 	.word	0x08007797
 80075cc:	08007651 	.word	0x08007651
 80075d0:	08007797 	.word	0x08007797
 80075d4:	08007797 	.word	0x08007797
 80075d8:	08007797 	.word	0x08007797
 80075dc:	08007693 	.word	0x08007693
 80075e0:	08007797 	.word	0x08007797
 80075e4:	08007797 	.word	0x08007797
 80075e8:	08007797 	.word	0x08007797
 80075ec:	080076d3 	.word	0x080076d3
 80075f0:	08007797 	.word	0x08007797
 80075f4:	08007797 	.word	0x08007797
 80075f8:	08007797 	.word	0x08007797
 80075fc:	08007715 	.word	0x08007715
 8007600:	08007797 	.word	0x08007797
 8007604:	08007797 	.word	0x08007797
 8007608:	08007797 	.word	0x08007797
 800760c:	08007755 	.word	0x08007755
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fa4e 	bl	8007ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0208 	orr.w	r2, r2, #8
 800762a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0204 	bic.w	r2, r2, #4
 800763a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6999      	ldr	r1, [r3, #24]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	619a      	str	r2, [r3, #24]
      break;
 800764e:	e0a3      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 faa0 	bl	8007b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800766a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800767a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6999      	ldr	r1, [r3, #24]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	021a      	lsls	r2, r3, #8
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	619a      	str	r2, [r3, #24]
      break;
 8007690:	e082      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	4618      	mov	r0, r3
 800769a:	f000 faf7 	bl	8007c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0208 	orr.w	r2, r2, #8
 80076ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0204 	bic.w	r2, r2, #4
 80076bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69d9      	ldr	r1, [r3, #28]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	691a      	ldr	r2, [r3, #16]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	61da      	str	r2, [r3, #28]
      break;
 80076d0:	e062      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fb4d 	bl	8007d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69d9      	ldr	r1, [r3, #28]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	021a      	lsls	r2, r3, #8
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	61da      	str	r2, [r3, #28]
      break;
 8007712:	e041      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	4618      	mov	r0, r3
 800771c:	f000 fb84 	bl	8007e28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0208 	orr.w	r2, r2, #8
 800772e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0204 	bic.w	r2, r2, #4
 800773e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007752:	e021      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fbb6 	bl	8007ecc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800776e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	021a      	lsls	r2, r3, #8
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007794:	e000      	b.n	8007798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007796:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop

080077b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_TIM_ConfigClockSource+0x18>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e0a6      	b.n	800791a <HAL_TIM_ConfigClockSource+0x166>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4b4f      	ldr	r3, [pc, #316]	; (8007924 <HAL_TIM_ConfigClockSource+0x170>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d067      	beq.n	80078d4 <HAL_TIM_ConfigClockSource+0x120>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d80b      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x6c>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d073      	beq.n	80078f4 <HAL_TIM_ConfigClockSource+0x140>
 800780c:	2b10      	cmp	r3, #16
 800780e:	d802      	bhi.n	8007816 <HAL_TIM_ConfigClockSource+0x62>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d06f      	beq.n	80078f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007814:	e078      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007816:	2b20      	cmp	r3, #32
 8007818:	d06c      	beq.n	80078f4 <HAL_TIM_ConfigClockSource+0x140>
 800781a:	2b30      	cmp	r3, #48	; 0x30
 800781c:	d06a      	beq.n	80078f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800781e:	e073      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007820:	2b70      	cmp	r3, #112	; 0x70
 8007822:	d00d      	beq.n	8007840 <HAL_TIM_ConfigClockSource+0x8c>
 8007824:	2b70      	cmp	r3, #112	; 0x70
 8007826:	d804      	bhi.n	8007832 <HAL_TIM_ConfigClockSource+0x7e>
 8007828:	2b50      	cmp	r3, #80	; 0x50
 800782a:	d033      	beq.n	8007894 <HAL_TIM_ConfigClockSource+0xe0>
 800782c:	2b60      	cmp	r3, #96	; 0x60
 800782e:	d041      	beq.n	80078b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007830:	e06a      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007836:	d066      	beq.n	8007906 <HAL_TIM_ConfigClockSource+0x152>
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783c:	d017      	beq.n	800786e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800783e:	e063      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6899      	ldr	r1, [r3, #8]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f000 fc0a 	bl	8008068 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007862:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	609a      	str	r2, [r3, #8]
      break;
 800786c:	e04c      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	6899      	ldr	r1, [r3, #8]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f000 fbf3 	bl	8008068 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007890:	609a      	str	r2, [r3, #8]
      break;
 8007892:	e039      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	6859      	ldr	r1, [r3, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	461a      	mov	r2, r3
 80078a2:	f000 fb67 	bl	8007f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2150      	movs	r1, #80	; 0x50
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fbc0 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80078b2:	e029      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6859      	ldr	r1, [r3, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	461a      	mov	r2, r3
 80078c2:	f000 fb86 	bl	8007fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2160      	movs	r1, #96	; 0x60
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fbb0 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80078d2:	e019      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	461a      	mov	r2, r3
 80078e2:	f000 fb47 	bl	8007f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2140      	movs	r1, #64	; 0x40
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fba0 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80078f2:	e009      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f000 fb97 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 8007904:	e000      	b.n	8007908 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	fffeff88 	.word	0xfffeff88

08007928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a40      	ldr	r2, [pc, #256]	; (8007a8c <TIM_Base_SetConfig+0x114>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007996:	d00f      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a3d      	ldr	r2, [pc, #244]	; (8007a90 <TIM_Base_SetConfig+0x118>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00b      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a3c      	ldr	r2, [pc, #240]	; (8007a94 <TIM_Base_SetConfig+0x11c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a3b      	ldr	r2, [pc, #236]	; (8007a98 <TIM_Base_SetConfig+0x120>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a3a      	ldr	r2, [pc, #232]	; (8007a9c <TIM_Base_SetConfig+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d108      	bne.n	80079ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2f      	ldr	r2, [pc, #188]	; (8007a8c <TIM_Base_SetConfig+0x114>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02b      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d027      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a2c      	ldr	r2, [pc, #176]	; (8007a90 <TIM_Base_SetConfig+0x118>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d023      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <TIM_Base_SetConfig+0x11c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01f      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <TIM_Base_SetConfig+0x120>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d01b      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <TIM_Base_SetConfig+0x124>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d017      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a28      	ldr	r2, [pc, #160]	; (8007aa0 <TIM_Base_SetConfig+0x128>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <TIM_Base_SetConfig+0x12c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00f      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <TIM_Base_SetConfig+0x130>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00b      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a25      	ldr	r2, [pc, #148]	; (8007aac <TIM_Base_SetConfig+0x134>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d007      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a24      	ldr	r2, [pc, #144]	; (8007ab0 <TIM_Base_SetConfig+0x138>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a23      	ldr	r2, [pc, #140]	; (8007ab4 <TIM_Base_SetConfig+0x13c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d108      	bne.n	8007a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <TIM_Base_SetConfig+0x114>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_Base_SetConfig+0xf8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a0c      	ldr	r2, [pc, #48]	; (8007a9c <TIM_Base_SetConfig+0x124>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d103      	bne.n	8007a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	615a      	str	r2, [r3, #20]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40000800 	.word	0x40000800
 8007a98:	40000c00 	.word	0x40000c00
 8007a9c:	40010400 	.word	0x40010400
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	40001800 	.word	0x40001800
 8007ab0:	40001c00 	.word	0x40001c00
 8007ab4:	40002000 	.word	0x40002000

08007ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f023 0201 	bic.w	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <TIM_OC1_SetConfig+0xd8>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 0302 	bic.w	r3, r3, #2
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <TIM_OC1_SetConfig+0xdc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC1_SetConfig+0x64>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a20      	ldr	r2, [pc, #128]	; (8007b98 <TIM_OC1_SetConfig+0xe0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d10c      	bne.n	8007b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0308 	bic.w	r3, r3, #8
 8007b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 0304 	bic.w	r3, r3, #4
 8007b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <TIM_OC1_SetConfig+0xdc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_OC1_SetConfig+0x8e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <TIM_OC1_SetConfig+0xe0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d111      	bne.n	8007b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	621a      	str	r2, [r3, #32]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	fffeff8f 	.word	0xfffeff8f
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f023 0210 	bic.w	r2, r3, #16
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4b2e      	ldr	r3, [pc, #184]	; (8007c80 <TIM_OC2_SetConfig+0xe4>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0320 	bic.w	r3, r3, #32
 8007be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a23      	ldr	r2, [pc, #140]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC2_SetConfig+0x68>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <TIM_OC2_SetConfig+0xec>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10d      	bne.n	8007c20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <TIM_OC2_SetConfig+0x94>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_OC2_SetConfig+0xec>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d113      	bne.n	8007c58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	feff8fff 	.word	0xfeff8fff
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40010400 	.word	0x40010400

08007c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <TIM_OC3_SetConfig+0xe0>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <TIM_OC3_SetConfig+0xe4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d003      	beq.n	8007cf2 <TIM_OC3_SetConfig+0x66>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <TIM_OC3_SetConfig+0xe8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d10d      	bne.n	8007d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <TIM_OC3_SetConfig+0xe4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d003      	beq.n	8007d1e <TIM_OC3_SetConfig+0x92>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <TIM_OC3_SetConfig+0xe8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d113      	bne.n	8007d46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	011b      	lsls	r3, r3, #4
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	621a      	str	r2, [r3, #32]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	fffeff8f 	.word	0xfffeff8f
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40010400 	.word	0x40010400

08007d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <TIM_OC4_SetConfig+0xa4>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	031b      	lsls	r3, r3, #12
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <TIM_OC4_SetConfig+0xa8>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d003      	beq.n	8007de0 <TIM_OC4_SetConfig+0x68>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <TIM_OC4_SetConfig+0xac>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d109      	bne.n	8007df4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	019b      	lsls	r3, r3, #6
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	feff8fff 	.word	0xfeff8fff
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40010400 	.word	0x40010400

08007e28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b1b      	ldr	r3, [pc, #108]	; (8007ec0 <TIM_OC5_SetConfig+0x98>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <TIM_OC5_SetConfig+0x9c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC5_SetConfig+0x5e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <TIM_OC5_SetConfig+0xa0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d109      	bne.n	8007e9a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	fffeff8f 	.word	0xfffeff8f
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400

08007ecc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <TIM_OC6_SetConfig+0x9c>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	051b      	lsls	r3, r3, #20
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <TIM_OC6_SetConfig+0xa0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC6_SetConfig+0x60>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <TIM_OC6_SetConfig+0xa4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d109      	bne.n	8007f40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	029b      	lsls	r3, r3, #10
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	feff8fff 	.word	0xfeff8fff
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40010400 	.word	0x40010400

08007f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f023 0201 	bic.w	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 030a 	bic.w	r3, r3, #10
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b087      	sub	sp, #28
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f023 0210 	bic.w	r2, r3, #16
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	031b      	lsls	r3, r3, #12
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800800e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	f043 0307 	orr.w	r3, r3, #7
 8008054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	609a      	str	r2, [r3, #8]
}
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	431a      	orrs	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4313      	orrs	r3, r2
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080bc:	2302      	movs	r3, #2
 80080be:	e045      	b.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1c      	ldr	r2, [pc, #112]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d004      	beq.n	80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1b      	ldr	r2, [pc, #108]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d108      	bne.n	8008106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800811e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	4313      	orrs	r3, r2
 8008128:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	40010000 	.word	0x40010000
 800815c:	40010400 	.word	0x40010400

08008160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e040      	b.n	8008230 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f005 f89a 	bl	800d2f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2224      	movs	r2, #36	; 0x24
 80081c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0201 	bic.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f82c 	bl	8008238 <UART_SetConfig>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e022      	b.n	8008230 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fac4 	bl	8008780 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008216:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fb4b 	bl	80088c4 <UART_CheckIdleState>
 800822e:	4603      	mov	r3, r0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008240:	2300      	movs	r3, #0
 8008242:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	4313      	orrs	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4bb1      	ldr	r3, [pc, #708]	; (800852c <UART_SetConfig+0x2f4>)
 8008268:	4013      	ands	r3, r2
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	6939      	ldr	r1, [r7, #16]
 8008270:	430b      	orrs	r3, r1
 8008272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a9f      	ldr	r2, [pc, #636]	; (8008530 <UART_SetConfig+0x2f8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d121      	bne.n	80082fc <UART_SetConfig+0xc4>
 80082b8:	4b9e      	ldr	r3, [pc, #632]	; (8008534 <UART_SetConfig+0x2fc>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d816      	bhi.n	80082f4 <UART_SetConfig+0xbc>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0x94>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082e3 	.word	0x080082e3
 80082d8:	080082ef 	.word	0x080082ef
 80082dc:	2301      	movs	r3, #1
 80082de:	77fb      	strb	r3, [r7, #31]
 80082e0:	e151      	b.n	8008586 <UART_SetConfig+0x34e>
 80082e2:	2302      	movs	r3, #2
 80082e4:	77fb      	strb	r3, [r7, #31]
 80082e6:	e14e      	b.n	8008586 <UART_SetConfig+0x34e>
 80082e8:	2304      	movs	r3, #4
 80082ea:	77fb      	strb	r3, [r7, #31]
 80082ec:	e14b      	b.n	8008586 <UART_SetConfig+0x34e>
 80082ee:	2308      	movs	r3, #8
 80082f0:	77fb      	strb	r3, [r7, #31]
 80082f2:	e148      	b.n	8008586 <UART_SetConfig+0x34e>
 80082f4:	2310      	movs	r3, #16
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	bf00      	nop
 80082fa:	e144      	b.n	8008586 <UART_SetConfig+0x34e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a8d      	ldr	r2, [pc, #564]	; (8008538 <UART_SetConfig+0x300>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d134      	bne.n	8008370 <UART_SetConfig+0x138>
 8008306:	4b8b      	ldr	r3, [pc, #556]	; (8008534 <UART_SetConfig+0x2fc>)
 8008308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830c:	f003 030c 	and.w	r3, r3, #12
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d829      	bhi.n	8008368 <UART_SetConfig+0x130>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0xe4>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008351 	.word	0x08008351
 8008320:	08008369 	.word	0x08008369
 8008324:	08008369 	.word	0x08008369
 8008328:	08008369 	.word	0x08008369
 800832c:	0800835d 	.word	0x0800835d
 8008330:	08008369 	.word	0x08008369
 8008334:	08008369 	.word	0x08008369
 8008338:	08008369 	.word	0x08008369
 800833c:	08008357 	.word	0x08008357
 8008340:	08008369 	.word	0x08008369
 8008344:	08008369 	.word	0x08008369
 8008348:	08008369 	.word	0x08008369
 800834c:	08008363 	.word	0x08008363
 8008350:	2300      	movs	r3, #0
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e117      	b.n	8008586 <UART_SetConfig+0x34e>
 8008356:	2302      	movs	r3, #2
 8008358:	77fb      	strb	r3, [r7, #31]
 800835a:	e114      	b.n	8008586 <UART_SetConfig+0x34e>
 800835c:	2304      	movs	r3, #4
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e111      	b.n	8008586 <UART_SetConfig+0x34e>
 8008362:	2308      	movs	r3, #8
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e10e      	b.n	8008586 <UART_SetConfig+0x34e>
 8008368:	2310      	movs	r3, #16
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	bf00      	nop
 800836e:	e10a      	b.n	8008586 <UART_SetConfig+0x34e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a71      	ldr	r2, [pc, #452]	; (800853c <UART_SetConfig+0x304>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d120      	bne.n	80083bc <UART_SetConfig+0x184>
 800837a:	4b6e      	ldr	r3, [pc, #440]	; (8008534 <UART_SetConfig+0x2fc>)
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008384:	2b10      	cmp	r3, #16
 8008386:	d00f      	beq.n	80083a8 <UART_SetConfig+0x170>
 8008388:	2b10      	cmp	r3, #16
 800838a:	d802      	bhi.n	8008392 <UART_SetConfig+0x15a>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <UART_SetConfig+0x164>
 8008390:	e010      	b.n	80083b4 <UART_SetConfig+0x17c>
 8008392:	2b20      	cmp	r3, #32
 8008394:	d005      	beq.n	80083a2 <UART_SetConfig+0x16a>
 8008396:	2b30      	cmp	r3, #48	; 0x30
 8008398:	d009      	beq.n	80083ae <UART_SetConfig+0x176>
 800839a:	e00b      	b.n	80083b4 <UART_SetConfig+0x17c>
 800839c:	2300      	movs	r3, #0
 800839e:	77fb      	strb	r3, [r7, #31]
 80083a0:	e0f1      	b.n	8008586 <UART_SetConfig+0x34e>
 80083a2:	2302      	movs	r3, #2
 80083a4:	77fb      	strb	r3, [r7, #31]
 80083a6:	e0ee      	b.n	8008586 <UART_SetConfig+0x34e>
 80083a8:	2304      	movs	r3, #4
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e0eb      	b.n	8008586 <UART_SetConfig+0x34e>
 80083ae:	2308      	movs	r3, #8
 80083b0:	77fb      	strb	r3, [r7, #31]
 80083b2:	e0e8      	b.n	8008586 <UART_SetConfig+0x34e>
 80083b4:	2310      	movs	r3, #16
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	bf00      	nop
 80083ba:	e0e4      	b.n	8008586 <UART_SetConfig+0x34e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a5f      	ldr	r2, [pc, #380]	; (8008540 <UART_SetConfig+0x308>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d120      	bne.n	8008408 <UART_SetConfig+0x1d0>
 80083c6:	4b5b      	ldr	r3, [pc, #364]	; (8008534 <UART_SetConfig+0x2fc>)
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083d0:	2b40      	cmp	r3, #64	; 0x40
 80083d2:	d00f      	beq.n	80083f4 <UART_SetConfig+0x1bc>
 80083d4:	2b40      	cmp	r3, #64	; 0x40
 80083d6:	d802      	bhi.n	80083de <UART_SetConfig+0x1a6>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <UART_SetConfig+0x1b0>
 80083dc:	e010      	b.n	8008400 <UART_SetConfig+0x1c8>
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d005      	beq.n	80083ee <UART_SetConfig+0x1b6>
 80083e2:	2bc0      	cmp	r3, #192	; 0xc0
 80083e4:	d009      	beq.n	80083fa <UART_SetConfig+0x1c2>
 80083e6:	e00b      	b.n	8008400 <UART_SetConfig+0x1c8>
 80083e8:	2300      	movs	r3, #0
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e0cb      	b.n	8008586 <UART_SetConfig+0x34e>
 80083ee:	2302      	movs	r3, #2
 80083f0:	77fb      	strb	r3, [r7, #31]
 80083f2:	e0c8      	b.n	8008586 <UART_SetConfig+0x34e>
 80083f4:	2304      	movs	r3, #4
 80083f6:	77fb      	strb	r3, [r7, #31]
 80083f8:	e0c5      	b.n	8008586 <UART_SetConfig+0x34e>
 80083fa:	2308      	movs	r3, #8
 80083fc:	77fb      	strb	r3, [r7, #31]
 80083fe:	e0c2      	b.n	8008586 <UART_SetConfig+0x34e>
 8008400:	2310      	movs	r3, #16
 8008402:	77fb      	strb	r3, [r7, #31]
 8008404:	bf00      	nop
 8008406:	e0be      	b.n	8008586 <UART_SetConfig+0x34e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a4d      	ldr	r2, [pc, #308]	; (8008544 <UART_SetConfig+0x30c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d124      	bne.n	800845c <UART_SetConfig+0x224>
 8008412:	4b48      	ldr	r3, [pc, #288]	; (8008534 <UART_SetConfig+0x2fc>)
 8008414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800841c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008420:	d012      	beq.n	8008448 <UART_SetConfig+0x210>
 8008422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008426:	d802      	bhi.n	800842e <UART_SetConfig+0x1f6>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <UART_SetConfig+0x204>
 800842c:	e012      	b.n	8008454 <UART_SetConfig+0x21c>
 800842e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008432:	d006      	beq.n	8008442 <UART_SetConfig+0x20a>
 8008434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008438:	d009      	beq.n	800844e <UART_SetConfig+0x216>
 800843a:	e00b      	b.n	8008454 <UART_SetConfig+0x21c>
 800843c:	2300      	movs	r3, #0
 800843e:	77fb      	strb	r3, [r7, #31]
 8008440:	e0a1      	b.n	8008586 <UART_SetConfig+0x34e>
 8008442:	2302      	movs	r3, #2
 8008444:	77fb      	strb	r3, [r7, #31]
 8008446:	e09e      	b.n	8008586 <UART_SetConfig+0x34e>
 8008448:	2304      	movs	r3, #4
 800844a:	77fb      	strb	r3, [r7, #31]
 800844c:	e09b      	b.n	8008586 <UART_SetConfig+0x34e>
 800844e:	2308      	movs	r3, #8
 8008450:	77fb      	strb	r3, [r7, #31]
 8008452:	e098      	b.n	8008586 <UART_SetConfig+0x34e>
 8008454:	2310      	movs	r3, #16
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	bf00      	nop
 800845a:	e094      	b.n	8008586 <UART_SetConfig+0x34e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a39      	ldr	r2, [pc, #228]	; (8008548 <UART_SetConfig+0x310>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d124      	bne.n	80084b0 <UART_SetConfig+0x278>
 8008466:	4b33      	ldr	r3, [pc, #204]	; (8008534 <UART_SetConfig+0x2fc>)
 8008468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008474:	d012      	beq.n	800849c <UART_SetConfig+0x264>
 8008476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847a:	d802      	bhi.n	8008482 <UART_SetConfig+0x24a>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d007      	beq.n	8008490 <UART_SetConfig+0x258>
 8008480:	e012      	b.n	80084a8 <UART_SetConfig+0x270>
 8008482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008486:	d006      	beq.n	8008496 <UART_SetConfig+0x25e>
 8008488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848c:	d009      	beq.n	80084a2 <UART_SetConfig+0x26a>
 800848e:	e00b      	b.n	80084a8 <UART_SetConfig+0x270>
 8008490:	2301      	movs	r3, #1
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e077      	b.n	8008586 <UART_SetConfig+0x34e>
 8008496:	2302      	movs	r3, #2
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e074      	b.n	8008586 <UART_SetConfig+0x34e>
 800849c:	2304      	movs	r3, #4
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e071      	b.n	8008586 <UART_SetConfig+0x34e>
 80084a2:	2308      	movs	r3, #8
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	e06e      	b.n	8008586 <UART_SetConfig+0x34e>
 80084a8:	2310      	movs	r3, #16
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	bf00      	nop
 80084ae:	e06a      	b.n	8008586 <UART_SetConfig+0x34e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a25      	ldr	r2, [pc, #148]	; (800854c <UART_SetConfig+0x314>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d124      	bne.n	8008504 <UART_SetConfig+0x2cc>
 80084ba:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <UART_SetConfig+0x2fc>)
 80084bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c8:	d012      	beq.n	80084f0 <UART_SetConfig+0x2b8>
 80084ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ce:	d802      	bhi.n	80084d6 <UART_SetConfig+0x29e>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <UART_SetConfig+0x2ac>
 80084d4:	e012      	b.n	80084fc <UART_SetConfig+0x2c4>
 80084d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084da:	d006      	beq.n	80084ea <UART_SetConfig+0x2b2>
 80084dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084e0:	d009      	beq.n	80084f6 <UART_SetConfig+0x2be>
 80084e2:	e00b      	b.n	80084fc <UART_SetConfig+0x2c4>
 80084e4:	2300      	movs	r3, #0
 80084e6:	77fb      	strb	r3, [r7, #31]
 80084e8:	e04d      	b.n	8008586 <UART_SetConfig+0x34e>
 80084ea:	2302      	movs	r3, #2
 80084ec:	77fb      	strb	r3, [r7, #31]
 80084ee:	e04a      	b.n	8008586 <UART_SetConfig+0x34e>
 80084f0:	2304      	movs	r3, #4
 80084f2:	77fb      	strb	r3, [r7, #31]
 80084f4:	e047      	b.n	8008586 <UART_SetConfig+0x34e>
 80084f6:	2308      	movs	r3, #8
 80084f8:	77fb      	strb	r3, [r7, #31]
 80084fa:	e044      	b.n	8008586 <UART_SetConfig+0x34e>
 80084fc:	2310      	movs	r3, #16
 80084fe:	77fb      	strb	r3, [r7, #31]
 8008500:	bf00      	nop
 8008502:	e040      	b.n	8008586 <UART_SetConfig+0x34e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a11      	ldr	r2, [pc, #68]	; (8008550 <UART_SetConfig+0x318>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d139      	bne.n	8008582 <UART_SetConfig+0x34a>
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <UART_SetConfig+0x2fc>)
 8008510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800851c:	d027      	beq.n	800856e <UART_SetConfig+0x336>
 800851e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008522:	d817      	bhi.n	8008554 <UART_SetConfig+0x31c>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01c      	beq.n	8008562 <UART_SetConfig+0x32a>
 8008528:	e027      	b.n	800857a <UART_SetConfig+0x342>
 800852a:	bf00      	nop
 800852c:	efff69f3 	.word	0xefff69f3
 8008530:	40011000 	.word	0x40011000
 8008534:	40023800 	.word	0x40023800
 8008538:	40004400 	.word	0x40004400
 800853c:	40004800 	.word	0x40004800
 8008540:	40004c00 	.word	0x40004c00
 8008544:	40005000 	.word	0x40005000
 8008548:	40011400 	.word	0x40011400
 800854c:	40007800 	.word	0x40007800
 8008550:	40007c00 	.word	0x40007c00
 8008554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008558:	d006      	beq.n	8008568 <UART_SetConfig+0x330>
 800855a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800855e:	d009      	beq.n	8008574 <UART_SetConfig+0x33c>
 8008560:	e00b      	b.n	800857a <UART_SetConfig+0x342>
 8008562:	2300      	movs	r3, #0
 8008564:	77fb      	strb	r3, [r7, #31]
 8008566:	e00e      	b.n	8008586 <UART_SetConfig+0x34e>
 8008568:	2302      	movs	r3, #2
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	e00b      	b.n	8008586 <UART_SetConfig+0x34e>
 800856e:	2304      	movs	r3, #4
 8008570:	77fb      	strb	r3, [r7, #31]
 8008572:	e008      	b.n	8008586 <UART_SetConfig+0x34e>
 8008574:	2308      	movs	r3, #8
 8008576:	77fb      	strb	r3, [r7, #31]
 8008578:	e005      	b.n	8008586 <UART_SetConfig+0x34e>
 800857a:	2310      	movs	r3, #16
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	bf00      	nop
 8008580:	e001      	b.n	8008586 <UART_SetConfig+0x34e>
 8008582:	2310      	movs	r3, #16
 8008584:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858e:	d17c      	bne.n	800868a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8008590:	7ffb      	ldrb	r3, [r7, #31]
 8008592:	2b08      	cmp	r3, #8
 8008594:	d859      	bhi.n	800864a <UART_SetConfig+0x412>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <UART_SetConfig+0x364>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085df 	.word	0x080085df
 80085a4:	080085fd 	.word	0x080085fd
 80085a8:	0800864b 	.word	0x0800864b
 80085ac:	08008615 	.word	0x08008615
 80085b0:	0800864b 	.word	0x0800864b
 80085b4:	0800864b 	.word	0x0800864b
 80085b8:	0800864b 	.word	0x0800864b
 80085bc:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80085c0:	f7fd fa30 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80085c4:	4603      	mov	r3, r0
 80085c6:	005a      	lsls	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	441a      	add	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d8:	b29b      	uxth	r3, r3
 80085da:	61bb      	str	r3, [r7, #24]
        break;
 80085dc:	e038      	b.n	8008650 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80085de:	f7fd fa35 	bl	8005a4c <HAL_RCC_GetPCLK2Freq>
 80085e2:	4603      	mov	r3, r0
 80085e4:	005a      	lsls	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	441a      	add	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	61bb      	str	r3, [r7, #24]
        break;
 80085fa:	e029      	b.n	8008650 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	085a      	lsrs	r2, r3, #1
 8008602:	4b5d      	ldr	r3, [pc, #372]	; (8008778 <UART_SetConfig+0x540>)
 8008604:	4413      	add	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6852      	ldr	r2, [r2, #4]
 800860a:	fbb3 f3f2 	udiv	r3, r3, r2
 800860e:	b29b      	uxth	r3, r3
 8008610:	61bb      	str	r3, [r7, #24]
        break;
 8008612:	e01d      	b.n	8008650 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008614:	f7fd f948 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8008618:	4603      	mov	r3, r0
 800861a:	005a      	lsls	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	441a      	add	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	b29b      	uxth	r3, r3
 800862e:	61bb      	str	r3, [r7, #24]
        break;
 8008630:	e00e      	b.n	8008650 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	fbb2 f3f3 	udiv	r3, r2, r3
 8008644:	b29b      	uxth	r3, r3
 8008646:	61bb      	str	r3, [r7, #24]
        break;
 8008648:	e002      	b.n	8008650 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
        break;
 800864e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b0f      	cmp	r3, #15
 8008654:	d916      	bls.n	8008684 <UART_SetConfig+0x44c>
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800865c:	d212      	bcs.n	8008684 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f023 030f 	bic.w	r3, r3, #15
 8008666:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	b29a      	uxth	r2, r3
 8008674:	89fb      	ldrh	r3, [r7, #14]
 8008676:	4313      	orrs	r3, r2
 8008678:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	89fa      	ldrh	r2, [r7, #14]
 8008680:	60da      	str	r2, [r3, #12]
 8008682:	e06e      	b.n	8008762 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	75fb      	strb	r3, [r7, #23]
 8008688:	e06b      	b.n	8008762 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800868a:	7ffb      	ldrb	r3, [r7, #31]
 800868c:	2b08      	cmp	r3, #8
 800868e:	d857      	bhi.n	8008740 <UART_SetConfig+0x508>
 8008690:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <UART_SetConfig+0x460>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086d9 	.word	0x080086d9
 80086a0:	080086f5 	.word	0x080086f5
 80086a4:	08008741 	.word	0x08008741
 80086a8:	0800870d 	.word	0x0800870d
 80086ac:	08008741 	.word	0x08008741
 80086b0:	08008741 	.word	0x08008741
 80086b4:	08008741 	.word	0x08008741
 80086b8:	08008729 	.word	0x08008729
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80086bc:	f7fd f9b2 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	441a      	add	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	61bb      	str	r3, [r7, #24]
        break;
 80086d6:	e036      	b.n	8008746 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80086d8:	f7fd f9b8 	bl	8005a4c <HAL_RCC_GetPCLK2Freq>
 80086dc:	4602      	mov	r2, r0
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	61bb      	str	r3, [r7, #24]
        break;
 80086f2:	e028      	b.n	8008746 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	085a      	lsrs	r2, r3, #1
 80086fa:	4b20      	ldr	r3, [pc, #128]	; (800877c <UART_SetConfig+0x544>)
 80086fc:	4413      	add	r3, r2
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6852      	ldr	r2, [r2, #4]
 8008702:	fbb3 f3f2 	udiv	r3, r3, r2
 8008706:	b29b      	uxth	r3, r3
 8008708:	61bb      	str	r3, [r7, #24]
        break;
 800870a:	e01c      	b.n	8008746 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800870c:	f7fd f8cc 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8008710:	4602      	mov	r2, r0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	441a      	add	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008722:	b29b      	uxth	r3, r3
 8008724:	61bb      	str	r3, [r7, #24]
        break;
 8008726:	e00e      	b.n	8008746 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	085b      	lsrs	r3, r3, #1
 800872e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	fbb2 f3f3 	udiv	r3, r2, r3
 800873a:	b29b      	uxth	r3, r3
 800873c:	61bb      	str	r3, [r7, #24]
        break;
 800873e:	e002      	b.n	8008746 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	75fb      	strb	r3, [r7, #23]
        break;
 8008744:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b0f      	cmp	r3, #15
 800874a:	d908      	bls.n	800875e <UART_SetConfig+0x526>
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008752:	d204      	bcs.n	800875e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	60da      	str	r2, [r3, #12]
 800875c:	e001      	b.n	8008762 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	01e84800 	.word	0x01e84800
 800877c:	00f42400 	.word	0x00f42400

08008780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00a      	beq.n	80087aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	430a      	orrs	r2, r1
 80087ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	430a      	orrs	r2, r1
 800880e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01a      	beq.n	8008896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800887e:	d10a      	bne.n	8008896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80088d2:	f7f7 fe57 	bl	8000584 <HAL_GetTick>
 80088d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d10e      	bne.n	8008904 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f814 	bl	8008922 <UART_WaitOnFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e00a      	b.n	800891a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2220      	movs	r2, #32
 8008908:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	60f8      	str	r0, [r7, #12]
 800892a:	60b9      	str	r1, [r7, #8]
 800892c:	603b      	str	r3, [r7, #0]
 800892e:	4613      	mov	r3, r2
 8008930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008932:	e02a      	b.n	800898a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800893a:	d026      	beq.n	800898a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893c:	f7f7 fe22 	bl	8000584 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	429a      	cmp	r2, r3
 800894a:	d302      	bcc.n	8008952 <UART_WaitOnFlagUntilTimeout+0x30>
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d11b      	bne.n	800898a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008960:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0201 	bic.w	r2, r2, #1
 8008970:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2220      	movs	r2, #32
 8008976:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e00f      	b.n	80089aa <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	4013      	ands	r3, r2
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	429a      	cmp	r2, r3
 8008998:	bf0c      	ite	eq
 800899a:	2301      	moveq	r3, #1
 800899c:	2300      	movne	r3, #0
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d0c5      	beq.n	8008934 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e016      	b.n	80089f2 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f004 fe3f 	bl	800d648 <HAL_WWDG_MspInit>
#endif

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089d6:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	ea42 0103 	orr.w	r1, r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d027      	beq.n	8008a66 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4b2f      	ldr	r3, [pc, #188]	; (8008adc <FMC_SDRAM_Init+0xe0>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a2c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008a32:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008a38:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008a3e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008a44:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008a4a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008a50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008a56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	e032      	b.n	8008acc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a72:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a7c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008a82:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <FMC_SDRAM_Init+0xe0>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008aa0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008aa6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008aac:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008ab2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008ab8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	ffff8000 	.word	0xffff8000

08008ae0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d02e      	beq.n	8008b58 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b06:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b16:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008b20:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008b2a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008b34:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008b3e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	609a      	str	r2, [r3, #8]
 8008b56:	e039      	b.n	8008bcc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	4b1e      	ldr	r3, [pc, #120]	; (8008bdc <FMC_SDRAM_Timing_Init+0xfc>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008b76:	4313      	orrs	r3, r2
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b8a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008b9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008ba4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008bae:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	ff0f0fff 	.word	0xff0f0fff

08008be0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008be0:	b084      	sub	sp, #16
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	f107 001c 	add.w	r0, r7, #28
 8008bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008bf6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bfa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008bfe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008c02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008c06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008c0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <SDMMC_Init+0x54>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	b004      	add	sp, #16
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	ffff8100 	.word	0xffff8100

08008c38 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2203      	movs	r2, #3
 8008c44:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0303 	and.w	r3, r3, #3
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008c94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008c9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	4b06      	ldr	r3, [pc, #24]	; (8008cc0 <SDMMC_SendCommand+0x50>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	fffff000 	.word	0xfffff000

08008cc4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	b2db      	uxtb	r3, r3
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3314      	adds	r3, #20
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
}  
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b08a      	sub	sp, #40	; 0x28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d1c:	2307      	movs	r3, #7
 8008d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d20:	2340      	movs	r3, #64	; 0x40
 8008d22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d2c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d2e:	f107 0310 	add.w	r3, r7, #16
 8008d32:	4619      	mov	r1, r3
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff ff9b 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3e:	2107      	movs	r1, #7
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f91d 	bl	8008f80 <SDMMC_GetCmdResp1>
 8008d46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3728      	adds	r7, #40	; 0x28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b088      	sub	sp, #32
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008d66:	2300      	movs	r3, #0
 8008d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d72:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d74:	f107 0308 	add.w	r3, r7, #8
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ff78 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f8d3 	bl	8008f2c <SDMMC_GetCmdError>
 8008d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d88:	69fb      	ldr	r3, [r7, #28]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008da2:	2302      	movs	r3, #2
 8008da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008da6:	23c0      	movs	r3, #192	; 0xc0
 8008da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008db2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008db4:	f107 0308 	add.w	r3, r7, #8
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff ff58 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9c3 	bl	800914c <SDMMC_GetCmdResp2>
 8008dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008de4:	2309      	movs	r3, #9
 8008de6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008de8:	23c0      	movs	r3, #192	; 0xc0
 8008dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df6:	f107 0308 	add.w	r3, r7, #8
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff ff37 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f9a2 	bl	800914c <SDMMC_GetCmdResp2>
 8008e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e26:	2303      	movs	r3, #3
 8008e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e2a:	2340      	movs	r3, #64	; 0x40
 8008e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e36:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ff16 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e44:	683a      	ldr	r2, [r7, #0]
 8008e46:	2103      	movs	r1, #3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9f3 	bl	8009234 <SDMMC_GetCmdResp6>
 8008e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e50:	69fb      	ldr	r3, [r7, #28]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3720      	adds	r7, #32
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b088      	sub	sp, #32
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e6c:	230d      	movs	r3, #13
 8008e6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e70:	2340      	movs	r3, #64	; 0x40
 8008e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e74:	2300      	movs	r3, #0
 8008e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e7e:	f107 0308 	add.w	r3, r7, #8
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff fef3 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e8e:	210d      	movs	r1, #13
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f875 	bl	8008f80 <SDMMC_GetCmdResp1>
 8008e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e98:	69fb      	ldr	r3, [r7, #28]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <SDMMC_CmdOpCondition>:
  * @param  SDIOx Pointer to SDIO register base 
  * @parame Argument Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b088      	sub	sp, #32
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = Argument;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ec4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff fecf 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f97a 	bl	80091cc <SDMMC_GetCmdResp3>
 8008ed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eda:	69fb      	ldr	r3, [r7, #28]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <SDMMC_CmdSwitch>:
  * @param  SDIOx Pointer to SDIO register base 
  * @parame Argument Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = Argument;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8008ef6:	2306      	movs	r3, #6
 8008ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008efa:	2340      	movs	r3, #64	; 0x40
 8008efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008efe:	2300      	movs	r3, #0
 8008f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f06:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f08:	f107 0308 	add.w	r3, r7, #8
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff feae 	bl	8008c70 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8008f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f18:	2106      	movs	r1, #6
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f830 	bl	8008f80 <SDMMC_GetCmdResp1>
 8008f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f22:	69fb      	ldr	r3, [r7, #28]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3720      	adds	r7, #32
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008f2c:	b490      	push	{r4, r7}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008f34:	4b10      	ldr	r3, [pc, #64]	; (8008f78 <SDMMC_GetCmdError+0x4c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a10      	ldr	r2, [pc, #64]	; (8008f7c <SDMMC_GetCmdError+0x50>)
 8008f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3e:	0a5b      	lsrs	r3, r3, #9
 8008f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008f48:	4623      	mov	r3, r4
 8008f4a:	1e5c      	subs	r4, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f54:	e00a      	b.n	8008f6c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0f2      	beq.n	8008f48 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc90      	pop	{r4, r7}
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000008 	.word	0x20000008
 8008f7c:	10624dd3 	.word	0x10624dd3

08008f80 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f80:	b590      	push	{r4, r7, lr}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8008f8e:	4b6c      	ldr	r3, [pc, #432]	; (8009140 <SDMMC_GetCmdResp1+0x1c0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a6c      	ldr	r2, [pc, #432]	; (8009144 <SDMMC_GetCmdResp1+0x1c4>)
 8008f94:	fba2 2303 	umull	r2, r3, r2, r3
 8008f98:	0a5b      	lsrs	r3, r3, #9
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008fa0:	4623      	mov	r3, r4
 8008fa2:	1e5c      	subs	r4, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fac:	e0c3      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0f2      	beq.n	8008fa0 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2204      	movs	r2, #4
 8008fca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fcc:	2304      	movs	r3, #4
 8008fce:	e0b2      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e0a7      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff fe6c 	bl	8008cc4 <SDMMC_GetCommandResponse>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d001      	beq.n	8008ffa <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e09d      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009000:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009002:	2100      	movs	r1, #0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7ff fe6a 	bl	8008cde <SDMMC_GetResponse>
 800900a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4b4e      	ldr	r3, [pc, #312]	; (8009148 <SDMMC_GetCmdResp1+0x1c8>)
 8009010:	4013      	ands	r3, r2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009016:	2300      	movs	r3, #0
 8009018:	e08d      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	da02      	bge.n	8009026 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009024:	e087      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	e080      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800903e:	2380      	movs	r3, #128	; 0x80
 8009040:	e079      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800904c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009050:	e071      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800905c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009060:	e069      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800906c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009070:	e061      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800907c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009080:	e059      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800908c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009090:	e051      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800909c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090a0:	e049      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090b0:	e041      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d002      	beq.n	80090c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80090bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c0:	e039      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d002      	beq.n	80090d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090d0:	e031      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090e0:	e029      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090f0:	e021      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009100:	e019      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800910c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009110:	e011      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800911c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009120:	e009      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f003 0308 	and.w	r3, r3, #8
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800912c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009130:	e001      	b.n	8009136 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009136:	4618      	mov	r0, r3
 8009138:	371c      	adds	r7, #28
 800913a:	46bd      	mov	sp, r7
 800913c:	bd90      	pop	{r4, r7, pc}
 800913e:	bf00      	nop
 8009140:	20000008 	.word	0x20000008
 8009144:	10624dd3 	.word	0x10624dd3
 8009148:	fdffe008 	.word	0xfdffe008

0800914c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800914c:	b490      	push	{r4, r7}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009154:	4b1b      	ldr	r3, [pc, #108]	; (80091c4 <SDMMC_GetCmdResp2+0x78>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1b      	ldr	r2, [pc, #108]	; (80091c8 <SDMMC_GetCmdResp2+0x7c>)
 800915a:	fba2 2303 	umull	r2, r3, r2, r3
 800915e:	0a5b      	lsrs	r3, r3, #9
 8009160:	f241 3288 	movw	r2, #5000	; 0x1388
 8009164:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009168:	4623      	mov	r3, r4
 800916a:	1e5c      	subs	r4, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009174:	e020      	b.n	80091b8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0f2      	beq.n	8009168 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2204      	movs	r2, #4
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009194:	2304      	movs	r3, #4
 8009196:	e00f      	b.n	80091b8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e004      	b.n	80091b8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80091b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc90      	pop	{r4, r7}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000008 	.word	0x20000008
 80091c8:	10624dd3 	.word	0x10624dd3

080091cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80091cc:	b490      	push	{r4, r7}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <SDMMC_GetCmdResp3+0x60>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a15      	ldr	r2, [pc, #84]	; (8009230 <SDMMC_GetCmdResp3+0x64>)
 80091da:	fba2 2303 	umull	r2, r3, r2, r3
 80091de:	0a5b      	lsrs	r3, r3, #9
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80091e8:	4623      	mov	r3, r4
 80091ea:	1e5c      	subs	r4, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f4:	e015      	b.n	8009222 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0f2      	beq.n	80091e8 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2204      	movs	r2, #4
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009214:	2304      	movs	r3, #4
 8009216:	e004      	b.n	8009222 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800921e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bc90      	pop	{r4, r7}
 800922a:	4770      	bx	lr
 800922c:	20000008 	.word	0x20000008
 8009230:	10624dd3 	.word	0x10624dd3

08009234 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009234:	b590      	push	{r4, r7, lr}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	460b      	mov	r3, r1
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <SDMMC_GetCmdResp6+0xd4>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a31      	ldr	r2, [pc, #196]	; (800930c <SDMMC_GetCmdResp6+0xd8>)
 8009248:	fba2 2303 	umull	r2, r3, r2, r3
 800924c:	0a5b      	lsrs	r3, r3, #9
 800924e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009252:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009256:	4623      	mov	r3, r4
 8009258:	1e5c      	subs	r4, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800925e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009262:	e04c      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0f2      	beq.n	8009256 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2204      	movs	r2, #4
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009282:	2304      	movs	r3, #4
 8009284:	e03b      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009298:	2301      	movs	r3, #1
 800929a:	e030      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff fd11 	bl	8008cc4 <SDMMC_GetCommandResponse>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d001      	beq.n	80092b0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e026      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092b8:	2100      	movs	r1, #0
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f7ff fd0f 	bl	8008cde <SDMMC_GetResponse>
 80092c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d106      	bne.n	80092da <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	0c1b      	lsrs	r3, r3, #16
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	e011      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092e8:	e009      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f8:	e001      	b.n	80092fe <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80092fe:	4618      	mov	r0, r3
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	bd90      	pop	{r4, r7, pc}
 8009306:	bf00      	nop
 8009308:	20000008 	.word	0x20000008
 800930c:	10624dd3 	.word	0x10624dd3

08009310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009310:	b084      	sub	sp, #16
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	f107 001c 	add.w	r0, r7, #28
 800931e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	2b01      	cmp	r3, #1
 8009326:	d120      	bne.n	800936a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68da      	ldr	r2, [r3, #12]
 8009338:	4b20      	ldr	r3, [pc, #128]	; (80093bc <USB_CoreInit+0xac>)
 800933a:	4013      	ands	r3, r2
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800934c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934e:	2b01      	cmp	r3, #1
 8009350:	d105      	bne.n	800935e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fcba 	bl	8009cd8 <USB_CoreReset>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	e010      	b.n	800938c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fcae 	bl	8009cd8 <USB_CoreReset>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	2b01      	cmp	r3, #1
 8009390:	d10b      	bne.n	80093aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f043 0206 	orr.w	r2, r3, #6
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f043 0220 	orr.w	r2, r3, #32
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093b6:	b004      	add	sp, #16
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	ffbdffbf 	.word	0xffbdffbf

080093c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d165      	bne.n	80094a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4a41      	ldr	r2, [pc, #260]	; (80094dc <USB_SetTurnaroundTime+0x11c>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d906      	bls.n	80093ea <USB_SetTurnaroundTime+0x2a>
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4a40      	ldr	r2, [pc, #256]	; (80094e0 <USB_SetTurnaroundTime+0x120>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d802      	bhi.n	80093ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093e4:	230f      	movs	r3, #15
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	e062      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	4a3c      	ldr	r2, [pc, #240]	; (80094e0 <USB_SetTurnaroundTime+0x120>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d906      	bls.n	8009400 <USB_SetTurnaroundTime+0x40>
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	4a3b      	ldr	r2, [pc, #236]	; (80094e4 <USB_SetTurnaroundTime+0x124>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d802      	bhi.n	8009400 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093fa:	230e      	movs	r3, #14
 80093fc:	617b      	str	r3, [r7, #20]
 80093fe:	e057      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	4a38      	ldr	r2, [pc, #224]	; (80094e4 <USB_SetTurnaroundTime+0x124>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d906      	bls.n	8009416 <USB_SetTurnaroundTime+0x56>
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4a37      	ldr	r2, [pc, #220]	; (80094e8 <USB_SetTurnaroundTime+0x128>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d802      	bhi.n	8009416 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009410:	230d      	movs	r3, #13
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	e04c      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	4a33      	ldr	r2, [pc, #204]	; (80094e8 <USB_SetTurnaroundTime+0x128>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d906      	bls.n	800942c <USB_SetTurnaroundTime+0x6c>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4a32      	ldr	r2, [pc, #200]	; (80094ec <USB_SetTurnaroundTime+0x12c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d802      	bhi.n	800942c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009426:	230c      	movs	r3, #12
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	e041      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4a2f      	ldr	r2, [pc, #188]	; (80094ec <USB_SetTurnaroundTime+0x12c>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d906      	bls.n	8009442 <USB_SetTurnaroundTime+0x82>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4a2e      	ldr	r2, [pc, #184]	; (80094f0 <USB_SetTurnaroundTime+0x130>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d802      	bhi.n	8009442 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800943c:	230b      	movs	r3, #11
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	e036      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4a2a      	ldr	r2, [pc, #168]	; (80094f0 <USB_SetTurnaroundTime+0x130>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d906      	bls.n	8009458 <USB_SetTurnaroundTime+0x98>
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4a29      	ldr	r2, [pc, #164]	; (80094f4 <USB_SetTurnaroundTime+0x134>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d802      	bhi.n	8009458 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009452:	230a      	movs	r3, #10
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	e02b      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	4a26      	ldr	r2, [pc, #152]	; (80094f4 <USB_SetTurnaroundTime+0x134>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d906      	bls.n	800946e <USB_SetTurnaroundTime+0xae>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	4a25      	ldr	r2, [pc, #148]	; (80094f8 <USB_SetTurnaroundTime+0x138>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d802      	bhi.n	800946e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009468:	2309      	movs	r3, #9
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	e020      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	4a21      	ldr	r2, [pc, #132]	; (80094f8 <USB_SetTurnaroundTime+0x138>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d906      	bls.n	8009484 <USB_SetTurnaroundTime+0xc4>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4a20      	ldr	r2, [pc, #128]	; (80094fc <USB_SetTurnaroundTime+0x13c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d802      	bhi.n	8009484 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800947e:	2308      	movs	r3, #8
 8009480:	617b      	str	r3, [r7, #20]
 8009482:	e015      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	4a1d      	ldr	r2, [pc, #116]	; (80094fc <USB_SetTurnaroundTime+0x13c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d906      	bls.n	800949a <USB_SetTurnaroundTime+0xda>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4a1c      	ldr	r2, [pc, #112]	; (8009500 <USB_SetTurnaroundTime+0x140>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d802      	bhi.n	800949a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009494:	2307      	movs	r3, #7
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	e00a      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800949a:	2306      	movs	r3, #6
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	e007      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80094a6:	2309      	movs	r3, #9
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	e001      	b.n	80094b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80094ac:	2309      	movs	r3, #9
 80094ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	029b      	lsls	r3, r3, #10
 80094c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80094c8:	431a      	orrs	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	00d8acbf 	.word	0x00d8acbf
 80094e0:	00e4e1bf 	.word	0x00e4e1bf
 80094e4:	00f423ff 	.word	0x00f423ff
 80094e8:	0106737f 	.word	0x0106737f
 80094ec:	011a499f 	.word	0x011a499f
 80094f0:	01312cff 	.word	0x01312cff
 80094f4:	014ca43f 	.word	0x014ca43f
 80094f8:	016e35ff 	.word	0x016e35ff
 80094fc:	01a6ab1f 	.word	0x01a6ab1f
 8009500:	01e847ff 	.word	0x01e847ff

08009504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f023 0201 	bic.w	r2, r3, #1
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d106      	bne.n	8009552 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	60da      	str	r2, [r3, #12]
 8009550:	e00b      	b.n	800956a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60da      	str	r2, [r3, #12]
 8009564:	e001      	b.n	800956a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e003      	b.n	8009572 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800956a:	2032      	movs	r0, #50	; 0x32
 800956c:	f7f7 f816 	bl	800059c <HAL_Delay>

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800957c:	b084      	sub	sp, #16
 800957e:	b580      	push	{r7, lr}
 8009580:	b086      	sub	sp, #24
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800958a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009596:	2300      	movs	r3, #0
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	e009      	b.n	80095b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3340      	adds	r3, #64	; 0x40
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	2200      	movs	r2, #0
 80095a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2b0e      	cmp	r3, #14
 80095b4:	d9f2      	bls.n	800959c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d112      	bne.n	80095e2 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	e005      	b.n	80095ee <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095f4:	461a      	mov	r2, r3
 80095f6:	2300      	movs	r3, #0
 80095f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009600:	4619      	mov	r1, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009608:	461a      	mov	r2, r3
 800960a:	680b      	ldr	r3, [r1, #0]
 800960c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	2b01      	cmp	r3, #1
 8009612:	d10c      	bne.n	800962e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d104      	bne.n	8009624 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800961a:	2100      	movs	r1, #0
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 f971 	bl	8009904 <USB_SetDevSpeed>
 8009622:	e018      	b.n	8009656 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009624:	2101      	movs	r1, #1
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f96c 	bl	8009904 <USB_SetDevSpeed>
 800962c:	e013      	b.n	8009656 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	2b03      	cmp	r3, #3
 8009632:	d10c      	bne.n	800964e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f961 	bl	8009904 <USB_SetDevSpeed>
 8009642:	e008      	b.n	8009656 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009644:	2101      	movs	r1, #1
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f95c 	bl	8009904 <USB_SetDevSpeed>
 800964c:	e003      	b.n	8009656 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800964e:	2103      	movs	r1, #3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f957 	bl	8009904 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009656:	2110      	movs	r1, #16
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f90b 	bl	8009874 <USB_FlushTxFifo>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f929 	bl	80098c0 <USB_FlushRxFifo>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	461a      	mov	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968a:	461a      	mov	r2, r3
 800968c:	2300      	movs	r3, #0
 800968e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	461a      	mov	r2, r3
 8009698:	2300      	movs	r3, #0
 800969a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800969c:	2300      	movs	r3, #0
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	e043      	b.n	800972a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096b8:	d118      	bne.n	80096ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096cc:	461a      	mov	r2, r3
 80096ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	e013      	b.n	80096fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e2:	461a      	mov	r2, r3
 80096e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e008      	b.n	80096fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	461a      	mov	r2, r3
 80096fa:	2300      	movs	r3, #0
 80096fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970a:	461a      	mov	r2, r3
 800970c:	2300      	movs	r3, #0
 800970e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971c:	461a      	mov	r2, r3
 800971e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3301      	adds	r3, #1
 8009728:	613b      	str	r3, [r7, #16]
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	d3b7      	bcc.n	80096a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009732:	2300      	movs	r3, #0
 8009734:	613b      	str	r3, [r7, #16]
 8009736:	e043      	b.n	80097c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800974a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800974e:	d118      	bne.n	8009782 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10a      	bne.n	800976c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	461a      	mov	r2, r3
 8009764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	e013      	b.n	8009794 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009778:	461a      	mov	r2, r3
 800977a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e008      	b.n	8009794 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	461a      	mov	r2, r3
 8009790:	2300      	movs	r3, #0
 8009792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	461a      	mov	r2, r3
 80097a2:	2300      	movs	r3, #0
 80097a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b2:	461a      	mov	r2, r3
 80097b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3301      	adds	r3, #1
 80097be:	613b      	str	r3, [r7, #16]
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d3b7      	bcc.n	8009738 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097da:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d110      	bne.n	8009804 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e8:	461a      	mov	r2, r3
 80097ea:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <USB_DevInit+0x2e8>)
 80097ec:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fc:	4619      	mov	r1, r3
 80097fe:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <USB_DevInit+0x2ec>)
 8009800:	4313      	orrs	r3, r2
 8009802:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009810:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	f043 0210 	orr.w	r2, r3, #16
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	4b10      	ldr	r3, [pc, #64]	; (800986c <USB_DevInit+0x2f0>)
 800982a:	4313      	orrs	r3, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009832:	2b00      	cmp	r3, #0
 8009834:	d005      	beq.n	8009842 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	f043 0208 	orr.w	r2, r3, #8
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009844:	2b01      	cmp	r3, #1
 8009846:	d105      	bne.n	8009854 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	4b08      	ldr	r3, [pc, #32]	; (8009870 <USB_DevInit+0x2f4>)
 800984e:	4313      	orrs	r3, r2
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009860:	b004      	add	sp, #16
 8009862:	4770      	bx	lr
 8009864:	00800100 	.word	0x00800100
 8009868:	00010003 	.word	0x00010003
 800986c:	803c3800 	.word	0x803c3800
 8009870:	40000004 	.word	0x40000004

08009874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	019b      	lsls	r3, r3, #6
 8009886:	f043 0220 	orr.w	r2, r3, #32
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3301      	adds	r3, #1
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4a09      	ldr	r2, [pc, #36]	; (80098bc <USB_FlushTxFifo+0x48>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d901      	bls.n	80098a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e006      	b.n	80098ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d0f0      	beq.n	800988e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	00030d40 	.word	0x00030d40

080098c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2210      	movs	r2, #16
 80098d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4a09      	ldr	r2, [pc, #36]	; (8009900 <USB_FlushRxFifo+0x40>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d901      	bls.n	80098e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e006      	b.n	80098f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	d0f0      	beq.n	80098d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	00030d40 	.word	0x00030d40

08009904 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	68f9      	ldr	r1, [r7, #12]
 8009920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009924:	4313      	orrs	r3, r2
 8009926:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009936:	b480      	push	{r7}
 8009938:	b087      	sub	sp, #28
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 0306 	and.w	r3, r3, #6
 800994e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d102      	bne.n	800995c <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 8009956:	2300      	movs	r3, #0
 8009958:	75fb      	strb	r3, [r7, #23]
 800995a:	e00a      	b.n	8009972 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d002      	beq.n	8009968 <USB_GetDevSpeed+0x32>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b06      	cmp	r3, #6
 8009966:	d102      	bne.n	800996e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8009968:	2303      	movs	r3, #3
 800996a:	75fb      	strb	r3, [r7, #23]
 800996c:	e001      	b.n	8009972 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	371c      	adds	r7, #28
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009980:	b480      	push	{r7}
 8009982:	b089      	sub	sp, #36	; 0x24
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	4611      	mov	r1, r2
 800998c:	461a      	mov	r2, r3
 800998e:	460b      	mov	r3, r1
 8009990:	71fb      	strb	r3, [r7, #7]
 8009992:	4613      	mov	r3, r2
 8009994:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800999e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d11a      	bne.n	80099dc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099a6:	88bb      	ldrh	r3, [r7, #4]
 80099a8:	3303      	adds	r3, #3
 80099aa:	089b      	lsrs	r3, r3, #2
 80099ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099ae:	2300      	movs	r3, #0
 80099b0:	61bb      	str	r3, [r7, #24]
 80099b2:	e00f      	b.n	80099d4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	031a      	lsls	r2, r3, #12
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c0:	461a      	mov	r2, r3
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	3304      	adds	r3, #4
 80099cc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	3301      	adds	r3, #1
 80099d2:	61bb      	str	r3, [r7, #24]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d3eb      	bcc.n	80099b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3724      	adds	r7, #36	; 0x24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b089      	sub	sp, #36	; 0x24
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	4613      	mov	r3, r2
 80099f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009a00:	88fb      	ldrh	r3, [r7, #6]
 8009a02:	3303      	adds	r3, #3
 8009a04:	089b      	lsrs	r3, r3, #2
 8009a06:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61bb      	str	r3, [r7, #24]
 8009a0c:	e00b      	b.n	8009a26 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	3301      	adds	r3, #1
 8009a24:	61bb      	str	r3, [r7, #24]
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d3ef      	bcc.n	8009a0e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009a2e:	69fb      	ldr	r3, [r7, #28]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3724      	adds	r7, #36	; 0x24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a56:	f043 0302 	orr.w	r3, r3, #2
 8009a5a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009a5c:	2003      	movs	r0, #3
 8009a5e:	f7f6 fd9d 	bl	800059c <HAL_Delay>

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4013      	ands	r3, r2
 8009a82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a84:	68fb      	ldr	r3, [r7, #12]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	0c1b      	lsrs	r3, r3, #16
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	b29b      	uxth	r3, r3
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	4013      	ands	r3, r2
 8009b26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b28:	68bb      	ldr	r3, [r7, #8]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b087      	sub	sp, #28
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b5a:	78fb      	ldrb	r3, [r7, #3]
 8009b5c:	f003 030f 	and.w	r3, r3, #15
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	fa22 f303 	lsr.w	r3, r2, r3
 8009b66:	01db      	lsls	r3, r3, #7
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	4013      	ands	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b84:	68bb      	ldr	r3, [r7, #8]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	371c      	adds	r7, #28
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
	...

08009bb0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <USB_ActivateSetup+0x68>)
 8009bce:	4013      	ands	r3, r2
 8009bd0:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0306 	and.w	r3, r3, #6
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d109      	bne.n	8009bf6 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf0:	f043 0303 	orr.w	r3, r3, #3
 8009bf4:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	fffff800 	.word	0xfffff800

08009c1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	460b      	mov	r3, r1
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	333c      	adds	r3, #60	; 0x3c
 8009c32:	3304      	adds	r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	4a26      	ldr	r2, [pc, #152]	; (8009cd4 <USB_EP0_OutStart+0xb8>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d90a      	bls.n	8009c56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c50:	d101      	bne.n	8009c56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	e037      	b.n	8009cc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c84:	f043 0318 	orr.w	r3, r3, #24
 8009c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c9e:	7afb      	ldrb	r3, [r7, #11]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d10f      	bne.n	8009cc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	4f54300a 	.word	0x4f54300a

08009cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4a13      	ldr	r2, [pc, #76]	; (8009d3c <USB_CoreReset+0x64>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d901      	bls.n	8009cf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e01b      	b.n	8009d2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	daf2      	bge.n	8009ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	f043 0201 	orr.w	r2, r3, #1
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3301      	adds	r3, #1
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4a09      	ldr	r2, [pc, #36]	; (8009d3c <USB_CoreReset+0x64>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d901      	bls.n	8009d20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e006      	b.n	8009d2e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d0f0      	beq.n	8009d0e <USB_CoreReset+0x36>

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	00030d40 	.word	0x00030d40

08009d40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d52:	2b84      	cmp	r3, #132	; 0x84
 8009d54:	d005      	beq.n	8009d62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3303      	adds	r3, #3
 8009d60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d62:	68fb      	ldr	r3, [r7, #12]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d74:	f000 fa5e 	bl	800a234 <vTaskStartScheduler>
  
  return osOK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d80:	b087      	sub	sp, #28
 8009d82:	af02      	add	r7, sp, #8
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685c      	ldr	r4, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d94:	b29e      	uxth	r6, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff ffcf 	bl	8009d40 <makeFreeRtosPriority>
 8009da2:	4602      	mov	r2, r0
 8009da4:	f107 030c 	add.w	r3, r7, #12
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	9200      	str	r2, [sp, #0]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	4632      	mov	r2, r6
 8009db0:	4629      	mov	r1, r5
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f8d2 	bl	8009f5c <xTaskCreate>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d001      	beq.n	8009dc2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e000      	b.n	8009dc4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dcc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <osDelay+0x16>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	e000      	b.n	8009de4 <osDelay+0x18>
 8009de2:	2301      	movs	r3, #1
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f9ef 	bl	800a1c8 <vTaskDelay>
  
  return osOK;
 8009dea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f103 0208 	add.w	r2, r3, #8
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f103 0208 	add.w	r2, r3, #8
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f103 0208 	add.w	r2, r3, #8
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e28:	bf00      	nop
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eac:	d103      	bne.n	8009eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	e00c      	b.n	8009ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e002      	b.n	8009ec4 <vListInsert+0x2e>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d2f6      	bcs.n	8009ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	601a      	str	r2, [r3, #0]
}
 8009efc:	bf00      	nop
 8009efe:	3714      	adds	r7, #20
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6892      	ldr	r2, [r2, #8]
 8009f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6852      	ldr	r2, [r2, #4]
 8009f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d103      	bne.n	8009f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	1e5a      	subs	r2, r3, #1
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08c      	sub	sp, #48	; 0x30
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fea1 	bl	800acb8 <pvPortMalloc>
 8009f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00e      	beq.n	8009f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009f7e:	2058      	movs	r0, #88	; 0x58
 8009f80:	f000 fe9a 	bl	800acb8 <pvPortMalloc>
 8009f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	631a      	str	r2, [r3, #48]	; 0x30
 8009f92:	e005      	b.n	8009fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f94:	6978      	ldr	r0, [r7, #20]
 8009f96:	f000 ff5b 	bl	800ae50 <vPortFree>
 8009f9a:	e001      	b.n	8009fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d013      	beq.n	8009fce <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fa6:	88fa      	ldrh	r2, [r7, #6]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9303      	str	r3, [sp, #12]
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	9302      	str	r3, [sp, #8]
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 f80e 	bl	8009fde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fc2:	69f8      	ldr	r0, [r7, #28]
 8009fc4:	f000 f896 	bl	800a0f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	61bb      	str	r3, [r7, #24]
 8009fcc:	e002      	b.n	8009fd4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fd4:	69bb      	ldr	r3, [r7, #24]
	}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b088      	sub	sp, #32
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	21a5      	movs	r1, #165	; 0xa5
 8009ff8:	f003 fdbe 	bl	800db78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a000:	6879      	ldr	r1, [r7, #4]
 800a002:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a006:	440b      	add	r3, r1
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	f023 0307 	bic.w	r3, r3, #7
 800a014:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	f003 0307 	and.w	r3, r3, #7
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <prvInitialiseNewTask+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	b672      	cpsid	i
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	b662      	cpsie	i
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	e7fe      	b.n	800a036 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	e012      	b.n	800a064 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	4413      	add	r3, r2
 800a044:	7819      	ldrb	r1, [r3, #0]
 800a046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	4413      	add	r3, r2
 800a04c:	3334      	adds	r3, #52	; 0x34
 800a04e:	460a      	mov	r2, r1
 800a050:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	4413      	add	r3, r2
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	3301      	adds	r3, #1
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	2b0f      	cmp	r3, #15
 800a068:	d9e9      	bls.n	800a03e <prvInitialiseNewTask+0x60>
 800a06a:	e000      	b.n	800a06e <prvInitialiseNewTask+0x90>
		{
			break;
 800a06c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	2b06      	cmp	r3, #6
 800a07a:	d901      	bls.n	800a080 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a07c:	2306      	movs	r3, #6
 800a07e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a084:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	2200      	movs	r2, #0
 800a090:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	3304      	adds	r3, #4
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff fecc 	bl	8009e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	3318      	adds	r3, #24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff fec7 	bl	8009e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	f1c3 0207 	rsb	r2, r3, #7
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	2200      	movs	r2, #0
 800a0c0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	68f9      	ldr	r1, [r7, #12]
 800a0d4:	69b8      	ldr	r0, [r7, #24]
 800a0d6:	f000 fc05 	bl	800a8e4 <pxPortInitialiseStack>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ec:	bf00      	nop
 800a0ee:	3720      	adds	r7, #32
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0fc:	f000 fcfc 	bl	800aaf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a100:	4b2a      	ldr	r3, [pc, #168]	; (800a1ac <prvAddNewTaskToReadyList+0xb8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a29      	ldr	r2, [pc, #164]	; (800a1ac <prvAddNewTaskToReadyList+0xb8>)
 800a108:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a10a:	4b29      	ldr	r3, [pc, #164]	; (800a1b0 <prvAddNewTaskToReadyList+0xbc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a112:	4a27      	ldr	r2, [pc, #156]	; (800a1b0 <prvAddNewTaskToReadyList+0xbc>)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a118:	4b24      	ldr	r3, [pc, #144]	; (800a1ac <prvAddNewTaskToReadyList+0xb8>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d110      	bne.n	800a142 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a120:	f000 fad8 	bl	800a6d4 <prvInitialiseTaskLists>
 800a124:	e00d      	b.n	800a142 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a126:	4b23      	ldr	r3, [pc, #140]	; (800a1b4 <prvAddNewTaskToReadyList+0xc0>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d109      	bne.n	800a142 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a12e:	4b20      	ldr	r3, [pc, #128]	; (800a1b0 <prvAddNewTaskToReadyList+0xbc>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	429a      	cmp	r2, r3
 800a13a:	d802      	bhi.n	800a142 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a13c:	4a1c      	ldr	r2, [pc, #112]	; (800a1b0 <prvAddNewTaskToReadyList+0xbc>)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a142:	4b1d      	ldr	r3, [pc, #116]	; (800a1b8 <prvAddNewTaskToReadyList+0xc4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3301      	adds	r3, #1
 800a148:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <prvAddNewTaskToReadyList+0xc4>)
 800a14a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	2201      	movs	r2, #1
 800a152:	409a      	lsls	r2, r3
 800a154:	4b19      	ldr	r3, [pc, #100]	; (800a1bc <prvAddNewTaskToReadyList+0xc8>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4313      	orrs	r3, r2
 800a15a:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <prvAddNewTaskToReadyList+0xc8>)
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4a15      	ldr	r2, [pc, #84]	; (800a1c0 <prvAddNewTaskToReadyList+0xcc>)
 800a16c:	441a      	add	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3304      	adds	r3, #4
 800a172:	4619      	mov	r1, r3
 800a174:	4610      	mov	r0, r2
 800a176:	f7ff fe6a 	bl	8009e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a17a:	f000 fcef 	bl	800ab5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a17e:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <prvAddNewTaskToReadyList+0xc0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <prvAddNewTaskToReadyList+0xbc>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	429a      	cmp	r2, r3
 800a192:	d207      	bcs.n	800a1a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a194:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <prvAddNewTaskToReadyList+0xd0>)
 800a196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000128 	.word	0x20000128
 800a1b0:	20000028 	.word	0x20000028
 800a1b4:	20000134 	.word	0x20000134
 800a1b8:	20000144 	.word	0x20000144
 800a1bc:	20000130 	.word	0x20000130
 800a1c0:	2000002c 	.word	0x2000002c
 800a1c4:	e000ed04 	.word	0xe000ed04

0800a1c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d018      	beq.n	800a20c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <vTaskDelay+0x64>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00b      	beq.n	800a1fa <vTaskDelay+0x32>
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	b672      	cpsid	i
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	b662      	cpsie	i
 800a1f6:	60bb      	str	r3, [r7, #8]
 800a1f8:	e7fe      	b.n	800a1f8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a1fa:	f000 f865 	bl	800a2c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1fe:	2100      	movs	r1, #0
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fb09 	bl	800a818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a206:	f000 f86d 	bl	800a2e4 <xTaskResumeAll>
 800a20a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d107      	bne.n	800a222 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a212:	4b07      	ldr	r3, [pc, #28]	; (800a230 <vTaskDelay+0x68>)
 800a214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a218:	601a      	str	r2, [r3, #0]
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000150 	.word	0x20000150
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a23a:	4b1d      	ldr	r3, [pc, #116]	; (800a2b0 <vTaskStartScheduler+0x7c>)
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	2300      	movs	r3, #0
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	2300      	movs	r3, #0
 800a244:	2280      	movs	r2, #128	; 0x80
 800a246:	491b      	ldr	r1, [pc, #108]	; (800a2b4 <vTaskStartScheduler+0x80>)
 800a248:	481b      	ldr	r0, [pc, #108]	; (800a2b8 <vTaskStartScheduler+0x84>)
 800a24a:	f7ff fe87 	bl	8009f5c <xTaskCreate>
 800a24e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d117      	bne.n	800a286 <vTaskStartScheduler+0x52>
 800a256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25a:	b672      	cpsid	i
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	b662      	cpsie	i
 800a26a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a26c:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <vTaskStartScheduler+0x88>)
 800a26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a274:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <vTaskStartScheduler+0x8c>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a27a:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <vTaskStartScheduler+0x90>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a280:	f000 fbbe 	bl	800aa00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a284:	e00f      	b.n	800a2a6 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28c:	d10b      	bne.n	800a2a6 <vTaskStartScheduler+0x72>
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	b672      	cpsid	i
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	b662      	cpsie	i
 800a2a2:	607b      	str	r3, [r7, #4]
 800a2a4:	e7fe      	b.n	800a2a4 <vTaskStartScheduler+0x70>
}
 800a2a6:	bf00      	nop
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	2000014c 	.word	0x2000014c
 800a2b4:	0800dba0 	.word	0x0800dba0
 800a2b8:	0800a6a1 	.word	0x0800a6a1
 800a2bc:	20000148 	.word	0x20000148
 800a2c0:	20000134 	.word	0x20000134
 800a2c4:	2000012c 	.word	0x2000012c

0800a2c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a2cc:	4b04      	ldr	r3, [pc, #16]	; (800a2e0 <vTaskSuspendAll+0x18>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	4a03      	ldr	r2, [pc, #12]	; (800a2e0 <vTaskSuspendAll+0x18>)
 800a2d4:	6013      	str	r3, [r2, #0]
}
 800a2d6:	bf00      	nop
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	20000150 	.word	0x20000150

0800a2e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2f2:	4b42      	ldr	r3, [pc, #264]	; (800a3fc <xTaskResumeAll+0x118>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10b      	bne.n	800a312 <xTaskResumeAll+0x2e>
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	b672      	cpsid	i
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	b662      	cpsie	i
 800a30e:	603b      	str	r3, [r7, #0]
 800a310:	e7fe      	b.n	800a310 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a312:	f000 fbf1 	bl	800aaf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a316:	4b39      	ldr	r3, [pc, #228]	; (800a3fc <xTaskResumeAll+0x118>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a37      	ldr	r2, [pc, #220]	; (800a3fc <xTaskResumeAll+0x118>)
 800a31e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a320:	4b36      	ldr	r3, [pc, #216]	; (800a3fc <xTaskResumeAll+0x118>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d161      	bne.n	800a3ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a328:	4b35      	ldr	r3, [pc, #212]	; (800a400 <xTaskResumeAll+0x11c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d05d      	beq.n	800a3ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a330:	e02e      	b.n	800a390 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a332:	4b34      	ldr	r3, [pc, #208]	; (800a404 <xTaskResumeAll+0x120>)
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3318      	adds	r3, #24
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fde2 	bl	8009f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3304      	adds	r3, #4
 800a348:	4618      	mov	r0, r3
 800a34a:	f7ff fddd 	bl	8009f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	2201      	movs	r2, #1
 800a354:	409a      	lsls	r2, r3
 800a356:	4b2c      	ldr	r3, [pc, #176]	; (800a408 <xTaskResumeAll+0x124>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	4a2a      	ldr	r2, [pc, #168]	; (800a408 <xTaskResumeAll+0x124>)
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4a27      	ldr	r2, [pc, #156]	; (800a40c <xTaskResumeAll+0x128>)
 800a36e:	441a      	add	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	3304      	adds	r3, #4
 800a374:	4619      	mov	r1, r3
 800a376:	4610      	mov	r0, r2
 800a378:	f7ff fd69 	bl	8009e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a380:	4b23      	ldr	r3, [pc, #140]	; (800a410 <xTaskResumeAll+0x12c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a386:	429a      	cmp	r2, r3
 800a388:	d302      	bcc.n	800a390 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a38a:	4b22      	ldr	r3, [pc, #136]	; (800a414 <xTaskResumeAll+0x130>)
 800a38c:	2201      	movs	r2, #1
 800a38e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a390:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <xTaskResumeAll+0x120>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1cc      	bne.n	800a332 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a39e:	f000 fa15 	bl	800a7cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3a2:	4b1d      	ldr	r3, [pc, #116]	; (800a418 <xTaskResumeAll+0x134>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d010      	beq.n	800a3d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ae:	f000 f837 	bl	800a420 <xTaskIncrementTick>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3b8:	4b16      	ldr	r3, [pc, #88]	; (800a414 <xTaskResumeAll+0x130>)
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1f1      	bne.n	800a3ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a3ca:	4b13      	ldr	r3, [pc, #76]	; (800a418 <xTaskResumeAll+0x134>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3d0:	4b10      	ldr	r3, [pc, #64]	; (800a414 <xTaskResumeAll+0x130>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <xTaskResumeAll+0x138>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3ec:	f000 fbb6 	bl	800ab5c <vPortExitCritical>

	return xAlreadyYielded;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20000150 	.word	0x20000150
 800a400:	20000128 	.word	0x20000128
 800a404:	200000e8 	.word	0x200000e8
 800a408:	20000130 	.word	0x20000130
 800a40c:	2000002c 	.word	0x2000002c
 800a410:	20000028 	.word	0x20000028
 800a414:	2000013c 	.word	0x2000013c
 800a418:	20000138 	.word	0x20000138
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42a:	4b51      	ldr	r3, [pc, #324]	; (800a570 <xTaskIncrementTick+0x150>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f040 808e 	bne.w	800a550 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a434:	4b4f      	ldr	r3, [pc, #316]	; (800a574 <xTaskIncrementTick+0x154>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a43c:	4a4d      	ldr	r2, [pc, #308]	; (800a574 <xTaskIncrementTick+0x154>)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d121      	bne.n	800a48c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a448:	4b4b      	ldr	r3, [pc, #300]	; (800a578 <xTaskIncrementTick+0x158>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <xTaskIncrementTick+0x4a>
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	e7fe      	b.n	800a468 <xTaskIncrementTick+0x48>
 800a46a:	4b43      	ldr	r3, [pc, #268]	; (800a578 <xTaskIncrementTick+0x158>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	4b42      	ldr	r3, [pc, #264]	; (800a57c <xTaskIncrementTick+0x15c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a40      	ldr	r2, [pc, #256]	; (800a578 <xTaskIncrementTick+0x158>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	4a40      	ldr	r2, [pc, #256]	; (800a57c <xTaskIncrementTick+0x15c>)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	4b40      	ldr	r3, [pc, #256]	; (800a580 <xTaskIncrementTick+0x160>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3301      	adds	r3, #1
 800a484:	4a3e      	ldr	r2, [pc, #248]	; (800a580 <xTaskIncrementTick+0x160>)
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	f000 f9a0 	bl	800a7cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a48c:	4b3d      	ldr	r3, [pc, #244]	; (800a584 <xTaskIncrementTick+0x164>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	d34d      	bcc.n	800a532 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a496:	4b38      	ldr	r3, [pc, #224]	; (800a578 <xTaskIncrementTick+0x158>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <xTaskIncrementTick+0x84>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <xTaskIncrementTick+0x86>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4aa:	4b36      	ldr	r3, [pc, #216]	; (800a584 <xTaskIncrementTick+0x164>)
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b0:	601a      	str	r2, [r3, #0]
					break;
 800a4b2:	e03e      	b.n	800a532 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4b4:	4b30      	ldr	r3, [pc, #192]	; (800a578 <xTaskIncrementTick+0x158>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d203      	bcs.n	800a4d4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4cc:	4a2d      	ldr	r2, [pc, #180]	; (800a584 <xTaskIncrementTick+0x164>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6013      	str	r3, [r2, #0]
						break;
 800a4d2:	e02e      	b.n	800a532 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fd15 	bl	8009f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d004      	beq.n	800a4f0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	3318      	adds	r3, #24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff fd0c 	bl	8009f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	409a      	lsls	r2, r3
 800a4f8:	4b23      	ldr	r3, [pc, #140]	; (800a588 <xTaskIncrementTick+0x168>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	4a22      	ldr	r2, [pc, #136]	; (800a588 <xTaskIncrementTick+0x168>)
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4a1f      	ldr	r2, [pc, #124]	; (800a58c <xTaskIncrementTick+0x16c>)
 800a510:	441a      	add	r2, r3
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7ff fc98 	bl	8009e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a522:	4b1b      	ldr	r3, [pc, #108]	; (800a590 <xTaskIncrementTick+0x170>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	429a      	cmp	r2, r3
 800a52a:	d3b4      	bcc.n	800a496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a530:	e7b1      	b.n	800a496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a532:	4b17      	ldr	r3, [pc, #92]	; (800a590 <xTaskIncrementTick+0x170>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a538:	4914      	ldr	r1, [pc, #80]	; (800a58c <xTaskIncrementTick+0x16c>)
 800a53a:	4613      	mov	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	440b      	add	r3, r1
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d907      	bls.n	800a55a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a54a:	2301      	movs	r3, #1
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	e004      	b.n	800a55a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a550:	4b10      	ldr	r3, [pc, #64]	; (800a594 <xTaskIncrementTick+0x174>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3301      	adds	r3, #1
 800a556:	4a0f      	ldr	r2, [pc, #60]	; (800a594 <xTaskIncrementTick+0x174>)
 800a558:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a55a:	4b0f      	ldr	r3, [pc, #60]	; (800a598 <xTaskIncrementTick+0x178>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a562:	2301      	movs	r3, #1
 800a564:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a566:	697b      	ldr	r3, [r7, #20]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3718      	adds	r7, #24
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20000150 	.word	0x20000150
 800a574:	2000012c 	.word	0x2000012c
 800a578:	200000e0 	.word	0x200000e0
 800a57c:	200000e4 	.word	0x200000e4
 800a580:	20000140 	.word	0x20000140
 800a584:	20000148 	.word	0x20000148
 800a588:	20000130 	.word	0x20000130
 800a58c:	2000002c 	.word	0x2000002c
 800a590:	20000028 	.word	0x20000028
 800a594:	20000138 	.word	0x20000138
 800a598:	2000013c 	.word	0x2000013c

0800a59c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5a2:	4b3a      	ldr	r3, [pc, #232]	; (800a68c <vTaskSwitchContext+0xf0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5aa:	4b39      	ldr	r3, [pc, #228]	; (800a690 <vTaskSwitchContext+0xf4>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5b0:	e067      	b.n	800a682 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800a5b2:	4b37      	ldr	r3, [pc, #220]	; (800a690 <vTaskSwitchContext+0xf4>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a5b8:	4b36      	ldr	r3, [pc, #216]	; (800a694 <vTaskSwitchContext+0xf8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a5c4:	61bb      	str	r3, [r7, #24]
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d111      	bne.n	800a5f4 <vTaskSwitchContext+0x58>
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d10b      	bne.n	800a5f4 <vTaskSwitchContext+0x58>
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d105      	bne.n	800a5f4 <vTaskSwitchContext+0x58>
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	330c      	adds	r3, #12
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d008      	beq.n	800a606 <vTaskSwitchContext+0x6a>
 800a5f4:	4b27      	ldr	r3, [pc, #156]	; (800a694 <vTaskSwitchContext+0xf8>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	4b26      	ldr	r3, [pc, #152]	; (800a694 <vTaskSwitchContext+0xf8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3334      	adds	r3, #52	; 0x34
 800a5fe:	4619      	mov	r1, r3
 800a600:	4610      	mov	r0, r2
 800a602:	f000 fd44 	bl	800b08e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a606:	4b24      	ldr	r3, [pc, #144]	; (800a698 <vTaskSwitchContext+0xfc>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	fab3 f383 	clz	r3, r3
 800a612:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	f1c3 031f 	rsb	r3, r3, #31
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	491f      	ldr	r1, [pc, #124]	; (800a69c <vTaskSwitchContext+0x100>)
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10b      	bne.n	800a648 <vTaskSwitchContext+0xac>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	b672      	cpsid	i
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	b662      	cpsie	i
 800a644:	607b      	str	r3, [r7, #4]
 800a646:	e7fe      	b.n	800a646 <vTaskSwitchContext+0xaa>
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4a12      	ldr	r2, [pc, #72]	; (800a69c <vTaskSwitchContext+0x100>)
 800a654:	4413      	add	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	3308      	adds	r3, #8
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d104      	bne.n	800a678 <vTaskSwitchContext+0xdc>
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	605a      	str	r2, [r3, #4]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	4a05      	ldr	r2, [pc, #20]	; (800a694 <vTaskSwitchContext+0xf8>)
 800a680:	6013      	str	r3, [r2, #0]
}
 800a682:	bf00      	nop
 800a684:	3720      	adds	r7, #32
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20000150 	.word	0x20000150
 800a690:	2000013c 	.word	0x2000013c
 800a694:	20000028 	.word	0x20000028
 800a698:	20000130 	.word	0x20000130
 800a69c:	2000002c 	.word	0x2000002c

0800a6a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a6a8:	f000 f854 	bl	800a754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6ac:	4b07      	ldr	r3, [pc, #28]	; (800a6cc <prvIdleTask+0x2c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d907      	bls.n	800a6c4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a6b4:	4b06      	ldr	r3, [pc, #24]	; (800a6d0 <prvIdleTask+0x30>)
 800a6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a6c4:	f000 fcdc 	bl	800b080 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a6c8:	e7ee      	b.n	800a6a8 <prvIdleTask+0x8>
 800a6ca:	bf00      	nop
 800a6cc:	2000002c 	.word	0x2000002c
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6da:	2300      	movs	r3, #0
 800a6dc:	607b      	str	r3, [r7, #4]
 800a6de:	e00c      	b.n	800a6fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4a12      	ldr	r2, [pc, #72]	; (800a734 <prvInitialiseTaskLists+0x60>)
 800a6ec:	4413      	add	r3, r2
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fb80 	bl	8009df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	607b      	str	r3, [r7, #4]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b06      	cmp	r3, #6
 800a6fe:	d9ef      	bls.n	800a6e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a700:	480d      	ldr	r0, [pc, #52]	; (800a738 <prvInitialiseTaskLists+0x64>)
 800a702:	f7ff fb77 	bl	8009df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a706:	480d      	ldr	r0, [pc, #52]	; (800a73c <prvInitialiseTaskLists+0x68>)
 800a708:	f7ff fb74 	bl	8009df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a70c:	480c      	ldr	r0, [pc, #48]	; (800a740 <prvInitialiseTaskLists+0x6c>)
 800a70e:	f7ff fb71 	bl	8009df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a712:	480c      	ldr	r0, [pc, #48]	; (800a744 <prvInitialiseTaskLists+0x70>)
 800a714:	f7ff fb6e 	bl	8009df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a718:	480b      	ldr	r0, [pc, #44]	; (800a748 <prvInitialiseTaskLists+0x74>)
 800a71a:	f7ff fb6b 	bl	8009df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a71e:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <prvInitialiseTaskLists+0x78>)
 800a720:	4a05      	ldr	r2, [pc, #20]	; (800a738 <prvInitialiseTaskLists+0x64>)
 800a722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <prvInitialiseTaskLists+0x7c>)
 800a726:	4a05      	ldr	r2, [pc, #20]	; (800a73c <prvInitialiseTaskLists+0x68>)
 800a728:	601a      	str	r2, [r3, #0]
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	2000002c 	.word	0x2000002c
 800a738:	200000b8 	.word	0x200000b8
 800a73c:	200000cc 	.word	0x200000cc
 800a740:	200000e8 	.word	0x200000e8
 800a744:	200000fc 	.word	0x200000fc
 800a748:	20000114 	.word	0x20000114
 800a74c:	200000e0 	.word	0x200000e0
 800a750:	200000e4 	.word	0x200000e4

0800a754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a75a:	e019      	b.n	800a790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a75c:	f000 f9cc 	bl	800aaf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a760:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <prvCheckTasksWaitingTermination+0x4c>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff fbcb 	bl	8009f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <prvCheckTasksWaitingTermination+0x50>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3b01      	subs	r3, #1
 800a778:	4a0a      	ldr	r2, [pc, #40]	; (800a7a4 <prvCheckTasksWaitingTermination+0x50>)
 800a77a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a77c:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <prvCheckTasksWaitingTermination+0x54>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	3b01      	subs	r3, #1
 800a782:	4a09      	ldr	r2, [pc, #36]	; (800a7a8 <prvCheckTasksWaitingTermination+0x54>)
 800a784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a786:	f000 f9e9 	bl	800ab5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f80e 	bl	800a7ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <prvCheckTasksWaitingTermination+0x54>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e1      	bne.n	800a75c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a798:	bf00      	nop
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	200000fc 	.word	0x200000fc
 800a7a4:	20000128 	.word	0x20000128
 800a7a8:	20000110 	.word	0x20000110

0800a7ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 fb49 	bl	800ae50 <vPortFree>
			vPortFree( pxTCB );
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fb46 	bl	800ae50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7d2:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <prvResetNextTaskUnblockTime+0x44>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <prvResetNextTaskUnblockTime+0x14>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e000      	b.n	800a7e2 <prvResetNextTaskUnblockTime+0x16>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d004      	beq.n	800a7f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <prvResetNextTaskUnblockTime+0x48>)
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7ee:	e008      	b.n	800a802 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <prvResetNextTaskUnblockTime+0x44>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	4a05      	ldr	r2, [pc, #20]	; (800a814 <prvResetNextTaskUnblockTime+0x48>)
 800a800:	6013      	str	r3, [r2, #0]
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	200000e0 	.word	0x200000e0
 800a814:	20000148 	.word	0x20000148

0800a818 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a822:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a828:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3304      	adds	r3, #4
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff fb6a 	bl	8009f08 <uxListRemove>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10b      	bne.n	800a852 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a83a:	4b24      	ldr	r3, [pc, #144]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a840:	2201      	movs	r2, #1
 800a842:	fa02 f303 	lsl.w	r3, r2, r3
 800a846:	43da      	mvns	r2, r3
 800a848:	4b21      	ldr	r3, [pc, #132]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4013      	ands	r3, r2
 800a84e:	4a20      	ldr	r2, [pc, #128]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a850:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a858:	d10a      	bne.n	800a870 <prvAddCurrentTaskToDelayedList+0x58>
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a860:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3304      	adds	r3, #4
 800a866:	4619      	mov	r1, r3
 800a868:	481a      	ldr	r0, [pc, #104]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a86a:	f7ff faf0 	bl	8009e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a86e:	e026      	b.n	800a8be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4413      	add	r3, r2
 800a876:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a878:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	429a      	cmp	r2, r3
 800a886:	d209      	bcs.n	800a89c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a888:	4b13      	ldr	r3, [pc, #76]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	4b0f      	ldr	r3, [pc, #60]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7ff fafe 	bl	8009e96 <vListInsert>
}
 800a89a:	e010      	b.n	800a8be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a89c:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	f7ff faf4 	bl	8009e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8ae:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d202      	bcs.n	800a8be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	6013      	str	r3, [r2, #0]
}
 800a8be:	bf00      	nop
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	2000012c 	.word	0x2000012c
 800a8cc:	20000028 	.word	0x20000028
 800a8d0:	20000130 	.word	0x20000130
 800a8d4:	20000114 	.word	0x20000114
 800a8d8:	200000e4 	.word	0x200000e4
 800a8dc:	200000e0 	.word	0x200000e0
 800a8e0:	20000148 	.word	0x20000148

0800a8e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3b04      	subs	r3, #4
 800a8f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b04      	subs	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	f023 0201 	bic.w	r2, r3, #1
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3b04      	subs	r3, #4
 800a912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a914:	4a0c      	ldr	r2, [pc, #48]	; (800a948 <pxPortInitialiseStack+0x64>)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3b14      	subs	r3, #20
 800a91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	3b04      	subs	r3, #4
 800a92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f06f 0202 	mvn.w	r2, #2
 800a932:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3b20      	subs	r3, #32
 800a938:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a93a:	68fb      	ldr	r3, [r7, #12]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	0800a94d 	.word	0x0800a94d

0800a94c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a956:	4b13      	ldr	r3, [pc, #76]	; (800a9a4 <prvTaskExitError+0x58>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95e:	d00b      	beq.n	800a978 <prvTaskExitError+0x2c>
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	b672      	cpsid	i
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	b662      	cpsie	i
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	e7fe      	b.n	800a976 <prvTaskExitError+0x2a>
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	b672      	cpsid	i
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	b662      	cpsie	i
 800a98c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a98e:	bf00      	nop
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0fc      	beq.n	800a990 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a996:	bf00      	nop
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20000004 	.word	0x20000004
	...

0800a9b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <pxCurrentTCBConst2>)
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	6808      	ldr	r0, [r1, #0]
 800a9b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ba:	f380 8809 	msr	PSP, r0
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f04f 0000 	mov.w	r0, #0
 800a9c6:	f380 8811 	msr	BASEPRI, r0
 800a9ca:	4770      	bx	lr
 800a9cc:	f3af 8000 	nop.w

0800a9d0 <pxCurrentTCBConst2>:
 800a9d0:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop

0800a9d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9d8:	4808      	ldr	r0, [pc, #32]	; (800a9fc <prvPortStartFirstTask+0x24>)
 800a9da:	6800      	ldr	r0, [r0, #0]
 800a9dc:	6800      	ldr	r0, [r0, #0]
 800a9de:	f380 8808 	msr	MSP, r0
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8814 	msr	CONTROL, r0
 800a9ea:	b662      	cpsie	i
 800a9ec:	b661      	cpsie	f
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	df00      	svc	0
 800a9f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9fa:	bf00      	nop
 800a9fc:	e000ed08 	.word	0xe000ed08

0800aa00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa06:	4b36      	ldr	r3, [pc, #216]	; (800aae0 <xPortStartScheduler+0xe0>)
 800aa08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	4b2e      	ldr	r3, [pc, #184]	; (800aae4 <xPortStartScheduler+0xe4>)
 800aa2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa2e:	4b2e      	ldr	r3, [pc, #184]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa34:	e009      	b.n	800aa4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa36:	4b2c      	ldr	r3, [pc, #176]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa4a:	78fb      	ldrb	r3, [r7, #3]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d0ef      	beq.n	800aa36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa56:	4b24      	ldr	r3, [pc, #144]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f1c3 0307 	rsb	r3, r3, #7
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d00b      	beq.n	800aa7a <xPortStartScheduler+0x7a>
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	b672      	cpsid	i
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	b662      	cpsie	i
 800aa76:	60bb      	str	r3, [r7, #8]
 800aa78:	e7fe      	b.n	800aa78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa7a:	4b1b      	ldr	r3, [pc, #108]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	021b      	lsls	r3, r3, #8
 800aa80:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa84:	4b18      	ldr	r3, [pc, #96]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa8c:	4a16      	ldr	r2, [pc, #88]	; (800aae8 <xPortStartScheduler+0xe8>)
 800aa8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa98:	4b14      	ldr	r3, [pc, #80]	; (800aaec <xPortStartScheduler+0xec>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a13      	ldr	r2, [pc, #76]	; (800aaec <xPortStartScheduler+0xec>)
 800aa9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aaa2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aaa4:	4b11      	ldr	r3, [pc, #68]	; (800aaec <xPortStartScheduler+0xec>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a10      	ldr	r2, [pc, #64]	; (800aaec <xPortStartScheduler+0xec>)
 800aaaa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aaae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aab0:	f000 f8d4 	bl	800ac5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aab4:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <xPortStartScheduler+0xf0>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aaba:	f000 f8f3 	bl	800aca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aabe:	4b0d      	ldr	r3, [pc, #52]	; (800aaf4 <xPortStartScheduler+0xf4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a0c      	ldr	r2, [pc, #48]	; (800aaf4 <xPortStartScheduler+0xf4>)
 800aac4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aac8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aaca:	f7ff ff85 	bl	800a9d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aace:	f7ff fd65 	bl	800a59c <vTaskSwitchContext>
	prvTaskExitError();
 800aad2:	f7ff ff3b 	bl	800a94c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	e000e400 	.word	0xe000e400
 800aae4:	20000154 	.word	0x20000154
 800aae8:	20000158 	.word	0x20000158
 800aaec:	e000ed20 	.word	0xe000ed20
 800aaf0:	20000004 	.word	0x20000004
 800aaf4:	e000ef34 	.word	0xe000ef34

0800aaf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	b672      	cpsid	i
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	b662      	cpsie	i
 800ab12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab14:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <vPortEnterCritical+0x5c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	4a0e      	ldr	r2, [pc, #56]	; (800ab54 <vPortEnterCritical+0x5c>)
 800ab1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <vPortEnterCritical+0x5c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d110      	bne.n	800ab48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab26:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <vPortEnterCritical+0x60>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <vPortEnterCritical+0x50>
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	b672      	cpsid	i
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	b662      	cpsie	i
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	e7fe      	b.n	800ab46 <vPortEnterCritical+0x4e>
	}
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	20000004 	.word	0x20000004
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab62:	4b12      	ldr	r3, [pc, #72]	; (800abac <vPortExitCritical+0x50>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10b      	bne.n	800ab82 <vPortExitCritical+0x26>
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	b672      	cpsid	i
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	b662      	cpsie	i
 800ab7e:	607b      	str	r3, [r7, #4]
 800ab80:	e7fe      	b.n	800ab80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ab82:	4b0a      	ldr	r3, [pc, #40]	; (800abac <vPortExitCritical+0x50>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	4a08      	ldr	r2, [pc, #32]	; (800abac <vPortExitCritical+0x50>)
 800ab8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab8c:	4b07      	ldr	r3, [pc, #28]	; (800abac <vPortExitCritical+0x50>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d104      	bne.n	800ab9e <vPortExitCritical+0x42>
 800ab94:	2300      	movs	r3, #0
 800ab96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ab9e:	bf00      	nop
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000004 	.word	0x20000004

0800abb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abb0:	f3ef 8009 	mrs	r0, PSP
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4b15      	ldr	r3, [pc, #84]	; (800ac10 <pxCurrentTCBConst>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	f01e 0f10 	tst.w	lr, #16
 800abc0:	bf08      	it	eq
 800abc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abca:	6010      	str	r0, [r2, #0]
 800abcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abd4:	b672      	cpsid	i
 800abd6:	f380 8811 	msr	BASEPRI, r0
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	b662      	cpsie	i
 800abe4:	f7ff fcda 	bl	800a59c <vTaskSwitchContext>
 800abe8:	f04f 0000 	mov.w	r0, #0
 800abec:	f380 8811 	msr	BASEPRI, r0
 800abf0:	bc09      	pop	{r0, r3}
 800abf2:	6819      	ldr	r1, [r3, #0]
 800abf4:	6808      	ldr	r0, [r1, #0]
 800abf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfa:	f01e 0f10 	tst.w	lr, #16
 800abfe:	bf08      	it	eq
 800ac00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac04:	f380 8809 	msr	PSP, r0
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop

0800ac10 <pxCurrentTCBConst>:
 800ac10:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop

0800ac18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	b672      	cpsid	i
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	b662      	cpsie	i
 800ac32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac34:	f7ff fbf4 	bl	800a420 <xTaskIncrementTick>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac3e:	4b06      	ldr	r3, [pc, #24]	; (800ac58 <SysTick_Handler+0x40>)
 800ac40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	2300      	movs	r3, #0
 800ac48:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	e000ed04 	.word	0xe000ed04

0800ac5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac60:	4b0b      	ldr	r3, [pc, #44]	; (800ac90 <vPortSetupTimerInterrupt+0x34>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac66:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <vPortSetupTimerInterrupt+0x38>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <vPortSetupTimerInterrupt+0x3c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a0a      	ldr	r2, [pc, #40]	; (800ac9c <vPortSetupTimerInterrupt+0x40>)
 800ac72:	fba2 2303 	umull	r2, r3, r2, r3
 800ac76:	099b      	lsrs	r3, r3, #6
 800ac78:	4a09      	ldr	r2, [pc, #36]	; (800aca0 <vPortSetupTimerInterrupt+0x44>)
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac7e:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <vPortSetupTimerInterrupt+0x34>)
 800ac80:	2207      	movs	r2, #7
 800ac82:	601a      	str	r2, [r3, #0]
}
 800ac84:	bf00      	nop
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	e000e010 	.word	0xe000e010
 800ac94:	e000e018 	.word	0xe000e018
 800ac98:	20000008 	.word	0x20000008
 800ac9c:	10624dd3 	.word	0x10624dd3
 800aca0:	e000e014 	.word	0xe000e014

0800aca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acb4 <vPortEnableVFP+0x10>
 800aca8:	6801      	ldr	r1, [r0, #0]
 800acaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acae:	6001      	str	r1, [r0, #0]
 800acb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acb2:	bf00      	nop
 800acb4:	e000ed88 	.word	0xe000ed88

0800acb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	; 0x28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800acc4:	f7ff fb00 	bl	800a2c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800acc8:	4b5c      	ldr	r3, [pc, #368]	; (800ae3c <pvPortMalloc+0x184>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800acd0:	f000 f91a 	bl	800af08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800acd4:	4b5a      	ldr	r3, [pc, #360]	; (800ae40 <pvPortMalloc+0x188>)
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4013      	ands	r3, r2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f040 8090 	bne.w	800ae02 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d01e      	beq.n	800ad26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ace8:	2208      	movs	r2, #8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f003 0307 	and.w	r3, r3, #7
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d015      	beq.n	800ad26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f023 0307 	bic.w	r3, r3, #7
 800ad00:	3308      	adds	r3, #8
 800ad02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00b      	beq.n	800ad26 <pvPortMalloc+0x6e>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	b672      	cpsid	i
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	b662      	cpsie	i
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	e7fe      	b.n	800ad24 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d06a      	beq.n	800ae02 <pvPortMalloc+0x14a>
 800ad2c:	4b45      	ldr	r3, [pc, #276]	; (800ae44 <pvPortMalloc+0x18c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d865      	bhi.n	800ae02 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ad36:	4b44      	ldr	r3, [pc, #272]	; (800ae48 <pvPortMalloc+0x190>)
 800ad38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ad3a:	4b43      	ldr	r3, [pc, #268]	; (800ae48 <pvPortMalloc+0x190>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad40:	e004      	b.n	800ad4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d903      	bls.n	800ad5e <pvPortMalloc+0xa6>
 800ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1f1      	bne.n	800ad42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad5e:	4b37      	ldr	r3, [pc, #220]	; (800ae3c <pvPortMalloc+0x184>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d04c      	beq.n	800ae02 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2208      	movs	r2, #8
 800ad6e:	4413      	add	r3, r2
 800ad70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	1ad2      	subs	r2, r2, r3
 800ad82:	2308      	movs	r3, #8
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d920      	bls.n	800adcc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4413      	add	r3, r2
 800ad90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	f003 0307 	and.w	r3, r3, #7
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00b      	beq.n	800adb4 <pvPortMalloc+0xfc>
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	b672      	cpsid	i
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	b662      	cpsie	i
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	e7fe      	b.n	800adb2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800adc6:	69b8      	ldr	r0, [r7, #24]
 800adc8:	f000 f900 	bl	800afcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800adcc:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <pvPortMalloc+0x18c>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	4a1b      	ldr	r2, [pc, #108]	; (800ae44 <pvPortMalloc+0x18c>)
 800add8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800adda:	4b1a      	ldr	r3, [pc, #104]	; (800ae44 <pvPortMalloc+0x18c>)
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	4b1b      	ldr	r3, [pc, #108]	; (800ae4c <pvPortMalloc+0x194>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d203      	bcs.n	800adee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ade6:	4b17      	ldr	r3, [pc, #92]	; (800ae44 <pvPortMalloc+0x18c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a18      	ldr	r2, [pc, #96]	; (800ae4c <pvPortMalloc+0x194>)
 800adec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <pvPortMalloc+0x188>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae02:	f7ff fa6f 	bl	800a2e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ae0c:	f000 f94a 	bl	800b0a4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00b      	beq.n	800ae32 <pvPortMalloc+0x17a>
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	b672      	cpsid	i
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	b662      	cpsie	i
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	e7fe      	b.n	800ae30 <pvPortMalloc+0x178>
	return pvReturn;
 800ae32:	69fb      	ldr	r3, [r7, #28]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3728      	adds	r7, #40	; 0x28
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	20008164 	.word	0x20008164
 800ae40:	20008170 	.word	0x20008170
 800ae44:	20008168 	.word	0x20008168
 800ae48:	2000815c 	.word	0x2000815c
 800ae4c:	2000816c 	.word	0x2000816c

0800ae50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d04a      	beq.n	800aef8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae62:	2308      	movs	r3, #8
 800ae64:	425b      	negs	r3, r3
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4413      	add	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	4b22      	ldr	r3, [pc, #136]	; (800af00 <vPortFree+0xb0>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10b      	bne.n	800ae96 <vPortFree+0x46>
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	b672      	cpsid	i
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	b662      	cpsie	i
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e7fe      	b.n	800ae94 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00b      	beq.n	800aeb6 <vPortFree+0x66>
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	b672      	cpsid	i
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	b662      	cpsie	i
 800aeb2:	60bb      	str	r3, [r7, #8]
 800aeb4:	e7fe      	b.n	800aeb4 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	4b11      	ldr	r3, [pc, #68]	; (800af00 <vPortFree+0xb0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4013      	ands	r3, r2
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d019      	beq.n	800aef8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d115      	bne.n	800aef8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <vPortFree+0xb0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	43db      	mvns	r3, r3
 800aed6:	401a      	ands	r2, r3
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aedc:	f7ff f9f4 	bl	800a2c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <vPortFree+0xb4>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4413      	add	r3, r2
 800aeea:	4a06      	ldr	r2, [pc, #24]	; (800af04 <vPortFree+0xb4>)
 800aeec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aeee:	6938      	ldr	r0, [r7, #16]
 800aef0:	f000 f86c 	bl	800afcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aef4:	f7ff f9f6 	bl	800a2e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aef8:	bf00      	nop
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20008170 	.word	0x20008170
 800af04:	20008168 	.word	0x20008168

0800af08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af14:	4b27      	ldr	r3, [pc, #156]	; (800afb4 <prvHeapInit+0xac>)
 800af16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00c      	beq.n	800af3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3307      	adds	r3, #7
 800af26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 0307 	bic.w	r3, r3, #7
 800af2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <prvHeapInit+0xac>)
 800af38:	4413      	add	r3, r2
 800af3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800af40:	4a1d      	ldr	r2, [pc, #116]	; (800afb8 <prvHeapInit+0xb0>)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800af46:	4b1c      	ldr	r3, [pc, #112]	; (800afb8 <prvHeapInit+0xb0>)
 800af48:	2200      	movs	r2, #0
 800af4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	4413      	add	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800af54:	2208      	movs	r2, #8
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	1a9b      	subs	r3, r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 0307 	bic.w	r3, r3, #7
 800af62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4a15      	ldr	r2, [pc, #84]	; (800afbc <prvHeapInit+0xb4>)
 800af68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af6a:	4b14      	ldr	r3, [pc, #80]	; (800afbc <prvHeapInit+0xb4>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2200      	movs	r2, #0
 800af70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af72:	4b12      	ldr	r3, [pc, #72]	; (800afbc <prvHeapInit+0xb4>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	1ad2      	subs	r2, r2, r3
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <prvHeapInit+0xb4>)
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4a0a      	ldr	r2, [pc, #40]	; (800afc0 <prvHeapInit+0xb8>)
 800af96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	4a09      	ldr	r2, [pc, #36]	; (800afc4 <prvHeapInit+0xbc>)
 800af9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800afa0:	4b09      	ldr	r3, [pc, #36]	; (800afc8 <prvHeapInit+0xc0>)
 800afa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800afa6:	601a      	str	r2, [r3, #0]
}
 800afa8:	bf00      	nop
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	2000015c 	.word	0x2000015c
 800afb8:	2000815c 	.word	0x2000815c
 800afbc:	20008164 	.word	0x20008164
 800afc0:	2000816c 	.word	0x2000816c
 800afc4:	20008168 	.word	0x20008168
 800afc8:	20008170 	.word	0x20008170

0800afcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800afd4:	4b28      	ldr	r3, [pc, #160]	; (800b078 <prvInsertBlockIntoFreeList+0xac>)
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	e002      	b.n	800afe0 <prvInsertBlockIntoFreeList+0x14>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d8f7      	bhi.n	800afda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	4413      	add	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d108      	bne.n	800b00e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	441a      	add	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	441a      	add	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d118      	bne.n	800b054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	4b15      	ldr	r3, [pc, #84]	; (800b07c <prvInsertBlockIntoFreeList+0xb0>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d00d      	beq.n	800b04a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	441a      	add	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	e008      	b.n	800b05c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b04a:	4b0c      	ldr	r3, [pc, #48]	; (800b07c <prvInsertBlockIntoFreeList+0xb0>)
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	e003      	b.n	800b05c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d002      	beq.n	800b06a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b06a:	bf00      	nop
 800b06c:	3714      	adds	r7, #20
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	2000815c 	.word	0x2000815c
 800b07c:	20008164 	.word	0x20008164

0800b080 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800b08e:	b480      	push	{r7}
 800b090:	b083      	sub	sp, #12
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800b0a8:	bf00      	nop
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
	...

0800b0b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b0b4:	b5b0      	push	{r4, r5, r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b0ba:	f7f5 fa41 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b0be:	f000 f857 	bl	800b170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b0c2:	f001 f99f 	bl	800c404 <MX_GPIO_Init>
  MX_ADC1_Init();
 800b0c6:	f000 f925 	bl	800b314 <MX_ADC1_Init>
  MX_ADC3_Init();
 800b0ca:	f000 f975 	bl	800b3b8 <MX_ADC3_Init>
  MX_CRC_Init();
 800b0ce:	f000 f9c5 	bl	800b45c <MX_CRC_Init>
  MX_DMA2D_Init();
 800b0d2:	f000 f9e5 	bl	800b4a0 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800b0d6:	f000 fa1b 	bl	800b510 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 800b0da:	f000 fb19 	bl	800b710 <MX_ETH_Init>
  MX_FMC_Init();
 800b0de:	f001 f941 	bl	800c364 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 800b0e2:	f000 fb4b 	bl	800b77c <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 800b0e6:	f000 fb7d 	bl	800b7e4 <MX_I2C1_Init>
  MX_I2C4_Init();
 800b0ea:	f000 fbbb 	bl	800b864 <MX_I2C4_Init>
  MX_IWDG_Init();
 800b0ee:	f000 fbf9 	bl	800b8e4 <MX_IWDG_Init>
  MX_LTDC_Init();
 800b0f2:	f000 fc15 	bl	800b920 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800b0f6:	f000 fc91 	bl	800ba1c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800b0fa:	f000 fcbb 	bl	800ba74 <MX_RTC_Init>
  MX_SAI1_Init();
 800b0fe:	f000 fd59 	bl	800bbb4 <MX_SAI1_Init>
  MX_SAI2_Init();
 800b102:	f000 fdff 	bl	800bd04 <MX_SAI2_Init>
  MX_SDMMC2_MMC_Init();
 800b106:	f000 fe29 	bl	800bd5c <MX_SDMMC2_MMC_Init>
  MX_SPDIFRX_Init();
 800b10a:	f000 fe57 	bl	800bdbc <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800b10e:	f000 fe87 	bl	800be20 <MX_SPI2_Init>
  MX_TIM1_Init();
 800b112:	f000 fec1 	bl	800be98 <MX_TIM1_Init>
  MX_TIM3_Init();
 800b116:	f000 ff11 	bl	800bf3c <MX_TIM3_Init>
  MX_TIM10_Init();
 800b11a:	f000 ff69 	bl	800bff0 <MX_TIM10_Init>
  MX_TIM11_Init();
 800b11e:	f000 ffb3 	bl	800c088 <MX_TIM11_Init>
  MX_TIM12_Init();
 800b122:	f000 fffd 	bl	800c120 <MX_TIM12_Init>
  MX_UART5_Init();
 800b126:	f001 f83f 	bl	800c1a8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800b12a:	f001 f86d 	bl	800c208 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800b12e:	f001 f89b 	bl	800c268 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 800b132:	f001 f8c9 	bl	800c2c8 <MX_USB_OTG_HS_PCD_Init>
  MX_WWDG_Init();
 800b136:	f001 f8f5 	bl	800c324 <MX_WWDG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800b13a:	4b0b      	ldr	r3, [pc, #44]	; (800b168 <main+0xb4>)
 800b13c:	1d3c      	adds	r4, r7, #4
 800b13e:	461d      	mov	r5, r3
 800b140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b148:	1d3b      	adds	r3, r7, #4
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fe fe16 	bl	8009d7e <osThreadCreate>
 800b152:	4602      	mov	r2, r0
 800b154:	4b05      	ldr	r3, [pc, #20]	; (800b16c <main+0xb8>)
 800b156:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800b158:	f7fe fe0a 	bl	8009d70 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
HAL_Delay(500);
 800b15c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b160:	f7f5 fa1c 	bl	800059c <HAL_Delay>
 800b164:	e7fa      	b.n	800b15c <main+0xa8>
 800b166:	bf00      	nop
 800b168:	0800dbb4 	.word	0x0800dbb4
 800b16c:	20008204 	.word	0x20008204

0800b170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b0b8      	sub	sp, #224	; 0xe0
 800b174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b176:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b17a:	2234      	movs	r2, #52	; 0x34
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f002 fcfa 	bl	800db78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b184:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	605a      	str	r2, [r3, #4]
 800b18e:	609a      	str	r2, [r3, #8]
 800b190:	60da      	str	r2, [r3, #12]
 800b192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b194:	f107 0308 	add.w	r3, r7, #8
 800b198:	2290      	movs	r2, #144	; 0x90
 800b19a:	2100      	movs	r1, #0
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 fceb 	bl	800db78 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800b1a2:	f7f9 fe93 	bl	8004ecc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b1a6:	4b58      	ldr	r3, [pc, #352]	; (800b308 <SystemClock_Config+0x198>)
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	4a57      	ldr	r2, [pc, #348]	; (800b308 <SystemClock_Config+0x198>)
 800b1ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1b0:	6413      	str	r3, [r2, #64]	; 0x40
 800b1b2:	4b55      	ldr	r3, [pc, #340]	; (800b308 <SystemClock_Config+0x198>)
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1ba:	607b      	str	r3, [r7, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b1be:	4b53      	ldr	r3, [pc, #332]	; (800b30c <SystemClock_Config+0x19c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a52      	ldr	r2, [pc, #328]	; (800b30c <SystemClock_Config+0x19c>)
 800b1c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	4b50      	ldr	r3, [pc, #320]	; (800b30c <SystemClock_Config+0x19c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800b1d6:	230b      	movs	r3, #11
 800b1d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b1dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b1e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b1ea:	2310      	movs	r3, #16
 800b1ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b1fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800b204:	2319      	movs	r3, #25
 800b206:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 800b20a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800b20e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b212:	2302      	movs	r3, #2
 800b214:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b218:	2304      	movs	r3, #4
 800b21a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b21e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800b222:	4618      	mov	r0, r3
 800b224:	f7f9 ff82 	bl	800512c <HAL_RCC_OscConfig>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b22e:	f001 fa57 	bl	800c6e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800b232:	f7f9 fe5b 	bl	8004eec <HAL_PWREx_EnableOverDrive>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800b23c:	f001 fa50 	bl	800c6e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b240:	230f      	movs	r3, #15
 800b242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b246:	2302      	movs	r3, #2
 800b248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b24c:	2300      	movs	r3, #0
 800b24e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b252:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800b256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b25a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b25e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800b262:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800b266:	2107      	movs	r1, #7
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fa f9d1 	bl	8005610 <HAL_RCC_ClockConfig>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800b274:	f001 fa34 	bl	800c6e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <SystemClock_Config+0x1a0>)
 800b27a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_CEC;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800b27c:	23c0      	movs	r3, #192	; 0xc0
 800b27e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800b280:	2302      	movs	r3, #2
 800b282:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800b284:	2302      	movs	r3, #2
 800b286:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800b288:	2302      	movs	r3, #2
 800b28a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800b28c:	23c0      	movs	r3, #192	; 0xc0
 800b28e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800b290:	2302      	movs	r3, #2
 800b292:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800b294:	2303      	movs	r3, #3
 800b296:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800b298:	2301      	movs	r3, #1
 800b29a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800b29c:	2301      	movs	r3, #1
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800b2a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2ac:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 800b2ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b2ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800b2d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b2e0:	f107 0308 	add.w	r3, r7, #8
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fa fbf7 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <SystemClock_Config+0x184>
  {
    Error_Handler();
 800b2f0:	f001 f9f6 	bl	800c6e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f7fa fa71 	bl	80057e0 <HAL_RCC_MCOConfig>
}
 800b2fe:	bf00      	nop
 800b300:	37e0      	adds	r7, #224	; 0xe0
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	40023800 	.word	0x40023800
 800b30c:	40007000 	.word	0x40007000
 800b310:	057a4c68 	.word	0x057a4c68

0800b314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b31a:	463b      	mov	r3, r7
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	605a      	str	r2, [r3, #4]
 800b322:	609a      	str	r2, [r3, #8]
 800b324:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800b326:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b328:	4a21      	ldr	r2, [pc, #132]	; (800b3b0 <MX_ADC1_Init+0x9c>)
 800b32a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b32c:	4b1f      	ldr	r3, [pc, #124]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b32e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b332:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b334:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b336:	2200      	movs	r2, #0
 800b338:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800b33a:	4b1c      	ldr	r3, [pc, #112]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b340:	4b1a      	ldr	r3, [pc, #104]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b342:	2200      	movs	r2, #0
 800b344:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b346:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b34e:	4b17      	ldr	r3, [pc, #92]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b350:	2200      	movs	r2, #0
 800b352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b354:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b356:	4a17      	ldr	r2, [pc, #92]	; (800b3b4 <MX_ADC1_Init+0xa0>)
 800b358:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b35a:	4b14      	ldr	r3, [pc, #80]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800b360:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b362:	2201      	movs	r2, #1
 800b364:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800b366:	4b11      	ldr	r3, [pc, #68]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b36e:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b370:	2201      	movs	r2, #1
 800b372:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b374:	480d      	ldr	r0, [pc, #52]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b376:	f7f5 f933 	bl	80005e0 <HAL_ADC_Init>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800b380:	f001 f9ae 	bl	800c6e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800b384:	230c      	movs	r3, #12
 800b386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b388:	2301      	movs	r3, #1
 800b38a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b390:	463b      	mov	r3, r7
 800b392:	4619      	mov	r1, r3
 800b394:	4805      	ldr	r0, [pc, #20]	; (800b3ac <MX_ADC1_Init+0x98>)
 800b396:	f7f5 f967 	bl	8000668 <HAL_ADC_ConfigChannel>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800b3a0:	f001 f99e 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800b3a4:	bf00      	nop
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	20008a98 	.word	0x20008a98
 800b3b0:	40012000 	.word	0x40012000
 800b3b4:	0f000001 	.word	0x0f000001

0800b3b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b3be:	463b      	mov	r3, r7
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	605a      	str	r2, [r3, #4]
 800b3c6:	609a      	str	r2, [r3, #8]
 800b3c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800b3ca:	4b21      	ldr	r3, [pc, #132]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3cc:	4a21      	ldr	r2, [pc, #132]	; (800b454 <MX_ADC3_Init+0x9c>)
 800b3ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800b3d0:	4b1f      	ldr	r3, [pc, #124]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b3d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800b3d8:	4b1d      	ldr	r3, [pc, #116]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800b3de:	4b1c      	ldr	r3, [pc, #112]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b3ea:	4b19      	ldr	r3, [pc, #100]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b3f2:	4b17      	ldr	r3, [pc, #92]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b3f8:	4b15      	ldr	r3, [pc, #84]	; (800b450 <MX_ADC3_Init+0x98>)
 800b3fa:	4a17      	ldr	r2, [pc, #92]	; (800b458 <MX_ADC3_Init+0xa0>)
 800b3fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b3fe:	4b14      	ldr	r3, [pc, #80]	; (800b450 <MX_ADC3_Init+0x98>)
 800b400:	2200      	movs	r2, #0
 800b402:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b404:	4b12      	ldr	r3, [pc, #72]	; (800b450 <MX_ADC3_Init+0x98>)
 800b406:	2201      	movs	r2, #1
 800b408:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800b40a:	4b11      	ldr	r3, [pc, #68]	; (800b450 <MX_ADC3_Init+0x98>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b412:	4b0f      	ldr	r3, [pc, #60]	; (800b450 <MX_ADC3_Init+0x98>)
 800b414:	2201      	movs	r2, #1
 800b416:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800b418:	480d      	ldr	r0, [pc, #52]	; (800b450 <MX_ADC3_Init+0x98>)
 800b41a:	f7f5 f8e1 	bl	80005e0 <HAL_ADC_Init>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800b424:	f001 f95c 	bl	800c6e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800b428:	2306      	movs	r3, #6
 800b42a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b430:	2300      	movs	r3, #0
 800b432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800b434:	463b      	mov	r3, r7
 800b436:	4619      	mov	r1, r3
 800b438:	4805      	ldr	r0, [pc, #20]	; (800b450 <MX_ADC3_Init+0x98>)
 800b43a:	f7f5 f915 	bl	8000668 <HAL_ADC_ConfigChannel>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800b444:	f001 f94c 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800b448:	bf00      	nop
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20008ae0 	.word	0x20008ae0
 800b454:	40012200 	.word	0x40012200
 800b458:	0f000001 	.word	0x0f000001

0800b45c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800b460:	4b0d      	ldr	r3, [pc, #52]	; (800b498 <MX_CRC_Init+0x3c>)
 800b462:	4a0e      	ldr	r2, [pc, #56]	; (800b49c <MX_CRC_Init+0x40>)
 800b464:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b466:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <MX_CRC_Init+0x3c>)
 800b468:	2200      	movs	r2, #0
 800b46a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800b46c:	4b0a      	ldr	r3, [pc, #40]	; (800b498 <MX_CRC_Init+0x3c>)
 800b46e:	2200      	movs	r2, #0
 800b470:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800b472:	4b09      	ldr	r3, [pc, #36]	; (800b498 <MX_CRC_Init+0x3c>)
 800b474:	2200      	movs	r2, #0
 800b476:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800b478:	4b07      	ldr	r3, [pc, #28]	; (800b498 <MX_CRC_Init+0x3c>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800b47e:	4b06      	ldr	r3, [pc, #24]	; (800b498 <MX_CRC_Init+0x3c>)
 800b480:	2201      	movs	r2, #1
 800b482:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800b484:	4804      	ldr	r0, [pc, #16]	; (800b498 <MX_CRC_Init+0x3c>)
 800b486:	f7f5 fd67 	bl	8000f58 <HAL_CRC_Init>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800b490:	f001 f926 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800b494:	bf00      	nop
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20008828 	.word	0x20008828
 800b49c:	40023000 	.word	0x40023000

0800b4a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800b4a4:	4b18      	ldr	r3, [pc, #96]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4a6:	4a19      	ldr	r2, [pc, #100]	; (800b50c <MX_DMA2D_Init+0x6c>)
 800b4a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800b4aa:	4b17      	ldr	r3, [pc, #92]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800b4b0:	4b15      	ldr	r3, [pc, #84]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800b4b6:	4b14      	ldr	r3, [pc, #80]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800b4bc:	4b12      	ldr	r3, [pc, #72]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4be:	2200      	movs	r2, #0
 800b4c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800b4c2:	4b11      	ldr	r3, [pc, #68]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800b4c8:	4b0f      	ldr	r3, [pc, #60]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800b4ce:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800b4e0:	4809      	ldr	r0, [pc, #36]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4e2:	f7f5 fe23 	bl	800112c <HAL_DMA2D_Init>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800b4ec:	f001 f8f8 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	4805      	ldr	r0, [pc, #20]	; (800b508 <MX_DMA2D_Init+0x68>)
 800b4f4:	f7f5 ff84 	bl	8001400 <HAL_DMA2D_ConfigLayer>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800b4fe:	f001 f8ef 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800b502:	bf00      	nop
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20008cdc 	.word	0x20008cdc
 800b50c:	4002b000 	.word	0x4002b000

0800b510 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b0aa      	sub	sp, #168	; 0xa8
 800b514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800b516:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	605a      	str	r2, [r3, #4]
 800b520:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800b522:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b526:	2224      	movs	r2, #36	; 0x24
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f002 fb24 	bl	800db78 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800b530:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	605a      	str	r2, [r3, #4]
 800b53a:	609a      	str	r2, [r3, #8]
 800b53c:	60da      	str	r2, [r3, #12]
 800b53e:	611a      	str	r2, [r3, #16]
 800b540:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800b542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b546:	2234      	movs	r2, #52	; 0x34
 800b548:	2100      	movs	r1, #0
 800b54a:	4618      	mov	r0, r3
 800b54c:	f002 fb14 	bl	800db78 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800b550:	463b      	mov	r3, r7
 800b552:	222c      	movs	r2, #44	; 0x2c
 800b554:	2100      	movs	r1, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f002 fb0e 	bl	800db78 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800b55c:	4b6a      	ldr	r3, [pc, #424]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b55e:	4a6b      	ldr	r2, [pc, #428]	; (800b70c <MX_DSIHOST_DSI_Init+0x1fc>)
 800b560:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800b562:	4b69      	ldr	r3, [pc, #420]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b564:	2200      	movs	r2, #0
 800b566:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800b568:	4b67      	ldr	r3, [pc, #412]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b56a:	2204      	movs	r2, #4
 800b56c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800b56e:	4b66      	ldr	r3, [pc, #408]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b570:	2201      	movs	r2, #1
 800b572:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800b574:	2314      	movs	r3, #20
 800b576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800b57a:	2301      	movs	r3, #1
 800b57c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800b580:	2300      	movs	r3, #0
 800b582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800b586:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b58a:	4619      	mov	r1, r3
 800b58c:	485e      	ldr	r0, [pc, #376]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b58e:	f7f5 ffd5 	bl	800153c <HAL_DSI_Init>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800b598:	f001 f8a2 	bl	800c6e0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800b59c:	2301      	movs	r3, #1
 800b59e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800b5ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	484c      	ldr	r0, [pc, #304]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b5d6:	f7f6 fc61 	bl	8001e9c <HAL_DSI_ConfigHostTimeouts>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800b5e0:	f001 f87e 	bl	800c6e0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800b5e4:	231c      	movs	r3, #28
 800b5e6:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800b5e8:	2321      	movs	r3, #33	; 0x21
 800b5ea:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800b5ec:	230f      	movs	r3, #15
 800b5ee:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800b5f0:	2319      	movs	r3, #25
 800b5f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 10;
 800b5f8:	230a      	movs	r3, #10
 800b5fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800b5fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b600:	4619      	mov	r1, r3
 800b602:	4841      	ldr	r0, [pc, #260]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b604:	f7f6 fbe0 	bl	8001dc8 <HAL_DSI_ConfigPhyTimer>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800b60e:	f001 f867 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800b612:	2104      	movs	r1, #4
 800b614:	483c      	ldr	r0, [pc, #240]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b616:	f7f6 fbaf 	bl	8001d78 <HAL_DSI_ConfigFlowControl>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800b620:	f001 f85e 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800b624:	f242 7110 	movw	r1, #10000	; 0x2710
 800b628:	4837      	ldr	r0, [pc, #220]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b62a:	f7f6 fcff 	bl	800202c <HAL_DSI_SetLowPowerRXFilter>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800b634:	f001 f854 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800b638:	2100      	movs	r1, #0
 800b63a:	4833      	ldr	r0, [pc, #204]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b63c:	f7f6 f898 	bl	8001770 <HAL_DSI_ConfigErrorMonitor>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800b646:	f001 f84b 	bl	800c6e0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800b64a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800b650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b654:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800b656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b65a:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800b65c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b660:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800b662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b666:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800b668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b66c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800b66e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b672:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800b674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b678:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800b67a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b67e:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800b680:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b684:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800b686:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b68a:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800b68c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b690:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800b692:	2300      	movs	r3, #0
 800b694:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800b696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b69a:	4619      	mov	r1, r3
 800b69c:	481a      	ldr	r0, [pc, #104]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b69e:	f7f6 fb0d 	bl	8001cbc <HAL_DSI_ConfigCommand>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 800b6a8:	f001 f81a 	bl	800c6e0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800b6b0:	2305      	movs	r3, #5
 800b6b2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 800b6b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b6b8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800b6ba:	2310      	movs	r3, #16
 800b6bc:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800b6c2:	2304      	movs	r3, #4
 800b6c4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800b6d2:	2340      	movs	r3, #64	; 0x40
 800b6d4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800b6da:	463b      	mov	r3, r7
 800b6dc:	4619      	mov	r1, r3
 800b6de:	480a      	ldr	r0, [pc, #40]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b6e0:	f7f6 fa12 	bl	8001b08 <HAL_DSI_ConfigAdaptedCommandMode>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 800b6ea:	f000 fff9 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <MX_DSIHOST_DSI_Init+0x1f8>)
 800b6f2:	f7f6 f9e0 	bl	8001ab6 <HAL_DSI_SetGenericVCID>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 800b6fc:	f000 fff0 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800b700:	bf00      	nop
 800b702:	37a8      	adds	r7, #168	; 0xa8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	2000884c 	.word	0x2000884c
 800b70c:	40016c00 	.word	0x40016c00

0800b710 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800b716:	4b17      	ldr	r3, [pc, #92]	; (800b774 <MX_ETH_Init+0x64>)
 800b718:	4a17      	ldr	r2, [pc, #92]	; (800b778 <MX_ETH_Init+0x68>)
 800b71a:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b71c:	4b15      	ldr	r3, [pc, #84]	; (800b774 <MX_ETH_Init+0x64>)
 800b71e:	2201      	movs	r2, #1
 800b720:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b722:	4b14      	ldr	r3, [pc, #80]	; (800b774 <MX_ETH_Init+0x64>)
 800b724:	2200      	movs	r2, #0
 800b726:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b728:	2300      	movs	r3, #0
 800b72a:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 800b72c:	2380      	movs	r3, #128	; 0x80
 800b72e:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 800b730:	23e1      	movs	r3, #225	; 0xe1
 800b732:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 800b734:	2300      	movs	r3, #0
 800b736:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 800b738:	2300      	movs	r3, #0
 800b73a:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 800b73c:	2300      	movs	r3, #0
 800b73e:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800b740:	4a0c      	ldr	r2, [pc, #48]	; (800b774 <MX_ETH_Init+0x64>)
 800b742:	463b      	mov	r3, r7
 800b744:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800b746:	4b0b      	ldr	r3, [pc, #44]	; (800b774 <MX_ETH_Init+0x64>)
 800b748:	2200      	movs	r2, #0
 800b74a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b74c:	4b09      	ldr	r3, [pc, #36]	; (800b774 <MX_ETH_Init+0x64>)
 800b74e:	2200      	movs	r2, #0
 800b750:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b752:	4b08      	ldr	r3, [pc, #32]	; (800b774 <MX_ETH_Init+0x64>)
 800b754:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b758:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800b75a:	4806      	ldr	r0, [pc, #24]	; (800b774 <MX_ETH_Init+0x64>)
 800b75c:	f7f6 fc94 	bl	8002088 <HAL_ETH_Init>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800b766:	f000 ffbb 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800b76a:	bf00      	nop
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20008e3c 	.word	0x20008e3c
 800b778:	40028000 	.word	0x40028000

0800b77c <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 800b780:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b782:	4a16      	ldr	r2, [pc, #88]	; (800b7dc <MX_HDMI_CEC_Init+0x60>)
 800b784:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 800b786:	4b14      	ldr	r3, [pc, #80]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b788:	2200      	movs	r2, #0
 800b78a:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 800b78c:	4b12      	ldr	r3, [pc, #72]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b78e:	2200      	movs	r2, #0
 800b790:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 800b792:	4b11      	ldr	r3, [pc, #68]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b794:	2210      	movs	r2, #16
 800b796:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 800b798:	4b0f      	ldr	r3, [pc, #60]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 800b79e:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 800b7b0:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b7b6:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 800b7be:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7c0:	4a07      	ldr	r2, [pc, #28]	; (800b7e0 <MX_HDMI_CEC_Init+0x64>)
 800b7c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 800b7c4:	4804      	ldr	r0, [pc, #16]	; (800b7d8 <MX_HDMI_CEC_Init+0x5c>)
 800b7c6:	f7f5 f97d 	bl	8000ac4 <HAL_CEC_Init>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 800b7d0:	f000 ff86 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 800b7d4:	bf00      	nop
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20008868 	.word	0x20008868
 800b7dc:	40006c00 	.word	0x40006c00
 800b7e0:	20008e2c 	.word	0x20008e2c

0800b7e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b7e8:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <MX_I2C1_Init+0x74>)
 800b7ea:	4a1c      	ldr	r2, [pc, #112]	; (800b85c <MX_I2C1_Init+0x78>)
 800b7ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800b7ee:	4b1a      	ldr	r3, [pc, #104]	; (800b858 <MX_I2C1_Init+0x74>)
 800b7f0:	4a1b      	ldr	r2, [pc, #108]	; (800b860 <MX_I2C1_Init+0x7c>)
 800b7f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b7f4:	4b18      	ldr	r3, [pc, #96]	; (800b858 <MX_I2C1_Init+0x74>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b7fa:	4b17      	ldr	r3, [pc, #92]	; (800b858 <MX_I2C1_Init+0x74>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b800:	4b15      	ldr	r3, [pc, #84]	; (800b858 <MX_I2C1_Init+0x74>)
 800b802:	2200      	movs	r2, #0
 800b804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b806:	4b14      	ldr	r3, [pc, #80]	; (800b858 <MX_I2C1_Init+0x74>)
 800b808:	2200      	movs	r2, #0
 800b80a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b80c:	4b12      	ldr	r3, [pc, #72]	; (800b858 <MX_I2C1_Init+0x74>)
 800b80e:	2200      	movs	r2, #0
 800b810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <MX_I2C1_Init+0x74>)
 800b814:	2200      	movs	r2, #0
 800b816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b818:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <MX_I2C1_Init+0x74>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b81e:	480e      	ldr	r0, [pc, #56]	; (800b858 <MX_I2C1_Init+0x74>)
 800b820:	f7f7 fa62 	bl	8002ce8 <HAL_I2C_Init>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b82a:	f000 ff59 	bl	800c6e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b82e:	2100      	movs	r1, #0
 800b830:	4809      	ldr	r0, [pc, #36]	; (800b858 <MX_I2C1_Init+0x74>)
 800b832:	f7f7 fae9 	bl	8002e08 <HAL_I2CEx_ConfigAnalogFilter>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b83c:	f000 ff50 	bl	800c6e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b840:	2100      	movs	r1, #0
 800b842:	4805      	ldr	r0, [pc, #20]	; (800b858 <MX_I2C1_Init+0x74>)
 800b844:	f7f7 fb2b 	bl	8002e9e <HAL_I2CEx_ConfigDigitalFilter>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b84e:	f000 ff47 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b852:	bf00      	nop
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	2000878c 	.word	0x2000878c
 800b85c:	40005400 	.word	0x40005400
 800b860:	20404768 	.word	0x20404768

0800b864 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800b868:	4b1b      	ldr	r3, [pc, #108]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b86a:	4a1c      	ldr	r2, [pc, #112]	; (800b8dc <MX_I2C4_Init+0x78>)
 800b86c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 800b86e:	4b1a      	ldr	r3, [pc, #104]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b870:	4a1b      	ldr	r2, [pc, #108]	; (800b8e0 <MX_I2C4_Init+0x7c>)
 800b872:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800b874:	4b18      	ldr	r3, [pc, #96]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b876:	2200      	movs	r2, #0
 800b878:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b87a:	4b17      	ldr	r3, [pc, #92]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b880:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b882:	2200      	movs	r2, #0
 800b884:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b888:	2200      	movs	r2, #0
 800b88a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b88c:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b88e:	2200      	movs	r2, #0
 800b890:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b892:	4b11      	ldr	r3, [pc, #68]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b894:	2200      	movs	r2, #0
 800b896:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b898:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800b89e:	480e      	ldr	r0, [pc, #56]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b8a0:	f7f7 fa22 	bl	8002ce8 <HAL_I2C_Init>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800b8aa:	f000 ff19 	bl	800c6e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4809      	ldr	r0, [pc, #36]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b8b2:	f7f7 faa9 	bl	8002e08 <HAL_I2CEx_ConfigAnalogFilter>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d001      	beq.n	800b8c0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800b8bc:	f000 ff10 	bl	800c6e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4805      	ldr	r0, [pc, #20]	; (800b8d8 <MX_I2C4_Init+0x74>)
 800b8c4:	f7f7 faeb 	bl	8002e9e <HAL_I2CEx_ConfigDigitalFilter>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800b8ce:	f000 ff07 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800b8d2:	bf00      	nop
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20008208 	.word	0x20008208
 800b8dc:	40006000 	.word	0x40006000
 800b8e0:	20404768 	.word	0x20404768

0800b8e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800b8e8:	4b0b      	ldr	r3, [pc, #44]	; (800b918 <MX_IWDG_Init+0x34>)
 800b8ea:	4a0c      	ldr	r2, [pc, #48]	; (800b91c <MX_IWDG_Init+0x38>)
 800b8ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <MX_IWDG_Init+0x34>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800b8f4:	4b08      	ldr	r3, [pc, #32]	; (800b918 <MX_IWDG_Init+0x34>)
 800b8f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b8fa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800b8fc:	4b06      	ldr	r3, [pc, #24]	; (800b918 <MX_IWDG_Init+0x34>)
 800b8fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b902:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800b904:	4804      	ldr	r0, [pc, #16]	; (800b918 <MX_IWDG_Init+0x34>)
 800b906:	f7f7 fb16 	bl	8002f36 <HAL_IWDG_Init>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800b910:	f000 fee6 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800b914:	bf00      	nop
 800b916:	bd80      	pop	{r7, pc}
 800b918:	20008818 	.word	0x20008818
 800b91c:	40003000 	.word	0x40003000

0800b920 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b08e      	sub	sp, #56	; 0x38
 800b924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800b926:	1d3b      	adds	r3, r7, #4
 800b928:	2234      	movs	r2, #52	; 0x34
 800b92a:	2100      	movs	r1, #0
 800b92c:	4618      	mov	r0, r3
 800b92e:	f002 f923 	bl	800db78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800b932:	4b38      	ldr	r3, [pc, #224]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b934:	4a38      	ldr	r2, [pc, #224]	; (800ba18 <MX_LTDC_Init+0xf8>)
 800b936:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800b938:	4b36      	ldr	r3, [pc, #216]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800b93e:	4b35      	ldr	r3, [pc, #212]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b940:	2200      	movs	r2, #0
 800b942:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800b944:	4b33      	ldr	r3, [pc, #204]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b946:	2200      	movs	r2, #0
 800b948:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800b94a:	4b32      	ldr	r3, [pc, #200]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 800b950:	4b30      	ldr	r3, [pc, #192]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b952:	2200      	movs	r2, #0
 800b954:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 800b956:	4b2f      	ldr	r3, [pc, #188]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b958:	2200      	movs	r2, #0
 800b95a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 800b95c:	4b2d      	ldr	r3, [pc, #180]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b95e:	2201      	movs	r2, #1
 800b960:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800b962:	4b2c      	ldr	r3, [pc, #176]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b964:	2201      	movs	r2, #1
 800b966:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 800b968:	4b2a      	ldr	r3, [pc, #168]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b96a:	22c9      	movs	r2, #201	; 0xc9
 800b96c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 800b96e:	4b29      	ldr	r3, [pc, #164]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b970:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b974:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 202;
 800b976:	4b27      	ldr	r3, [pc, #156]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b978:	22ca      	movs	r2, #202	; 0xca
 800b97a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 800b97c:	4b25      	ldr	r3, [pc, #148]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b97e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800b982:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800b984:	4b23      	ldr	r3, [pc, #140]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800b98c:	4b21      	ldr	r3, [pc, #132]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800b994:	4b1f      	ldr	r3, [pc, #124]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800b99c:	481d      	ldr	r0, [pc, #116]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b99e:	f7f7 fb11 	bl	8002fc4 <HAL_LTDC_Init>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 800b9a8:	f000 fe9a 	bl	800c6e0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 800b9b0:	23c8      	movs	r3, #200	; 0xc8
 800b9b2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800b9b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b9bc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800b9be:	2302      	movs	r3, #2
 800b9c0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800b9c2:	23ff      	movs	r3, #255	; 0xff
 800b9c4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b9ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b9ce:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b9d0:	2307      	movs	r3, #7
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800b9d4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800b9d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 200;
 800b9da:	23c8      	movs	r3, #200	; 0xc8
 800b9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800b9de:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b9e2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800b9f6:	1d3b      	adds	r3, r7, #4
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4805      	ldr	r0, [pc, #20]	; (800ba14 <MX_LTDC_Init+0xf4>)
 800b9fe:	f7f7 fc73 	bl	80032e8 <HAL_LTDC_ConfigLayer>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 800ba08:	f000 fe6a 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800ba0c:	bf00      	nop
 800ba0e:	3738      	adds	r7, #56	; 0x38
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	200088ec 	.word	0x200088ec
 800ba18:	40016800 	.word	0x40016800

0800ba1c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800ba20:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba22:	4a13      	ldr	r2, [pc, #76]	; (800ba70 <MX_QUADSPI_Init+0x54>)
 800ba24:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800ba26:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba28:	22ff      	movs	r2, #255	; 0xff
 800ba2a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800ba2c:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba2e:	2201      	movs	r2, #1
 800ba30:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800ba32:	4b0e      	ldr	r3, [pc, #56]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800ba38:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800ba3e:	4b0b      	ldr	r3, [pc, #44]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800ba44:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800ba4a:	4b08      	ldr	r3, [pc, #32]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800ba56:	4805      	ldr	r0, [pc, #20]	; (800ba6c <MX_QUADSPI_Init+0x50>)
 800ba58:	f7f9 fa98 	bl	8004f8c <HAL_QSPI_Init>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800ba62:	f000 fe3d 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800ba66:	bf00      	nop
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20008e84 	.word	0x20008e84
 800ba70:	a0001000 	.word	0xa0001000

0800ba74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b092      	sub	sp, #72	; 0x48
 800ba78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800ba7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba7e:	2200      	movs	r2, #0
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	605a      	str	r2, [r3, #4]
 800ba84:	609a      	str	r2, [r3, #8]
 800ba86:	60da      	str	r2, [r3, #12]
 800ba88:	611a      	str	r2, [r3, #16]
 800ba8a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800ba90:	463b      	mov	r3, r7
 800ba92:	222c      	movs	r2, #44	; 0x2c
 800ba94:	2100      	movs	r1, #0
 800ba96:	4618      	mov	r0, r3
 800ba98:	f002 f86e 	bl	800db78 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800ba9c:	4b43      	ldr	r3, [pc, #268]	; (800bbac <MX_RTC_Init+0x138>)
 800ba9e:	4a44      	ldr	r2, [pc, #272]	; (800bbb0 <MX_RTC_Init+0x13c>)
 800baa0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800baa2:	4b42      	ldr	r3, [pc, #264]	; (800bbac <MX_RTC_Init+0x138>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800baa8:	4b40      	ldr	r3, [pc, #256]	; (800bbac <MX_RTC_Init+0x138>)
 800baaa:	227f      	movs	r2, #127	; 0x7f
 800baac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800baae:	4b3f      	ldr	r3, [pc, #252]	; (800bbac <MX_RTC_Init+0x138>)
 800bab0:	22ff      	movs	r2, #255	; 0xff
 800bab2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 800bab4:	4b3d      	ldr	r3, [pc, #244]	; (800bbac <MX_RTC_Init+0x138>)
 800bab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800baba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800babc:	4b3b      	ldr	r3, [pc, #236]	; (800bbac <MX_RTC_Init+0x138>)
 800babe:	2200      	movs	r2, #0
 800bac0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bac2:	4b3a      	ldr	r3, [pc, #232]	; (800bbac <MX_RTC_Init+0x138>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bac8:	4838      	ldr	r0, [pc, #224]	; (800bbac <MX_RTC_Init+0x138>)
 800baca:	f7fa fd85 	bl	80065d8 <HAL_RTC_Init>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 800bad4:	f000 fe04 	bl	800c6e0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800bad8:	2300      	movs	r3, #0
 800bada:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800bade:	2300      	movs	r3, #0
 800bae0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800baea:	2300      	movs	r3, #0
 800baec:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800baee:	2300      	movs	r3, #0
 800baf0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800baf2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800baf6:	2201      	movs	r2, #1
 800baf8:	4619      	mov	r1, r3
 800bafa:	482c      	ldr	r0, [pc, #176]	; (800bbac <MX_RTC_Init+0x138>)
 800bafc:	f7fa fde8 	bl	80066d0 <HAL_RTC_SetTime>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <MX_RTC_Init+0x96>
  {
    Error_Handler();
 800bb06:	f000 fdeb 	bl	800c6e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800bb10:	2301      	movs	r3, #1
 800bb12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800bb16:	2301      	movs	r3, #1
 800bb18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800bb22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4820      	ldr	r0, [pc, #128]	; (800bbac <MX_RTC_Init+0x138>)
 800bb2c:	f7fa fe8e 	bl	800684c <HAL_RTC_SetDate>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800bb36:	f000 fdd3 	bl	800c6e0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800bb64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800bb6a:	463b      	mov	r3, r7
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	4619      	mov	r1, r3
 800bb70:	480e      	ldr	r0, [pc, #56]	; (800bbac <MX_RTC_Init+0x138>)
 800bb72:	f7fa ff13 	bl	800699c <HAL_RTC_SetAlarm>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 800bb7c:	f000 fdb0 	bl	800c6e0 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800bb80:	2301      	movs	r3, #1
 800bb82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800bb86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800bb8c:	463b      	mov	r3, r7
 800bb8e:	2201      	movs	r2, #1
 800bb90:	4619      	mov	r1, r3
 800bb92:	4806      	ldr	r0, [pc, #24]	; (800bbac <MX_RTC_Init+0x138>)
 800bb94:	f7fa ff02 	bl	800699c <HAL_RTC_SetAlarm>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 800bb9e:	f000 fd9f 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800bba2:	bf00      	nop
 800bba4:	3748      	adds	r7, #72	; 0x48
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20008be8 	.word	0x20008be8
 800bbb0:	40002800 	.word	0x40002800

0800bbb4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800bbb8:	4b4d      	ldr	r3, [pc, #308]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbba:	4a4e      	ldr	r2, [pc, #312]	; (800bcf4 <MX_SAI1_Init+0x140>)
 800bbbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800bbbe:	4b4c      	ldr	r3, [pc, #304]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800bbc4:	4b4a      	ldr	r3, [pc, #296]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800bbca:	4b49      	ldr	r3, [pc, #292]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbcc:	2240      	movs	r2, #64	; 0x40
 800bbce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bbd0:	4b47      	ldr	r3, [pc, #284]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bbd6:	4b46      	ldr	r3, [pc, #280]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800bbdc:	4b44      	ldr	r3, [pc, #272]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bbe2:	4b43      	ldr	r3, [pc, #268]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800bbe8:	4b41      	ldr	r3, [pc, #260]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bbee:	4b40      	ldr	r3, [pc, #256]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800bbf4:	4b3e      	ldr	r3, [pc, #248]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbf6:	4a40      	ldr	r2, [pc, #256]	; (800bcf8 <MX_SAI1_Init+0x144>)
 800bbf8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bbfa:	4b3d      	ldr	r3, [pc, #244]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bc00:	4b3b      	ldr	r3, [pc, #236]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bc06:	4b3a      	ldr	r3, [pc, #232]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bc0c:	4b38      	ldr	r3, [pc, #224]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800bc12:	4b37      	ldr	r3, [pc, #220]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc14:	2208      	movs	r2, #8
 800bc16:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800bc18:	4b35      	ldr	r3, [pc, #212]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800bc1e:	4b34      	ldr	r3, [pc, #208]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bc24:	4b32      	ldr	r3, [pc, #200]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bc2a:	4b31      	ldr	r3, [pc, #196]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800bc30:	4b2f      	ldr	r3, [pc, #188]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bc36:	4b2e      	ldr	r3, [pc, #184]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800bc3c:	4b2c      	ldr	r3, [pc, #176]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc3e:	2201      	movs	r2, #1
 800bc40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800bc42:	4b2b      	ldr	r3, [pc, #172]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800bc48:	4829      	ldr	r0, [pc, #164]	; (800bcf0 <MX_SAI1_Init+0x13c>)
 800bc4a:	f7fb f831 	bl	8006cb0 <HAL_SAI_Init>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800bc54:	f000 fd44 	bl	800c6e0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800bc58:	4b28      	ldr	r3, [pc, #160]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc5a:	4a29      	ldr	r2, [pc, #164]	; (800bd00 <MX_SAI1_Init+0x14c>)
 800bc5c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800bc5e:	4b27      	ldr	r3, [pc, #156]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800bc64:	4b25      	ldr	r3, [pc, #148]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc66:	2203      	movs	r2, #3
 800bc68:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800bc6a:	4b24      	ldr	r3, [pc, #144]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc6c:	2240      	movs	r2, #64	; 0x40
 800bc6e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800bc70:	4b22      	ldr	r3, [pc, #136]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bc76:	4b21      	ldr	r3, [pc, #132]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800bc7c:	4b1f      	ldr	r3, [pc, #124]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc7e:	2201      	movs	r2, #1
 800bc80:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bc82:	4b1e      	ldr	r3, [pc, #120]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bc88:	4b1c      	ldr	r3, [pc, #112]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800bc8e:	4b1b      	ldr	r3, [pc, #108]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800bc94:	4b19      	ldr	r3, [pc, #100]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800bc9a:	4b18      	ldr	r3, [pc, #96]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800bca0:	4b16      	ldr	r3, [pc, #88]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 24;
 800bca6:	4b15      	ldr	r3, [pc, #84]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bca8:	2218      	movs	r2, #24
 800bcaa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800bcac:	4b13      	ldr	r3, [pc, #76]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcae:	2201      	movs	r2, #1
 800bcb0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800bcb2:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bcb8:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800bcbe:	4b0f      	ldr	r3, [pc, #60]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800bcc4:	4b0d      	ldr	r3, [pc, #52]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800bcca:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800bcd6:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800bcdc:	4807      	ldr	r0, [pc, #28]	; (800bcfc <MX_SAI1_Init+0x148>)
 800bcde:	f7fa ffe7 	bl	8006cb0 <HAL_SAI_Init>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d001      	beq.n	800bcec <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 800bce8:	f000 fcfa 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800bcec:	bf00      	nop
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20008d34 	.word	0x20008d34
 800bcf4:	40015804 	.word	0x40015804
 800bcf8:	0002ee00 	.word	0x0002ee00
 800bcfc:	20008994 	.word	0x20008994
 800bd00:	40015824 	.word	0x40015824

0800bd04 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800bd08:	4b12      	ldr	r3, [pc, #72]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd0a:	4a13      	ldr	r2, [pc, #76]	; (800bd58 <MX_SAI2_Init+0x54>)
 800bd0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 800bd0e:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd10:	2204      	movs	r2, #4
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800bd14:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800bd20:	4b0c      	ldr	r3, [pc, #48]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800bd26:	4b0b      	ldr	r3, [pc, #44]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800bd2c:	4b09      	ldr	r3, [pc, #36]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd2e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800bd32:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800bd34:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800bd3a:	4b06      	ldr	r3, [pc, #24]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800bd40:	4804      	ldr	r0, [pc, #16]	; (800bd54 <MX_SAI2_Init+0x50>)
 800bd42:	f7fa ffb5 	bl	8006cb0 <HAL_SAI_Init>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 800bd4c:	f000 fcc8 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800bd50:	bf00      	nop
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	20008304 	.word	0x20008304
 800bd58:	40015c04 	.word	0x40015c04

0800bd5c <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 800bd60:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd62:	4a15      	ldr	r2, [pc, #84]	; (800bdb8 <MX_SDMMC2_MMC_Init+0x5c>)
 800bd64:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800bd66:	4b13      	ldr	r3, [pc, #76]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800bd6c:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	609a      	str	r2, [r3, #8]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bd72:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	60da      	str	r2, [r3, #12]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800bd78:	4b0e      	ldr	r3, [pc, #56]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	611a      	str	r2, [r3, #16]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bd7e:	4b0d      	ldr	r3, [pc, #52]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	615a      	str	r2, [r3, #20]
  hmmc2.Init.ClockDiv = 0;
 800bd84:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 800bd8a:	480a      	ldr	r0, [pc, #40]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bd8c:	f7f7 fc84 	bl	8003698 <HAL_MMC_Init>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <MX_SDMMC2_MMC_Init+0x3e>
  {
    Error_Handler();
 800bd96:	f000 fca3 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_MMC_ConfigWideBusOperation(&hmmc2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bd9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bd9e:	4805      	ldr	r0, [pc, #20]	; (800bdb4 <MX_SDMMC2_MMC_Init+0x58>)
 800bda0:	f7f7 fede 	bl	8003b60 <HAL_MMC_ConfigWideBusOperation>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <MX_SDMMC2_MMC_Init+0x52>
  {
    Error_Handler();
 800bdaa:	f000 fc99 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800bdae:	bf00      	nop
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20008184 	.word	0x20008184
 800bdb8:	40011c00 	.word	0x40011c00

0800bdbc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800bdc0:	4b16      	ldr	r3, [pc, #88]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdc2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800bdc6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 800bdc8:	4b14      	ldr	r3, [pc, #80]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bdce:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800bdd0:	4b12      	ldr	r3, [pc, #72]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800bdd6:	4b11      	ldr	r3, [pc, #68]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800bddc:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800bde2:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800bde8:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800bdee:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800bdf4:	4b09      	ldr	r3, [pc, #36]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800bdfa:	4b08      	ldr	r3, [pc, #32]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800be02:	2200      	movs	r2, #0
 800be04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800be06:	4805      	ldr	r0, [pc, #20]	; (800be1c <MX_SPDIFRX_Init+0x60>)
 800be08:	f7fb f92e 	bl	8007068 <HAL_SPDIFRX_Init>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d001      	beq.n	800be16 <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 800be12:	f000 fc65 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800be16:	bf00      	nop
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	200082b8 	.word	0x200082b8

0800be20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800be24:	4b1a      	ldr	r3, [pc, #104]	; (800be90 <MX_SPI2_Init+0x70>)
 800be26:	4a1b      	ldr	r2, [pc, #108]	; (800be94 <MX_SPI2_Init+0x74>)
 800be28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800be2a:	4b19      	ldr	r3, [pc, #100]	; (800be90 <MX_SPI2_Init+0x70>)
 800be2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800be30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800be32:	4b17      	ldr	r3, [pc, #92]	; (800be90 <MX_SPI2_Init+0x70>)
 800be34:	2200      	movs	r2, #0
 800be36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800be38:	4b15      	ldr	r3, [pc, #84]	; (800be90 <MX_SPI2_Init+0x70>)
 800be3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800be3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800be40:	4b13      	ldr	r3, [pc, #76]	; (800be90 <MX_SPI2_Init+0x70>)
 800be42:	2200      	movs	r2, #0
 800be44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800be46:	4b12      	ldr	r3, [pc, #72]	; (800be90 <MX_SPI2_Init+0x70>)
 800be48:	2200      	movs	r2, #0
 800be4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <MX_SPI2_Init+0x70>)
 800be4e:	2200      	movs	r2, #0
 800be50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800be52:	4b0f      	ldr	r3, [pc, #60]	; (800be90 <MX_SPI2_Init+0x70>)
 800be54:	2200      	movs	r2, #0
 800be56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800be58:	4b0d      	ldr	r3, [pc, #52]	; (800be90 <MX_SPI2_Init+0x70>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <MX_SPI2_Init+0x70>)
 800be60:	2200      	movs	r2, #0
 800be62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be64:	4b0a      	ldr	r3, [pc, #40]	; (800be90 <MX_SPI2_Init+0x70>)
 800be66:	2200      	movs	r2, #0
 800be68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800be6a:	4b09      	ldr	r3, [pc, #36]	; (800be90 <MX_SPI2_Init+0x70>)
 800be6c:	2207      	movs	r2, #7
 800be6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <MX_SPI2_Init+0x70>)
 800be72:	2200      	movs	r2, #0
 800be74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800be76:	4b06      	ldr	r3, [pc, #24]	; (800be90 <MX_SPI2_Init+0x70>)
 800be78:	2208      	movs	r2, #8
 800be7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800be7c:	4804      	ldr	r0, [pc, #16]	; (800be90 <MX_SPI2_Init+0x70>)
 800be7e:	f7fb f94f 	bl	8007120 <HAL_SPI_Init>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 800be88:	f000 fc2a 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800be8c:	bf00      	nop
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	20008254 	.word	0x20008254
 800be94:	40003800 	.word	0x40003800

0800be98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be9e:	f107 0310 	add.w	r3, r7, #16
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	605a      	str	r2, [r3, #4]
 800bea8:	609a      	str	r2, [r3, #8]
 800beaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800beac:	1d3b      	adds	r3, r7, #4
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
 800beb2:	605a      	str	r2, [r3, #4]
 800beb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800beb6:	4b1f      	ldr	r3, [pc, #124]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800beb8:	4a1f      	ldr	r2, [pc, #124]	; (800bf38 <MX_TIM1_Init+0xa0>)
 800beba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800bebc:	4b1d      	ldr	r3, [pc, #116]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bec2:	4b1c      	ldr	r3, [pc, #112]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800bec8:	4b1a      	ldr	r3, [pc, #104]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800beca:	2200      	movs	r2, #0
 800becc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bece:	4b19      	ldr	r3, [pc, #100]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bed0:	2200      	movs	r2, #0
 800bed2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800bed4:	4b17      	ldr	r3, [pc, #92]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800beda:	4b16      	ldr	r3, [pc, #88]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bedc:	2200      	movs	r2, #0
 800bede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bee0:	4814      	ldr	r0, [pc, #80]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bee2:	f7fb f9af 	bl	8007244 <HAL_TIM_Base_Init>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800beec:	f000 fbf8 	bl	800c6e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bef6:	f107 0310 	add.w	r3, r7, #16
 800befa:	4619      	mov	r1, r3
 800befc:	480d      	ldr	r0, [pc, #52]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800befe:	f7fb fc59 	bl	80077b4 <HAL_TIM_ConfigClockSource>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800bf08:	f000 fbea 	bl	800c6e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800bf10:	2300      	movs	r3, #0
 800bf12:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4805      	ldr	r0, [pc, #20]	; (800bf34 <MX_TIM1_Init+0x9c>)
 800bf1e:	f7fc f8c3 	bl	80080a8 <HAL_TIMEx_MasterConfigSynchronization>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800bf28:	f000 fbda 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800bf2c:	bf00      	nop
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20008c08 	.word	0x20008c08
 800bf38:	40010000 	.word	0x40010000

0800bf3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08a      	sub	sp, #40	; 0x28
 800bf40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf42:	f107 031c 	add.w	r3, r7, #28
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
 800bf4a:	605a      	str	r2, [r3, #4]
 800bf4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800bf4e:	463b      	mov	r3, r7
 800bf50:	2200      	movs	r2, #0
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	605a      	str	r2, [r3, #4]
 800bf56:	609a      	str	r2, [r3, #8]
 800bf58:	60da      	str	r2, [r3, #12]
 800bf5a:	611a      	str	r2, [r3, #16]
 800bf5c:	615a      	str	r2, [r3, #20]
 800bf5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800bf60:	4b21      	ldr	r3, [pc, #132]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf62:	4a22      	ldr	r2, [pc, #136]	; (800bfec <MX_TIM3_Init+0xb0>)
 800bf64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800bf66:	4b20      	ldr	r3, [pc, #128]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf6c:	4b1e      	ldr	r3, [pc, #120]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800bf72:	4b1d      	ldr	r3, [pc, #116]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf78:	4b1b      	ldr	r3, [pc, #108]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf7e:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800bf84:	4818      	ldr	r0, [pc, #96]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bf86:	f7fb f9b3 	bl	80072f0 <HAL_TIM_PWM_Init>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800bf90:	f000 fba6 	bl	800c6e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bf94:	2300      	movs	r3, #0
 800bf96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800bf9c:	f107 031c 	add.w	r3, r7, #28
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4811      	ldr	r0, [pc, #68]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bfa4:	f7fc f880 	bl	80080a8 <HAL_TIMEx_MasterConfigSynchronization>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800bfae:	f000 fb97 	bl	800c6e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800bfb2:	2360      	movs	r3, #96	; 0x60
 800bfb4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800bfc2:	463b      	mov	r3, r7
 800bfc4:	2208      	movs	r2, #8
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4807      	ldr	r0, [pc, #28]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bfca:	f7fb fadb 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800bfd4:	f000 fb84 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800bfd8:	4803      	ldr	r0, [pc, #12]	; (800bfe8 <MX_TIM3_Init+0xac>)
 800bfda:	f001 f8e5 	bl	800d1a8 <HAL_TIM_MspPostInit>

}
 800bfde:	bf00      	nop
 800bfe0:	3728      	adds	r7, #40	; 0x28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	200088ac 	.word	0x200088ac
 800bfec:	40000400 	.word	0x40000400

0800bff0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800bff6:	1d3b      	adds	r3, r7, #4
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	609a      	str	r2, [r3, #8]
 800c000:	60da      	str	r2, [r3, #12]
 800c002:	611a      	str	r2, [r3, #16]
 800c004:	615a      	str	r2, [r3, #20]
 800c006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800c008:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <MX_TIM10_Init+0x90>)
 800c00a:	4a1e      	ldr	r2, [pc, #120]	; (800c084 <MX_TIM10_Init+0x94>)
 800c00c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800c00e:	4b1c      	ldr	r3, [pc, #112]	; (800c080 <MX_TIM10_Init+0x90>)
 800c010:	2200      	movs	r2, #0
 800c012:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c014:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <MX_TIM10_Init+0x90>)
 800c016:	2200      	movs	r2, #0
 800c018:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0;
 800c01a:	4b19      	ldr	r3, [pc, #100]	; (800c080 <MX_TIM10_Init+0x90>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c020:	4b17      	ldr	r3, [pc, #92]	; (800c080 <MX_TIM10_Init+0x90>)
 800c022:	2200      	movs	r2, #0
 800c024:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c026:	4b16      	ldr	r3, [pc, #88]	; (800c080 <MX_TIM10_Init+0x90>)
 800c028:	2200      	movs	r2, #0
 800c02a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800c02c:	4814      	ldr	r0, [pc, #80]	; (800c080 <MX_TIM10_Init+0x90>)
 800c02e:	f7fb f909 	bl	8007244 <HAL_TIM_Base_Init>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 800c038:	f000 fb52 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800c03c:	4810      	ldr	r0, [pc, #64]	; (800c080 <MX_TIM10_Init+0x90>)
 800c03e:	f7fb f957 	bl	80072f0 <HAL_TIM_PWM_Init>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 800c048:	f000 fb4a 	bl	800c6e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c04c:	2360      	movs	r3, #96	; 0x60
 800c04e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c054:	2300      	movs	r3, #0
 800c056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c058:	2300      	movs	r3, #0
 800c05a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c05c:	1d3b      	adds	r3, r7, #4
 800c05e:	2200      	movs	r2, #0
 800c060:	4619      	mov	r1, r3
 800c062:	4807      	ldr	r0, [pc, #28]	; (800c080 <MX_TIM10_Init+0x90>)
 800c064:	f7fb fa8e 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 800c06e:	f000 fb37 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800c072:	4803      	ldr	r0, [pc, #12]	; (800c080 <MX_TIM10_Init+0x90>)
 800c074:	f001 f898 	bl	800d1a8 <HAL_TIM_MspPostInit>

}
 800c078:	bf00      	nop
 800c07a:	3720      	adds	r7, #32
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	200087d8 	.word	0x200087d8
 800c084:	40014400 	.word	0x40014400

0800c088 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800c08e:	1d3b      	adds	r3, r7, #4
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	605a      	str	r2, [r3, #4]
 800c096:	609a      	str	r2, [r3, #8]
 800c098:	60da      	str	r2, [r3, #12]
 800c09a:	611a      	str	r2, [r3, #16]
 800c09c:	615a      	str	r2, [r3, #20]
 800c09e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800c0a0:	4b1d      	ldr	r3, [pc, #116]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0a2:	4a1e      	ldr	r2, [pc, #120]	; (800c11c <MX_TIM11_Init+0x94>)
 800c0a4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800c0a6:	4b1c      	ldr	r3, [pc, #112]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c0ac:	4b1a      	ldr	r3, [pc, #104]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 800c0b2:	4b19      	ldr	r3, [pc, #100]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c0b8:	4b17      	ldr	r3, [pc, #92]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c0be:	4b16      	ldr	r3, [pc, #88]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800c0c4:	4814      	ldr	r0, [pc, #80]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0c6:	f7fb f8bd 	bl	8007244 <HAL_TIM_Base_Init>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d001      	beq.n	800c0d4 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 800c0d0:	f000 fb06 	bl	800c6e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800c0d4:	4810      	ldr	r0, [pc, #64]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0d6:	f7fb f90b 	bl	80072f0 <HAL_TIM_PWM_Init>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 800c0e0:	f000 fafe 	bl	800c6e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c0e4:	2360      	movs	r3, #96	; 0x60
 800c0e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c0f4:	1d3b      	adds	r3, r7, #4
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4807      	ldr	r0, [pc, #28]	; (800c118 <MX_TIM11_Init+0x90>)
 800c0fc:	f7fb fa42 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 800c106:	f000 faeb 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800c10a:	4803      	ldr	r0, [pc, #12]	; (800c118 <MX_TIM11_Init+0x90>)
 800c10c:	f001 f84c 	bl	800d1a8 <HAL_TIM_MspPostInit>

}
 800c110:	bf00      	nop
 800c112:	3720      	adds	r7, #32
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20008ba8 	.word	0x20008ba8
 800c11c:	40014800 	.word	0x40014800

0800c120 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800c126:	1d3b      	adds	r3, r7, #4
 800c128:	2200      	movs	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	605a      	str	r2, [r3, #4]
 800c12e:	609a      	str	r2, [r3, #8]
 800c130:	60da      	str	r2, [r3, #12]
 800c132:	611a      	str	r2, [r3, #16]
 800c134:	615a      	str	r2, [r3, #20]
 800c136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800c138:	4b19      	ldr	r3, [pc, #100]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c13a:	4a1a      	ldr	r2, [pc, #104]	; (800c1a4 <MX_TIM12_Init+0x84>)
 800c13c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800c13e:	4b18      	ldr	r3, [pc, #96]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c140:	2200      	movs	r2, #0
 800c142:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c144:	4b16      	ldr	r3, [pc, #88]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c146:	2200      	movs	r2, #0
 800c148:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800c14a:	4b15      	ldr	r3, [pc, #84]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c150:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c152:	2200      	movs	r2, #0
 800c154:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c156:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c158:	2200      	movs	r2, #0
 800c15a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800c15c:	4810      	ldr	r0, [pc, #64]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c15e:	f7fb f8c7 	bl	80072f0 <HAL_TIM_PWM_Init>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d001      	beq.n	800c16c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800c168:	f000 faba 	bl	800c6e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c16c:	2360      	movs	r3, #96	; 0x60
 800c16e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c174:	2300      	movs	r3, #0
 800c176:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c17c:	1d3b      	adds	r3, r7, #4
 800c17e:	2200      	movs	r2, #0
 800c180:	4619      	mov	r1, r3
 800c182:	4807      	ldr	r0, [pc, #28]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c184:	f7fb f9fe 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800c18e:	f000 faa7 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800c192:	4803      	ldr	r0, [pc, #12]	; (800c1a0 <MX_TIM12_Init+0x80>)
 800c194:	f001 f808 	bl	800d1a8 <HAL_TIM_MspPostInit>

}
 800c198:	bf00      	nop
 800c19a:	3720      	adds	r7, #32
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	20008db8 	.word	0x20008db8
 800c1a4:	40001800 	.word	0x40001800

0800c1a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800c1ac:	4b14      	ldr	r3, [pc, #80]	; (800c200 <MX_UART5_Init+0x58>)
 800c1ae:	4a15      	ldr	r2, [pc, #84]	; (800c204 <MX_UART5_Init+0x5c>)
 800c1b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800c1b2:	4b13      	ldr	r3, [pc, #76]	; (800c200 <MX_UART5_Init+0x58>)
 800c1b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c1b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800c1ba:	4b11      	ldr	r3, [pc, #68]	; (800c200 <MX_UART5_Init+0x58>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800c1c0:	4b0f      	ldr	r3, [pc, #60]	; (800c200 <MX_UART5_Init+0x58>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800c1c6:	4b0e      	ldr	r3, [pc, #56]	; (800c200 <MX_UART5_Init+0x58>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800c1cc:	4b0c      	ldr	r3, [pc, #48]	; (800c200 <MX_UART5_Init+0x58>)
 800c1ce:	220c      	movs	r2, #12
 800c1d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c1d2:	4b0b      	ldr	r3, [pc, #44]	; (800c200 <MX_UART5_Init+0x58>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800c1d8:	4b09      	ldr	r3, [pc, #36]	; (800c200 <MX_UART5_Init+0x58>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c1de:	4b08      	ldr	r3, [pc, #32]	; (800c200 <MX_UART5_Init+0x58>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c1e4:	4b06      	ldr	r3, [pc, #24]	; (800c200 <MX_UART5_Init+0x58>)
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800c1ea:	4805      	ldr	r0, [pc, #20]	; (800c200 <MX_UART5_Init+0x58>)
 800c1ec:	f7fb ffd6 	bl	800819c <HAL_UART_Init>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800c1f6:	f000 fa73 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800c1fa:	bf00      	nop
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20008a18 	.word	0x20008a18
 800c204:	40005000 	.word	0x40005000

0800c208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c20c:	4b14      	ldr	r3, [pc, #80]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c20e:	4a15      	ldr	r2, [pc, #84]	; (800c264 <MX_USART1_UART_Init+0x5c>)
 800c210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c212:	4b13      	ldr	r3, [pc, #76]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c21a:	4b11      	ldr	r3, [pc, #68]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c220:	4b0f      	ldr	r3, [pc, #60]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c222:	2200      	movs	r2, #0
 800c224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c226:	4b0e      	ldr	r3, [pc, #56]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c228:	2200      	movs	r2, #0
 800c22a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c22c:	4b0c      	ldr	r3, [pc, #48]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c22e:	220c      	movs	r2, #12
 800c230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c232:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c234:	2200      	movs	r2, #0
 800c236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c238:	4b09      	ldr	r3, [pc, #36]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c23e:	4b08      	ldr	r3, [pc, #32]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c240:	2200      	movs	r2, #0
 800c242:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c244:	4b06      	ldr	r3, [pc, #24]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c246:	2200      	movs	r2, #0
 800c248:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c24a:	4805      	ldr	r0, [pc, #20]	; (800c260 <MX_USART1_UART_Init+0x58>)
 800c24c:	f7fb ffa6 	bl	800819c <HAL_UART_Init>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d001      	beq.n	800c25a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800c256:	f000 fa43 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c25a:	bf00      	nop
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20008b28 	.word	0x20008b28
 800c264:	40011000 	.word	0x40011000

0800c268 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800c26c:	4b14      	ldr	r3, [pc, #80]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c26e:	4a15      	ldr	r2, [pc, #84]	; (800c2c4 <MX_USART6_UART_Init+0x5c>)
 800c270:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800c272:	4b13      	ldr	r3, [pc, #76]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c278:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c27a:	4b11      	ldr	r3, [pc, #68]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c282:	2200      	movs	r2, #0
 800c284:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c286:	4b0e      	ldr	r3, [pc, #56]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c288:	2200      	movs	r2, #0
 800c28a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c28c:	4b0c      	ldr	r3, [pc, #48]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c28e:	220c      	movs	r2, #12
 800c290:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c292:	4b0b      	ldr	r3, [pc, #44]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c294:	2200      	movs	r2, #0
 800c296:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c298:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c29e:	4b08      	ldr	r3, [pc, #32]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c2aa:	4805      	ldr	r0, [pc, #20]	; (800c2c0 <MX_USART6_UART_Init+0x58>)
 800c2ac:	f7fb ff76 	bl	800819c <HAL_UART_Init>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800c2b6:	f000 fa13 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800c2ba:	bf00      	nop
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20008c5c 	.word	0x20008c5c
 800c2c4:	40011400 	.word	0x40011400

0800c2c8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c2cc:	4b13      	ldr	r3, [pc, #76]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2ce:	4a14      	ldr	r2, [pc, #80]	; (800c320 <MX_USB_OTG_HS_PCD_Init+0x58>)
 800c2d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800c2d2:	4b12      	ldr	r3, [pc, #72]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2d4:	2209      	movs	r2, #9
 800c2d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c2d8:	4b10      	ldr	r3, [pc, #64]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800c2de:	4b0f      	ldr	r3, [pc, #60]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c2ea:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c2f6:	4b09      	ldr	r3, [pc, #36]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c2fc:	4b07      	ldr	r3, [pc, #28]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c302:	4b06      	ldr	r3, [pc, #24]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c304:	2200      	movs	r2, #0
 800c306:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c308:	4804      	ldr	r0, [pc, #16]	; (800c31c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800c30a:	f7f7 fe57 	bl	8003fbc <HAL_PCD_Init>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 800c314:	f000 f9e4 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800c318:	bf00      	nop
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	20008388 	.word	0x20008388
 800c320:	40040000 	.word	0x40040000

0800c324 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800c328:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <MX_WWDG_Init+0x38>)
 800c32a:	4a0d      	ldr	r2, [pc, #52]	; (800c360 <MX_WWDG_Init+0x3c>)
 800c32c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800c32e:	4b0b      	ldr	r3, [pc, #44]	; (800c35c <MX_WWDG_Init+0x38>)
 800c330:	2200      	movs	r2, #0
 800c332:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 800c334:	4b09      	ldr	r3, [pc, #36]	; (800c35c <MX_WWDG_Init+0x38>)
 800c336:	2240      	movs	r2, #64	; 0x40
 800c338:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 128;
 800c33a:	4b08      	ldr	r3, [pc, #32]	; (800c35c <MX_WWDG_Init+0x38>)
 800c33c:	2280      	movs	r2, #128	; 0x80
 800c33e:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <MX_WWDG_Init+0x38>)
 800c342:	2200      	movs	r2, #0
 800c344:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800c346:	4805      	ldr	r0, [pc, #20]	; (800c35c <MX_WWDG_Init+0x38>)
 800c348:	f7fc fb33 	bl	80089b2 <HAL_WWDG_Init>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 800c352:	f000 f9c5 	bl	800c6e0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 800c356:	bf00      	nop
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20008c48 	.word	0x20008c48
 800c360:	40002c00 	.word	0x40002c00

0800c364 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800c36a:	1d3b      	adds	r3, r7, #4
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	605a      	str	r2, [r3, #4]
 800c372:	609a      	str	r2, [r3, #8]
 800c374:	60da      	str	r2, [r3, #12]
 800c376:	611a      	str	r2, [r3, #16]
 800c378:	615a      	str	r2, [r3, #20]
 800c37a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800c37c:	4b1f      	ldr	r3, [pc, #124]	; (800c3fc <MX_FMC_Init+0x98>)
 800c37e:	4a20      	ldr	r2, [pc, #128]	; (800c400 <MX_FMC_Init+0x9c>)
 800c380:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800c382:	4b1e      	ldr	r3, [pc, #120]	; (800c3fc <MX_FMC_Init+0x98>)
 800c384:	2200      	movs	r2, #0
 800c386:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c388:	4b1c      	ldr	r3, [pc, #112]	; (800c3fc <MX_FMC_Init+0x98>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800c38e:	4b1b      	ldr	r3, [pc, #108]	; (800c3fc <MX_FMC_Init+0x98>)
 800c390:	2204      	movs	r2, #4
 800c392:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800c394:	4b19      	ldr	r3, [pc, #100]	; (800c3fc <MX_FMC_Init+0x98>)
 800c396:	2220      	movs	r2, #32
 800c398:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c39a:	4b18      	ldr	r3, [pc, #96]	; (800c3fc <MX_FMC_Init+0x98>)
 800c39c:	2240      	movs	r2, #64	; 0x40
 800c39e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800c3a0:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <MX_FMC_Init+0x98>)
 800c3a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c3a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c3a8:	4b14      	ldr	r3, [pc, #80]	; (800c3fc <MX_FMC_Init+0x98>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <MX_FMC_Init+0x98>)
 800c3b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800c3b6:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <MX_FMC_Init+0x98>)
 800c3b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c3bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <MX_FMC_Init+0x98>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800c3c8:	2307      	movs	r3, #7
 800c3ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800c3cc:	2304      	movs	r3, #4
 800c3ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800c3d0:	2307      	movs	r3, #7
 800c3d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800c3d8:	2302      	movs	r3, #2
 800c3da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800c3dc:	2302      	movs	r3, #2
 800c3de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800c3e0:	1d3b      	adds	r3, r7, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4805      	ldr	r0, [pc, #20]	; (800c3fc <MX_FMC_Init+0x98>)
 800c3e6:	f7fa fe0b 	bl	8007000 <HAL_SDRAM_Init>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800c3f0:	f000 f976 	bl	800c6e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800c3f4:	bf00      	nop
 800c3f6:	3720      	adds	r7, #32
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20008df8 	.word	0x20008df8
 800c400:	a0000140 	.word	0xa0000140

0800c404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b090      	sub	sp, #64	; 0x40
 800c408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c40a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c40e:	2200      	movs	r2, #0
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	605a      	str	r2, [r3, #4]
 800c414:	609a      	str	r2, [r3, #8]
 800c416:	60da      	str	r2, [r3, #12]
 800c418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c41a:	4b99      	ldr	r3, [pc, #612]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41e:	4a98      	ldr	r2, [pc, #608]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c420:	f043 0310 	orr.w	r3, r3, #16
 800c424:	6313      	str	r3, [r2, #48]	; 0x30
 800c426:	4b96      	ldr	r3, [pc, #600]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42a:	f003 0310 	and.w	r3, r3, #16
 800c42e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c432:	4b93      	ldr	r3, [pc, #588]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c436:	4a92      	ldr	r2, [pc, #584]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c43c:	6313      	str	r3, [r2, #48]	; 0x30
 800c43e:	4b90      	ldr	r3, [pc, #576]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c446:	627b      	str	r3, [r7, #36]	; 0x24
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c44a:	4b8d      	ldr	r3, [pc, #564]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44e:	4a8c      	ldr	r2, [pc, #560]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c450:	f043 0302 	orr.w	r3, r3, #2
 800c454:	6313      	str	r3, [r2, #48]	; 0x30
 800c456:	4b8a      	ldr	r3, [pc, #552]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45a:	f003 0302 	and.w	r3, r3, #2
 800c45e:	623b      	str	r3, [r7, #32]
 800c460:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c462:	4b87      	ldr	r3, [pc, #540]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c466:	4a86      	ldr	r2, [pc, #536]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c468:	f043 0308 	orr.w	r3, r3, #8
 800c46c:	6313      	str	r3, [r2, #48]	; 0x30
 800c46e:	4b84      	ldr	r3, [pc, #528]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c472:	f003 0308 	and.w	r3, r3, #8
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c47a:	4b81      	ldr	r3, [pc, #516]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47e:	4a80      	ldr	r2, [pc, #512]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c480:	f043 0304 	orr.w	r3, r3, #4
 800c484:	6313      	str	r3, [r2, #48]	; 0x30
 800c486:	4b7e      	ldr	r3, [pc, #504]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	f003 0304 	and.w	r3, r3, #4
 800c48e:	61bb      	str	r3, [r7, #24]
 800c490:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c492:	4b7b      	ldr	r3, [pc, #492]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c496:	4a7a      	ldr	r2, [pc, #488]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c498:	f043 0301 	orr.w	r3, r3, #1
 800c49c:	6313      	str	r3, [r2, #48]	; 0x30
 800c49e:	4b78      	ldr	r3, [pc, #480]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	617b      	str	r3, [r7, #20]
 800c4a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c4aa:	4b75      	ldr	r3, [pc, #468]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ae:	4a74      	ldr	r2, [pc, #464]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c4b6:	4b72      	ldr	r3, [pc, #456]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c4c2:	4b6f      	ldr	r3, [pc, #444]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c6:	4a6e      	ldr	r2, [pc, #440]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4cc:	6313      	str	r3, [r2, #48]	; 0x30
 800c4ce:	4b6c      	ldr	r3, [pc, #432]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c4da:	4b69      	ldr	r3, [pc, #420]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	4a68      	ldr	r2, [pc, #416]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c4e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c4e6:	4b66      	ldr	r3, [pc, #408]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4ee:	60bb      	str	r3, [r7, #8]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c4f2:	4b63      	ldr	r3, [pc, #396]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f6:	4a62      	ldr	r2, [pc, #392]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c4f8:	f043 0320 	orr.w	r3, r3, #32
 800c4fc:	6313      	str	r3, [r2, #48]	; 0x30
 800c4fe:	4b60      	ldr	r3, [pc, #384]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c502:	f003 0320 	and.w	r3, r3, #32
 800c506:	607b      	str	r3, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c50a:	4b5d      	ldr	r3, [pc, #372]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50e:	4a5c      	ldr	r2, [pc, #368]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c514:	6313      	str	r3, [r2, #48]	; 0x30
 800c516:	4b5a      	ldr	r3, [pc, #360]	; (800c680 <MX_GPIO_Init+0x27c>)
 800c518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c51e:	603b      	str	r3, [r7, #0]
 800c520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESET_GPIO_Port, DSI_RESET_Pin, GPIO_PIN_RESET);
 800c522:	2200      	movs	r2, #0
 800c524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c528:	4856      	ldr	r0, [pc, #344]	; (800c684 <MX_GPIO_Init+0x280>)
 800c52a:	f7f6 fbc3 	bl	8002cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 800c52e:	f247 033b 	movw	r3, #28731	; 0x703b
 800c532:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c534:	2300      	movs	r3, #0
 800c536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c53c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c540:	4619      	mov	r1, r3
 800c542:	4850      	ldr	r0, [pc, #320]	; (800c684 <MX_GPIO_Init+0x280>)
 800c544:	f7f6 fa0c 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN5_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 800c548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c54c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c54e:	2302      	movs	r3, #2
 800c550:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c552:	2300      	movs	r3, #0
 800c554:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c556:	2300      	movs	r3, #0
 800c558:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800c55a:	2303      	movs	r3, #3
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 800c55e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c562:	4619      	mov	r1, r3
 800c564:	4848      	ldr	r0, [pc, #288]	; (800c688 <MX_GPIO_Init+0x284>)
 800c566:	f7f6 f9fb 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 800c56a:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 800c56e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c570:	2300      	movs	r3, #0
 800c572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c574:	2300      	movs	r3, #0
 800c576:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c57c:	4619      	mov	r1, r3
 800c57e:	4843      	ldr	r0, [pc, #268]	; (800c68c <MX_GPIO_Init+0x288>)
 800c580:	f7f6 f9ee 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 800c584:	23f8      	movs	r3, #248	; 0xf8
 800c586:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c588:	2300      	movs	r3, #0
 800c58a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c58c:	2300      	movs	r3, #0
 800c58e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c594:	4619      	mov	r1, r3
 800c596:	483e      	ldr	r0, [pc, #248]	; (800c690 <MX_GPIO_Init+0x28c>)
 800c598:	f7f6 f9e2 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 800c59c:	2330      	movs	r3, #48	; 0x30
 800c59e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c5a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4839      	ldr	r0, [pc, #228]	; (800c694 <MX_GPIO_Init+0x290>)
 800c5b0:	f7f6 f9d6 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800c5b4:	2308      	movs	r3, #8
 800c5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800c5c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	4831      	ldr	r0, [pc, #196]	; (800c694 <MX_GPIO_Init+0x290>)
 800c5d0:	f7f6 f9c6 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESET_Pin */
  GPIO_InitStruct.Pin = DSI_RESET_Pin;
 800c5d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DSI_RESET_GPIO_Port, &GPIO_InitStruct);
 800c5e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4825      	ldr	r0, [pc, #148]	; (800c684 <MX_GPIO_Init+0x280>)
 800c5ee:	f7f6 f9b7 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 800c5f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c600:	2300      	movs	r3, #0
 800c602:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c604:	2300      	movs	r3, #0
 800c606:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 800c608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c60c:	4619      	mov	r1, r3
 800c60e:	4822      	ldr	r0, [pc, #136]	; (800c698 <MX_GPIO_Init+0x294>)
 800c610:	f7f6 f9a6 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800c614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c61a:	4b20      	ldr	r3, [pc, #128]	; (800c69c <MX_GPIO_Init+0x298>)
 800c61c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800c622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c626:	4619      	mov	r1, r3
 800c628:	4818      	ldr	r0, [pc, #96]	; (800c68c <MX_GPIO_Init+0x288>)
 800c62a:	f7f6 f999 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 800c62e:	2348      	movs	r3, #72	; 0x48
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c632:	2300      	movs	r3, #0
 800c634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c636:	2300      	movs	r3, #0
 800c638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c63a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c63e:	4619      	mov	r1, r3
 800c640:	4817      	ldr	r0, [pc, #92]	; (800c6a0 <MX_GPIO_Init+0x29c>)
 800c642:	f7f6 f98d 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 800c646:	2301      	movs	r3, #1
 800c648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c64a:	4b16      	ldr	r3, [pc, #88]	; (800c6a4 <MX_GPIO_Init+0x2a0>)
 800c64c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 800c652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c656:	4619      	mov	r1, r3
 800c658:	480f      	ldr	r0, [pc, #60]	; (800c698 <MX_GPIO_Init+0x294>)
 800c65a:	f7f6 f981 	bl	8002960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c65e:	2380      	movs	r3, #128	; 0x80
 800c660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c662:	2300      	movs	r3, #0
 800c664:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c666:	2300      	movs	r3, #0
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c66a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c66e:	4619      	mov	r1, r3
 800c670:	480d      	ldr	r0, [pc, #52]	; (800c6a8 <MX_GPIO_Init+0x2a4>)
 800c672:	f7f6 f975 	bl	8002960 <HAL_GPIO_Init>

}
 800c676:	bf00      	nop
 800c678:	3740      	adds	r7, #64	; 0x40
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	40023800 	.word	0x40023800
 800c684:	40022400 	.word	0x40022400
 800c688:	40020800 	.word	0x40020800
 800c68c:	40022000 	.word	0x40022000
 800c690:	40022800 	.word	0x40022800
 800c694:	40020c00 	.word	0x40020c00
 800c698:	40020000 	.word	0x40020000
 800c69c:	10120000 	.word	0x10120000
 800c6a0:	40021800 	.word	0x40021800
 800c6a4:	10110000 	.word	0x10110000
 800c6a8:	40021c00 	.word	0x40021c00

0800c6ac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	f7fd fb89 	bl	8009dcc <osDelay>
 800c6ba:	e7fb      	b.n	800c6b4 <StartDefaultTask+0x8>

0800c6bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a04      	ldr	r2, [pc, #16]	; (800c6dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d101      	bne.n	800c6d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800c6ce:	f7f3 ff45 	bl	800055c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	40001000 	.word	0x40001000

0800c6e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800c6f6:	4b11      	ldr	r3, [pc, #68]	; (800c73c <HAL_MspInit+0x4c>)
 800c6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fa:	4a10      	ldr	r2, [pc, #64]	; (800c73c <HAL_MspInit+0x4c>)
 800c6fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c700:	6413      	str	r3, [r2, #64]	; 0x40
 800c702:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <HAL_MspInit+0x4c>)
 800c704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c70a:	607b      	str	r3, [r7, #4]
 800c70c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c70e:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <HAL_MspInit+0x4c>)
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	4a0a      	ldr	r2, [pc, #40]	; (800c73c <HAL_MspInit+0x4c>)
 800c714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c718:	6453      	str	r3, [r2, #68]	; 0x44
 800c71a:	4b08      	ldr	r3, [pc, #32]	; (800c73c <HAL_MspInit+0x4c>)
 800c71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c726:	2200      	movs	r2, #0
 800c728:	210f      	movs	r1, #15
 800c72a:	f06f 0001 	mvn.w	r0, #1
 800c72e:	f7f4 fbe9 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	40023800 	.word	0x40023800

0800c740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08c      	sub	sp, #48	; 0x30
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c748:	f107 031c 	add.w	r3, r7, #28
 800c74c:	2200      	movs	r2, #0
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	605a      	str	r2, [r3, #4]
 800c752:	609a      	str	r2, [r3, #8]
 800c754:	60da      	str	r2, [r3, #12]
 800c756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a36      	ldr	r2, [pc, #216]	; (800c838 <HAL_ADC_MspInit+0xf8>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d13c      	bne.n	800c7dc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c762:	4b36      	ldr	r3, [pc, #216]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c766:	4a35      	ldr	r2, [pc, #212]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c76c:	6453      	str	r3, [r2, #68]	; 0x44
 800c76e:	4b33      	ldr	r3, [pc, #204]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c776:	61bb      	str	r3, [r7, #24]
 800c778:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c77a:	4b30      	ldr	r3, [pc, #192]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77e:	4a2f      	ldr	r2, [pc, #188]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c780:	f043 0304 	orr.w	r3, r3, #4
 800c784:	6313      	str	r3, [r2, #48]	; 0x30
 800c786:	4b2d      	ldr	r3, [pc, #180]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c78a:	f003 0304 	and.w	r3, r3, #4
 800c78e:	617b      	str	r3, [r7, #20]
 800c790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c792:	4b2a      	ldr	r3, [pc, #168]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c796:	4a29      	ldr	r2, [pc, #164]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c798:	f043 0301 	orr.w	r3, r3, #1
 800c79c:	6313      	str	r3, [r2, #48]	; 0x30
 800c79e:	4b27      	ldr	r3, [pc, #156]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a2:	f003 0301 	and.w	r3, r3, #1
 800c7a6:	613b      	str	r3, [r7, #16]
 800c7a8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 800c7aa:	2304      	movs	r3, #4
 800c7ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 800c7b6:	f107 031c 	add.w	r3, r7, #28
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4820      	ldr	r0, [pc, #128]	; (800c840 <HAL_ADC_MspInit+0x100>)
 800c7be:	f7f6 f8cf 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 800c7c2:	2350      	movs	r3, #80	; 0x50
 800c7c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7ce:	f107 031c 	add.w	r3, r7, #28
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	481b      	ldr	r0, [pc, #108]	; (800c844 <HAL_ADC_MspInit+0x104>)
 800c7d6:	f7f6 f8c3 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c7da:	e029      	b.n	800c830 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a19      	ldr	r2, [pc, #100]	; (800c848 <HAL_ADC_MspInit+0x108>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d124      	bne.n	800c830 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800c7e6:	4b15      	ldr	r3, [pc, #84]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ea:	4a14      	ldr	r2, [pc, #80]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c7ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7f0:	6453      	str	r3, [r2, #68]	; 0x44
 800c7f2:	4b12      	ldr	r3, [pc, #72]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7fa:	60fb      	str	r3, [r7, #12]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c802:	4a0e      	ldr	r2, [pc, #56]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c804:	f043 0320 	orr.w	r3, r3, #32
 800c808:	6313      	str	r3, [r2, #48]	; 0x30
 800c80a:	4b0c      	ldr	r3, [pc, #48]	; (800c83c <HAL_ADC_MspInit+0xfc>)
 800c80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80e:	f003 0320 	and.w	r3, r3, #32
 800c812:	60bb      	str	r3, [r7, #8]
 800c814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800c816:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800c81a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c81c:	2303      	movs	r3, #3
 800c81e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c820:	2300      	movs	r3, #0
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c824:	f107 031c 	add.w	r3, r7, #28
 800c828:	4619      	mov	r1, r3
 800c82a:	4808      	ldr	r0, [pc, #32]	; (800c84c <HAL_ADC_MspInit+0x10c>)
 800c82c:	f7f6 f898 	bl	8002960 <HAL_GPIO_Init>
}
 800c830:	bf00      	nop
 800c832:	3730      	adds	r7, #48	; 0x30
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	40012000 	.word	0x40012000
 800c83c:	40023800 	.word	0x40023800
 800c840:	40020800 	.word	0x40020800
 800c844:	40020000 	.word	0x40020000
 800c848:	40012200 	.word	0x40012200
 800c84c:	40021400 	.word	0x40021400

0800c850 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a0a      	ldr	r2, [pc, #40]	; (800c888 <HAL_CRC_MspInit+0x38>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d10b      	bne.n	800c87a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c862:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <HAL_CRC_MspInit+0x3c>)
 800c864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c866:	4a09      	ldr	r2, [pc, #36]	; (800c88c <HAL_CRC_MspInit+0x3c>)
 800c868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c86c:	6313      	str	r3, [r2, #48]	; 0x30
 800c86e:	4b07      	ldr	r3, [pc, #28]	; (800c88c <HAL_CRC_MspInit+0x3c>)
 800c870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c876:	60fb      	str	r3, [r7, #12]
 800c878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800c87a:	bf00      	nop
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	40023000 	.word	0x40023000
 800c88c:	40023800 	.word	0x40023800

0800c890 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a0d      	ldr	r2, [pc, #52]	; (800c8d4 <HAL_DMA2D_MspInit+0x44>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d113      	bne.n	800c8ca <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c8a2:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <HAL_DMA2D_MspInit+0x48>)
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	4a0c      	ldr	r2, [pc, #48]	; (800c8d8 <HAL_DMA2D_MspInit+0x48>)
 800c8a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c8ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c8ae:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <HAL_DMA2D_MspInit+0x48>)
 800c8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	2105      	movs	r1, #5
 800c8be:	205a      	movs	r0, #90	; 0x5a
 800c8c0:	f7f4 fb20 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c8c4:	205a      	movs	r0, #90	; 0x5a
 800c8c6:	f7f4 fb39 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800c8ca:	bf00      	nop
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
 800c8d2:	bf00      	nop
 800c8d4:	4002b000 	.word	0x4002b000
 800c8d8:	40023800 	.word	0x40023800

0800c8dc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8e4:	f107 0314 	add.w	r3, r7, #20
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	605a      	str	r2, [r3, #4]
 800c8ee:	609a      	str	r2, [r3, #8]
 800c8f0:	60da      	str	r2, [r3, #12]
 800c8f2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a1b      	ldr	r2, [pc, #108]	; (800c968 <HAL_DSI_MspInit+0x8c>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d12f      	bne.n	800c95e <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800c8fe:	4b1b      	ldr	r3, [pc, #108]	; (800c96c <HAL_DSI_MspInit+0x90>)
 800c900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c902:	4a1a      	ldr	r2, [pc, #104]	; (800c96c <HAL_DSI_MspInit+0x90>)
 800c904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c908:	6453      	str	r3, [r2, #68]	; 0x44
 800c90a:	4b18      	ldr	r3, [pc, #96]	; (800c96c <HAL_DSI_MspInit+0x90>)
 800c90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c90e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c912:	613b      	str	r3, [r7, #16]
 800c914:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c916:	4b15      	ldr	r3, [pc, #84]	; (800c96c <HAL_DSI_MspInit+0x90>)
 800c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91a:	4a14      	ldr	r2, [pc, #80]	; (800c96c <HAL_DSI_MspInit+0x90>)
 800c91c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c920:	6313      	str	r3, [r2, #48]	; 0x30
 800c922:	4b12      	ldr	r3, [pc, #72]	; (800c96c <HAL_DSI_MspInit+0x90>)
 800c924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 800c92e:	2304      	movs	r3, #4
 800c930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c932:	2302      	movs	r3, #2
 800c934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c936:	2300      	movs	r3, #0
 800c938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c93a:	2300      	movs	r3, #0
 800c93c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800c93e:	230d      	movs	r3, #13
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 800c942:	f107 0314 	add.w	r3, r7, #20
 800c946:	4619      	mov	r1, r3
 800c948:	4809      	ldr	r0, [pc, #36]	; (800c970 <HAL_DSI_MspInit+0x94>)
 800c94a:	f7f6 f809 	bl	8002960 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800c94e:	2200      	movs	r2, #0
 800c950:	2105      	movs	r1, #5
 800c952:	2062      	movs	r0, #98	; 0x62
 800c954:	f7f4 fad6 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800c958:	2062      	movs	r0, #98	; 0x62
 800c95a:	f7f4 faef 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800c95e:	bf00      	nop
 800c960:	3728      	adds	r7, #40	; 0x28
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	40016c00 	.word	0x40016c00
 800c96c:	40023800 	.word	0x40023800
 800c970:	40022400 	.word	0x40022400

0800c974 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b08e      	sub	sp, #56	; 0x38
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c97c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	605a      	str	r2, [r3, #4]
 800c986:	609a      	str	r2, [r3, #8]
 800c988:	60da      	str	r2, [r3, #12]
 800c98a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a3f      	ldr	r2, [pc, #252]	; (800ca90 <HAL_ETH_MspInit+0x11c>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d178      	bne.n	800ca88 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c996:	4b3f      	ldr	r3, [pc, #252]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c99a:	4a3e      	ldr	r2, [pc, #248]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c99c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c9a0:	6313      	str	r3, [r2, #48]	; 0x30
 800c9a2:	4b3c      	ldr	r3, [pc, #240]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9aa:	623b      	str	r3, [r7, #32]
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	4b39      	ldr	r3, [pc, #228]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b2:	4a38      	ldr	r2, [pc, #224]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c9b8:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ba:	4b36      	ldr	r3, [pc, #216]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c9c2:	61fb      	str	r3, [r7, #28]
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	4b33      	ldr	r3, [pc, #204]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ca:	4a32      	ldr	r2, [pc, #200]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c9d0:	6313      	str	r3, [r2, #48]	; 0x30
 800c9d2:	4b30      	ldr	r3, [pc, #192]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9da:	61bb      	str	r3, [r7, #24]
 800c9dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c9de:	4b2d      	ldr	r3, [pc, #180]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e2:	4a2c      	ldr	r2, [pc, #176]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9e8:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ea:	4b2a      	ldr	r3, [pc, #168]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f2:	617b      	str	r3, [r7, #20]
 800c9f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c9f6:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9fa:	4a26      	ldr	r2, [pc, #152]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800c9fc:	f043 0304 	orr.w	r3, r3, #4
 800ca00:	6313      	str	r3, [r2, #48]	; 0x30
 800ca02:	4b24      	ldr	r3, [pc, #144]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800ca04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca06:	f003 0304 	and.w	r3, r3, #4
 800ca0a:	613b      	str	r3, [r7, #16]
 800ca0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca0e:	4b21      	ldr	r3, [pc, #132]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800ca10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca12:	4a20      	ldr	r2, [pc, #128]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800ca14:	f043 0301 	orr.w	r3, r3, #1
 800ca18:	6313      	str	r3, [r2, #48]	; 0x30
 800ca1a:	4b1e      	ldr	r3, [pc, #120]	; (800ca94 <HAL_ETH_MspInit+0x120>)
 800ca1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800ca26:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800ca2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca34:	2303      	movs	r3, #3
 800ca36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ca38:	230b      	movs	r3, #11
 800ca3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ca3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca40:	4619      	mov	r1, r3
 800ca42:	4815      	ldr	r0, [pc, #84]	; (800ca98 <HAL_ETH_MspInit+0x124>)
 800ca44:	f7f5 ff8c 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ca48:	2332      	movs	r3, #50	; 0x32
 800ca4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca54:	2303      	movs	r3, #3
 800ca56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ca58:	230b      	movs	r3, #11
 800ca5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ca5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca60:	4619      	mov	r1, r3
 800ca62:	480e      	ldr	r0, [pc, #56]	; (800ca9c <HAL_ETH_MspInit+0x128>)
 800ca64:	f7f5 ff7c 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ca68:	2386      	movs	r3, #134	; 0x86
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca74:	2303      	movs	r3, #3
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ca78:	230b      	movs	r3, #11
 800ca7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca80:	4619      	mov	r1, r3
 800ca82:	4807      	ldr	r0, [pc, #28]	; (800caa0 <HAL_ETH_MspInit+0x12c>)
 800ca84:	f7f5 ff6c 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800ca88:	bf00      	nop
 800ca8a:	3738      	adds	r7, #56	; 0x38
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	40028000 	.word	0x40028000
 800ca94:	40023800 	.word	0x40023800
 800ca98:	40021800 	.word	0x40021800
 800ca9c:	40020800 	.word	0x40020800
 800caa0:	40020000 	.word	0x40020000

0800caa4 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08a      	sub	sp, #40	; 0x28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caac:	f107 0314 	add.w	r3, r7, #20
 800cab0:	2200      	movs	r2, #0
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	605a      	str	r2, [r3, #4]
 800cab6:	609a      	str	r2, [r3, #8]
 800cab8:	60da      	str	r2, [r3, #12]
 800caba:	611a      	str	r2, [r3, #16]
  if(hcec->Instance==CEC)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a1b      	ldr	r2, [pc, #108]	; (800cb30 <HAL_CEC_MspInit+0x8c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d130      	bne.n	800cb28 <HAL_CEC_MspInit+0x84>
  {
  /* USER CODE BEGIN CEC_MspInit 0 */

  /* USER CODE END CEC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 800cac6:	4b1b      	ldr	r3, [pc, #108]	; (800cb34 <HAL_CEC_MspInit+0x90>)
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	4a1a      	ldr	r2, [pc, #104]	; (800cb34 <HAL_CEC_MspInit+0x90>)
 800cacc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cad0:	6413      	str	r3, [r2, #64]	; 0x40
 800cad2:	4b18      	ldr	r3, [pc, #96]	; (800cb34 <HAL_CEC_MspInit+0x90>)
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cada:	613b      	str	r3, [r7, #16]
 800cadc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cade:	4b15      	ldr	r3, [pc, #84]	; (800cb34 <HAL_CEC_MspInit+0x90>)
 800cae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae2:	4a14      	ldr	r2, [pc, #80]	; (800cb34 <HAL_CEC_MspInit+0x90>)
 800cae4:	f043 0301 	orr.w	r3, r3, #1
 800cae8:	6313      	str	r3, [r2, #48]	; 0x30
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <HAL_CEC_MspInit+0x90>)
 800caec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration    
    PA15     ------> CEC 
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 800caf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cafa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cafc:	2312      	movs	r3, #18
 800cafe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb04:	2300      	movs	r3, #0
 800cb06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 800cb08:	2304      	movs	r3, #4
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 800cb0c:	f107 0314 	add.w	r3, r7, #20
 800cb10:	4619      	mov	r1, r3
 800cb12:	4809      	ldr	r0, [pc, #36]	; (800cb38 <HAL_CEC_MspInit+0x94>)
 800cb14:	f7f5 ff24 	bl	8002960 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2105      	movs	r1, #5
 800cb1c:	205e      	movs	r0, #94	; 0x5e
 800cb1e:	f7f4 f9f1 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 800cb22:	205e      	movs	r0, #94	; 0x5e
 800cb24:	f7f4 fa0a 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 800cb28:	bf00      	nop
 800cb2a:	3728      	adds	r7, #40	; 0x28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	40006c00 	.word	0x40006c00
 800cb34:	40023800 	.word	0x40023800
 800cb38:	40020000 	.word	0x40020000

0800cb3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08c      	sub	sp, #48	; 0x30
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb44:	f107 031c 	add.w	r3, r7, #28
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	605a      	str	r2, [r3, #4]
 800cb4e:	609a      	str	r2, [r3, #8]
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a3d      	ldr	r2, [pc, #244]	; (800cc50 <HAL_I2C_MspInit+0x114>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d129      	bne.n	800cbb2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb5e:	4b3d      	ldr	r3, [pc, #244]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb62:	4a3c      	ldr	r2, [pc, #240]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cb64:	f043 0302 	orr.w	r3, r3, #2
 800cb68:	6313      	str	r3, [r2, #48]	; 0x30
 800cb6a:	4b3a      	ldr	r3, [pc, #232]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb6e:	f003 0302 	and.w	r3, r3, #2
 800cb72:	61bb      	str	r3, [r7, #24]
 800cb74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800cb76:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cb7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cb7c:	2312      	movs	r3, #18
 800cb7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb80:	2301      	movs	r3, #1
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb84:	2300      	movs	r3, #0
 800cb86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cb88:	2304      	movs	r3, #4
 800cb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb8c:	f107 031c 	add.w	r3, r7, #28
 800cb90:	4619      	mov	r1, r3
 800cb92:	4831      	ldr	r0, [pc, #196]	; (800cc58 <HAL_I2C_MspInit+0x11c>)
 800cb94:	f7f5 fee4 	bl	8002960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cb98:	4b2e      	ldr	r3, [pc, #184]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9c:	4a2d      	ldr	r2, [pc, #180]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cb9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cba2:	6413      	str	r3, [r2, #64]	; 0x40
 800cba4:	4b2b      	ldr	r3, [pc, #172]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbac:	617b      	str	r3, [r7, #20]
 800cbae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800cbb0:	e049      	b.n	800cc46 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C4)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a29      	ldr	r2, [pc, #164]	; (800cc5c <HAL_I2C_MspInit+0x120>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d144      	bne.n	800cc46 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbbc:	4b25      	ldr	r3, [pc, #148]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc0:	4a24      	ldr	r2, [pc, #144]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cbc2:	f043 0302 	orr.w	r3, r3, #2
 800cbc6:	6313      	str	r3, [r2, #48]	; 0x30
 800cbc8:	4b22      	ldr	r3, [pc, #136]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbcc:	f003 0302 	and.w	r3, r3, #2
 800cbd0:	613b      	str	r3, [r7, #16]
 800cbd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cbd4:	4b1f      	ldr	r3, [pc, #124]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd8:	4a1e      	ldr	r2, [pc, #120]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cbda:	f043 0308 	orr.w	r3, r3, #8
 800cbde:	6313      	str	r3, [r2, #48]	; 0x30
 800cbe0:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cbe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe4:	f003 0308 	and.w	r3, r3, #8
 800cbe8:	60fb      	str	r3, [r7, #12]
 800cbea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 800cbec:	2380      	movs	r3, #128	; 0x80
 800cbee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cbf0:	2312      	movs	r3, #18
 800cbf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 800cbfc:	230b      	movs	r3, #11
 800cbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 800cc00:	f107 031c 	add.w	r3, r7, #28
 800cc04:	4619      	mov	r1, r3
 800cc06:	4814      	ldr	r0, [pc, #80]	; (800cc58 <HAL_I2C_MspInit+0x11c>)
 800cc08:	f7f5 feaa 	bl	8002960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 800cc0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cc12:	2312      	movs	r3, #18
 800cc14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc16:	2301      	movs	r3, #1
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800cc1e:	2304      	movs	r3, #4
 800cc20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 800cc22:	f107 031c 	add.w	r3, r7, #28
 800cc26:	4619      	mov	r1, r3
 800cc28:	480d      	ldr	r0, [pc, #52]	; (800cc60 <HAL_I2C_MspInit+0x124>)
 800cc2a:	f7f5 fe99 	bl	8002960 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800cc2e:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	4a08      	ldr	r2, [pc, #32]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cc34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc38:	6413      	str	r3, [r2, #64]	; 0x40
 800cc3a:	4b06      	ldr	r3, [pc, #24]	; (800cc54 <HAL_I2C_MspInit+0x118>)
 800cc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc42:	60bb      	str	r3, [r7, #8]
 800cc44:	68bb      	ldr	r3, [r7, #8]
}
 800cc46:	bf00      	nop
 800cc48:	3730      	adds	r7, #48	; 0x30
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	40005400 	.word	0x40005400
 800cc54:	40023800 	.word	0x40023800
 800cc58:	40020400 	.word	0x40020400
 800cc5c:	40006000 	.word	0x40006000
 800cc60:	40020c00 	.word	0x40020c00

0800cc64 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a0d      	ldr	r2, [pc, #52]	; (800cca8 <HAL_LTDC_MspInit+0x44>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d113      	bne.n	800cc9e <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cc76:	4b0d      	ldr	r3, [pc, #52]	; (800ccac <HAL_LTDC_MspInit+0x48>)
 800cc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc7a:	4a0c      	ldr	r2, [pc, #48]	; (800ccac <HAL_LTDC_MspInit+0x48>)
 800cc7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc80:	6453      	str	r3, [r2, #68]	; 0x44
 800cc82:	4b0a      	ldr	r3, [pc, #40]	; (800ccac <HAL_LTDC_MspInit+0x48>)
 800cc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2105      	movs	r1, #5
 800cc92:	2058      	movs	r0, #88	; 0x58
 800cc94:	f7f4 f936 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800cc98:	2058      	movs	r0, #88	; 0x58
 800cc9a:	f7f4 f94f 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800cc9e:	bf00      	nop
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	40016800 	.word	0x40016800
 800ccac:	40023800 	.word	0x40023800

0800ccb0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b08c      	sub	sp, #48	; 0x30
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccb8:	f107 031c 	add.w	r3, r7, #28
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	605a      	str	r2, [r3, #4]
 800ccc2:	609a      	str	r2, [r3, #8]
 800ccc4:	60da      	str	r2, [r3, #12]
 800ccc6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a4a      	ldr	r2, [pc, #296]	; (800cdf8 <HAL_QSPI_MspInit+0x148>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	f040 808e 	bne.w	800cdf0 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800ccd4:	4b49      	ldr	r3, [pc, #292]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800ccd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd8:	4a48      	ldr	r2, [pc, #288]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800ccda:	f043 0302 	orr.w	r3, r3, #2
 800ccde:	6393      	str	r3, [r2, #56]	; 0x38
 800cce0:	4b46      	ldr	r3, [pc, #280]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ccec:	4b43      	ldr	r3, [pc, #268]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800ccee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf0:	4a42      	ldr	r2, [pc, #264]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800ccf2:	f043 0310 	orr.w	r3, r3, #16
 800ccf6:	6313      	str	r3, [r2, #48]	; 0x30
 800ccf8:	4b40      	ldr	r3, [pc, #256]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800ccfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	617b      	str	r3, [r7, #20]
 800cd02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd04:	4b3d      	ldr	r3, [pc, #244]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd08:	4a3c      	ldr	r2, [pc, #240]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd0a:	f043 0302 	orr.w	r3, r3, #2
 800cd0e:	6313      	str	r3, [r2, #48]	; 0x30
 800cd10:	4b3a      	ldr	r3, [pc, #232]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd14:	f003 0302 	and.w	r3, r3, #2
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cd1c:	4b37      	ldr	r3, [pc, #220]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd20:	4a36      	ldr	r2, [pc, #216]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd22:	f043 0304 	orr.w	r3, r3, #4
 800cd26:	6313      	str	r3, [r2, #48]	; 0x30
 800cd28:	4b34      	ldr	r3, [pc, #208]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd34:	4b31      	ldr	r3, [pc, #196]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd38:	4a30      	ldr	r2, [pc, #192]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd3a:	f043 0308 	orr.w	r3, r3, #8
 800cd3e:	6313      	str	r3, [r2, #48]	; 0x30
 800cd40:	4b2e      	ldr	r3, [pc, #184]	; (800cdfc <HAL_QSPI_MspInit+0x14c>)
 800cd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd44:	f003 0308 	and.w	r3, r3, #8
 800cd48:	60bb      	str	r3, [r7, #8]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800cd4c:	2304      	movs	r3, #4
 800cd4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd50:	2302      	movs	r3, #2
 800cd52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd54:	2300      	movs	r3, #0
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800cd5c:	2309      	movs	r3, #9
 800cd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800cd60:	f107 031c 	add.w	r3, r7, #28
 800cd64:	4619      	mov	r1, r3
 800cd66:	4826      	ldr	r0, [pc, #152]	; (800ce00 <HAL_QSPI_MspInit+0x150>)
 800cd68:	f7f5 fdfa 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800cd6c:	2340      	movs	r3, #64	; 0x40
 800cd6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd70:	2302      	movs	r3, #2
 800cd72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800cd7c:	230a      	movs	r3, #10
 800cd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800cd80:	f107 031c 	add.w	r3, r7, #28
 800cd84:	4619      	mov	r1, r3
 800cd86:	481f      	ldr	r0, [pc, #124]	; (800ce04 <HAL_QSPI_MspInit+0x154>)
 800cd88:	f7f5 fdea 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 800cd8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cd90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd92:	2302      	movs	r3, #2
 800cd94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800cd9e:	2309      	movs	r3, #9
 800cda0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cda2:	f107 031c 	add.w	r3, r7, #28
 800cda6:	4619      	mov	r1, r3
 800cda8:	4817      	ldr	r0, [pc, #92]	; (800ce08 <HAL_QSPI_MspInit+0x158>)
 800cdaa:	f7f5 fdd9 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cdae:	2304      	movs	r3, #4
 800cdb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800cdbe:	2309      	movs	r3, #9
 800cdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cdc2:	f107 031c 	add.w	r3, r7, #28
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	480e      	ldr	r0, [pc, #56]	; (800ce04 <HAL_QSPI_MspInit+0x154>)
 800cdca:	f7f5 fdc9 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 800cdce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cddc:	2303      	movs	r3, #3
 800cdde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800cde0:	2309      	movs	r3, #9
 800cde2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800cde4:	f107 031c 	add.w	r3, r7, #28
 800cde8:	4619      	mov	r1, r3
 800cdea:	4808      	ldr	r0, [pc, #32]	; (800ce0c <HAL_QSPI_MspInit+0x15c>)
 800cdec:	f7f5 fdb8 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800cdf0:	bf00      	nop
 800cdf2:	3730      	adds	r7, #48	; 0x30
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	a0001000 	.word	0xa0001000
 800cdfc:	40023800 	.word	0x40023800
 800ce00:	40021000 	.word	0x40021000
 800ce04:	40020400 	.word	0x40020400
 800ce08:	40020800 	.word	0x40020800
 800ce0c:	40020c00 	.word	0x40020c00

0800ce10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a07      	ldr	r2, [pc, #28]	; (800ce3c <HAL_RTC_MspInit+0x2c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d105      	bne.n	800ce2e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ce22:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <HAL_RTC_MspInit+0x30>)
 800ce24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce26:	4a06      	ldr	r2, [pc, #24]	; (800ce40 <HAL_RTC_MspInit+0x30>)
 800ce28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce2c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ce2e:	bf00      	nop
 800ce30:	370c      	adds	r7, #12
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	40002800 	.word	0x40002800
 800ce40:	40023800 	.word	0x40023800

0800ce44 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b08c      	sub	sp, #48	; 0x30
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce4c:	f107 031c 	add.w	r3, r7, #28
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	605a      	str	r2, [r3, #4]
 800ce56:	609a      	str	r2, [r3, #8]
 800ce58:	60da      	str	r2, [r3, #12]
 800ce5a:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC2)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a33      	ldr	r2, [pc, #204]	; (800cf30 <HAL_MMC_MspInit+0xec>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d160      	bne.n	800cf28 <HAL_MMC_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800ce66:	4b33      	ldr	r3, [pc, #204]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce6a:	4a32      	ldr	r2, [pc, #200]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce70:	6453      	str	r3, [r2, #68]	; 0x44
 800ce72:	4b30      	ldr	r3, [pc, #192]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce7a:	61bb      	str	r3, [r7, #24]
 800ce7c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce7e:	4b2d      	ldr	r3, [pc, #180]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce82:	4a2c      	ldr	r2, [pc, #176]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce84:	f043 0302 	orr.w	r3, r3, #2
 800ce88:	6313      	str	r3, [r2, #48]	; 0x30
 800ce8a:	4b2a      	ldr	r3, [pc, #168]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8e:	f003 0302 	and.w	r3, r3, #2
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce96:	4b27      	ldr	r3, [pc, #156]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	4a26      	ldr	r2, [pc, #152]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ce9c:	f043 0308 	orr.w	r3, r3, #8
 800cea0:	6313      	str	r3, [r2, #48]	; 0x30
 800cea2:	4b24      	ldr	r3, [pc, #144]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800cea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea6:	f003 0308 	and.w	r3, r3, #8
 800ceaa:	613b      	str	r3, [r7, #16]
 800ceac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ceae:	4b21      	ldr	r3, [pc, #132]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ceb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb2:	4a20      	ldr	r2, [pc, #128]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800ceb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb8:	6313      	str	r3, [r2, #48]	; 0x30
 800ceba:	4b1e      	ldr	r3, [pc, #120]	; (800cf34 <HAL_MMC_MspInit+0xf0>)
 800cebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 800cec6:	2318      	movs	r3, #24
 800cec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceca:	2302      	movs	r3, #2
 800cecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ced2:	2303      	movs	r3, #3
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800ced6:	230a      	movs	r3, #10
 800ced8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ceda:	f107 031c 	add.w	r3, r7, #28
 800cede:	4619      	mov	r1, r3
 800cee0:	4815      	ldr	r0, [pc, #84]	; (800cf38 <HAL_MMC_MspInit+0xf4>)
 800cee2:	f7f5 fd3d 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 800cee6:	23c0      	movs	r3, #192	; 0xc0
 800cee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceea:	2302      	movs	r3, #2
 800ceec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceee:	2300      	movs	r3, #0
 800cef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cef2:	2303      	movs	r3, #3
 800cef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800cef6:	230b      	movs	r3, #11
 800cef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cefa:	f107 031c 	add.w	r3, r7, #28
 800cefe:	4619      	mov	r1, r3
 800cf00:	480e      	ldr	r0, [pc, #56]	; (800cf3c <HAL_MMC_MspInit+0xf8>)
 800cf02:	f7f5 fd2d 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 800cf06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cf0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf14:	2303      	movs	r3, #3
 800cf16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800cf18:	230b      	movs	r3, #11
 800cf1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cf1c:	f107 031c 	add.w	r3, r7, #28
 800cf20:	4619      	mov	r1, r3
 800cf22:	4807      	ldr	r0, [pc, #28]	; (800cf40 <HAL_MMC_MspInit+0xfc>)
 800cf24:	f7f5 fd1c 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800cf28:	bf00      	nop
 800cf2a:	3730      	adds	r7, #48	; 0x30
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	40011c00 	.word	0x40011c00
 800cf34:	40023800 	.word	0x40023800
 800cf38:	40020400 	.word	0x40020400
 800cf3c:	40020c00 	.word	0x40020c00
 800cf40:	40021800 	.word	0x40021800

0800cf44 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b08a      	sub	sp, #40	; 0x28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf4c:	f107 0314 	add.w	r3, r7, #20
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	605a      	str	r2, [r3, #4]
 800cf56:	609a      	str	r2, [r3, #8]
 800cf58:	60da      	str	r2, [r3, #12]
 800cf5a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800cf64:	d128      	bne.n	800cfb8 <HAL_SPDIFRX_MspInit+0x74>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800cf66:	4b16      	ldr	r3, [pc, #88]	; (800cfc0 <HAL_SPDIFRX_MspInit+0x7c>)
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	4a15      	ldr	r2, [pc, #84]	; (800cfc0 <HAL_SPDIFRX_MspInit+0x7c>)
 800cf6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf70:	6413      	str	r3, [r2, #64]	; 0x40
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <HAL_SPDIFRX_MspInit+0x7c>)
 800cf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf7a:	613b      	str	r3, [r7, #16]
 800cf7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <HAL_SPDIFRX_MspInit+0x7c>)
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	4a0f      	ldr	r2, [pc, #60]	; (800cfc0 <HAL_SPDIFRX_MspInit+0x7c>)
 800cf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf88:	6313      	str	r3, [r2, #48]	; 0x30
 800cf8a:	4b0d      	ldr	r3, [pc, #52]	; (800cfc0 <HAL_SPDIFRX_MspInit+0x7c>)
 800cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf92:	60fb      	str	r3, [r7, #12]
 800cf94:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PG12     ------> SPDIFRX_IN1 
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 800cf96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 800cfa8:	2307      	movs	r3, #7
 800cfaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800cfac:	f107 0314 	add.w	r3, r7, #20
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4804      	ldr	r0, [pc, #16]	; (800cfc4 <HAL_SPDIFRX_MspInit+0x80>)
 800cfb4:	f7f5 fcd4 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800cfb8:	bf00      	nop
 800cfba:	3728      	adds	r7, #40	; 0x28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	40023800 	.word	0x40023800
 800cfc4:	40021800 	.word	0x40021800

0800cfc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	; 0x28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfd0:	f107 0314 	add.w	r3, r7, #20
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	605a      	str	r2, [r3, #4]
 800cfda:	609a      	str	r2, [r3, #8]
 800cfdc:	60da      	str	r2, [r3, #12]
 800cfde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a2e      	ldr	r2, [pc, #184]	; (800d0a0 <HAL_SPI_MspInit+0xd8>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d156      	bne.n	800d098 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cfea:	4b2e      	ldr	r3, [pc, #184]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800cfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfee:	4a2d      	ldr	r2, [pc, #180]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800cff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cff4:	6413      	str	r3, [r2, #64]	; 0x40
 800cff6:	4b2b      	ldr	r3, [pc, #172]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cffe:	613b      	str	r3, [r7, #16]
 800d000:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d002:	4b28      	ldr	r3, [pc, #160]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800d004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d006:	4a27      	ldr	r2, [pc, #156]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800d008:	f043 0301 	orr.w	r3, r3, #1
 800d00c:	6313      	str	r3, [r2, #48]	; 0x30
 800d00e:	4b25      	ldr	r3, [pc, #148]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800d010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d01a:	4b22      	ldr	r3, [pc, #136]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800d01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01e:	4a21      	ldr	r2, [pc, #132]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800d020:	f043 0302 	orr.w	r3, r3, #2
 800d024:	6313      	str	r3, [r2, #48]	; 0x30
 800d026:	4b1f      	ldr	r3, [pc, #124]	; (800d0a4 <HAL_SPI_MspInit+0xdc>)
 800d028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	60bb      	str	r3, [r7, #8]
 800d030:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 800d032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d038:	2302      	movs	r3, #2
 800d03a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d040:	2300      	movs	r3, #0
 800d042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d044:	2305      	movs	r3, #5
 800d046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 800d048:	f107 0314 	add.w	r3, r7, #20
 800d04c:	4619      	mov	r1, r3
 800d04e:	4816      	ldr	r0, [pc, #88]	; (800d0a8 <HAL_SPI_MspInit+0xe0>)
 800d050:	f7f5 fc86 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800d054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d05a:	2302      	movs	r3, #2
 800d05c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d05e:	2300      	movs	r3, #0
 800d060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d062:	2303      	movs	r3, #3
 800d064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d066:	2305      	movs	r3, #5
 800d068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800d06a:	f107 0314 	add.w	r3, r7, #20
 800d06e:	4619      	mov	r1, r3
 800d070:	480d      	ldr	r0, [pc, #52]	; (800d0a8 <HAL_SPI_MspInit+0xe0>)
 800d072:	f7f5 fc75 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800d076:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d07a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d07c:	2302      	movs	r3, #2
 800d07e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d080:	2300      	movs	r3, #0
 800d082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d084:	2300      	movs	r3, #0
 800d086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d088:	2305      	movs	r3, #5
 800d08a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d08c:	f107 0314 	add.w	r3, r7, #20
 800d090:	4619      	mov	r1, r3
 800d092:	4806      	ldr	r0, [pc, #24]	; (800d0ac <HAL_SPI_MspInit+0xe4>)
 800d094:	f7f5 fc64 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d098:	bf00      	nop
 800d09a:	3728      	adds	r7, #40	; 0x28
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	40003800 	.word	0x40003800
 800d0a4:	40023800 	.word	0x40023800
 800d0a8:	40020000 	.word	0x40020000
 800d0ac:	40020400 	.word	0x40020400

0800d0b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a1c      	ldr	r2, [pc, #112]	; (800d130 <HAL_TIM_Base_MspInit+0x80>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d10c      	bne.n	800d0dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c6:	4a1b      	ldr	r2, [pc, #108]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d0c8:	f043 0301 	orr.w	r3, r3, #1
 800d0cc:	6453      	str	r3, [r2, #68]	; 0x44
 800d0ce:	4b19      	ldr	r3, [pc, #100]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	617b      	str	r3, [r7, #20]
 800d0d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800d0da:	e022      	b.n	800d122 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a15      	ldr	r2, [pc, #84]	; (800d138 <HAL_TIM_Base_MspInit+0x88>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d10c      	bne.n	800d100 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800d0e6:	4b13      	ldr	r3, [pc, #76]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ea:	4a12      	ldr	r2, [pc, #72]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d0ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0f0:	6453      	str	r3, [r2, #68]	; 0x44
 800d0f2:	4b10      	ldr	r3, [pc, #64]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0fa:	613b      	str	r3, [r7, #16]
 800d0fc:	693b      	ldr	r3, [r7, #16]
}
 800d0fe:	e010      	b.n	800d122 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a0d      	ldr	r2, [pc, #52]	; (800d13c <HAL_TIM_Base_MspInit+0x8c>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d10b      	bne.n	800d122 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800d10a:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d10e:	4a09      	ldr	r2, [pc, #36]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d114:	6453      	str	r3, [r2, #68]	; 0x44
 800d116:	4b07      	ldr	r3, [pc, #28]	; (800d134 <HAL_TIM_Base_MspInit+0x84>)
 800d118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d11a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
}
 800d122:	bf00      	nop
 800d124:	371c      	adds	r7, #28
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	40010000 	.word	0x40010000
 800d134:	40023800 	.word	0x40023800
 800d138:	40014400 	.word	0x40014400
 800d13c:	40014800 	.word	0x40014800

0800d140 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a13      	ldr	r2, [pc, #76]	; (800d19c <HAL_TIM_PWM_MspInit+0x5c>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d10c      	bne.n	800d16c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d152:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <HAL_TIM_PWM_MspInit+0x60>)
 800d154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d156:	4a12      	ldr	r2, [pc, #72]	; (800d1a0 <HAL_TIM_PWM_MspInit+0x60>)
 800d158:	f043 0302 	orr.w	r3, r3, #2
 800d15c:	6413      	str	r3, [r2, #64]	; 0x40
 800d15e:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <HAL_TIM_PWM_MspInit+0x60>)
 800d160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	60fb      	str	r3, [r7, #12]
 800d168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800d16a:	e010      	b.n	800d18e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a0c      	ldr	r2, [pc, #48]	; (800d1a4 <HAL_TIM_PWM_MspInit+0x64>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d10b      	bne.n	800d18e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800d176:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <HAL_TIM_PWM_MspInit+0x60>)
 800d178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17a:	4a09      	ldr	r2, [pc, #36]	; (800d1a0 <HAL_TIM_PWM_MspInit+0x60>)
 800d17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d180:	6413      	str	r3, [r2, #64]	; 0x40
 800d182:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <HAL_TIM_PWM_MspInit+0x60>)
 800d184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d18a:	60bb      	str	r3, [r7, #8]
 800d18c:	68bb      	ldr	r3, [r7, #8]
}
 800d18e:	bf00      	nop
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	40000400 	.word	0x40000400
 800d1a0:	40023800 	.word	0x40023800
 800d1a4:	40001800 	.word	0x40001800

0800d1a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b08c      	sub	sp, #48	; 0x30
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1b0:	f107 031c 	add.w	r3, r7, #28
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	605a      	str	r2, [r3, #4]
 800d1ba:	609a      	str	r2, [r3, #8]
 800d1bc:	60da      	str	r2, [r3, #12]
 800d1be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a44      	ldr	r2, [pc, #272]	; (800d2d8 <HAL_TIM_MspPostInit+0x130>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d11d      	bne.n	800d206 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1ca:	4b44      	ldr	r3, [pc, #272]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	4a43      	ldr	r2, [pc, #268]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d1d0:	f043 0304 	orr.w	r3, r3, #4
 800d1d4:	6313      	str	r3, [r2, #48]	; 0x30
 800d1d6:	4b41      	ldr	r3, [pc, #260]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1da:	f003 0304 	and.w	r3, r3, #4
 800d1de:	61bb      	str	r3, [r7, #24]
 800d1e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration    
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 800d1e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 800d1f8:	f107 031c 	add.w	r3, r7, #28
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4838      	ldr	r0, [pc, #224]	; (800d2e0 <HAL_TIM_MspPostInit+0x138>)
 800d200:	f7f5 fbae 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800d204:	e064      	b.n	800d2d0 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a36      	ldr	r2, [pc, #216]	; (800d2e4 <HAL_TIM_MspPostInit+0x13c>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d11c      	bne.n	800d24a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800d210:	4b32      	ldr	r3, [pc, #200]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d214:	4a31      	ldr	r2, [pc, #196]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d216:	f043 0320 	orr.w	r3, r3, #32
 800d21a:	6313      	str	r3, [r2, #48]	; 0x30
 800d21c:	4b2f      	ldr	r3, [pc, #188]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	617b      	str	r3, [r7, #20]
 800d226:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 800d228:	2340      	movs	r3, #64	; 0x40
 800d22a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d22c:	2302      	movs	r3, #2
 800d22e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d230:	2300      	movs	r3, #0
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d234:	2300      	movs	r3, #0
 800d236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800d238:	2303      	movs	r3, #3
 800d23a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 800d23c:	f107 031c 	add.w	r3, r7, #28
 800d240:	4619      	mov	r1, r3
 800d242:	4829      	ldr	r0, [pc, #164]	; (800d2e8 <HAL_TIM_MspPostInit+0x140>)
 800d244:	f7f5 fb8c 	bl	8002960 <HAL_GPIO_Init>
}
 800d248:	e042      	b.n	800d2d0 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a27      	ldr	r2, [pc, #156]	; (800d2ec <HAL_TIM_MspPostInit+0x144>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d11c      	bne.n	800d28e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800d254:	4b21      	ldr	r3, [pc, #132]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d258:	4a20      	ldr	r2, [pc, #128]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d25a:	f043 0320 	orr.w	r3, r3, #32
 800d25e:	6313      	str	r3, [r2, #48]	; 0x30
 800d260:	4b1e      	ldr	r3, [pc, #120]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d264:	f003 0320 	and.w	r3, r3, #32
 800d268:	613b      	str	r3, [r7, #16]
 800d26a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 800d26c:	2380      	movs	r3, #128	; 0x80
 800d26e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d270:	2302      	movs	r3, #2
 800d272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d274:	2300      	movs	r3, #0
 800d276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d278:	2300      	movs	r3, #0
 800d27a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800d27c:	2303      	movs	r3, #3
 800d27e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 800d280:	f107 031c 	add.w	r3, r7, #28
 800d284:	4619      	mov	r1, r3
 800d286:	4818      	ldr	r0, [pc, #96]	; (800d2e8 <HAL_TIM_MspPostInit+0x140>)
 800d288:	f7f5 fb6a 	bl	8002960 <HAL_GPIO_Init>
}
 800d28c:	e020      	b.n	800d2d0 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a17      	ldr	r2, [pc, #92]	; (800d2f0 <HAL_TIM_MspPostInit+0x148>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d11b      	bne.n	800d2d0 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d298:	4b10      	ldr	r3, [pc, #64]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29c:	4a0f      	ldr	r2, [pc, #60]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d29e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a2:	6313      	str	r3, [r2, #48]	; 0x30
 800d2a4:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <HAL_TIM_MspPostInit+0x134>)
 800d2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800d2b0:	2340      	movs	r3, #64	; 0x40
 800d2b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800d2c0:	2309      	movs	r3, #9
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800d2c4:	f107 031c 	add.w	r3, r7, #28
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	480a      	ldr	r0, [pc, #40]	; (800d2f4 <HAL_TIM_MspPostInit+0x14c>)
 800d2cc:	f7f5 fb48 	bl	8002960 <HAL_GPIO_Init>
}
 800d2d0:	bf00      	nop
 800d2d2:	3730      	adds	r7, #48	; 0x30
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	40000400 	.word	0x40000400
 800d2dc:	40023800 	.word	0x40023800
 800d2e0:	40020800 	.word	0x40020800
 800d2e4:	40014400 	.word	0x40014400
 800d2e8:	40021400 	.word	0x40021400
 800d2ec:	40014800 	.word	0x40014800
 800d2f0:	40001800 	.word	0x40001800
 800d2f4:	40021c00 	.word	0x40021c00

0800d2f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08e      	sub	sp, #56	; 0x38
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d304:	2200      	movs	r2, #0
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	605a      	str	r2, [r3, #4]
 800d30a:	609a      	str	r2, [r3, #8]
 800d30c:	60da      	str	r2, [r3, #12]
 800d30e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a5c      	ldr	r2, [pc, #368]	; (800d488 <HAL_UART_MspInit+0x190>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d145      	bne.n	800d3a6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800d31a:	4b5c      	ldr	r3, [pc, #368]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	4a5b      	ldr	r2, [pc, #364]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d324:	6413      	str	r3, [r2, #64]	; 0x40
 800d326:	4b59      	ldr	r3, [pc, #356]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d32e:	623b      	str	r3, [r7, #32]
 800d330:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d332:	4b56      	ldr	r3, [pc, #344]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d336:	4a55      	ldr	r2, [pc, #340]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d338:	f043 0304 	orr.w	r3, r3, #4
 800d33c:	6313      	str	r3, [r2, #48]	; 0x30
 800d33e:	4b53      	ldr	r3, [pc, #332]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d342:	f003 0304 	and.w	r3, r3, #4
 800d346:	61fb      	str	r3, [r7, #28]
 800d348:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d34a:	4b50      	ldr	r3, [pc, #320]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34e:	4a4f      	ldr	r2, [pc, #316]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d350:	f043 0308 	orr.w	r3, r3, #8
 800d354:	6313      	str	r3, [r2, #48]	; 0x30
 800d356:	4b4d      	ldr	r3, [pc, #308]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d35a:	f003 0308 	and.w	r3, r3, #8
 800d35e:	61bb      	str	r3, [r7, #24]
 800d360:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 800d362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d368:	2302      	movs	r3, #2
 800d36a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d36c:	2300      	movs	r3, #0
 800d36e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d370:	2303      	movs	r3, #3
 800d372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800d374:	2308      	movs	r3, #8
 800d376:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 800d378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d37c:	4619      	mov	r1, r3
 800d37e:	4844      	ldr	r0, [pc, #272]	; (800d490 <HAL_UART_MspInit+0x198>)
 800d380:	f7f5 faee 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800d384:	2304      	movs	r3, #4
 800d386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d388:	2302      	movs	r3, #2
 800d38a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d38c:	2300      	movs	r3, #0
 800d38e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d390:	2303      	movs	r3, #3
 800d392:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800d394:	2308      	movs	r3, #8
 800d396:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 800d398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d39c:	4619      	mov	r1, r3
 800d39e:	483d      	ldr	r0, [pc, #244]	; (800d494 <HAL_UART_MspInit+0x19c>)
 800d3a0:	f7f5 fade 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800d3a4:	e06c      	b.n	800d480 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART1)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a3b      	ldr	r2, [pc, #236]	; (800d498 <HAL_UART_MspInit+0x1a0>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d13a      	bne.n	800d426 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d3b0:	4b36      	ldr	r3, [pc, #216]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b4:	4a35      	ldr	r2, [pc, #212]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d3b6:	f043 0310 	orr.w	r3, r3, #16
 800d3ba:	6453      	str	r3, [r2, #68]	; 0x44
 800d3bc:	4b33      	ldr	r3, [pc, #204]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c0:	f003 0310 	and.w	r3, r3, #16
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3c8:	4b30      	ldr	r3, [pc, #192]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3cc:	4a2f      	ldr	r2, [pc, #188]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	6313      	str	r3, [r2, #48]	; 0x30
 800d3d4:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	613b      	str	r3, [r7, #16]
 800d3de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800d3e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d3f2:	2307      	movs	r3, #7
 800d3f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800d3f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	4827      	ldr	r0, [pc, #156]	; (800d49c <HAL_UART_MspInit+0x1a4>)
 800d3fe:	f7f5 faaf 	bl	8002960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800d402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d408:	2302      	movs	r3, #2
 800d40a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d40c:	2300      	movs	r3, #0
 800d40e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d410:	2300      	movs	r3, #0
 800d412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d414:	2307      	movs	r3, #7
 800d416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800d418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d41c:	4619      	mov	r1, r3
 800d41e:	481f      	ldr	r0, [pc, #124]	; (800d49c <HAL_UART_MspInit+0x1a4>)
 800d420:	f7f5 fa9e 	bl	8002960 <HAL_GPIO_Init>
}
 800d424:	e02c      	b.n	800d480 <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART6)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a1d      	ldr	r2, [pc, #116]	; (800d4a0 <HAL_UART_MspInit+0x1a8>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d127      	bne.n	800d480 <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART6_CLK_ENABLE();
 800d430:	4b16      	ldr	r3, [pc, #88]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d434:	4a15      	ldr	r2, [pc, #84]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d436:	f043 0320 	orr.w	r3, r3, #32
 800d43a:	6453      	str	r3, [r2, #68]	; 0x44
 800d43c:	4b13      	ldr	r3, [pc, #76]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d440:	f003 0320 	and.w	r3, r3, #32
 800d444:	60fb      	str	r3, [r7, #12]
 800d446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d448:	4b10      	ldr	r3, [pc, #64]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44c:	4a0f      	ldr	r2, [pc, #60]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d44e:	f043 0304 	orr.w	r3, r3, #4
 800d452:	6313      	str	r3, [r2, #48]	; 0x30
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <HAL_UART_MspInit+0x194>)
 800d456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d458:	f003 0304 	and.w	r3, r3, #4
 800d45c:	60bb      	str	r3, [r7, #8]
 800d45e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 800d460:	23c0      	movs	r3, #192	; 0xc0
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d464:	2302      	movs	r3, #2
 800d466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d468:	2300      	movs	r3, #0
 800d46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d46c:	2303      	movs	r3, #3
 800d46e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800d470:	2308      	movs	r3, #8
 800d472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d478:	4619      	mov	r1, r3
 800d47a:	4805      	ldr	r0, [pc, #20]	; (800d490 <HAL_UART_MspInit+0x198>)
 800d47c:	f7f5 fa70 	bl	8002960 <HAL_GPIO_Init>
}
 800d480:	bf00      	nop
 800d482:	3738      	adds	r7, #56	; 0x38
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	40005000 	.word	0x40005000
 800d48c:	40023800 	.word	0x40023800
 800d490:	40020800 	.word	0x40020800
 800d494:	40020c00 	.word	0x40020c00
 800d498:	40011000 	.word	0x40011000
 800d49c:	40020000 	.word	0x40020000
 800d4a0:	40011400 	.word	0x40011400

0800d4a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08e      	sub	sp, #56	; 0x38
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	605a      	str	r2, [r3, #4]
 800d4b6:	609a      	str	r2, [r3, #8]
 800d4b8:	60da      	str	r2, [r3, #12]
 800d4ba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a5a      	ldr	r2, [pc, #360]	; (800d62c <HAL_PCD_MspInit+0x188>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	f040 80ae 	bne.w	800d624 <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4c8:	4b59      	ldr	r3, [pc, #356]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4cc:	4a58      	ldr	r2, [pc, #352]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4ce:	f043 0302 	orr.w	r3, r3, #2
 800d4d2:	6313      	str	r3, [r2, #48]	; 0x30
 800d4d4:	4b56      	ldr	r3, [pc, #344]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d8:	f003 0302 	and.w	r3, r3, #2
 800d4dc:	623b      	str	r3, [r7, #32]
 800d4de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d4e0:	4b53      	ldr	r3, [pc, #332]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e4:	4a52      	ldr	r2, [pc, #328]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4ea:	6313      	str	r3, [r2, #48]	; 0x30
 800d4ec:	4b50      	ldr	r3, [pc, #320]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4f4:	61fb      	str	r3, [r7, #28]
 800d4f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d4f8:	4b4d      	ldr	r3, [pc, #308]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fc:	4a4c      	ldr	r2, [pc, #304]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d502:	6313      	str	r3, [r2, #48]	; 0x30
 800d504:	4b4a      	ldr	r3, [pc, #296]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d50c:	61bb      	str	r3, [r7, #24]
 800d50e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d510:	4b47      	ldr	r3, [pc, #284]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d514:	4a46      	ldr	r2, [pc, #280]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d516:	f043 0304 	orr.w	r3, r3, #4
 800d51a:	6313      	str	r3, [r2, #48]	; 0x30
 800d51c:	4b44      	ldr	r3, [pc, #272]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d520:	f003 0304 	and.w	r3, r3, #4
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d528:	4b41      	ldr	r3, [pc, #260]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d52c:	4a40      	ldr	r2, [pc, #256]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d52e:	f043 0301 	orr.w	r3, r3, #1
 800d532:	6313      	str	r3, [r2, #48]	; 0x30
 800d534:	4b3e      	ldr	r3, [pc, #248]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	613b      	str	r3, [r7, #16]
 800d53e:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4 
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800d540:	f643 4323 	movw	r3, #15395	; 0x3c23
 800d544:	627b      	str	r3, [r7, #36]	; 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d546:	2302      	movs	r3, #2
 800d548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d54e:	2303      	movs	r3, #3
 800d550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d552:	230a      	movs	r3, #10
 800d554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d55a:	4619      	mov	r1, r3
 800d55c:	4835      	ldr	r0, [pc, #212]	; (800d634 <HAL_PCD_MspInit+0x190>)
 800d55e:	f7f5 f9ff 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800d562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d568:	2302      	movs	r3, #2
 800d56a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d56c:	2300      	movs	r3, #0
 800d56e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d570:	2303      	movs	r3, #3
 800d572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d574:	230a      	movs	r3, #10
 800d576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800d578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d57c:	4619      	mov	r1, r3
 800d57e:	482e      	ldr	r0, [pc, #184]	; (800d638 <HAL_PCD_MspInit+0x194>)
 800d580:	f7f5 f9ee 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800d584:	2310      	movs	r3, #16
 800d586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d588:	2302      	movs	r3, #2
 800d58a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d58c:	2300      	movs	r3, #0
 800d58e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d590:	2303      	movs	r3, #3
 800d592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d594:	230a      	movs	r3, #10
 800d596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800d598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d59c:	4619      	mov	r1, r3
 800d59e:	4827      	ldr	r0, [pc, #156]	; (800d63c <HAL_PCD_MspInit+0x198>)
 800d5a0:	f7f5 f9de 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d5b4:	230a      	movs	r3, #10
 800d5b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800d5b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4820      	ldr	r0, [pc, #128]	; (800d640 <HAL_PCD_MspInit+0x19c>)
 800d5c0:	f7f5 f9ce 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800d5c4:	2328      	movs	r3, #40	; 0x28
 800d5c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d5d4:	230a      	movs	r3, #10
 800d5d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4819      	ldr	r0, [pc, #100]	; (800d644 <HAL_PCD_MspInit+0x1a0>)
 800d5e0:	f7f5 f9be 	bl	8002960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d5e4:	4b12      	ldr	r3, [pc, #72]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e8:	4a11      	ldr	r2, [pc, #68]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d5ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5ee:	6313      	str	r3, [r2, #48]	; 0x30
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d600:	4a0b      	ldr	r2, [pc, #44]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d606:	6313      	str	r3, [r2, #48]	; 0x30
 800d608:	4b09      	ldr	r3, [pc, #36]	; (800d630 <HAL_PCD_MspInit+0x18c>)
 800d60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d610:	60bb      	str	r3, [r7, #8]
 800d612:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d614:	2200      	movs	r2, #0
 800d616:	2105      	movs	r1, #5
 800d618:	204d      	movs	r0, #77	; 0x4d
 800d61a:	f7f3 fc73 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d61e:	204d      	movs	r0, #77	; 0x4d
 800d620:	f7f3 fc8c 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800d624:	bf00      	nop
 800d626:	3738      	adds	r7, #56	; 0x38
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	40040000 	.word	0x40040000
 800d630:	40023800 	.word	0x40023800
 800d634:	40020400 	.word	0x40020400
 800d638:	40022000 	.word	0x40022000
 800d63c:	40021c00 	.word	0x40021c00
 800d640:	40020800 	.word	0x40020800
 800d644:	40020000 	.word	0x40020000

0800d648 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a0a      	ldr	r2, [pc, #40]	; (800d680 <HAL_WWDG_MspInit+0x38>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d10b      	bne.n	800d672 <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800d65a:	4b0a      	ldr	r3, [pc, #40]	; (800d684 <HAL_WWDG_MspInit+0x3c>)
 800d65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65e:	4a09      	ldr	r2, [pc, #36]	; (800d684 <HAL_WWDG_MspInit+0x3c>)
 800d660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d664:	6413      	str	r3, [r2, #64]	; 0x40
 800d666:	4b07      	ldr	r3, [pc, #28]	; (800d684 <HAL_WWDG_MspInit+0x3c>)
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800d672:	bf00      	nop
 800d674:	3714      	adds	r7, #20
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	40002c00 	.word	0x40002c00
 800d684:	40023800 	.word	0x40023800

0800d688 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800d68e:	1d3b      	adds	r3, r7, #4
 800d690:	2200      	movs	r2, #0
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	605a      	str	r2, [r3, #4]
 800d696:	609a      	str	r2, [r3, #8]
 800d698:	60da      	str	r2, [r3, #12]
 800d69a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800d69c:	4b3b      	ldr	r3, [pc, #236]	; (800d78c <HAL_FMC_MspInit+0x104>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d16f      	bne.n	800d784 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800d6a4:	4b39      	ldr	r3, [pc, #228]	; (800d78c <HAL_FMC_MspInit+0x104>)
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800d6aa:	4b39      	ldr	r3, [pc, #228]	; (800d790 <HAL_FMC_MspInit+0x108>)
 800d6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ae:	4a38      	ldr	r2, [pc, #224]	; (800d790 <HAL_FMC_MspInit+0x108>)
 800d6b0:	f043 0301 	orr.w	r3, r3, #1
 800d6b4:	6393      	str	r3, [r2, #56]	; 0x38
 800d6b6:	4b36      	ldr	r3, [pc, #216]	; (800d790 <HAL_FMC_MspInit+0x108>)
 800d6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	603b      	str	r3, [r7, #0]
 800d6c0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800d6c2:	f64f 7383 	movw	r3, #65411	; 0xff83
 800d6c6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d6d4:	230c      	movs	r3, #12
 800d6d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d6d8:	1d3b      	adds	r3, r7, #4
 800d6da:	4619      	mov	r1, r3
 800d6dc:	482d      	ldr	r0, [pc, #180]	; (800d794 <HAL_FMC_MspInit+0x10c>)
 800d6de:	f7f5 f93f 	bl	8002960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 800d6e2:	f248 1337 	movw	r3, #33079	; 0x8137
 800d6e6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d6f4:	230c      	movs	r3, #12
 800d6f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d6f8:	1d3b      	adds	r3, r7, #4
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4826      	ldr	r0, [pc, #152]	; (800d798 <HAL_FMC_MspInit+0x110>)
 800d6fe:	f7f5 f92f 	bl	8002960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800d702:	f24c 7303 	movw	r3, #50947	; 0xc703
 800d706:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d708:	2302      	movs	r3, #2
 800d70a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d70c:	2300      	movs	r3, #0
 800d70e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d710:	2303      	movs	r3, #3
 800d712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d714:	230c      	movs	r3, #12
 800d716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d718:	1d3b      	adds	r3, r7, #4
 800d71a:	4619      	mov	r1, r3
 800d71c:	481f      	ldr	r0, [pc, #124]	; (800d79c <HAL_FMC_MspInit+0x114>)
 800d71e:	f7f5 f91f 	bl	8002960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 800d722:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800d726:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin 
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d728:	2302      	movs	r3, #2
 800d72a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d72c:	2300      	movs	r3, #0
 800d72e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d730:	2303      	movs	r3, #3
 800d732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d734:	230c      	movs	r3, #12
 800d736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d738:	1d3b      	adds	r3, r7, #4
 800d73a:	4619      	mov	r1, r3
 800d73c:	4818      	ldr	r0, [pc, #96]	; (800d7a0 <HAL_FMC_MspInit+0x118>)
 800d73e:	f7f5 f90f 	bl	8002960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800d742:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800d746:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d748:	2302      	movs	r3, #2
 800d74a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d750:	2303      	movs	r3, #3
 800d752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d754:	230c      	movs	r3, #12
 800d756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d758:	1d3b      	adds	r3, r7, #4
 800d75a:	4619      	mov	r1, r3
 800d75c:	4811      	ldr	r0, [pc, #68]	; (800d7a4 <HAL_FMC_MspInit+0x11c>)
 800d75e:	f7f5 f8ff 	bl	8002960 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 800d762:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800d766:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin 
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d768:	2302      	movs	r3, #2
 800d76a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d76c:	2300      	movs	r3, #0
 800d76e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d770:	2303      	movs	r3, #3
 800d772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d774:	230c      	movs	r3, #12
 800d776:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d778:	1d3b      	adds	r3, r7, #4
 800d77a:	4619      	mov	r1, r3
 800d77c:	480a      	ldr	r0, [pc, #40]	; (800d7a8 <HAL_FMC_MspInit+0x120>)
 800d77e:	f7f5 f8ef 	bl	8002960 <HAL_GPIO_Init>
 800d782:	e000      	b.n	800d786 <HAL_FMC_MspInit+0xfe>
    return;
 800d784:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800d786:	3718      	adds	r7, #24
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	20008174 	.word	0x20008174
 800d790:	40023800 	.word	0x40023800
 800d794:	40021000 	.word	0x40021000
 800d798:	40021800 	.word	0x40021800
 800d79c:	40020c00 	.word	0x40020c00
 800d7a0:	40022000 	.word	0x40022000
 800d7a4:	40021400 	.word	0x40021400
 800d7a8:	40021c00 	.word	0x40021c00

0800d7ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800d7b4:	f7ff ff68 	bl	800d688 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08a      	sub	sp, #40	; 0x28
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a48      	ldr	r2, [pc, #288]	; (800d8f0 <HAL_SAI_MspInit+0x130>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d134      	bne.n	800d83c <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800d7d2:	4b48      	ldr	r3, [pc, #288]	; (800d8f4 <HAL_SAI_MspInit+0x134>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10b      	bne.n	800d7f2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d7da:	4b47      	ldr	r3, [pc, #284]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7de:	4a46      	ldr	r2, [pc, #280]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d7e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d7e4:	6453      	str	r3, [r2, #68]	; 0x44
 800d7e6:	4b44      	ldr	r3, [pc, #272]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7ee:	613b      	str	r3, [r7, #16]
 800d7f0:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800d7f2:	4b40      	ldr	r3, [pc, #256]	; (800d8f4 <HAL_SAI_MspInit+0x134>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	4a3e      	ldr	r2, [pc, #248]	; (800d8f4 <HAL_SAI_MspInit+0x134>)
 800d7fa:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 800d7fc:	2370      	movs	r3, #112	; 0x70
 800d7fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d800:	2302      	movs	r3, #2
 800d802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d804:	2300      	movs	r3, #0
 800d806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d808:	2300      	movs	r3, #0
 800d80a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d80c:	2306      	movs	r3, #6
 800d80e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d810:	f107 0314 	add.w	r3, r7, #20
 800d814:	4619      	mov	r1, r3
 800d816:	4839      	ldr	r0, [pc, #228]	; (800d8fc <HAL_SAI_MspInit+0x13c>)
 800d818:	f7f5 f8a2 	bl	8002960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 800d81c:	2380      	movs	r3, #128	; 0x80
 800d81e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d820:	2302      	movs	r3, #2
 800d822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d824:	2300      	movs	r3, #0
 800d826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d828:	2300      	movs	r3, #0
 800d82a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d82c:	2306      	movs	r3, #6
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800d830:	f107 0314 	add.w	r3, r7, #20
 800d834:	4619      	mov	r1, r3
 800d836:	4832      	ldr	r0, [pc, #200]	; (800d900 <HAL_SAI_MspInit+0x140>)
 800d838:	f7f5 f892 	bl	8002960 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a30      	ldr	r2, [pc, #192]	; (800d904 <HAL_SAI_MspInit+0x144>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d124      	bne.n	800d890 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800d846:	4b2b      	ldr	r3, [pc, #172]	; (800d8f4 <HAL_SAI_MspInit+0x134>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d10b      	bne.n	800d866 <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800d84e:	4b2a      	ldr	r3, [pc, #168]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d852:	4a29      	ldr	r2, [pc, #164]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d858:	6453      	str	r3, [r2, #68]	; 0x44
 800d85a:	4b27      	ldr	r3, [pc, #156]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d85e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800d866:	4b23      	ldr	r3, [pc, #140]	; (800d8f4 <HAL_SAI_MspInit+0x134>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	3301      	adds	r3, #1
 800d86c:	4a21      	ldr	r2, [pc, #132]	; (800d8f4 <HAL_SAI_MspInit+0x134>)
 800d86e:	6013      	str	r3, [r2, #0]
    
    /**SAI1_B_Block_B GPIO Configuration    
    PE3     ------> SAI1_SD_B 
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 800d870:	2308      	movs	r3, #8
 800d872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d874:	2302      	movs	r3, #2
 800d876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d878:	2300      	movs	r3, #0
 800d87a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d87c:	2300      	movs	r3, #0
 800d87e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800d880:	2306      	movs	r3, #6
 800d882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800d884:	f107 0314 	add.w	r3, r7, #20
 800d888:	4619      	mov	r1, r3
 800d88a:	481c      	ldr	r0, [pc, #112]	; (800d8fc <HAL_SAI_MspInit+0x13c>)
 800d88c:	f7f5 f868 	bl	8002960 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a1c      	ldr	r2, [pc, #112]	; (800d908 <HAL_SAI_MspInit+0x148>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d125      	bne.n	800d8e6 <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800d89a:	4b1c      	ldr	r3, [pc, #112]	; (800d90c <HAL_SAI_MspInit+0x14c>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10b      	bne.n	800d8ba <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800d8a2:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a6:	4a14      	ldr	r2, [pc, #80]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d8a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8ac:	6453      	str	r3, [r2, #68]	; 0x44
 800d8ae:	4b12      	ldr	r3, [pc, #72]	; (800d8f8 <HAL_SAI_MspInit+0x138>)
 800d8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8b6:	60bb      	str	r3, [r7, #8]
 800d8b8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800d8ba:	4b14      	ldr	r3, [pc, #80]	; (800d90c <HAL_SAI_MspInit+0x14c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	4a12      	ldr	r2, [pc, #72]	; (800d90c <HAL_SAI_MspInit+0x14c>)
 800d8c2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_A_Block_A GPIO Configuration    
    PD11     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 800d8c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800d8d6:	230a      	movs	r3, #10
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 800d8da:	f107 0314 	add.w	r3, r7, #20
 800d8de:	4619      	mov	r1, r3
 800d8e0:	480b      	ldr	r0, [pc, #44]	; (800d910 <HAL_SAI_MspInit+0x150>)
 800d8e2:	f7f5 f83d 	bl	8002960 <HAL_GPIO_Init>

    }
}
 800d8e6:	bf00      	nop
 800d8e8:	3728      	adds	r7, #40	; 0x28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	40015804 	.word	0x40015804
 800d8f4:	20008178 	.word	0x20008178
 800d8f8:	40023800 	.word	0x40023800
 800d8fc:	40021000 	.word	0x40021000
 800d900:	40021800 	.word	0x40021800
 800d904:	40015824 	.word	0x40015824
 800d908:	40015c04 	.word	0x40015c04
 800d90c:	2000817c 	.word	0x2000817c
 800d910:	40020c00 	.word	0x40020c00

0800d914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08c      	sub	sp, #48	; 0x30
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800d91c:	2300      	movs	r3, #0
 800d91e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800d920:	2300      	movs	r3, #0
 800d922:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800d924:	2200      	movs	r2, #0
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	2036      	movs	r0, #54	; 0x36
 800d92a:	f7f3 faeb 	bl	8000f04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800d92e:	2036      	movs	r0, #54	; 0x36
 800d930:	f7f3 fb04 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d934:	4b1f      	ldr	r3, [pc, #124]	; (800d9b4 <HAL_InitTick+0xa0>)
 800d936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d938:	4a1e      	ldr	r2, [pc, #120]	; (800d9b4 <HAL_InitTick+0xa0>)
 800d93a:	f043 0310 	orr.w	r3, r3, #16
 800d93e:	6413      	str	r3, [r2, #64]	; 0x40
 800d940:	4b1c      	ldr	r3, [pc, #112]	; (800d9b4 <HAL_InitTick+0xa0>)
 800d942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d944:	f003 0310 	and.w	r3, r3, #16
 800d948:	60fb      	str	r3, [r7, #12]
 800d94a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d94c:	f107 0210 	add.w	r2, r7, #16
 800d950:	f107 0314 	add.w	r3, r7, #20
 800d954:	4611      	mov	r1, r2
 800d956:	4618      	mov	r0, r3
 800d958:	f7f8 f88c 	bl	8005a74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800d95c:	f7f8 f862 	bl	8005a24 <HAL_RCC_GetPCLK1Freq>
 800d960:	4603      	mov	r3, r0
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d968:	4a13      	ldr	r2, [pc, #76]	; (800d9b8 <HAL_InitTick+0xa4>)
 800d96a:	fba2 2303 	umull	r2, r3, r2, r3
 800d96e:	0c9b      	lsrs	r3, r3, #18
 800d970:	3b01      	subs	r3, #1
 800d972:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d974:	4b11      	ldr	r3, [pc, #68]	; (800d9bc <HAL_InitTick+0xa8>)
 800d976:	4a12      	ldr	r2, [pc, #72]	; (800d9c0 <HAL_InitTick+0xac>)
 800d978:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800d97a:	4b10      	ldr	r3, [pc, #64]	; (800d9bc <HAL_InitTick+0xa8>)
 800d97c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d980:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800d982:	4a0e      	ldr	r2, [pc, #56]	; (800d9bc <HAL_InitTick+0xa8>)
 800d984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d986:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800d988:	4b0c      	ldr	r3, [pc, #48]	; (800d9bc <HAL_InitTick+0xa8>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d98e:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <HAL_InitTick+0xa8>)
 800d990:	2200      	movs	r2, #0
 800d992:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800d994:	4809      	ldr	r0, [pc, #36]	; (800d9bc <HAL_InitTick+0xa8>)
 800d996:	f7f9 fc55 	bl	8007244 <HAL_TIM_Base_Init>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d104      	bne.n	800d9aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800d9a0:	4806      	ldr	r0, [pc, #24]	; (800d9bc <HAL_InitTick+0xa8>)
 800d9a2:	f7f9 fc7b 	bl	800729c <HAL_TIM_Base_Start_IT>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	e000      	b.n	800d9ac <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3730      	adds	r7, #48	; 0x30
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	40023800 	.word	0x40023800
 800d9b8:	431bde83 	.word	0x431bde83
 800d9bc:	20008ed0 	.word	0x20008ed0
 800d9c0:	40001000 	.word	0x40001000

0800d9c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d9c8:	bf00      	nop
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d9d6:	e7fe      	b.n	800d9d6 <HardFault_Handler+0x4>

0800d9d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d9dc:	e7fe      	b.n	800d9dc <MemManage_Handler+0x4>

0800d9de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d9e2:	e7fe      	b.n	800d9e2 <BusFault_Handler+0x4>

0800d9e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d9e8:	e7fe      	b.n	800d9e8 <UsageFault_Handler+0x4>

0800d9ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d9ee:	bf00      	nop
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d9fc:	4802      	ldr	r0, [pc, #8]	; (800da08 <TIM6_DAC_IRQHandler+0x10>)
 800d9fe:	f7f9 fca2 	bl	8007346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800da02:	bf00      	nop
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	20008ed0 	.word	0x20008ed0

0800da0c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800da10:	4802      	ldr	r0, [pc, #8]	; (800da1c <OTG_HS_IRQHandler+0x10>)
 800da12:	f7f6 fbeb 	bl	80041ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800da16:	bf00      	nop
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20008388 	.word	0x20008388

0800da20 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800da24:	4802      	ldr	r0, [pc, #8]	; (800da30 <LTDC_IRQHandler+0x10>)
 800da26:	f7f5 fb9d 	bl	8003164 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800da2a:	bf00      	nop
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	200088ec 	.word	0x200088ec

0800da34 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800da38:	4802      	ldr	r0, [pc, #8]	; (800da44 <DMA2D_IRQHandler+0x10>)
 800da3a:	f7f3 fbd1 	bl	80011e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800da3e:	bf00      	nop
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20008cdc 	.word	0x20008cdc

0800da48 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 800da4c:	4802      	ldr	r0, [pc, #8]	; (800da58 <CEC_IRQHandler+0x10>)
 800da4e:	f7f3 f89a 	bl	8000b86 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 800da52:	bf00      	nop
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	20008868 	.word	0x20008868

0800da5c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800da60:	4802      	ldr	r0, [pc, #8]	; (800da6c <DSI_IRQHandler+0x10>)
 800da62:	f7f3 ff41 	bl	80018e8 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800da66:	bf00      	nop
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	2000884c 	.word	0x2000884c

0800da70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800da70:	b480      	push	{r7}
 800da72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800da74:	4b15      	ldr	r3, [pc, #84]	; (800dacc <SystemInit+0x5c>)
 800da76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da7a:	4a14      	ldr	r2, [pc, #80]	; (800dacc <SystemInit+0x5c>)
 800da7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800da84:	4b12      	ldr	r3, [pc, #72]	; (800dad0 <SystemInit+0x60>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a11      	ldr	r2, [pc, #68]	; (800dad0 <SystemInit+0x60>)
 800da8a:	f043 0301 	orr.w	r3, r3, #1
 800da8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800da90:	4b0f      	ldr	r3, [pc, #60]	; (800dad0 <SystemInit+0x60>)
 800da92:	2200      	movs	r2, #0
 800da94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800da96:	4b0e      	ldr	r3, [pc, #56]	; (800dad0 <SystemInit+0x60>)
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	490d      	ldr	r1, [pc, #52]	; (800dad0 <SystemInit+0x60>)
 800da9c:	4b0d      	ldr	r3, [pc, #52]	; (800dad4 <SystemInit+0x64>)
 800da9e:	4013      	ands	r3, r2
 800daa0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800daa2:	4b0b      	ldr	r3, [pc, #44]	; (800dad0 <SystemInit+0x60>)
 800daa4:	4a0c      	ldr	r2, [pc, #48]	; (800dad8 <SystemInit+0x68>)
 800daa6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800daa8:	4b09      	ldr	r3, [pc, #36]	; (800dad0 <SystemInit+0x60>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <SystemInit+0x60>)
 800daae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dab2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800dab4:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <SystemInit+0x60>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800daba:	4b04      	ldr	r3, [pc, #16]	; (800dacc <SystemInit+0x5c>)
 800dabc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dac0:	609a      	str	r2, [r3, #8]
#endif
}
 800dac2:	bf00      	nop
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr
 800dacc:	e000ed00 	.word	0xe000ed00
 800dad0:	40023800 	.word	0x40023800
 800dad4:	fef6ffff 	.word	0xfef6ffff
 800dad8:	24003010 	.word	0x24003010

0800dadc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800dadc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800db14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800dae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800dae2:	e003      	b.n	800daec <LoopCopyDataInit>

0800dae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800dae4:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800dae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800dae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800daea:	3104      	adds	r1, #4

0800daec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800daec:	480b      	ldr	r0, [pc, #44]	; (800db1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800daee:	4b0c      	ldr	r3, [pc, #48]	; (800db20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800daf0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800daf2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800daf4:	d3f6      	bcc.n	800dae4 <CopyDataInit>
  ldr  r2, =_sbss
 800daf6:	4a0b      	ldr	r2, [pc, #44]	; (800db24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800daf8:	e002      	b.n	800db00 <LoopFillZerobss>

0800dafa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800dafa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800dafc:	f842 3b04 	str.w	r3, [r2], #4

0800db00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800db00:	4b09      	ldr	r3, [pc, #36]	; (800db28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800db02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800db04:	d3f9      	bcc.n	800dafa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800db06:	f7ff ffb3 	bl	800da70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800db0a:	f000 f811 	bl	800db30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800db0e:	f7fd fad1 	bl	800b0b4 <main>
  bx  lr    
 800db12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800db14:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800db18:	0800dbf0 	.word	0x0800dbf0
  ldr  r0, =_sdata
 800db1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800db20:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800db24:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800db28:	20008f10 	.word	0x20008f10

0800db2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800db2c:	e7fe      	b.n	800db2c <ADC_IRQHandler>
	...

0800db30 <__libc_init_array>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	4e0d      	ldr	r6, [pc, #52]	; (800db68 <__libc_init_array+0x38>)
 800db34:	4c0d      	ldr	r4, [pc, #52]	; (800db6c <__libc_init_array+0x3c>)
 800db36:	1ba4      	subs	r4, r4, r6
 800db38:	10a4      	asrs	r4, r4, #2
 800db3a:	2500      	movs	r5, #0
 800db3c:	42a5      	cmp	r5, r4
 800db3e:	d109      	bne.n	800db54 <__libc_init_array+0x24>
 800db40:	4e0b      	ldr	r6, [pc, #44]	; (800db70 <__libc_init_array+0x40>)
 800db42:	4c0c      	ldr	r4, [pc, #48]	; (800db74 <__libc_init_array+0x44>)
 800db44:	f000 f820 	bl	800db88 <_init>
 800db48:	1ba4      	subs	r4, r4, r6
 800db4a:	10a4      	asrs	r4, r4, #2
 800db4c:	2500      	movs	r5, #0
 800db4e:	42a5      	cmp	r5, r4
 800db50:	d105      	bne.n	800db5e <__libc_init_array+0x2e>
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db58:	4798      	blx	r3
 800db5a:	3501      	adds	r5, #1
 800db5c:	e7ee      	b.n	800db3c <__libc_init_array+0xc>
 800db5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800db62:	4798      	blx	r3
 800db64:	3501      	adds	r5, #1
 800db66:	e7f2      	b.n	800db4e <__libc_init_array+0x1e>
 800db68:	0800dbe8 	.word	0x0800dbe8
 800db6c:	0800dbe8 	.word	0x0800dbe8
 800db70:	0800dbe8 	.word	0x0800dbe8
 800db74:	0800dbec 	.word	0x0800dbec

0800db78 <memset>:
 800db78:	4402      	add	r2, r0
 800db7a:	4603      	mov	r3, r0
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d100      	bne.n	800db82 <memset+0xa>
 800db80:	4770      	bx	lr
 800db82:	f803 1b01 	strb.w	r1, [r3], #1
 800db86:	e7f9      	b.n	800db7c <memset+0x4>

0800db88 <_init>:
 800db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8a:	bf00      	nop
 800db8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8e:	bc08      	pop	{r3}
 800db90:	469e      	mov	lr, r3
 800db92:	4770      	bx	lr

0800db94 <_fini>:
 800db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db96:	bf00      	nop
 800db98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9a:	bc08      	pop	{r3}
 800db9c:	469e      	mov	lr, r3
 800db9e:	4770      	bx	lr
