
NucleoStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac4  08002ac4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac4  08002ac4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac4  08002ac4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  08002b3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002b3c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acb3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a4d  00000000  00000000  0002ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  0002ce20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001525e  00000000  00000000  0002d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006865  00000000  00000000  00042646  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c0c3  00000000  00000000  00048eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd8  00000000  00000000  000b4fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029dc 	.word	0x080029dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029dc 	.word	0x080029dc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fb86 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a8 	.word	0x200000a8

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a8 	.word	0x200000a8

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000468:	b480      	push	{r7}
 800046a:	b08b      	sub	sp, #44	; 0x2c
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
 800048a:	e127      	b.n	80006dc <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800048c:	2201      	movs	r2, #1
 800048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	69fa      	ldr	r2, [r7, #28]
 800049c:	4013      	ands	r3, r2
 800049e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004a0:	69ba      	ldr	r2, [r7, #24]
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	f040 8116 	bne.w	80006d6 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2b12      	cmp	r3, #18
 80004b0:	d034      	beq.n	800051c <HAL_GPIO_Init+0xb4>
 80004b2:	2b12      	cmp	r3, #18
 80004b4:	d80d      	bhi.n	80004d2 <HAL_GPIO_Init+0x6a>
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d02b      	beq.n	8000512 <HAL_GPIO_Init+0xaa>
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d804      	bhi.n	80004c8 <HAL_GPIO_Init+0x60>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d031      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d01c      	beq.n	8000500 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004c6:	e048      	b.n	800055a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d043      	beq.n	8000554 <HAL_GPIO_Init+0xec>
 80004cc:	2b11      	cmp	r3, #17
 80004ce:	d01b      	beq.n	8000508 <HAL_GPIO_Init+0xa0>
          break;
 80004d0:	e043      	b.n	800055a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004d2:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x288>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d026      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004d8:	4a85      	ldr	r2, [pc, #532]	; (80006f0 <HAL_GPIO_Init+0x288>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d806      	bhi.n	80004ec <HAL_GPIO_Init+0x84>
 80004de:	4a85      	ldr	r2, [pc, #532]	; (80006f4 <HAL_GPIO_Init+0x28c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d020      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004e4:	4a84      	ldr	r2, [pc, #528]	; (80006f8 <HAL_GPIO_Init+0x290>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d01d      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
          break;
 80004ea:	e036      	b.n	800055a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004ec:	4a83      	ldr	r2, [pc, #524]	; (80006fc <HAL_GPIO_Init+0x294>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d019      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004f2:	4a83      	ldr	r2, [pc, #524]	; (8000700 <HAL_GPIO_Init+0x298>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d016      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004f8:	4a82      	ldr	r2, [pc, #520]	; (8000704 <HAL_GPIO_Init+0x29c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d013      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
          break;
 80004fe:	e02c      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	623b      	str	r3, [r7, #32]
          break;
 8000506:	e028      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	3304      	adds	r3, #4
 800050e:	623b      	str	r3, [r7, #32]
          break;
 8000510:	e023      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	3308      	adds	r3, #8
 8000518:	623b      	str	r3, [r7, #32]
          break;
 800051a:	e01e      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	330c      	adds	r3, #12
 8000522:	623b      	str	r3, [r7, #32]
          break;
 8000524:	e019      	b.n	800055a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800052e:	2304      	movs	r3, #4
 8000530:	623b      	str	r3, [r7, #32]
          break;
 8000532:	e012      	b.n	800055a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800053c:	2308      	movs	r3, #8
 800053e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	611a      	str	r2, [r3, #16]
          break;
 8000546:	e008      	b.n	800055a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000548:	2308      	movs	r3, #8
 800054a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	69fa      	ldr	r2, [r7, #28]
 8000550:	615a      	str	r2, [r3, #20]
          break;
 8000552:	e002      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
          break;
 8000558:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2bff      	cmp	r3, #255	; 0xff
 800055e:	d801      	bhi.n	8000564 <HAL_GPIO_Init+0xfc>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	e001      	b.n	8000568 <HAL_GPIO_Init+0x100>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3304      	adds	r3, #4
 8000568:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	2bff      	cmp	r3, #255	; 0xff
 800056e:	d802      	bhi.n	8000576 <HAL_GPIO_Init+0x10e>
 8000570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	e002      	b.n	800057c <HAL_GPIO_Init+0x114>
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	3b08      	subs	r3, #8
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	210f      	movs	r1, #15
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	401a      	ands	r2, r3
 800058e:	6a39      	ldr	r1, [r7, #32]
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f000 8096 	beq.w	80006d6 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005aa:	4b57      	ldr	r3, [pc, #348]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a56      	ldr	r2, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b54      	ldr	r3, [pc, #336]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80005c2:	4a52      	ldr	r2, [pc, #328]	; (800070c <HAL_GPIO_Init+0x2a4>)
 80005c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	3302      	adds	r3, #2
 80005ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ce:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	f003 0303 	and.w	r3, r3, #3
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	220f      	movs	r2, #15
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	4013      	ands	r3, r2
 80005e4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <HAL_GPIO_Init+0x2a8>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d013      	beq.n	8000616 <HAL_GPIO_Init+0x1ae>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a48      	ldr	r2, [pc, #288]	; (8000714 <HAL_GPIO_Init+0x2ac>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00d      	beq.n	8000612 <HAL_GPIO_Init+0x1aa>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a47      	ldr	r2, [pc, #284]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d007      	beq.n	800060e <HAL_GPIO_Init+0x1a6>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a46      	ldr	r2, [pc, #280]	; (800071c <HAL_GPIO_Init+0x2b4>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d101      	bne.n	800060a <HAL_GPIO_Init+0x1a2>
 8000606:	2303      	movs	r3, #3
 8000608:	e006      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 800060a:	2304      	movs	r3, #4
 800060c:	e004      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 800060e:	2302      	movs	r3, #2
 8000610:	e002      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 8000616:	2300      	movs	r3, #0
 8000618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061a:	f002 0203 	and.w	r2, r2, #3
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	4093      	lsls	r3, r2
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	4313      	orrs	r3, r2
 8000626:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000628:	4938      	ldr	r1, [pc, #224]	; (800070c <HAL_GPIO_Init+0x2a4>)
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	3302      	adds	r3, #2
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4936      	ldr	r1, [pc, #216]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	4313      	orrs	r3, r2
 800064c:	600b      	str	r3, [r1, #0]
 800064e:	e006      	b.n	800065e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	43db      	mvns	r3, r3
 8000658:	4931      	ldr	r1, [pc, #196]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4313      	orrs	r3, r2
 8000674:	604b      	str	r3, [r1, #4]
 8000676:	e006      	b.n	8000686 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	43db      	mvns	r3, r3
 8000680:	4927      	ldr	r1, [pc, #156]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000682:	4013      	ands	r3, r2
 8000684:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000694:	689a      	ldr	r2, [r3, #8]
 8000696:	4922      	ldr	r1, [pc, #136]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	4313      	orrs	r3, r2
 800069c:	608b      	str	r3, [r1, #8]
 800069e:	e006      	b.n	80006ae <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	491d      	ldr	r1, [pc, #116]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	4918      	ldr	r1, [pc, #96]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	60cb      	str	r3, [r1, #12]
 80006c6:	e006      	b.n	80006d6 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4913      	ldr	r1, [pc, #76]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	3301      	adds	r3, #1
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	f67f aed4 	bls.w	800048c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e001      	b.n	8000746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800076e:	e003      	b.n	8000778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	041a      	lsls	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f806 	bl	80007b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010400 	.word	0x40010400

080007b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f000 8087 	beq.w	80008f0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007e2:	4b92      	ldr	r3, [pc, #584]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f003 030c 	and.w	r3, r3, #12
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d00c      	beq.n	8000808 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007ee:	4b8f      	ldr	r3, [pc, #572]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f003 030c 	and.w	r3, r3, #12
 80007f6:	2b08      	cmp	r3, #8
 80007f8:	d112      	bne.n	8000820 <HAL_RCC_OscConfig+0x58>
 80007fa:	4b8c      	ldr	r3, [pc, #560]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000806:	d10b      	bne.n	8000820 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000808:	4b88      	ldr	r3, [pc, #544]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d06c      	beq.n	80008ee <HAL_RCC_OscConfig+0x126>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d168      	bne.n	80008ee <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e22d      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000828:	d106      	bne.n	8000838 <HAL_RCC_OscConfig+0x70>
 800082a:	4b80      	ldr	r3, [pc, #512]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a7f      	ldr	r2, [pc, #508]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	e02e      	b.n	8000896 <HAL_RCC_OscConfig+0xce>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10c      	bne.n	800085a <HAL_RCC_OscConfig+0x92>
 8000840:	4b7a      	ldr	r3, [pc, #488]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a79      	ldr	r2, [pc, #484]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b77      	ldr	r3, [pc, #476]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a76      	ldr	r2, [pc, #472]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	e01d      	b.n	8000896 <HAL_RCC_OscConfig+0xce>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000862:	d10c      	bne.n	800087e <HAL_RCC_OscConfig+0xb6>
 8000864:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a70      	ldr	r2, [pc, #448]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800086a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b6e      	ldr	r3, [pc, #440]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a6d      	ldr	r2, [pc, #436]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e00b      	b.n	8000896 <HAL_RCC_OscConfig+0xce>
 800087e:	4b6b      	ldr	r3, [pc, #428]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a6a      	ldr	r2, [pc, #424]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	4b68      	ldr	r3, [pc, #416]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a67      	ldr	r2, [pc, #412]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000894:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d013      	beq.n	80008c6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089e:	f7ff fcad 	bl	80001fc <HAL_GetTick>
 80008a2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a4:	e008      	b.n	80008b8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a6:	f7ff fca9 	bl	80001fc <HAL_GetTick>
 80008aa:	4602      	mov	r2, r0
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	2b64      	cmp	r3, #100	; 0x64
 80008b2:	d901      	bls.n	80008b8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80008b4:	2303      	movs	r3, #3
 80008b6:	e1e1      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b8:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0f0      	beq.n	80008a6 <HAL_RCC_OscConfig+0xde>
 80008c4:	e014      	b.n	80008f0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c6:	f7ff fc99 	bl	80001fc <HAL_GetTick>
 80008ca:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008cc:	e008      	b.n	80008e0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ce:	f7ff fc95 	bl	80001fc <HAL_GetTick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	2b64      	cmp	r3, #100	; 0x64
 80008da:	d901      	bls.n	80008e0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80008dc:	2303      	movs	r3, #3
 80008de:	e1cd      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e0:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f0      	bne.n	80008ce <HAL_RCC_OscConfig+0x106>
 80008ec:	e000      	b.n	80008f0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 0302 	and.w	r3, r3, #2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d063      	beq.n	80009c4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008fc:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 030c 	and.w	r3, r3, #12
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00b      	beq.n	8000920 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000908:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 030c 	and.w	r3, r3, #12
 8000910:	2b08      	cmp	r3, #8
 8000912:	d11c      	bne.n	800094e <HAL_RCC_OscConfig+0x186>
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d116      	bne.n	800094e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000920:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	2b00      	cmp	r3, #0
 800092a:	d005      	beq.n	8000938 <HAL_RCC_OscConfig+0x170>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d001      	beq.n	8000938 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e1a1      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	4939      	ldr	r1, [pc, #228]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000948:	4313      	orrs	r3, r2
 800094a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094c:	e03a      	b.n	80009c4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d020      	beq.n	8000998 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_RCC_OscConfig+0x268>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800095c:	f7ff fc4e 	bl	80001fc <HAL_GetTick>
 8000960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000962:	e008      	b.n	8000976 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000964:	f7ff fc4a 	bl	80001fc <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	2b02      	cmp	r3, #2
 8000970:	d901      	bls.n	8000976 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000972:	2303      	movs	r3, #3
 8000974:	e182      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f0      	beq.n	8000964 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	4926      	ldr	r1, [pc, #152]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 8000992:	4313      	orrs	r3, r2
 8000994:	600b      	str	r3, [r1, #0]
 8000996:	e015      	b.n	80009c4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <HAL_RCC_OscConfig+0x268>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800099e:	f7ff fc2d 	bl	80001fc <HAL_GetTick>
 80009a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a4:	e008      	b.n	80009b8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a6:	f7ff fc29 	bl	80001fc <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d901      	bls.n	80009b8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80009b4:	2303      	movs	r3, #3
 80009b6:	e161      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f0      	bne.n	80009a6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d039      	beq.n	8000a44 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d019      	beq.n	8000a0c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e4:	e008      	b.n	80009f8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e6:	f7ff fc09 	bl	80001fc <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d901      	bls.n	80009f8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80009f4:	2303      	movs	r3, #3
 80009f6:	e141      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_RCC_OscConfig+0x264>)
 80009fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f0      	beq.n	80009e6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f000 fae3 	bl	8000fd0 <RCC_Delay>
 8000a0a:	e01b      	b.n	8000a44 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_RCC_OscConfig+0x26c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a12:	f7ff fbf3 	bl	80001fc <HAL_GetTick>
 8000a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a18:	e00e      	b.n	8000a38 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a1a:	f7ff fbef 	bl	80001fc <HAL_GetTick>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d907      	bls.n	8000a38 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e127      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	42420000 	.word	0x42420000
 8000a34:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a38:	4b92      	ldr	r3, [pc, #584]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1ea      	bne.n	8000a1a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80a6 	beq.w	8000b9e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a56:	4b8b      	ldr	r3, [pc, #556]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10d      	bne.n	8000a7e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b88      	ldr	r3, [pc, #544]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a87      	ldr	r2, [pc, #540]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b85      	ldr	r3, [pc, #532]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7e:	4b82      	ldr	r3, [pc, #520]	; (8000c88 <HAL_RCC_OscConfig+0x4c0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d118      	bne.n	8000abc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a8a:	4b7f      	ldr	r3, [pc, #508]	; (8000c88 <HAL_RCC_OscConfig+0x4c0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a7e      	ldr	r2, [pc, #504]	; (8000c88 <HAL_RCC_OscConfig+0x4c0>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a96:	f7ff fbb1 	bl	80001fc <HAL_GetTick>
 8000a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9c:	e008      	b.n	8000ab0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a9e:	f7ff fbad 	bl	80001fc <HAL_GetTick>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	2b64      	cmp	r3, #100	; 0x64
 8000aaa:	d901      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000aac:	2303      	movs	r3, #3
 8000aae:	e0e5      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab0:	4b75      	ldr	r3, [pc, #468]	; (8000c88 <HAL_RCC_OscConfig+0x4c0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f0      	beq.n	8000a9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d106      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x30a>
 8000ac4:	4b6f      	ldr	r3, [pc, #444]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	4a6e      	ldr	r2, [pc, #440]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6213      	str	r3, [r2, #32]
 8000ad0:	e02d      	b.n	8000b2e <HAL_RCC_OscConfig+0x366>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10c      	bne.n	8000af4 <HAL_RCC_OscConfig+0x32c>
 8000ada:	4b6a      	ldr	r3, [pc, #424]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a69      	ldr	r2, [pc, #420]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6213      	str	r3, [r2, #32]
 8000ae6:	4b67      	ldr	r3, [pc, #412]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a66      	ldr	r2, [pc, #408]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000aec:	f023 0304 	bic.w	r3, r3, #4
 8000af0:	6213      	str	r3, [r2, #32]
 8000af2:	e01c      	b.n	8000b2e <HAL_RCC_OscConfig+0x366>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d10c      	bne.n	8000b16 <HAL_RCC_OscConfig+0x34e>
 8000afc:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a60      	ldr	r2, [pc, #384]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6213      	str	r3, [r2, #32]
 8000b08:	4b5e      	ldr	r3, [pc, #376]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4a5d      	ldr	r2, [pc, #372]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6213      	str	r3, [r2, #32]
 8000b14:	e00b      	b.n	8000b2e <HAL_RCC_OscConfig+0x366>
 8000b16:	4b5b      	ldr	r3, [pc, #364]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	4a5a      	ldr	r2, [pc, #360]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b1c:	f023 0301 	bic.w	r3, r3, #1
 8000b20:	6213      	str	r3, [r2, #32]
 8000b22:	4b58      	ldr	r3, [pc, #352]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	4a57      	ldr	r2, [pc, #348]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b28:	f023 0304 	bic.w	r3, r3, #4
 8000b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d015      	beq.n	8000b62 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b36:	f7ff fb61 	bl	80001fc <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	e00a      	b.n	8000b54 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fb5d 	bl	80001fc <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d901      	bls.n	8000b54 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000b50:	2303      	movs	r3, #3
 8000b52:	e093      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b54:	4b4b      	ldr	r3, [pc, #300]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b56:	6a1b      	ldr	r3, [r3, #32]
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0ee      	beq.n	8000b3e <HAL_RCC_OscConfig+0x376>
 8000b60:	e014      	b.n	8000b8c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b62:	f7ff fb4b 	bl	80001fc <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b68:	e00a      	b.n	8000b80 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6a:	f7ff fb47 	bl	80001fc <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d901      	bls.n	8000b80 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e07d      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ee      	bne.n	8000b6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d105      	bne.n	8000b9e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a3b      	ldr	r2, [pc, #236]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d069      	beq.n	8000c7a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b08      	cmp	r3, #8
 8000bb0:	d061      	beq.n	8000c76 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d146      	bne.n	8000c48 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <HAL_RCC_OscConfig+0x4c4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fb1c 	bl	80001fc <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc8:	f7ff fb18 	bl	80001fc <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e050      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bee:	d108      	bne.n	8000c02 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	4921      	ldr	r1, [pc, #132]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a19      	ldr	r1, [r3, #32]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	430b      	orrs	r3, r1
 8000c14:	491b      	ldr	r1, [pc, #108]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_RCC_OscConfig+0x4c4>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff faec 	bl	80001fc <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fae8 	bl	80001fc <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e020      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f0      	beq.n	8000c28 <HAL_RCC_OscConfig+0x460>
 8000c46:	e018      	b.n	8000c7a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_RCC_OscConfig+0x4c4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fad5 	bl	80001fc <HAL_GetTick>
 8000c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c54:	e008      	b.n	8000c68 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c56:	f7ff fad1 	bl	80001fc <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d901      	bls.n	8000c68 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000c64:	2303      	movs	r3, #3
 8000c66:	e009      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_RCC_OscConfig+0x4bc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1f0      	bne.n	8000c56 <HAL_RCC_OscConfig+0x48e>
 8000c74:	e001      	b.n	8000c7a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	42420060 	.word	0x42420060

08000c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c9e:	4b7e      	ldr	r3, [pc, #504]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d910      	bls.n	8000cce <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cac:	4b7a      	ldr	r3, [pc, #488]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 0207 	bic.w	r2, r3, #7
 8000cb4:	4978      	ldr	r1, [pc, #480]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cbc:	4b76      	ldr	r3, [pc, #472]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0e0      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d020      	beq.n	8000d1c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce6:	4b6d      	ldr	r3, [pc, #436]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4a6c      	ldr	r2, [pc, #432]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000cec:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cf0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cfe:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a66      	ldr	r2, [pc, #408]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d04:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d08:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	4961      	ldr	r1, [pc, #388]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d06a      	beq.n	8000dfe <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d107      	bne.n	8000d40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d30:	4b5a      	ldr	r3, [pc, #360]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d115      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e0a7      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d107      	bne.n	8000d58 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d48:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e09b      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	4b50      	ldr	r3, [pc, #320]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e093      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d68:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f023 0203 	bic.w	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4949      	ldr	r1, [pc, #292]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fa3f 	bl	80001fc <HAL_GetTick>
 8000d7e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d88:	e00a      	b.n	8000da0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d8a:	f7ff fa37 	bl	80001fc <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e077      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da0:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d1ee      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xfa>
 8000dac:	e027      	b.n	8000dfe <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d11d      	bne.n	8000df2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db6:	e00a      	b.n	8000dce <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db8:	f7ff fa20 	bl	80001fc <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e060      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dce:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d1ee      	bne.n	8000db8 <HAL_RCC_ClockConfig+0x128>
 8000dda:	e010      	b.n	8000dfe <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ddc:	f7ff fa0e 	bl	80001fc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e04e      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1ee      	bne.n	8000ddc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfe:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d210      	bcs.n	8000e2e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 0207 	bic.w	r2, r3, #7
 8000e14:	4920      	ldr	r1, [pc, #128]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_RCC_ClockConfig+0x208>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e030      	b.n	8000e90 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d008      	beq.n	8000e4c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4915      	ldr	r1, [pc, #84]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e6c:	f000 f81c 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8000e70:	4601      	mov	r1, r0
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_RCC_ClockConfig+0x20c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 030f 	and.w	r3, r3, #15
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_RCC_ClockConfig+0x210>)
 8000e7e:	5cd3      	ldrb	r3, [r2, r3]
 8000e80:	fa21 f303 	lsr.w	r3, r1, r3
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_RCC_ClockConfig+0x214>)
 8000e86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff f975 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	08002a14 	.word	0x08002a14
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ea8:	b490      	push	{r4, r7}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000eb0:	1d3c      	adds	r4, r7, #4
 8000eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d002      	beq.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d003      	beq.n	8000eee <HAL_RCC_GetSysClockFreq+0x46>
 8000ee6:	e02d      	b.n	8000f44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eea:	623b      	str	r3, [r7, #32]
      break;
 8000eec:	e02d      	b.n	8000f4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	0c9b      	lsrs	r3, r3, #18
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000efa:	4413      	add	r3, r2
 8000efc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	0c5b      	lsrs	r3, r3, #17
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f20:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f26:	fb02 f203 	mul.w	r2, r2, r3
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	e004      	b.n	8000f3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	623b      	str	r3, [r7, #32]
      break;
 8000f42:	e002      	b.n	8000f4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f46:	623b      	str	r3, [r7, #32]
      break;
 8000f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc90      	pop	{r4, r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	080029f4 	.word	0x080029f4
 8000f5c:	08002a04 	.word	0x08002a04
 8000f60:	40021000 	.word	0x40021000
 8000f64:	007a1200 	.word	0x007a1200
 8000f68:	003d0900 	.word	0x003d0900

08000f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f84:	f7ff fff2 	bl	8000f6c <HAL_RCC_GetHCLKFreq>
 8000f88:	4601      	mov	r1, r0
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f96:	5cd3      	ldrb	r3, [r2, r3]
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	08002a24 	.word	0x08002a24

08000fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_RCC_GetHCLKFreq>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	0adb      	lsrs	r3, r3, #11
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	08002a24 	.word	0x08002a24

08000fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <RCC_Delay+0x34>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <RCC_Delay+0x38>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0a5b      	lsrs	r3, r3, #9
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000fec:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	60fa      	str	r2, [r7, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f9      	bne.n	8000fec <RCC_Delay+0x1c>
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	10624dd3 	.word	0x10624dd3

0800100c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e03f      	b.n	800109e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fc52 	bl	80018dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800104e:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f9b1 	bl	80013b8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691a      	ldr	r2, [r3, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001074:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001084:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2220      	movs	r2, #32
 8001090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2220      	movs	r2, #32
 8001098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b088      	sub	sp, #32
 80010aa:	af02      	add	r7, sp, #8
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4613      	mov	r3, r2
 80010b4:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b20      	cmp	r3, #32
 80010c4:	f040 8083 	bne.w	80011ce <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <HAL_UART_Transmit+0x2e>
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e07b      	b.n	80011d0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_UART_Transmit+0x40>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e074      	b.n	80011d0 <HAL_UART_Transmit+0x12a>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2221      	movs	r2, #33	; 0x21
 80010f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80010fc:	f7ff f87e 	bl	80001fc <HAL_GetTick>
 8001100:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	88fa      	ldrh	r2, [r7, #6]
 8001106:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	88fa      	ldrh	r2, [r7, #6]
 800110c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800110e:	e042      	b.n	8001196 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001114:	b29b      	uxth	r3, r3
 8001116:	3b01      	subs	r3, #1
 8001118:	b29a      	uxth	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001126:	d122      	bne.n	800116e <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f8f6 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e046      	b.n	80011d0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001154:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d103      	bne.n	8001166 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3302      	adds	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e017      	b.n	8001196 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	e013      	b.n	8001196 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f8d3 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e023      	b.n	80011d0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1b7      	bne.n	8001110 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f8ba 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e00a      	b.n	80011d0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2220      	movs	r2, #32
 80011be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80011ce:	2302      	movs	r3, #2
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af02      	add	r7, sp, #8
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	f040 8090 	bne.w	800131a <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <HAL_UART_Receive+0x2e>
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e088      	b.n	800131c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_UART_Receive+0x40>
 8001214:	2302      	movs	r3, #2
 8001216:	e081      	b.n	800131c <HAL_UART_Receive+0x144>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2222      	movs	r2, #34	; 0x22
 800122a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800122e:	f7fe ffe5 	bl	80001fc <HAL_GetTick>
 8001232:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	88fa      	ldrh	r2, [r7, #6]
 800123e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8001240:	e05c      	b.n	80012fc <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001258:	d12b      	bne.n	80012b2 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2200      	movs	r2, #0
 8001262:	2120      	movs	r1, #32
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 f85d 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e053      	b.n	800131c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	b29b      	uxth	r3, r3
 8001288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800128c:	b29a      	uxth	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3302      	adds	r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	e030      	b.n	80012fc <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	e024      	b.n	80012fc <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f831 	bl	8001324 <UART_WaitOnFlagUntilTimeout>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e027      	b.n	800131c <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d108      	bne.n	80012e6 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	b2ca      	uxtb	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e00a      	b.n	80012fc <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1c59      	adds	r1, r3, #1
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001300:	b29b      	uxth	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d19d      	bne.n	8001242 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2220      	movs	r2, #32
 800130a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800131a:	2302      	movs	r3, #2
  }
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	4613      	mov	r3, r2
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001334:	e02c      	b.n	8001390 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800133c:	d028      	beq.n	8001390 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <UART_WaitOnFlagUntilTimeout+0x30>
 8001344:	f7fe ff5a 	bl	80001fc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	429a      	cmp	r2, r3
 8001352:	d21d      	bcs.n	8001390 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001362:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2220      	movs	r2, #32
 8001378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2220      	movs	r2, #32
 8001380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e00f      	b.n	80013b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4013      	ands	r3, r2
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	429a      	cmp	r2, r3
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d0c3      	beq.n	8001336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013b8:	b5b0      	push	{r4, r5, r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80013fa:	f023 030c 	bic.w	r3, r3, #12
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	430b      	orrs	r3, r1
 8001406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6f      	ldr	r2, [pc, #444]	; (80015e0 <UART_SetConfig+0x228>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d16b      	bne.n	8001500 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001428:	f7ff fdbe 	bl	8000fa8 <HAL_RCC_GetPCLK2Freq>
 800142c:	4602      	mov	r2, r0
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	441a      	add	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4a68      	ldr	r2, [pc, #416]	; (80015e4 <UART_SetConfig+0x22c>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	011c      	lsls	r4, r3, #4
 800144c:	f7ff fdac 	bl	8000fa8 <HAL_RCC_GetPCLK2Freq>
 8001450:	4602      	mov	r2, r0
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009a      	lsls	r2, r3, #2
 800145a:	441a      	add	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	fbb2 f5f3 	udiv	r5, r2, r3
 8001466:	f7ff fd9f 	bl	8000fa8 <HAL_RCC_GetPCLK2Freq>
 800146a:	4602      	mov	r2, r0
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	009a      	lsls	r2, r3, #2
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <UART_SetConfig+0x22c>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2264      	movs	r2, #100	; 0x64
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	1aeb      	subs	r3, r5, r3
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	3332      	adds	r3, #50	; 0x32
 8001494:	4a53      	ldr	r2, [pc, #332]	; (80015e4 <UART_SetConfig+0x22c>)
 8001496:	fba2 2303 	umull	r2, r3, r2, r3
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a0:	441c      	add	r4, r3
 80014a2:	f7ff fd81 	bl	8000fa8 <HAL_RCC_GetPCLK2Freq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	009a      	lsls	r2, r3, #2
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80014bc:	f7ff fd74 	bl	8000fa8 <HAL_RCC_GetPCLK2Freq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	009a      	lsls	r2, r3, #2
 80014ca:	441a      	add	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <UART_SetConfig+0x22c>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	2264      	movs	r2, #100	; 0x64
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	1aeb      	subs	r3, r5, r3
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	3332      	adds	r3, #50	; 0x32
 80014ea:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <UART_SetConfig+0x22c>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	f003 020f 	and.w	r2, r3, #15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4422      	add	r2, r4
 80014fc:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80014fe:	e06a      	b.n	80015d6 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001500:	f7ff fd3e 	bl	8000f80 <HAL_RCC_GetPCLK1Freq>
 8001504:	4602      	mov	r2, r0
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	441a      	add	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <UART_SetConfig+0x22c>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	011c      	lsls	r4, r3, #4
 8001524:	f7ff fd2c 	bl	8000f80 <HAL_RCC_GetPCLK1Freq>
 8001528:	4602      	mov	r2, r0
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	009a      	lsls	r2, r3, #2
 8001532:	441a      	add	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	fbb2 f5f3 	udiv	r5, r2, r3
 800153e:	f7ff fd1f 	bl	8000f80 <HAL_RCC_GetPCLK1Freq>
 8001542:	4602      	mov	r2, r0
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	009a      	lsls	r2, r3, #2
 800154c:	441a      	add	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <UART_SetConfig+0x22c>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2264      	movs	r2, #100	; 0x64
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	1aeb      	subs	r3, r5, r3
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	3332      	adds	r3, #50	; 0x32
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <UART_SetConfig+0x22c>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001578:	441c      	add	r4, r3
 800157a:	f7ff fd01 	bl	8000f80 <HAL_RCC_GetPCLK1Freq>
 800157e:	4602      	mov	r2, r0
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009a      	lsls	r2, r3, #2
 8001588:	441a      	add	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	fbb2 f5f3 	udiv	r5, r2, r3
 8001594:	f7ff fcf4 	bl	8000f80 <HAL_RCC_GetPCLK1Freq>
 8001598:	4602      	mov	r2, r0
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	009a      	lsls	r2, r3, #2
 80015a2:	441a      	add	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <UART_SetConfig+0x22c>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	2264      	movs	r2, #100	; 0x64
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	1aeb      	subs	r3, r5, r3
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	3332      	adds	r3, #50	; 0x32
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <UART_SetConfig+0x22c>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	095b      	lsrs	r3, r3, #5
 80015ca:	f003 020f 	and.w	r2, r3, #15
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4422      	add	r2, r4
 80015d4:	609a      	str	r2, [r3, #8]
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}
 80015de:	bf00      	nop
 80015e0:	40013800 	.word	0x40013800
 80015e4:	51eb851f 	.word	0x51eb851f

080015e8 <__io_putchar>:

#endif


PUTCHAR_PROTOTYPE
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch,1,0xFFFF);
 80015f0:	1d39      	adds	r1, r7, #4
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	2201      	movs	r2, #1
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <__io_putchar+0x20>)
 80015fa:	f7ff fd54 	bl	80010a6 <HAL_UART_Transmit>

	return ch;
 80015fe:	687b      	ldr	r3, [r7, #4]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200000ac 	.word	0x200000ac

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001610:	f7fe fd9c 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f850 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f000 f8ba 	bl	8001790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800161c:	f000 f88e 	bl	800173c <MX_USART2_UART_Init>
      //GPIOA->ODR =  0x00000020;  /* turn on LED */

      //GPIOA->ODR &= ~0x00000020;  /* turn off LED */


      value = value+1;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <main+0x90>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <main+0x90>)
 8001628:	6013      	str	r3, [r2, #0]
      value2 = value2+10;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <main+0x94>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	330a      	adds	r3, #10
 8001630:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <main+0x94>)
 8001632:	6013      	str	r3, [r2, #0]
     printf("%i, %i \n\r", rxdata[0], value2);
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <main+0x98>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <main+0x94>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <main+0x9c>)
 8001642:	f000 fadd 	bl	8001c00 <iprintf>

      HAL_UART_Receive(&huart2,rxdata,10,100);
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	220a      	movs	r2, #10
 800164a:	4916      	ldr	r1, [pc, #88]	; (80016a4 <main+0x98>)
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <main+0xa0>)
 800164e:	f7ff fdc3 	bl	80011d8 <HAL_UART_Receive>

      if (rxdata[0] == 49){
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <main+0x98>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b31      	cmp	r3, #49	; 0x31
 8001658:	d1e2      	bne.n	8001620 <main+0x14>
    	  HAL_Delay(100);
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f7fe fdd8 	bl	8000210 <HAL_Delay>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	2120      	movs	r1, #32
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <main+0xa4>)
 8001666:	f7ff f874 	bl	8000752 <HAL_GPIO_WritePin>
          LED_STATE = HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 800166a:	2120      	movs	r1, #32
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <main+0xa4>)
 800166e:	f7ff f859 	bl	8000724 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <main+0xa8>)
 8001678:	601a      	str	r2, [r3, #0]
          HAL_Delay(100);
 800167a:	2064      	movs	r0, #100	; 0x64
 800167c:	f7fe fdc8 	bl	8000210 <HAL_Delay>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2120      	movs	r1, #32
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <main+0xa4>)
 8001686:	f7ff f864 	bl	8000752 <HAL_GPIO_WritePin>
          LED_STATE = HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 800168a:	2120      	movs	r1, #32
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <main+0xa4>)
 800168e:	f7ff f849 	bl	8000724 <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <main+0xa8>)
 8001698:	601a      	str	r2, [r3, #0]
      value = value+1;
 800169a:	e7c1      	b.n	8001620 <main+0x14>
 800169c:	20000094 	.word	0x20000094
 80016a0:	20000098 	.word	0x20000098
 80016a4:	20000090 	.word	0x20000090
 80016a8:	08002a08 	.word	0x08002a08
 80016ac:	200000ac 	.word	0x200000ac
 80016b0:	40010800 	.word	0x40010800
 80016b4:	2000008c 	.word	0x2000008c

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	2228      	movs	r2, #40	; 0x28
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fa92 	bl	8001bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016de:	2301      	movs	r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e2:	2310      	movs	r3, #16
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f865 	bl	80007c8 <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001704:	f000 f8b2 	bl	800186c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2102      	movs	r1, #2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fab4 	bl	8000c90 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800172e:	f000 f89d 	bl	800186c <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3740      	adds	r7, #64	; 0x40
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <MX_USART2_UART_Init+0x50>)
 8001744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_USART2_UART_Init+0x4c>)
 8001774:	f7ff fc4a 	bl	800100c <HAL_UART_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800177e:	f000 f875 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000ac 	.word	0x200000ac
 800178c:	40004400 	.word	0x40004400

08001790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_GPIO_Init+0xcc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a2c      	ldr	r2, [pc, #176]	; (800185c <MX_GPIO_Init+0xcc>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MX_GPIO_Init+0xcc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <MX_GPIO_Init+0xcc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <MX_GPIO_Init+0xcc>)
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <MX_GPIO_Init+0xcc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0320 	and.w	r3, r3, #32
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <MX_GPIO_Init+0xcc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a20      	ldr	r2, [pc, #128]	; (800185c <MX_GPIO_Init+0xcc>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_GPIO_Init+0xcc>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_GPIO_Init+0xcc>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <MX_GPIO_Init+0xcc>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_GPIO_Init+0xcc>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2120      	movs	r1, #32
 8001808:	4815      	ldr	r0, [pc, #84]	; (8001860 <MX_GPIO_Init+0xd0>)
 800180a:	f7fe ffa2 	bl	8000752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800180e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_GPIO_Init+0xd4>)
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4619      	mov	r1, r3
 8001822:	4811      	ldr	r0, [pc, #68]	; (8001868 <MX_GPIO_Init+0xd8>)
 8001824:	f7fe fe20 	bl	8000468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001828:	2320      	movs	r3, #32
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <MX_GPIO_Init+0xd0>)
 8001840:	f7fe fe12 	bl	8000468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	2028      	movs	r0, #40	; 0x28
 800184a:	f7fe fdd6 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800184e:	2028      	movs	r0, #40	; 0x28
 8001850:	f7fe fdef 	bl	8000432 <HAL_NVIC_EnableIRQ>

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	40010800 	.word	0x40010800
 8001864:	10110000 	.word	0x10110000
 8001868:	40011000 	.word	0x40011000

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_MspInit+0x5c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_MspInit+0x5c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_MspInit+0x5c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x5c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_MspInit+0x5c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_MspInit+0x5c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_MspInit+0x60>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_MspInit+0x60>)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010000 	.word	0x40010000

080018dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_UART_MspInit+0x70>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d123      	bne.n	8001944 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x74>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_UART_MspInit+0x74>)
 8001902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001906:	61d3      	str	r3, [r2, #28]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_MspInit+0x74>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_UART_MspInit+0x74>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_UART_MspInit+0x74>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_UART_MspInit+0x74>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800192c:	230c      	movs	r3, #12
 800192e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2302      	movs	r3, #2
 8001936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_UART_MspInit+0x78>)
 8001940:	f7fe fd92 	bl	8000468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40004400 	.word	0x40004400
 8001950:	40021000 	.word	0x40021000
 8001954:	40010800 	.word	0x40010800

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <HardFault_Handler+0x4>

0800196a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <BusFault_Handler+0x4>

08001976 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <UsageFault_Handler+0x4>

0800197c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f7fe fc18 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019b4:	f7fe fee6 	bl	8000784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
	}

return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fde9 	bl	80015e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf1      	blt.n	8001a08 <_write+0x12>
	}
	return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a54:	605a      	str	r2, [r3, #4]
	return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <_isatty>:

int _isatty(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	return 1;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
	return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <_sbrk+0x50>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <_sbrk+0x16>
		heap_end = &end;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <_sbrk+0x50>)
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <_sbrk+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <_sbrk+0x50>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <_sbrk+0x50>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	466a      	mov	r2, sp
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d907      	bls.n	8001aca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001aba:	f000 f86f 	bl	8001b9c <__errno>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac8:	e006      	b.n	8001ad8 <_sbrk+0x48>
	}

	heap_end += incr;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <_sbrk+0x50>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <_sbrk+0x50>)
 8001ad4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000009c 	.word	0x2000009c
 8001ae4:	200000f0 	.word	0x200000f0

08001ae8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <SystemInit+0x5c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <SystemInit+0x5c>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <SystemInit+0x5c>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4911      	ldr	r1, [pc, #68]	; (8001b44 <SystemInit+0x5c>)
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <SystemInit+0x60>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <SystemInit+0x5c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <SystemInit+0x5c>)
 8001b0a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <SystemInit+0x5c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SystemInit+0x5c>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <SystemInit+0x5c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <SystemInit+0x5c>)
 8001b26:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b2a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SystemInit+0x5c>)
 8001b2e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b32:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SystemInit+0x64>)
 8001b36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40021000 	.word	0x40021000
 8001b48:	f8ff0000 	.word	0xf8ff0000
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b52:	e003      	b.n	8001b5c <LoopCopyDataInit>

08001b54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b5a:	3104      	adds	r1, #4

08001b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b5c:	480a      	ldr	r0, [pc, #40]	; (8001b88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b64:	d3f6      	bcc.n	8001b54 <CopyDataInit>
  ldr r2, =_sbss
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b68:	e002      	b.n	8001b70 <LoopFillZerobss>

08001b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b6c:	f842 3b04 	str.w	r3, [r2], #4

08001b70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b74:	d3f9      	bcc.n	8001b6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b76:	f7ff ffb7 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f000 f815 	bl	8001ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7e:	f7ff fd45 	bl	800160c <main>
  bx lr
 8001b82:	4770      	bx	lr
  ldr r3, =_sidata
 8001b84:	08002acc 	.word	0x08002acc
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b8c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001b90:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001b94:	200000f0 	.word	0x200000f0

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>
	...

08001b9c <__errno>:
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <__errno+0x8>)
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <__libc_init_array>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	2500      	movs	r5, #0
 8001bac:	4e0c      	ldr	r6, [pc, #48]	; (8001be0 <__libc_init_array+0x38>)
 8001bae:	4c0d      	ldr	r4, [pc, #52]	; (8001be4 <__libc_init_array+0x3c>)
 8001bb0:	1ba4      	subs	r4, r4, r6
 8001bb2:	10a4      	asrs	r4, r4, #2
 8001bb4:	42a5      	cmp	r5, r4
 8001bb6:	d109      	bne.n	8001bcc <__libc_init_array+0x24>
 8001bb8:	f000 ff10 	bl	80029dc <_init>
 8001bbc:	2500      	movs	r5, #0
 8001bbe:	4e0a      	ldr	r6, [pc, #40]	; (8001be8 <__libc_init_array+0x40>)
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	; (8001bec <__libc_init_array+0x44>)
 8001bc2:	1ba4      	subs	r4, r4, r6
 8001bc4:	10a4      	asrs	r4, r4, #2
 8001bc6:	42a5      	cmp	r5, r4
 8001bc8:	d105      	bne.n	8001bd6 <__libc_init_array+0x2e>
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
 8001bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd0:	4798      	blx	r3
 8001bd2:	3501      	adds	r5, #1
 8001bd4:	e7ee      	b.n	8001bb4 <__libc_init_array+0xc>
 8001bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bda:	4798      	blx	r3
 8001bdc:	3501      	adds	r5, #1
 8001bde:	e7f2      	b.n	8001bc6 <__libc_init_array+0x1e>
 8001be0:	08002ac4 	.word	0x08002ac4
 8001be4:	08002ac4 	.word	0x08002ac4
 8001be8:	08002ac4 	.word	0x08002ac4
 8001bec:	08002ac8 	.word	0x08002ac8

08001bf0 <memset>:
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4402      	add	r2, r0
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <memset+0xa>
 8001bf8:	4770      	bx	lr
 8001bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8001bfe:	e7f9      	b.n	8001bf4 <memset+0x4>

08001c00 <iprintf>:
 8001c00:	b40f      	push	{r0, r1, r2, r3}
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <iprintf+0x2c>)
 8001c04:	b513      	push	{r0, r1, r4, lr}
 8001c06:	681c      	ldr	r4, [r3, #0]
 8001c08:	b124      	cbz	r4, 8001c14 <iprintf+0x14>
 8001c0a:	69a3      	ldr	r3, [r4, #24]
 8001c0c:	b913      	cbnz	r3, 8001c14 <iprintf+0x14>
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f000 f84e 	bl	8001cb0 <__sinit>
 8001c14:	ab05      	add	r3, sp, #20
 8001c16:	9a04      	ldr	r2, [sp, #16]
 8001c18:	68a1      	ldr	r1, [r4, #8]
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	f000 f953 	bl	8001ec8 <_vfiprintf_r>
 8001c22:	b002      	add	sp, #8
 8001c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c28:	b004      	add	sp, #16
 8001c2a:	4770      	bx	lr
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <std>:
 8001c30:	2300      	movs	r3, #0
 8001c32:	b510      	push	{r4, lr}
 8001c34:	4604      	mov	r4, r0
 8001c36:	e9c0 3300 	strd	r3, r3, [r0]
 8001c3a:	6083      	str	r3, [r0, #8]
 8001c3c:	8181      	strh	r1, [r0, #12]
 8001c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8001c40:	81c2      	strh	r2, [r0, #14]
 8001c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c46:	6183      	str	r3, [r0, #24]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	305c      	adds	r0, #92	; 0x5c
 8001c4e:	f7ff ffcf 	bl	8001bf0 <memset>
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <std+0x38>)
 8001c54:	6224      	str	r4, [r4, #32]
 8001c56:	6263      	str	r3, [r4, #36]	; 0x24
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <std+0x3c>)
 8001c5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <std+0x40>)
 8001c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <std+0x44>)
 8001c62:	6323      	str	r3, [r4, #48]	; 0x30
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	bf00      	nop
 8001c68:	08002425 	.word	0x08002425
 8001c6c:	08002447 	.word	0x08002447
 8001c70:	0800247f 	.word	0x0800247f
 8001c74:	080024a3 	.word	0x080024a3

08001c78 <_cleanup_r>:
 8001c78:	4901      	ldr	r1, [pc, #4]	; (8001c80 <_cleanup_r+0x8>)
 8001c7a:	f000 b885 	b.w	8001d88 <_fwalk_reent>
 8001c7e:	bf00      	nop
 8001c80:	0800277d 	.word	0x0800277d

08001c84 <__sfmoreglue>:
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	2568      	movs	r5, #104	; 0x68
 8001c88:	1e4a      	subs	r2, r1, #1
 8001c8a:	4355      	muls	r5, r2
 8001c8c:	460e      	mov	r6, r1
 8001c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c92:	f000 f897 	bl	8001dc4 <_malloc_r>
 8001c96:	4604      	mov	r4, r0
 8001c98:	b140      	cbz	r0, 8001cac <__sfmoreglue+0x28>
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8001ca0:	300c      	adds	r0, #12
 8001ca2:	60a0      	str	r0, [r4, #8]
 8001ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ca8:	f7ff ffa2 	bl	8001bf0 <memset>
 8001cac:	4620      	mov	r0, r4
 8001cae:	bd70      	pop	{r4, r5, r6, pc}

08001cb0 <__sinit>:
 8001cb0:	6983      	ldr	r3, [r0, #24]
 8001cb2:	b510      	push	{r4, lr}
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	bb33      	cbnz	r3, 8001d06 <__sinit+0x56>
 8001cb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001cbc:	6503      	str	r3, [r0, #80]	; 0x50
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <__sinit+0x58>)
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <__sinit+0x5c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6282      	str	r2, [r0, #40]	; 0x28
 8001cc6:	4298      	cmp	r0, r3
 8001cc8:	bf04      	itt	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	6183      	streq	r3, [r0, #24]
 8001cce:	f000 f81f 	bl	8001d10 <__sfp>
 8001cd2:	6060      	str	r0, [r4, #4]
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f000 f81b 	bl	8001d10 <__sfp>
 8001cda:	60a0      	str	r0, [r4, #8]
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f000 f817 	bl	8001d10 <__sfp>
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60e0      	str	r0, [r4, #12]
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	6860      	ldr	r0, [r4, #4]
 8001cea:	f7ff ffa1 	bl	8001c30 <std>
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2109      	movs	r1, #9
 8001cf2:	68a0      	ldr	r0, [r4, #8]
 8001cf4:	f7ff ff9c 	bl	8001c30 <std>
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	2112      	movs	r1, #18
 8001cfc:	68e0      	ldr	r0, [r4, #12]
 8001cfe:	f7ff ff97 	bl	8001c30 <std>
 8001d02:	2301      	movs	r3, #1
 8001d04:	61a3      	str	r3, [r4, #24]
 8001d06:	bd10      	pop	{r4, pc}
 8001d08:	08002a2c 	.word	0x08002a2c
 8001d0c:	08001c79 	.word	0x08001c79

08001d10 <__sfp>:
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <__sfp+0x70>)
 8001d14:	4607      	mov	r7, r0
 8001d16:	681e      	ldr	r6, [r3, #0]
 8001d18:	69b3      	ldr	r3, [r6, #24]
 8001d1a:	b913      	cbnz	r3, 8001d22 <__sfp+0x12>
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	f7ff ffc7 	bl	8001cb0 <__sinit>
 8001d22:	3648      	adds	r6, #72	; 0x48
 8001d24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	d503      	bpl.n	8001d34 <__sfp+0x24>
 8001d2c:	6833      	ldr	r3, [r6, #0]
 8001d2e:	b133      	cbz	r3, 8001d3e <__sfp+0x2e>
 8001d30:	6836      	ldr	r6, [r6, #0]
 8001d32:	e7f7      	b.n	8001d24 <__sfp+0x14>
 8001d34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d38:	b16d      	cbz	r5, 8001d56 <__sfp+0x46>
 8001d3a:	3468      	adds	r4, #104	; 0x68
 8001d3c:	e7f4      	b.n	8001d28 <__sfp+0x18>
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4638      	mov	r0, r7
 8001d42:	f7ff ff9f 	bl	8001c84 <__sfmoreglue>
 8001d46:	6030      	str	r0, [r6, #0]
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d1f1      	bne.n	8001d30 <__sfp+0x20>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	4604      	mov	r4, r0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4620      	mov	r0, r4
 8001d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <__sfp+0x74>)
 8001d58:	6665      	str	r5, [r4, #100]	; 0x64
 8001d5a:	e9c4 5500 	strd	r5, r5, [r4]
 8001d5e:	60a5      	str	r5, [r4, #8]
 8001d60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001d64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d70:	f7ff ff3e 	bl	8001bf0 <memset>
 8001d74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d7c:	e7e9      	b.n	8001d52 <__sfp+0x42>
 8001d7e:	bf00      	nop
 8001d80:	08002a2c 	.word	0x08002a2c
 8001d84:	ffff0001 	.word	0xffff0001

08001d88 <_fwalk_reent>:
 8001d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4689      	mov	r9, r1
 8001d90:	2600      	movs	r6, #0
 8001d92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d96:	b914      	cbnz	r4, 8001d9e <_fwalk_reent+0x16>
 8001d98:	4630      	mov	r0, r6
 8001d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001da2:	3f01      	subs	r7, #1
 8001da4:	d501      	bpl.n	8001daa <_fwalk_reent+0x22>
 8001da6:	6824      	ldr	r4, [r4, #0]
 8001da8:	e7f5      	b.n	8001d96 <_fwalk_reent+0xe>
 8001daa:	89ab      	ldrh	r3, [r5, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d907      	bls.n	8001dc0 <_fwalk_reent+0x38>
 8001db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001db4:	3301      	adds	r3, #1
 8001db6:	d003      	beq.n	8001dc0 <_fwalk_reent+0x38>
 8001db8:	4629      	mov	r1, r5
 8001dba:	4640      	mov	r0, r8
 8001dbc:	47c8      	blx	r9
 8001dbe:	4306      	orrs	r6, r0
 8001dc0:	3568      	adds	r5, #104	; 0x68
 8001dc2:	e7ee      	b.n	8001da2 <_fwalk_reent+0x1a>

08001dc4 <_malloc_r>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	1ccd      	adds	r5, r1, #3
 8001dc8:	f025 0503 	bic.w	r5, r5, #3
 8001dcc:	3508      	adds	r5, #8
 8001dce:	2d0c      	cmp	r5, #12
 8001dd0:	bf38      	it	cc
 8001dd2:	250c      	movcc	r5, #12
 8001dd4:	2d00      	cmp	r5, #0
 8001dd6:	4606      	mov	r6, r0
 8001dd8:	db01      	blt.n	8001dde <_malloc_r+0x1a>
 8001dda:	42a9      	cmp	r1, r5
 8001ddc:	d903      	bls.n	8001de6 <_malloc_r+0x22>
 8001dde:	230c      	movs	r3, #12
 8001de0:	6033      	str	r3, [r6, #0]
 8001de2:	2000      	movs	r0, #0
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
 8001de6:	f000 fd77 	bl	80028d8 <__malloc_lock>
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <_malloc_r+0xac>)
 8001dec:	6814      	ldr	r4, [r2, #0]
 8001dee:	4621      	mov	r1, r4
 8001df0:	b991      	cbnz	r1, 8001e18 <_malloc_r+0x54>
 8001df2:	4c20      	ldr	r4, [pc, #128]	; (8001e74 <_malloc_r+0xb0>)
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	b91b      	cbnz	r3, 8001e00 <_malloc_r+0x3c>
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 fb03 	bl	8002404 <_sbrk_r>
 8001dfe:	6020      	str	r0, [r4, #0]
 8001e00:	4629      	mov	r1, r5
 8001e02:	4630      	mov	r0, r6
 8001e04:	f000 fafe 	bl	8002404 <_sbrk_r>
 8001e08:	1c43      	adds	r3, r0, #1
 8001e0a:	d124      	bne.n	8001e56 <_malloc_r+0x92>
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	4630      	mov	r0, r6
 8001e10:	6033      	str	r3, [r6, #0]
 8001e12:	f000 fd62 	bl	80028da <__malloc_unlock>
 8001e16:	e7e4      	b.n	8001de2 <_malloc_r+0x1e>
 8001e18:	680b      	ldr	r3, [r1, #0]
 8001e1a:	1b5b      	subs	r3, r3, r5
 8001e1c:	d418      	bmi.n	8001e50 <_malloc_r+0x8c>
 8001e1e:	2b0b      	cmp	r3, #11
 8001e20:	d90f      	bls.n	8001e42 <_malloc_r+0x7e>
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	18cc      	adds	r4, r1, r3
 8001e26:	50cd      	str	r5, [r1, r3]
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f000 fd56 	bl	80028da <__malloc_unlock>
 8001e2e:	f104 000b 	add.w	r0, r4, #11
 8001e32:	1d23      	adds	r3, r4, #4
 8001e34:	f020 0007 	bic.w	r0, r0, #7
 8001e38:	1ac3      	subs	r3, r0, r3
 8001e3a:	d0d3      	beq.n	8001de4 <_malloc_r+0x20>
 8001e3c:	425a      	negs	r2, r3
 8001e3e:	50e2      	str	r2, [r4, r3]
 8001e40:	e7d0      	b.n	8001de4 <_malloc_r+0x20>
 8001e42:	684b      	ldr	r3, [r1, #4]
 8001e44:	428c      	cmp	r4, r1
 8001e46:	bf16      	itet	ne
 8001e48:	6063      	strne	r3, [r4, #4]
 8001e4a:	6013      	streq	r3, [r2, #0]
 8001e4c:	460c      	movne	r4, r1
 8001e4e:	e7eb      	b.n	8001e28 <_malloc_r+0x64>
 8001e50:	460c      	mov	r4, r1
 8001e52:	6849      	ldr	r1, [r1, #4]
 8001e54:	e7cc      	b.n	8001df0 <_malloc_r+0x2c>
 8001e56:	1cc4      	adds	r4, r0, #3
 8001e58:	f024 0403 	bic.w	r4, r4, #3
 8001e5c:	42a0      	cmp	r0, r4
 8001e5e:	d005      	beq.n	8001e6c <_malloc_r+0xa8>
 8001e60:	1a21      	subs	r1, r4, r0
 8001e62:	4630      	mov	r0, r6
 8001e64:	f000 face 	bl	8002404 <_sbrk_r>
 8001e68:	3001      	adds	r0, #1
 8001e6a:	d0cf      	beq.n	8001e0c <_malloc_r+0x48>
 8001e6c:	6025      	str	r5, [r4, #0]
 8001e6e:	e7db      	b.n	8001e28 <_malloc_r+0x64>
 8001e70:	200000a0 	.word	0x200000a0
 8001e74:	200000a4 	.word	0x200000a4

08001e78 <__sfputc_r>:
 8001e78:	6893      	ldr	r3, [r2, #8]
 8001e7a:	b410      	push	{r4}
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	6093      	str	r3, [r2, #8]
 8001e82:	da07      	bge.n	8001e94 <__sfputc_r+0x1c>
 8001e84:	6994      	ldr	r4, [r2, #24]
 8001e86:	42a3      	cmp	r3, r4
 8001e88:	db01      	blt.n	8001e8e <__sfputc_r+0x16>
 8001e8a:	290a      	cmp	r1, #10
 8001e8c:	d102      	bne.n	8001e94 <__sfputc_r+0x1c>
 8001e8e:	bc10      	pop	{r4}
 8001e90:	f000 bb0c 	b.w	80024ac <__swbuf_r>
 8001e94:	6813      	ldr	r3, [r2, #0]
 8001e96:	1c58      	adds	r0, r3, #1
 8001e98:	6010      	str	r0, [r2, #0]
 8001e9a:	7019      	strb	r1, [r3, #0]
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	bc10      	pop	{r4}
 8001ea0:	4770      	bx	lr

08001ea2 <__sfputs_r>:
 8001ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea4:	4606      	mov	r6, r0
 8001ea6:	460f      	mov	r7, r1
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	18d5      	adds	r5, r2, r3
 8001eac:	42ac      	cmp	r4, r5
 8001eae:	d101      	bne.n	8001eb4 <__sfputs_r+0x12>
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	e007      	b.n	8001ec4 <__sfputs_r+0x22>
 8001eb4:	463a      	mov	r2, r7
 8001eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f7ff ffdc 	bl	8001e78 <__sfputc_r>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d1f3      	bne.n	8001eac <__sfputs_r+0xa>
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ec8 <_vfiprintf_r>:
 8001ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ecc:	460c      	mov	r4, r1
 8001ece:	b09d      	sub	sp, #116	; 0x74
 8001ed0:	4617      	mov	r7, r2
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4606      	mov	r6, r0
 8001ed6:	b118      	cbz	r0, 8001ee0 <_vfiprintf_r+0x18>
 8001ed8:	6983      	ldr	r3, [r0, #24]
 8001eda:	b90b      	cbnz	r3, 8001ee0 <_vfiprintf_r+0x18>
 8001edc:	f7ff fee8 	bl	8001cb0 <__sinit>
 8001ee0:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <_vfiprintf_r+0x20c>)
 8001ee2:	429c      	cmp	r4, r3
 8001ee4:	d158      	bne.n	8001f98 <_vfiprintf_r+0xd0>
 8001ee6:	6874      	ldr	r4, [r6, #4]
 8001ee8:	89a3      	ldrh	r3, [r4, #12]
 8001eea:	0718      	lsls	r0, r3, #28
 8001eec:	d55e      	bpl.n	8001fac <_vfiprintf_r+0xe4>
 8001eee:	6923      	ldr	r3, [r4, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d05b      	beq.n	8001fac <_vfiprintf_r+0xe4>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef8:	2320      	movs	r3, #32
 8001efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001efe:	2330      	movs	r3, #48	; 0x30
 8001f00:	f04f 0b01 	mov.w	fp, #1
 8001f04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f08:	9503      	str	r5, [sp, #12]
 8001f0a:	46b8      	mov	r8, r7
 8001f0c:	4645      	mov	r5, r8
 8001f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f12:	b10b      	cbz	r3, 8001f18 <_vfiprintf_r+0x50>
 8001f14:	2b25      	cmp	r3, #37	; 0x25
 8001f16:	d154      	bne.n	8001fc2 <_vfiprintf_r+0xfa>
 8001f18:	ebb8 0a07 	subs.w	sl, r8, r7
 8001f1c:	d00b      	beq.n	8001f36 <_vfiprintf_r+0x6e>
 8001f1e:	4653      	mov	r3, sl
 8001f20:	463a      	mov	r2, r7
 8001f22:	4621      	mov	r1, r4
 8001f24:	4630      	mov	r0, r6
 8001f26:	f7ff ffbc 	bl	8001ea2 <__sfputs_r>
 8001f2a:	3001      	adds	r0, #1
 8001f2c:	f000 80c2 	beq.w	80020b4 <_vfiprintf_r+0x1ec>
 8001f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f32:	4453      	add	r3, sl
 8001f34:	9309      	str	r3, [sp, #36]	; 0x24
 8001f36:	f898 3000 	ldrb.w	r3, [r8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80ba 	beq.w	80020b4 <_vfiprintf_r+0x1ec>
 8001f40:	2300      	movs	r3, #0
 8001f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f4a:	9304      	str	r3, [sp, #16]
 8001f4c:	9307      	str	r3, [sp, #28]
 8001f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f52:	931a      	str	r3, [sp, #104]	; 0x68
 8001f54:	46a8      	mov	r8, r5
 8001f56:	2205      	movs	r2, #5
 8001f58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001f5c:	485e      	ldr	r0, [pc, #376]	; (80020d8 <_vfiprintf_r+0x210>)
 8001f5e:	f000 fcad 	bl	80028bc <memchr>
 8001f62:	9b04      	ldr	r3, [sp, #16]
 8001f64:	bb78      	cbnz	r0, 8001fc6 <_vfiprintf_r+0xfe>
 8001f66:	06d9      	lsls	r1, r3, #27
 8001f68:	bf44      	itt	mi
 8001f6a:	2220      	movmi	r2, #32
 8001f6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f70:	071a      	lsls	r2, r3, #28
 8001f72:	bf44      	itt	mi
 8001f74:	222b      	movmi	r2, #43	; 0x2b
 8001f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001f7a:	782a      	ldrb	r2, [r5, #0]
 8001f7c:	2a2a      	cmp	r2, #42	; 0x2a
 8001f7e:	d02a      	beq.n	8001fd6 <_vfiprintf_r+0x10e>
 8001f80:	46a8      	mov	r8, r5
 8001f82:	2000      	movs	r0, #0
 8001f84:	250a      	movs	r5, #10
 8001f86:	9a07      	ldr	r2, [sp, #28]
 8001f88:	4641      	mov	r1, r8
 8001f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f8e:	3b30      	subs	r3, #48	; 0x30
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d969      	bls.n	8002068 <_vfiprintf_r+0x1a0>
 8001f94:	b360      	cbz	r0, 8001ff0 <_vfiprintf_r+0x128>
 8001f96:	e024      	b.n	8001fe2 <_vfiprintf_r+0x11a>
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <_vfiprintf_r+0x214>)
 8001f9a:	429c      	cmp	r4, r3
 8001f9c:	d101      	bne.n	8001fa2 <_vfiprintf_r+0xda>
 8001f9e:	68b4      	ldr	r4, [r6, #8]
 8001fa0:	e7a2      	b.n	8001ee8 <_vfiprintf_r+0x20>
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <_vfiprintf_r+0x218>)
 8001fa4:	429c      	cmp	r4, r3
 8001fa6:	bf08      	it	eq
 8001fa8:	68f4      	ldreq	r4, [r6, #12]
 8001faa:	e79d      	b.n	8001ee8 <_vfiprintf_r+0x20>
 8001fac:	4621      	mov	r1, r4
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f000 fae0 	bl	8002574 <__swsetup_r>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d09d      	beq.n	8001ef4 <_vfiprintf_r+0x2c>
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fbc:	b01d      	add	sp, #116	; 0x74
 8001fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc2:	46a8      	mov	r8, r5
 8001fc4:	e7a2      	b.n	8001f0c <_vfiprintf_r+0x44>
 8001fc6:	4a44      	ldr	r2, [pc, #272]	; (80020d8 <_vfiprintf_r+0x210>)
 8001fc8:	4645      	mov	r5, r8
 8001fca:	1a80      	subs	r0, r0, r2
 8001fcc:	fa0b f000 	lsl.w	r0, fp, r0
 8001fd0:	4318      	orrs	r0, r3
 8001fd2:	9004      	str	r0, [sp, #16]
 8001fd4:	e7be      	b.n	8001f54 <_vfiprintf_r+0x8c>
 8001fd6:	9a03      	ldr	r2, [sp, #12]
 8001fd8:	1d11      	adds	r1, r2, #4
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	9103      	str	r1, [sp, #12]
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	db01      	blt.n	8001fe6 <_vfiprintf_r+0x11e>
 8001fe2:	9207      	str	r2, [sp, #28]
 8001fe4:	e004      	b.n	8001ff0 <_vfiprintf_r+0x128>
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	9207      	str	r2, [sp, #28]
 8001fee:	9304      	str	r3, [sp, #16]
 8001ff0:	f898 3000 	ldrb.w	r3, [r8]
 8001ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ff6:	d10e      	bne.n	8002016 <_vfiprintf_r+0x14e>
 8001ff8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8001ffe:	d138      	bne.n	8002072 <_vfiprintf_r+0x1aa>
 8002000:	9b03      	ldr	r3, [sp, #12]
 8002002:	f108 0802 	add.w	r8, r8, #2
 8002006:	1d1a      	adds	r2, r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	9203      	str	r2, [sp, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	bfb8      	it	lt
 8002010:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002014:	9305      	str	r3, [sp, #20]
 8002016:	4d33      	ldr	r5, [pc, #204]	; (80020e4 <_vfiprintf_r+0x21c>)
 8002018:	2203      	movs	r2, #3
 800201a:	f898 1000 	ldrb.w	r1, [r8]
 800201e:	4628      	mov	r0, r5
 8002020:	f000 fc4c 	bl	80028bc <memchr>
 8002024:	b140      	cbz	r0, 8002038 <_vfiprintf_r+0x170>
 8002026:	2340      	movs	r3, #64	; 0x40
 8002028:	1b40      	subs	r0, r0, r5
 800202a:	fa03 f000 	lsl.w	r0, r3, r0
 800202e:	9b04      	ldr	r3, [sp, #16]
 8002030:	f108 0801 	add.w	r8, r8, #1
 8002034:	4303      	orrs	r3, r0
 8002036:	9304      	str	r3, [sp, #16]
 8002038:	f898 1000 	ldrb.w	r1, [r8]
 800203c:	2206      	movs	r2, #6
 800203e:	482a      	ldr	r0, [pc, #168]	; (80020e8 <_vfiprintf_r+0x220>)
 8002040:	f108 0701 	add.w	r7, r8, #1
 8002044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002048:	f000 fc38 	bl	80028bc <memchr>
 800204c:	2800      	cmp	r0, #0
 800204e:	d037      	beq.n	80020c0 <_vfiprintf_r+0x1f8>
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <_vfiprintf_r+0x224>)
 8002052:	bb1b      	cbnz	r3, 800209c <_vfiprintf_r+0x1d4>
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	3307      	adds	r3, #7
 8002058:	f023 0307 	bic.w	r3, r3, #7
 800205c:	3308      	adds	r3, #8
 800205e:	9303      	str	r3, [sp, #12]
 8002060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002062:	444b      	add	r3, r9
 8002064:	9309      	str	r3, [sp, #36]	; 0x24
 8002066:	e750      	b.n	8001f0a <_vfiprintf_r+0x42>
 8002068:	fb05 3202 	mla	r2, r5, r2, r3
 800206c:	2001      	movs	r0, #1
 800206e:	4688      	mov	r8, r1
 8002070:	e78a      	b.n	8001f88 <_vfiprintf_r+0xc0>
 8002072:	2300      	movs	r3, #0
 8002074:	250a      	movs	r5, #10
 8002076:	4619      	mov	r1, r3
 8002078:	f108 0801 	add.w	r8, r8, #1
 800207c:	9305      	str	r3, [sp, #20]
 800207e:	4640      	mov	r0, r8
 8002080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002084:	3a30      	subs	r2, #48	; 0x30
 8002086:	2a09      	cmp	r2, #9
 8002088:	d903      	bls.n	8002092 <_vfiprintf_r+0x1ca>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0c3      	beq.n	8002016 <_vfiprintf_r+0x14e>
 800208e:	9105      	str	r1, [sp, #20]
 8002090:	e7c1      	b.n	8002016 <_vfiprintf_r+0x14e>
 8002092:	fb05 2101 	mla	r1, r5, r1, r2
 8002096:	2301      	movs	r3, #1
 8002098:	4680      	mov	r8, r0
 800209a:	e7f0      	b.n	800207e <_vfiprintf_r+0x1b6>
 800209c:	ab03      	add	r3, sp, #12
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4622      	mov	r2, r4
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_vfiprintf_r+0x228>)
 80020a4:	a904      	add	r1, sp, #16
 80020a6:	4630      	mov	r0, r6
 80020a8:	f3af 8000 	nop.w
 80020ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80020b0:	4681      	mov	r9, r0
 80020b2:	d1d5      	bne.n	8002060 <_vfiprintf_r+0x198>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	065b      	lsls	r3, r3, #25
 80020b8:	f53f af7e 	bmi.w	8001fb8 <_vfiprintf_r+0xf0>
 80020bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020be:	e77d      	b.n	8001fbc <_vfiprintf_r+0xf4>
 80020c0:	ab03      	add	r3, sp, #12
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	4622      	mov	r2, r4
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <_vfiprintf_r+0x228>)
 80020c8:	a904      	add	r1, sp, #16
 80020ca:	4630      	mov	r0, r6
 80020cc:	f000 f888 	bl	80021e0 <_printf_i>
 80020d0:	e7ec      	b.n	80020ac <_vfiprintf_r+0x1e4>
 80020d2:	bf00      	nop
 80020d4:	08002a50 	.word	0x08002a50
 80020d8:	08002a90 	.word	0x08002a90
 80020dc:	08002a70 	.word	0x08002a70
 80020e0:	08002a30 	.word	0x08002a30
 80020e4:	08002a96 	.word	0x08002a96
 80020e8:	08002a9a 	.word	0x08002a9a
 80020ec:	00000000 	.word	0x00000000
 80020f0:	08001ea3 	.word	0x08001ea3

080020f4 <_printf_common>:
 80020f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f8:	4691      	mov	r9, r2
 80020fa:	461f      	mov	r7, r3
 80020fc:	688a      	ldr	r2, [r1, #8]
 80020fe:	690b      	ldr	r3, [r1, #16]
 8002100:	4606      	mov	r6, r0
 8002102:	4293      	cmp	r3, r2
 8002104:	bfb8      	it	lt
 8002106:	4613      	movlt	r3, r2
 8002108:	f8c9 3000 	str.w	r3, [r9]
 800210c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002110:	460c      	mov	r4, r1
 8002112:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002116:	b112      	cbz	r2, 800211e <_printf_common+0x2a>
 8002118:	3301      	adds	r3, #1
 800211a:	f8c9 3000 	str.w	r3, [r9]
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	0699      	lsls	r1, r3, #26
 8002122:	bf42      	ittt	mi
 8002124:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002128:	3302      	addmi	r3, #2
 800212a:	f8c9 3000 	strmi.w	r3, [r9]
 800212e:	6825      	ldr	r5, [r4, #0]
 8002130:	f015 0506 	ands.w	r5, r5, #6
 8002134:	d107      	bne.n	8002146 <_printf_common+0x52>
 8002136:	f104 0a19 	add.w	sl, r4, #25
 800213a:	68e3      	ldr	r3, [r4, #12]
 800213c:	f8d9 2000 	ldr.w	r2, [r9]
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	42ab      	cmp	r3, r5
 8002144:	dc29      	bgt.n	800219a <_printf_common+0xa6>
 8002146:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800214a:	6822      	ldr	r2, [r4, #0]
 800214c:	3300      	adds	r3, #0
 800214e:	bf18      	it	ne
 8002150:	2301      	movne	r3, #1
 8002152:	0692      	lsls	r2, r2, #26
 8002154:	d42e      	bmi.n	80021b4 <_printf_common+0xc0>
 8002156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800215a:	4639      	mov	r1, r7
 800215c:	4630      	mov	r0, r6
 800215e:	47c0      	blx	r8
 8002160:	3001      	adds	r0, #1
 8002162:	d021      	beq.n	80021a8 <_printf_common+0xb4>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	68e5      	ldr	r5, [r4, #12]
 8002168:	f003 0306 	and.w	r3, r3, #6
 800216c:	2b04      	cmp	r3, #4
 800216e:	bf18      	it	ne
 8002170:	2500      	movne	r5, #0
 8002172:	f8d9 2000 	ldr.w	r2, [r9]
 8002176:	f04f 0900 	mov.w	r9, #0
 800217a:	bf08      	it	eq
 800217c:	1aad      	subeq	r5, r5, r2
 800217e:	68a3      	ldr	r3, [r4, #8]
 8002180:	6922      	ldr	r2, [r4, #16]
 8002182:	bf08      	it	eq
 8002184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002188:	4293      	cmp	r3, r2
 800218a:	bfc4      	itt	gt
 800218c:	1a9b      	subgt	r3, r3, r2
 800218e:	18ed      	addgt	r5, r5, r3
 8002190:	341a      	adds	r4, #26
 8002192:	454d      	cmp	r5, r9
 8002194:	d11a      	bne.n	80021cc <_printf_common+0xd8>
 8002196:	2000      	movs	r0, #0
 8002198:	e008      	b.n	80021ac <_printf_common+0xb8>
 800219a:	2301      	movs	r3, #1
 800219c:	4652      	mov	r2, sl
 800219e:	4639      	mov	r1, r7
 80021a0:	4630      	mov	r0, r6
 80021a2:	47c0      	blx	r8
 80021a4:	3001      	adds	r0, #1
 80021a6:	d103      	bne.n	80021b0 <_printf_common+0xbc>
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b0:	3501      	adds	r5, #1
 80021b2:	e7c2      	b.n	800213a <_printf_common+0x46>
 80021b4:	2030      	movs	r0, #48	; 0x30
 80021b6:	18e1      	adds	r1, r4, r3
 80021b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021c2:	4422      	add	r2, r4
 80021c4:	3302      	adds	r3, #2
 80021c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021ca:	e7c4      	b.n	8002156 <_printf_common+0x62>
 80021cc:	2301      	movs	r3, #1
 80021ce:	4622      	mov	r2, r4
 80021d0:	4639      	mov	r1, r7
 80021d2:	4630      	mov	r0, r6
 80021d4:	47c0      	blx	r8
 80021d6:	3001      	adds	r0, #1
 80021d8:	d0e6      	beq.n	80021a8 <_printf_common+0xb4>
 80021da:	f109 0901 	add.w	r9, r9, #1
 80021de:	e7d8      	b.n	8002192 <_printf_common+0x9e>

080021e0 <_printf_i>:
 80021e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80021e8:	460c      	mov	r4, r1
 80021ea:	7e09      	ldrb	r1, [r1, #24]
 80021ec:	b085      	sub	sp, #20
 80021ee:	296e      	cmp	r1, #110	; 0x6e
 80021f0:	4617      	mov	r7, r2
 80021f2:	4606      	mov	r6, r0
 80021f4:	4698      	mov	r8, r3
 80021f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80021f8:	f000 80b3 	beq.w	8002362 <_printf_i+0x182>
 80021fc:	d822      	bhi.n	8002244 <_printf_i+0x64>
 80021fe:	2963      	cmp	r1, #99	; 0x63
 8002200:	d036      	beq.n	8002270 <_printf_i+0x90>
 8002202:	d80a      	bhi.n	800221a <_printf_i+0x3a>
 8002204:	2900      	cmp	r1, #0
 8002206:	f000 80b9 	beq.w	800237c <_printf_i+0x19c>
 800220a:	2958      	cmp	r1, #88	; 0x58
 800220c:	f000 8083 	beq.w	8002316 <_printf_i+0x136>
 8002210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002214:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002218:	e032      	b.n	8002280 <_printf_i+0xa0>
 800221a:	2964      	cmp	r1, #100	; 0x64
 800221c:	d001      	beq.n	8002222 <_printf_i+0x42>
 800221e:	2969      	cmp	r1, #105	; 0x69
 8002220:	d1f6      	bne.n	8002210 <_printf_i+0x30>
 8002222:	6820      	ldr	r0, [r4, #0]
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	0605      	lsls	r5, r0, #24
 8002228:	f103 0104 	add.w	r1, r3, #4
 800222c:	d52a      	bpl.n	8002284 <_printf_i+0xa4>
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6011      	str	r1, [r2, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da03      	bge.n	800223e <_printf_i+0x5e>
 8002236:	222d      	movs	r2, #45	; 0x2d
 8002238:	425b      	negs	r3, r3
 800223a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800223e:	486f      	ldr	r0, [pc, #444]	; (80023fc <_printf_i+0x21c>)
 8002240:	220a      	movs	r2, #10
 8002242:	e039      	b.n	80022b8 <_printf_i+0xd8>
 8002244:	2973      	cmp	r1, #115	; 0x73
 8002246:	f000 809d 	beq.w	8002384 <_printf_i+0x1a4>
 800224a:	d808      	bhi.n	800225e <_printf_i+0x7e>
 800224c:	296f      	cmp	r1, #111	; 0x6f
 800224e:	d020      	beq.n	8002292 <_printf_i+0xb2>
 8002250:	2970      	cmp	r1, #112	; 0x70
 8002252:	d1dd      	bne.n	8002210 <_printf_i+0x30>
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	6023      	str	r3, [r4, #0]
 800225c:	e003      	b.n	8002266 <_printf_i+0x86>
 800225e:	2975      	cmp	r1, #117	; 0x75
 8002260:	d017      	beq.n	8002292 <_printf_i+0xb2>
 8002262:	2978      	cmp	r1, #120	; 0x78
 8002264:	d1d4      	bne.n	8002210 <_printf_i+0x30>
 8002266:	2378      	movs	r3, #120	; 0x78
 8002268:	4865      	ldr	r0, [pc, #404]	; (8002400 <_printf_i+0x220>)
 800226a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800226e:	e055      	b.n	800231c <_printf_i+0x13c>
 8002270:	6813      	ldr	r3, [r2, #0]
 8002272:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002276:	1d19      	adds	r1, r3, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6011      	str	r1, [r2, #0]
 800227c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002280:	2301      	movs	r3, #1
 8002282:	e08c      	b.n	800239e <_printf_i+0x1be>
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f010 0f40 	tst.w	r0, #64	; 0x40
 800228a:	6011      	str	r1, [r2, #0]
 800228c:	bf18      	it	ne
 800228e:	b21b      	sxthne	r3, r3
 8002290:	e7cf      	b.n	8002232 <_printf_i+0x52>
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	6825      	ldr	r5, [r4, #0]
 8002296:	1d18      	adds	r0, r3, #4
 8002298:	6010      	str	r0, [r2, #0]
 800229a:	0628      	lsls	r0, r5, #24
 800229c:	d501      	bpl.n	80022a2 <_printf_i+0xc2>
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	e002      	b.n	80022a8 <_printf_i+0xc8>
 80022a2:	0668      	lsls	r0, r5, #25
 80022a4:	d5fb      	bpl.n	800229e <_printf_i+0xbe>
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	296f      	cmp	r1, #111	; 0x6f
 80022aa:	bf14      	ite	ne
 80022ac:	220a      	movne	r2, #10
 80022ae:	2208      	moveq	r2, #8
 80022b0:	4852      	ldr	r0, [pc, #328]	; (80023fc <_printf_i+0x21c>)
 80022b2:	2100      	movs	r1, #0
 80022b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022b8:	6865      	ldr	r5, [r4, #4]
 80022ba:	2d00      	cmp	r5, #0
 80022bc:	60a5      	str	r5, [r4, #8]
 80022be:	f2c0 8095 	blt.w	80023ec <_printf_i+0x20c>
 80022c2:	6821      	ldr	r1, [r4, #0]
 80022c4:	f021 0104 	bic.w	r1, r1, #4
 80022c8:	6021      	str	r1, [r4, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d13d      	bne.n	800234a <_printf_i+0x16a>
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	f040 808e 	bne.w	80023f0 <_printf_i+0x210>
 80022d4:	4665      	mov	r5, ip
 80022d6:	2a08      	cmp	r2, #8
 80022d8:	d10b      	bne.n	80022f2 <_printf_i+0x112>
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	07db      	lsls	r3, r3, #31
 80022de:	d508      	bpl.n	80022f2 <_printf_i+0x112>
 80022e0:	6923      	ldr	r3, [r4, #16]
 80022e2:	6862      	ldr	r2, [r4, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	bfde      	ittt	le
 80022e8:	2330      	movle	r3, #48	; 0x30
 80022ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80022f2:	ebac 0305 	sub.w	r3, ip, r5
 80022f6:	6123      	str	r3, [r4, #16]
 80022f8:	f8cd 8000 	str.w	r8, [sp]
 80022fc:	463b      	mov	r3, r7
 80022fe:	aa03      	add	r2, sp, #12
 8002300:	4621      	mov	r1, r4
 8002302:	4630      	mov	r0, r6
 8002304:	f7ff fef6 	bl	80020f4 <_printf_common>
 8002308:	3001      	adds	r0, #1
 800230a:	d14d      	bne.n	80023a8 <_printf_i+0x1c8>
 800230c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002310:	b005      	add	sp, #20
 8002312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002316:	4839      	ldr	r0, [pc, #228]	; (80023fc <_printf_i+0x21c>)
 8002318:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	6821      	ldr	r1, [r4, #0]
 8002320:	1d1d      	adds	r5, r3, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6015      	str	r5, [r2, #0]
 8002326:	060a      	lsls	r2, r1, #24
 8002328:	d50b      	bpl.n	8002342 <_printf_i+0x162>
 800232a:	07ca      	lsls	r2, r1, #31
 800232c:	bf44      	itt	mi
 800232e:	f041 0120 	orrmi.w	r1, r1, #32
 8002332:	6021      	strmi	r1, [r4, #0]
 8002334:	b91b      	cbnz	r3, 800233e <_printf_i+0x15e>
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	f022 0220 	bic.w	r2, r2, #32
 800233c:	6022      	str	r2, [r4, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	e7b7      	b.n	80022b2 <_printf_i+0xd2>
 8002342:	064d      	lsls	r5, r1, #25
 8002344:	bf48      	it	mi
 8002346:	b29b      	uxthmi	r3, r3
 8002348:	e7ef      	b.n	800232a <_printf_i+0x14a>
 800234a:	4665      	mov	r5, ip
 800234c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002350:	fb02 3311 	mls	r3, r2, r1, r3
 8002354:	5cc3      	ldrb	r3, [r0, r3]
 8002356:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800235a:	460b      	mov	r3, r1
 800235c:	2900      	cmp	r1, #0
 800235e:	d1f5      	bne.n	800234c <_printf_i+0x16c>
 8002360:	e7b9      	b.n	80022d6 <_printf_i+0xf6>
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	6825      	ldr	r5, [r4, #0]
 8002366:	1d18      	adds	r0, r3, #4
 8002368:	6961      	ldr	r1, [r4, #20]
 800236a:	6010      	str	r0, [r2, #0]
 800236c:	0628      	lsls	r0, r5, #24
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	d501      	bpl.n	8002376 <_printf_i+0x196>
 8002372:	6019      	str	r1, [r3, #0]
 8002374:	e002      	b.n	800237c <_printf_i+0x19c>
 8002376:	066a      	lsls	r2, r5, #25
 8002378:	d5fb      	bpl.n	8002372 <_printf_i+0x192>
 800237a:	8019      	strh	r1, [r3, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	4665      	mov	r5, ip
 8002380:	6123      	str	r3, [r4, #16]
 8002382:	e7b9      	b.n	80022f8 <_printf_i+0x118>
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	1d19      	adds	r1, r3, #4
 8002388:	6011      	str	r1, [r2, #0]
 800238a:	681d      	ldr	r5, [r3, #0]
 800238c:	6862      	ldr	r2, [r4, #4]
 800238e:	2100      	movs	r1, #0
 8002390:	4628      	mov	r0, r5
 8002392:	f000 fa93 	bl	80028bc <memchr>
 8002396:	b108      	cbz	r0, 800239c <_printf_i+0x1bc>
 8002398:	1b40      	subs	r0, r0, r5
 800239a:	6060      	str	r0, [r4, #4]
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	6123      	str	r3, [r4, #16]
 80023a0:	2300      	movs	r3, #0
 80023a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023a6:	e7a7      	b.n	80022f8 <_printf_i+0x118>
 80023a8:	6923      	ldr	r3, [r4, #16]
 80023aa:	462a      	mov	r2, r5
 80023ac:	4639      	mov	r1, r7
 80023ae:	4630      	mov	r0, r6
 80023b0:	47c0      	blx	r8
 80023b2:	3001      	adds	r0, #1
 80023b4:	d0aa      	beq.n	800230c <_printf_i+0x12c>
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	079b      	lsls	r3, r3, #30
 80023ba:	d413      	bmi.n	80023e4 <_printf_i+0x204>
 80023bc:	68e0      	ldr	r0, [r4, #12]
 80023be:	9b03      	ldr	r3, [sp, #12]
 80023c0:	4298      	cmp	r0, r3
 80023c2:	bfb8      	it	lt
 80023c4:	4618      	movlt	r0, r3
 80023c6:	e7a3      	b.n	8002310 <_printf_i+0x130>
 80023c8:	2301      	movs	r3, #1
 80023ca:	464a      	mov	r2, r9
 80023cc:	4639      	mov	r1, r7
 80023ce:	4630      	mov	r0, r6
 80023d0:	47c0      	blx	r8
 80023d2:	3001      	adds	r0, #1
 80023d4:	d09a      	beq.n	800230c <_printf_i+0x12c>
 80023d6:	3501      	adds	r5, #1
 80023d8:	68e3      	ldr	r3, [r4, #12]
 80023da:	9a03      	ldr	r2, [sp, #12]
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	42ab      	cmp	r3, r5
 80023e0:	dcf2      	bgt.n	80023c8 <_printf_i+0x1e8>
 80023e2:	e7eb      	b.n	80023bc <_printf_i+0x1dc>
 80023e4:	2500      	movs	r5, #0
 80023e6:	f104 0919 	add.w	r9, r4, #25
 80023ea:	e7f5      	b.n	80023d8 <_printf_i+0x1f8>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ac      	bne.n	800234a <_printf_i+0x16a>
 80023f0:	7803      	ldrb	r3, [r0, #0]
 80023f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023fa:	e76c      	b.n	80022d6 <_printf_i+0xf6>
 80023fc:	08002aa1 	.word	0x08002aa1
 8002400:	08002ab2 	.word	0x08002ab2

08002404 <_sbrk_r>:
 8002404:	b538      	push	{r3, r4, r5, lr}
 8002406:	2300      	movs	r3, #0
 8002408:	4c05      	ldr	r4, [pc, #20]	; (8002420 <_sbrk_r+0x1c>)
 800240a:	4605      	mov	r5, r0
 800240c:	4608      	mov	r0, r1
 800240e:	6023      	str	r3, [r4, #0]
 8002410:	f7ff fb3e 	bl	8001a90 <_sbrk>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_sbrk_r+0x1a>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	b103      	cbz	r3, 800241e <_sbrk_r+0x1a>
 800241c:	602b      	str	r3, [r5, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	200000ec 	.word	0x200000ec

08002424 <__sread>:
 8002424:	b510      	push	{r4, lr}
 8002426:	460c      	mov	r4, r1
 8002428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800242c:	f000 faa2 	bl	8002974 <_read_r>
 8002430:	2800      	cmp	r0, #0
 8002432:	bfab      	itete	ge
 8002434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002436:	89a3      	ldrhlt	r3, [r4, #12]
 8002438:	181b      	addge	r3, r3, r0
 800243a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800243e:	bfac      	ite	ge
 8002440:	6563      	strge	r3, [r4, #84]	; 0x54
 8002442:	81a3      	strhlt	r3, [r4, #12]
 8002444:	bd10      	pop	{r4, pc}

08002446 <__swrite>:
 8002446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800244a:	461f      	mov	r7, r3
 800244c:	898b      	ldrh	r3, [r1, #12]
 800244e:	4605      	mov	r5, r0
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	460c      	mov	r4, r1
 8002454:	4616      	mov	r6, r2
 8002456:	d505      	bpl.n	8002464 <__swrite+0x1e>
 8002458:	2302      	movs	r3, #2
 800245a:	2200      	movs	r2, #0
 800245c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002460:	f000 f9b6 	bl	80027d0 <_lseek_r>
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	4632      	mov	r2, r6
 8002468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800246c:	81a3      	strh	r3, [r4, #12]
 800246e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002472:	463b      	mov	r3, r7
 8002474:	4628      	mov	r0, r5
 8002476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800247a:	f000 b869 	b.w	8002550 <_write_r>

0800247e <__sseek>:
 800247e:	b510      	push	{r4, lr}
 8002480:	460c      	mov	r4, r1
 8002482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002486:	f000 f9a3 	bl	80027d0 <_lseek_r>
 800248a:	1c43      	adds	r3, r0, #1
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	bf15      	itete	ne
 8002490:	6560      	strne	r0, [r4, #84]	; 0x54
 8002492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800249a:	81a3      	strheq	r3, [r4, #12]
 800249c:	bf18      	it	ne
 800249e:	81a3      	strhne	r3, [r4, #12]
 80024a0:	bd10      	pop	{r4, pc}

080024a2 <__sclose>:
 80024a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024a6:	f000 b8d3 	b.w	8002650 <_close_r>
	...

080024ac <__swbuf_r>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	460e      	mov	r6, r1
 80024b0:	4614      	mov	r4, r2
 80024b2:	4605      	mov	r5, r0
 80024b4:	b118      	cbz	r0, 80024be <__swbuf_r+0x12>
 80024b6:	6983      	ldr	r3, [r0, #24]
 80024b8:	b90b      	cbnz	r3, 80024be <__swbuf_r+0x12>
 80024ba:	f7ff fbf9 	bl	8001cb0 <__sinit>
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <__swbuf_r+0x98>)
 80024c0:	429c      	cmp	r4, r3
 80024c2:	d12a      	bne.n	800251a <__swbuf_r+0x6e>
 80024c4:	686c      	ldr	r4, [r5, #4]
 80024c6:	69a3      	ldr	r3, [r4, #24]
 80024c8:	60a3      	str	r3, [r4, #8]
 80024ca:	89a3      	ldrh	r3, [r4, #12]
 80024cc:	071a      	lsls	r2, r3, #28
 80024ce:	d52e      	bpl.n	800252e <__swbuf_r+0x82>
 80024d0:	6923      	ldr	r3, [r4, #16]
 80024d2:	b363      	cbz	r3, 800252e <__swbuf_r+0x82>
 80024d4:	6923      	ldr	r3, [r4, #16]
 80024d6:	6820      	ldr	r0, [r4, #0]
 80024d8:	b2f6      	uxtb	r6, r6
 80024da:	1ac0      	subs	r0, r0, r3
 80024dc:	6963      	ldr	r3, [r4, #20]
 80024de:	4637      	mov	r7, r6
 80024e0:	4283      	cmp	r3, r0
 80024e2:	dc04      	bgt.n	80024ee <__swbuf_r+0x42>
 80024e4:	4621      	mov	r1, r4
 80024e6:	4628      	mov	r0, r5
 80024e8:	f000 f948 	bl	800277c <_fflush_r>
 80024ec:	bb28      	cbnz	r0, 800253a <__swbuf_r+0x8e>
 80024ee:	68a3      	ldr	r3, [r4, #8]
 80024f0:	3001      	adds	r0, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	60a3      	str	r3, [r4, #8]
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	6022      	str	r2, [r4, #0]
 80024fc:	701e      	strb	r6, [r3, #0]
 80024fe:	6963      	ldr	r3, [r4, #20]
 8002500:	4283      	cmp	r3, r0
 8002502:	d004      	beq.n	800250e <__swbuf_r+0x62>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	07db      	lsls	r3, r3, #31
 8002508:	d519      	bpl.n	800253e <__swbuf_r+0x92>
 800250a:	2e0a      	cmp	r6, #10
 800250c:	d117      	bne.n	800253e <__swbuf_r+0x92>
 800250e:	4621      	mov	r1, r4
 8002510:	4628      	mov	r0, r5
 8002512:	f000 f933 	bl	800277c <_fflush_r>
 8002516:	b190      	cbz	r0, 800253e <__swbuf_r+0x92>
 8002518:	e00f      	b.n	800253a <__swbuf_r+0x8e>
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <__swbuf_r+0x9c>)
 800251c:	429c      	cmp	r4, r3
 800251e:	d101      	bne.n	8002524 <__swbuf_r+0x78>
 8002520:	68ac      	ldr	r4, [r5, #8]
 8002522:	e7d0      	b.n	80024c6 <__swbuf_r+0x1a>
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <__swbuf_r+0xa0>)
 8002526:	429c      	cmp	r4, r3
 8002528:	bf08      	it	eq
 800252a:	68ec      	ldreq	r4, [r5, #12]
 800252c:	e7cb      	b.n	80024c6 <__swbuf_r+0x1a>
 800252e:	4621      	mov	r1, r4
 8002530:	4628      	mov	r0, r5
 8002532:	f000 f81f 	bl	8002574 <__swsetup_r>
 8002536:	2800      	cmp	r0, #0
 8002538:	d0cc      	beq.n	80024d4 <__swbuf_r+0x28>
 800253a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800253e:	4638      	mov	r0, r7
 8002540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002542:	bf00      	nop
 8002544:	08002a50 	.word	0x08002a50
 8002548:	08002a70 	.word	0x08002a70
 800254c:	08002a30 	.word	0x08002a30

08002550 <_write_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4605      	mov	r5, r0
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	2200      	movs	r2, #0
 800255a:	4c05      	ldr	r4, [pc, #20]	; (8002570 <_write_r+0x20>)
 800255c:	6022      	str	r2, [r4, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	f7ff fa49 	bl	80019f6 <_write>
 8002564:	1c43      	adds	r3, r0, #1
 8002566:	d102      	bne.n	800256e <_write_r+0x1e>
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	b103      	cbz	r3, 800256e <_write_r+0x1e>
 800256c:	602b      	str	r3, [r5, #0]
 800256e:	bd38      	pop	{r3, r4, r5, pc}
 8002570:	200000ec 	.word	0x200000ec

08002574 <__swsetup_r>:
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <__swsetup_r+0xcc>)
 8002576:	b570      	push	{r4, r5, r6, lr}
 8002578:	681d      	ldr	r5, [r3, #0]
 800257a:	4606      	mov	r6, r0
 800257c:	460c      	mov	r4, r1
 800257e:	b125      	cbz	r5, 800258a <__swsetup_r+0x16>
 8002580:	69ab      	ldr	r3, [r5, #24]
 8002582:	b913      	cbnz	r3, 800258a <__swsetup_r+0x16>
 8002584:	4628      	mov	r0, r5
 8002586:	f7ff fb93 	bl	8001cb0 <__sinit>
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <__swsetup_r+0xd0>)
 800258c:	429c      	cmp	r4, r3
 800258e:	d10f      	bne.n	80025b0 <__swsetup_r+0x3c>
 8002590:	686c      	ldr	r4, [r5, #4]
 8002592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002596:	b29a      	uxth	r2, r3
 8002598:	0715      	lsls	r5, r2, #28
 800259a:	d42c      	bmi.n	80025f6 <__swsetup_r+0x82>
 800259c:	06d0      	lsls	r0, r2, #27
 800259e:	d411      	bmi.n	80025c4 <__swsetup_r+0x50>
 80025a0:	2209      	movs	r2, #9
 80025a2:	6032      	str	r2, [r6, #0]
 80025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ae:	e03e      	b.n	800262e <__swsetup_r+0xba>
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <__swsetup_r+0xd4>)
 80025b2:	429c      	cmp	r4, r3
 80025b4:	d101      	bne.n	80025ba <__swsetup_r+0x46>
 80025b6:	68ac      	ldr	r4, [r5, #8]
 80025b8:	e7eb      	b.n	8002592 <__swsetup_r+0x1e>
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <__swsetup_r+0xd8>)
 80025bc:	429c      	cmp	r4, r3
 80025be:	bf08      	it	eq
 80025c0:	68ec      	ldreq	r4, [r5, #12]
 80025c2:	e7e6      	b.n	8002592 <__swsetup_r+0x1e>
 80025c4:	0751      	lsls	r1, r2, #29
 80025c6:	d512      	bpl.n	80025ee <__swsetup_r+0x7a>
 80025c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025ca:	b141      	cbz	r1, 80025de <__swsetup_r+0x6a>
 80025cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025d0:	4299      	cmp	r1, r3
 80025d2:	d002      	beq.n	80025da <__swsetup_r+0x66>
 80025d4:	4630      	mov	r0, r6
 80025d6:	f000 f981 	bl	80028dc <_free_r>
 80025da:	2300      	movs	r3, #0
 80025dc:	6363      	str	r3, [r4, #52]	; 0x34
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025e4:	81a3      	strh	r3, [r4, #12]
 80025e6:	2300      	movs	r3, #0
 80025e8:	6063      	str	r3, [r4, #4]
 80025ea:	6923      	ldr	r3, [r4, #16]
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	89a3      	ldrh	r3, [r4, #12]
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	81a3      	strh	r3, [r4, #12]
 80025f6:	6923      	ldr	r3, [r4, #16]
 80025f8:	b94b      	cbnz	r3, 800260e <__swsetup_r+0x9a>
 80025fa:	89a3      	ldrh	r3, [r4, #12]
 80025fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002604:	d003      	beq.n	800260e <__swsetup_r+0x9a>
 8002606:	4621      	mov	r1, r4
 8002608:	4630      	mov	r0, r6
 800260a:	f000 f917 	bl	800283c <__smakebuf_r>
 800260e:	89a2      	ldrh	r2, [r4, #12]
 8002610:	f012 0301 	ands.w	r3, r2, #1
 8002614:	d00c      	beq.n	8002630 <__swsetup_r+0xbc>
 8002616:	2300      	movs	r3, #0
 8002618:	60a3      	str	r3, [r4, #8]
 800261a:	6963      	ldr	r3, [r4, #20]
 800261c:	425b      	negs	r3, r3
 800261e:	61a3      	str	r3, [r4, #24]
 8002620:	6923      	ldr	r3, [r4, #16]
 8002622:	b953      	cbnz	r3, 800263a <__swsetup_r+0xc6>
 8002624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002628:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800262c:	d1ba      	bne.n	80025a4 <__swsetup_r+0x30>
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	0792      	lsls	r2, r2, #30
 8002632:	bf58      	it	pl
 8002634:	6963      	ldrpl	r3, [r4, #20]
 8002636:	60a3      	str	r3, [r4, #8]
 8002638:	e7f2      	b.n	8002620 <__swsetup_r+0xac>
 800263a:	2000      	movs	r0, #0
 800263c:	e7f7      	b.n	800262e <__swsetup_r+0xba>
 800263e:	bf00      	nop
 8002640:	2000000c 	.word	0x2000000c
 8002644:	08002a50 	.word	0x08002a50
 8002648:	08002a70 	.word	0x08002a70
 800264c:	08002a30 	.word	0x08002a30

08002650 <_close_r>:
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	2300      	movs	r3, #0
 8002654:	4c05      	ldr	r4, [pc, #20]	; (800266c <_close_r+0x1c>)
 8002656:	4605      	mov	r5, r0
 8002658:	4608      	mov	r0, r1
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	f7ff f9e7 	bl	8001a2e <_close>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_close_r+0x1a>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	b103      	cbz	r3, 800266a <_close_r+0x1a>
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	200000ec 	.word	0x200000ec

08002670 <__sflush_r>:
 8002670:	898a      	ldrh	r2, [r1, #12]
 8002672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002676:	4605      	mov	r5, r0
 8002678:	0710      	lsls	r0, r2, #28
 800267a:	460c      	mov	r4, r1
 800267c:	d458      	bmi.n	8002730 <__sflush_r+0xc0>
 800267e:	684b      	ldr	r3, [r1, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	dc05      	bgt.n	8002690 <__sflush_r+0x20>
 8002684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	dc02      	bgt.n	8002690 <__sflush_r+0x20>
 800268a:	2000      	movs	r0, #0
 800268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002692:	2e00      	cmp	r6, #0
 8002694:	d0f9      	beq.n	800268a <__sflush_r+0x1a>
 8002696:	2300      	movs	r3, #0
 8002698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800269c:	682f      	ldr	r7, [r5, #0]
 800269e:	6a21      	ldr	r1, [r4, #32]
 80026a0:	602b      	str	r3, [r5, #0]
 80026a2:	d032      	beq.n	800270a <__sflush_r+0x9a>
 80026a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026a6:	89a3      	ldrh	r3, [r4, #12]
 80026a8:	075a      	lsls	r2, r3, #29
 80026aa:	d505      	bpl.n	80026b8 <__sflush_r+0x48>
 80026ac:	6863      	ldr	r3, [r4, #4]
 80026ae:	1ac0      	subs	r0, r0, r3
 80026b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026b2:	b10b      	cbz	r3, 80026b8 <__sflush_r+0x48>
 80026b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026b6:	1ac0      	subs	r0, r0, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	4602      	mov	r2, r0
 80026bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026be:	6a21      	ldr	r1, [r4, #32]
 80026c0:	4628      	mov	r0, r5
 80026c2:	47b0      	blx	r6
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	89a3      	ldrh	r3, [r4, #12]
 80026c8:	d106      	bne.n	80026d8 <__sflush_r+0x68>
 80026ca:	6829      	ldr	r1, [r5, #0]
 80026cc:	291d      	cmp	r1, #29
 80026ce:	d848      	bhi.n	8002762 <__sflush_r+0xf2>
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <__sflush_r+0x108>)
 80026d2:	40ca      	lsrs	r2, r1
 80026d4:	07d6      	lsls	r6, r2, #31
 80026d6:	d544      	bpl.n	8002762 <__sflush_r+0xf2>
 80026d8:	2200      	movs	r2, #0
 80026da:	6062      	str	r2, [r4, #4]
 80026dc:	6922      	ldr	r2, [r4, #16]
 80026de:	04d9      	lsls	r1, r3, #19
 80026e0:	6022      	str	r2, [r4, #0]
 80026e2:	d504      	bpl.n	80026ee <__sflush_r+0x7e>
 80026e4:	1c42      	adds	r2, r0, #1
 80026e6:	d101      	bne.n	80026ec <__sflush_r+0x7c>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b903      	cbnz	r3, 80026ee <__sflush_r+0x7e>
 80026ec:	6560      	str	r0, [r4, #84]	; 0x54
 80026ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026f0:	602f      	str	r7, [r5, #0]
 80026f2:	2900      	cmp	r1, #0
 80026f4:	d0c9      	beq.n	800268a <__sflush_r+0x1a>
 80026f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026fa:	4299      	cmp	r1, r3
 80026fc:	d002      	beq.n	8002704 <__sflush_r+0x94>
 80026fe:	4628      	mov	r0, r5
 8002700:	f000 f8ec 	bl	80028dc <_free_r>
 8002704:	2000      	movs	r0, #0
 8002706:	6360      	str	r0, [r4, #52]	; 0x34
 8002708:	e7c0      	b.n	800268c <__sflush_r+0x1c>
 800270a:	2301      	movs	r3, #1
 800270c:	4628      	mov	r0, r5
 800270e:	47b0      	blx	r6
 8002710:	1c41      	adds	r1, r0, #1
 8002712:	d1c8      	bne.n	80026a6 <__sflush_r+0x36>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0c5      	beq.n	80026a6 <__sflush_r+0x36>
 800271a:	2b1d      	cmp	r3, #29
 800271c:	d001      	beq.n	8002722 <__sflush_r+0xb2>
 800271e:	2b16      	cmp	r3, #22
 8002720:	d101      	bne.n	8002726 <__sflush_r+0xb6>
 8002722:	602f      	str	r7, [r5, #0]
 8002724:	e7b1      	b.n	800268a <__sflush_r+0x1a>
 8002726:	89a3      	ldrh	r3, [r4, #12]
 8002728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272c:	81a3      	strh	r3, [r4, #12]
 800272e:	e7ad      	b.n	800268c <__sflush_r+0x1c>
 8002730:	690f      	ldr	r7, [r1, #16]
 8002732:	2f00      	cmp	r7, #0
 8002734:	d0a9      	beq.n	800268a <__sflush_r+0x1a>
 8002736:	0793      	lsls	r3, r2, #30
 8002738:	bf18      	it	ne
 800273a:	2300      	movne	r3, #0
 800273c:	680e      	ldr	r6, [r1, #0]
 800273e:	bf08      	it	eq
 8002740:	694b      	ldreq	r3, [r1, #20]
 8002742:	eba6 0807 	sub.w	r8, r6, r7
 8002746:	600f      	str	r7, [r1, #0]
 8002748:	608b      	str	r3, [r1, #8]
 800274a:	f1b8 0f00 	cmp.w	r8, #0
 800274e:	dd9c      	ble.n	800268a <__sflush_r+0x1a>
 8002750:	4643      	mov	r3, r8
 8002752:	463a      	mov	r2, r7
 8002754:	6a21      	ldr	r1, [r4, #32]
 8002756:	4628      	mov	r0, r5
 8002758:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800275a:	47b0      	blx	r6
 800275c:	2800      	cmp	r0, #0
 800275e:	dc06      	bgt.n	800276e <__sflush_r+0xfe>
 8002760:	89a3      	ldrh	r3, [r4, #12]
 8002762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002766:	81a3      	strh	r3, [r4, #12]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	e78e      	b.n	800268c <__sflush_r+0x1c>
 800276e:	4407      	add	r7, r0
 8002770:	eba8 0800 	sub.w	r8, r8, r0
 8002774:	e7e9      	b.n	800274a <__sflush_r+0xda>
 8002776:	bf00      	nop
 8002778:	20400001 	.word	0x20400001

0800277c <_fflush_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	690b      	ldr	r3, [r1, #16]
 8002780:	4605      	mov	r5, r0
 8002782:	460c      	mov	r4, r1
 8002784:	b1db      	cbz	r3, 80027be <_fflush_r+0x42>
 8002786:	b118      	cbz	r0, 8002790 <_fflush_r+0x14>
 8002788:	6983      	ldr	r3, [r0, #24]
 800278a:	b90b      	cbnz	r3, 8002790 <_fflush_r+0x14>
 800278c:	f7ff fa90 	bl	8001cb0 <__sinit>
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <_fflush_r+0x48>)
 8002792:	429c      	cmp	r4, r3
 8002794:	d109      	bne.n	80027aa <_fflush_r+0x2e>
 8002796:	686c      	ldr	r4, [r5, #4]
 8002798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279c:	b17b      	cbz	r3, 80027be <_fflush_r+0x42>
 800279e:	4621      	mov	r1, r4
 80027a0:	4628      	mov	r0, r5
 80027a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027a6:	f7ff bf63 	b.w	8002670 <__sflush_r>
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <_fflush_r+0x4c>)
 80027ac:	429c      	cmp	r4, r3
 80027ae:	d101      	bne.n	80027b4 <_fflush_r+0x38>
 80027b0:	68ac      	ldr	r4, [r5, #8]
 80027b2:	e7f1      	b.n	8002798 <_fflush_r+0x1c>
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <_fflush_r+0x50>)
 80027b6:	429c      	cmp	r4, r3
 80027b8:	bf08      	it	eq
 80027ba:	68ec      	ldreq	r4, [r5, #12]
 80027bc:	e7ec      	b.n	8002798 <_fflush_r+0x1c>
 80027be:	2000      	movs	r0, #0
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
 80027c2:	bf00      	nop
 80027c4:	08002a50 	.word	0x08002a50
 80027c8:	08002a70 	.word	0x08002a70
 80027cc:	08002a30 	.word	0x08002a30

080027d0 <_lseek_r>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	4605      	mov	r5, r0
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	2200      	movs	r2, #0
 80027da:	4c05      	ldr	r4, [pc, #20]	; (80027f0 <_lseek_r+0x20>)
 80027dc:	6022      	str	r2, [r4, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	f7ff f949 	bl	8001a76 <_lseek>
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	d102      	bne.n	80027ee <_lseek_r+0x1e>
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	b103      	cbz	r3, 80027ee <_lseek_r+0x1e>
 80027ec:	602b      	str	r3, [r5, #0]
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
 80027f0:	200000ec 	.word	0x200000ec

080027f4 <__swhatbuf_r>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	460e      	mov	r6, r1
 80027f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027fc:	b096      	sub	sp, #88	; 0x58
 80027fe:	2900      	cmp	r1, #0
 8002800:	4614      	mov	r4, r2
 8002802:	461d      	mov	r5, r3
 8002804:	da07      	bge.n	8002816 <__swhatbuf_r+0x22>
 8002806:	2300      	movs	r3, #0
 8002808:	602b      	str	r3, [r5, #0]
 800280a:	89b3      	ldrh	r3, [r6, #12]
 800280c:	061a      	lsls	r2, r3, #24
 800280e:	d410      	bmi.n	8002832 <__swhatbuf_r+0x3e>
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	e00e      	b.n	8002834 <__swhatbuf_r+0x40>
 8002816:	466a      	mov	r2, sp
 8002818:	f000 f8be 	bl	8002998 <_fstat_r>
 800281c:	2800      	cmp	r0, #0
 800281e:	dbf2      	blt.n	8002806 <__swhatbuf_r+0x12>
 8002820:	9a01      	ldr	r2, [sp, #4]
 8002822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800282a:	425a      	negs	r2, r3
 800282c:	415a      	adcs	r2, r3
 800282e:	602a      	str	r2, [r5, #0]
 8002830:	e7ee      	b.n	8002810 <__swhatbuf_r+0x1c>
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	2000      	movs	r0, #0
 8002836:	6023      	str	r3, [r4, #0]
 8002838:	b016      	add	sp, #88	; 0x58
 800283a:	bd70      	pop	{r4, r5, r6, pc}

0800283c <__smakebuf_r>:
 800283c:	898b      	ldrh	r3, [r1, #12]
 800283e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002840:	079d      	lsls	r5, r3, #30
 8002842:	4606      	mov	r6, r0
 8002844:	460c      	mov	r4, r1
 8002846:	d507      	bpl.n	8002858 <__smakebuf_r+0x1c>
 8002848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	6123      	str	r3, [r4, #16]
 8002850:	2301      	movs	r3, #1
 8002852:	6163      	str	r3, [r4, #20]
 8002854:	b002      	add	sp, #8
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	ab01      	add	r3, sp, #4
 800285a:	466a      	mov	r2, sp
 800285c:	f7ff ffca 	bl	80027f4 <__swhatbuf_r>
 8002860:	9900      	ldr	r1, [sp, #0]
 8002862:	4605      	mov	r5, r0
 8002864:	4630      	mov	r0, r6
 8002866:	f7ff faad 	bl	8001dc4 <_malloc_r>
 800286a:	b948      	cbnz	r0, 8002880 <__smakebuf_r+0x44>
 800286c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002870:	059a      	lsls	r2, r3, #22
 8002872:	d4ef      	bmi.n	8002854 <__smakebuf_r+0x18>
 8002874:	f023 0303 	bic.w	r3, r3, #3
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	81a3      	strh	r3, [r4, #12]
 800287e:	e7e3      	b.n	8002848 <__smakebuf_r+0xc>
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <__smakebuf_r+0x7c>)
 8002882:	62b3      	str	r3, [r6, #40]	; 0x28
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	6020      	str	r0, [r4, #0]
 8002888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288c:	81a3      	strh	r3, [r4, #12]
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	6120      	str	r0, [r4, #16]
 8002892:	6163      	str	r3, [r4, #20]
 8002894:	9b01      	ldr	r3, [sp, #4]
 8002896:	b15b      	cbz	r3, 80028b0 <__smakebuf_r+0x74>
 8002898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800289c:	4630      	mov	r0, r6
 800289e:	f000 f88d 	bl	80029bc <_isatty_r>
 80028a2:	b128      	cbz	r0, 80028b0 <__smakebuf_r+0x74>
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	81a3      	strh	r3, [r4, #12]
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	431d      	orrs	r5, r3
 80028b4:	81a5      	strh	r5, [r4, #12]
 80028b6:	e7cd      	b.n	8002854 <__smakebuf_r+0x18>
 80028b8:	08001c79 	.word	0x08001c79

080028bc <memchr>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	b2c9      	uxtb	r1, r1
 80028c0:	4402      	add	r2, r0
 80028c2:	4290      	cmp	r0, r2
 80028c4:	4603      	mov	r3, r0
 80028c6:	d101      	bne.n	80028cc <memchr+0x10>
 80028c8:	2300      	movs	r3, #0
 80028ca:	e003      	b.n	80028d4 <memchr+0x18>
 80028cc:	781c      	ldrb	r4, [r3, #0]
 80028ce:	3001      	adds	r0, #1
 80028d0:	428c      	cmp	r4, r1
 80028d2:	d1f6      	bne.n	80028c2 <memchr+0x6>
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd10      	pop	{r4, pc}

080028d8 <__malloc_lock>:
 80028d8:	4770      	bx	lr

080028da <__malloc_unlock>:
 80028da:	4770      	bx	lr

080028dc <_free_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	4605      	mov	r5, r0
 80028e0:	2900      	cmp	r1, #0
 80028e2:	d043      	beq.n	800296c <_free_r+0x90>
 80028e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028e8:	1f0c      	subs	r4, r1, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bfb8      	it	lt
 80028ee:	18e4      	addlt	r4, r4, r3
 80028f0:	f7ff fff2 	bl	80028d8 <__malloc_lock>
 80028f4:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <_free_r+0x94>)
 80028f6:	6813      	ldr	r3, [r2, #0]
 80028f8:	4610      	mov	r0, r2
 80028fa:	b933      	cbnz	r3, 800290a <_free_r+0x2e>
 80028fc:	6063      	str	r3, [r4, #4]
 80028fe:	6014      	str	r4, [r2, #0]
 8002900:	4628      	mov	r0, r5
 8002902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002906:	f7ff bfe8 	b.w	80028da <__malloc_unlock>
 800290a:	42a3      	cmp	r3, r4
 800290c:	d90b      	bls.n	8002926 <_free_r+0x4a>
 800290e:	6821      	ldr	r1, [r4, #0]
 8002910:	1862      	adds	r2, r4, r1
 8002912:	4293      	cmp	r3, r2
 8002914:	bf01      	itttt	eq
 8002916:	681a      	ldreq	r2, [r3, #0]
 8002918:	685b      	ldreq	r3, [r3, #4]
 800291a:	1852      	addeq	r2, r2, r1
 800291c:	6022      	streq	r2, [r4, #0]
 800291e:	6063      	str	r3, [r4, #4]
 8002920:	6004      	str	r4, [r0, #0]
 8002922:	e7ed      	b.n	8002900 <_free_r+0x24>
 8002924:	4613      	mov	r3, r2
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	b10a      	cbz	r2, 800292e <_free_r+0x52>
 800292a:	42a2      	cmp	r2, r4
 800292c:	d9fa      	bls.n	8002924 <_free_r+0x48>
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	1858      	adds	r0, r3, r1
 8002932:	42a0      	cmp	r0, r4
 8002934:	d10b      	bne.n	800294e <_free_r+0x72>
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	4401      	add	r1, r0
 800293a:	1858      	adds	r0, r3, r1
 800293c:	4282      	cmp	r2, r0
 800293e:	6019      	str	r1, [r3, #0]
 8002940:	d1de      	bne.n	8002900 <_free_r+0x24>
 8002942:	6810      	ldr	r0, [r2, #0]
 8002944:	6852      	ldr	r2, [r2, #4]
 8002946:	4401      	add	r1, r0
 8002948:	6019      	str	r1, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	e7d8      	b.n	8002900 <_free_r+0x24>
 800294e:	d902      	bls.n	8002956 <_free_r+0x7a>
 8002950:	230c      	movs	r3, #12
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	e7d4      	b.n	8002900 <_free_r+0x24>
 8002956:	6820      	ldr	r0, [r4, #0]
 8002958:	1821      	adds	r1, r4, r0
 800295a:	428a      	cmp	r2, r1
 800295c:	bf01      	itttt	eq
 800295e:	6811      	ldreq	r1, [r2, #0]
 8002960:	6852      	ldreq	r2, [r2, #4]
 8002962:	1809      	addeq	r1, r1, r0
 8002964:	6021      	streq	r1, [r4, #0]
 8002966:	6062      	str	r2, [r4, #4]
 8002968:	605c      	str	r4, [r3, #4]
 800296a:	e7c9      	b.n	8002900 <_free_r+0x24>
 800296c:	bd38      	pop	{r3, r4, r5, pc}
 800296e:	bf00      	nop
 8002970:	200000a0 	.word	0x200000a0

08002974 <_read_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4605      	mov	r5, r0
 8002978:	4608      	mov	r0, r1
 800297a:	4611      	mov	r1, r2
 800297c:	2200      	movs	r2, #0
 800297e:	4c05      	ldr	r4, [pc, #20]	; (8002994 <_read_r+0x20>)
 8002980:	6022      	str	r2, [r4, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f7ff f81a 	bl	80019bc <_read>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_read_r+0x1e>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	b103      	cbz	r3, 8002992 <_read_r+0x1e>
 8002990:	602b      	str	r3, [r5, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	200000ec 	.word	0x200000ec

08002998 <_fstat_r>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	2300      	movs	r3, #0
 800299c:	4c06      	ldr	r4, [pc, #24]	; (80029b8 <_fstat_r+0x20>)
 800299e:	4605      	mov	r5, r0
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	f7ff f84d 	bl	8001a44 <_fstat>
 80029aa:	1c43      	adds	r3, r0, #1
 80029ac:	d102      	bne.n	80029b4 <_fstat_r+0x1c>
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	b103      	cbz	r3, 80029b4 <_fstat_r+0x1c>
 80029b2:	602b      	str	r3, [r5, #0]
 80029b4:	bd38      	pop	{r3, r4, r5, pc}
 80029b6:	bf00      	nop
 80029b8:	200000ec 	.word	0x200000ec

080029bc <_isatty_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	2300      	movs	r3, #0
 80029c0:	4c05      	ldr	r4, [pc, #20]	; (80029d8 <_isatty_r+0x1c>)
 80029c2:	4605      	mov	r5, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	f7ff f84b 	bl	8001a62 <_isatty>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_isatty_r+0x1a>
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_isatty_r+0x1a>
 80029d4:	602b      	str	r3, [r5, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	200000ec 	.word	0x200000ec

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	bf00      	nop
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
