/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.40                          *
*        Compiled Jun 22 2017, 10:13:26                              *
*        (c) 2017 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END
#include "GUI_App.h"
#include "DIALOG.h"
#include "usb_device.h"
#include "math.h"
#include "main.h"
#include "settings.h"
//#include "stm32f4xx_hal.h"
/*********************************************************************
*
*       Defines
*
**********************************************************************
*/

char Value;
#define ID_WINDOW_0  (GUI_ID_USER + 0x00)


// USER START (Optionally insert additional defines)
// USER END

static void drawFloat (int pos_x, int pos_y, float val, const char * s);
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "Window", ID_WINDOW_0, 0, 0, 800, 480, 0, 0x0, 0 },


  // USER START (Optionally insert additional widgets)
  // USER END
};


uint8_t i=0;
int add=1;
int adress[255];
int level = 0;
TS_StateTypeDef TS_State;
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
I2C_HandleTypeDef hi2c2;


DAC_HandleTypeDef hdac;
uint32_t adc1, adc2,avAdc1,lineStart,lineEnd,adc2Last;
uint32_t DMA_buffin[20];
uint32_t DMA_buffer[21];
uint32_t avCH1;
uint32_t maxCH1;


int16_t  sampleBuffer[10];
int16_t  ringBuffer[810];
int sample = 0;
float logLevel;
int startup = 0;
uint16_t samples[250];
uint16_t samples2[250];
int Attack_X =0;
int Attack_Y =0;

uint8_t i2cWrite[4];
uint8_t i2cRead[5];
uint8_t i2cBuf[16];
//uint16_t knob1 = 146;
TS_StateTypeDef TS_State;

int ok = 0;
uint32_t t = 0;
uint32_t q = 0;

uint8_t i2cBuffer1[2];
uint8_t i2cBuffer2[2];
uint8_t i2cBuffer3[2];
uint8_t i2cBuffer4[2];
uint8_t i2cBuffer5[2];
uint8_t i2cBuffer6[2];

uint16_t knob1 = 0;
uint16_t knob2 = 8;
uint16_t knob3 = 16;
uint16_t knob4 = 32;
uint16_t knob5 = 64;
uint16_t knob6 = 128;

int X = 0;
int Y = 0;
int POS_Y=0;

int poti1 = 0;
int poti2 = 0;
int poti3 = 0;
int poti4 = 0;
int poti5 = 0;
int poti6 = 0;

int delay1 = 0;
int delay2 = 0;
int delay3 = 0;
int delay4 = 0;
int delay5 = 0;
int delay6 = 0;

int pots[6];
int poti[6];
int delay[6];
int pox[6]={10,10,10,550,550,550};
int poy[6]={220,400,40,400,40,220};

begin = 0;
/*********************************************************************
*
*       Static code
*
**********************************************************************
*/
/*********************************************************************
*
*       _GetImageById
*/


// USER START (Optionally insert additional static code)






// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  const void * pData;
  WM_HWIN      hItem;
  U32          FileSize;
  int          NCode;
  int          Id;
  // USER START (Optionally insert additional variables)
  // USER END


  switch (pMsg->MsgId) {
  case WM_PAINT:
	  GUI_SetBkColor(GUI_DARKGRAY);
	  GUI_Clear();
    break;
  default:
    WM_DefaultProc(pMsg);
    break;
  }

  if (begin < 5){
  	//GUI_DrawBitmap(&bmsettings, 0, 370);
  	begin = begin+1;
  }




for (int i = 0; i<63;i++){
	samples[i] = (DMA_TRANSFER[i] & 0x000000ffUL);
	}



for (int i = 0; i < 250; i++ ){
	  avCH1 = samples[i]+avCH1;
}
avCH1= avCH1 / 63;


for (int i = 0; i < 63; i++)
 {
   if (samples[i] > maxCH1)
   {
	   maxCH1  = samples[i];
   }
 }


 for(int i=0; i<150;i++){
    ringBuffer[i] = ringBuffer[i+1];
    }


 if (maxCH1<=127){
	 ringBuffer[150] = 127-maxCH1;
 }

 else if (maxCH1 >127){
	 ringBuffer[150] = maxCH1-127;
 }
maxCH1 = 0;

GUI_SetColor( GUI_ORANGE );

	for(int i=0; i<150;i++){
        	 lineStart = 240 - (4*ringBuffer[i]/2);
        	 lineEnd = lineStart + (4*ringBuffer[i]);

        	 GUI_DrawVLine(i+325,lineStart, lineEnd);
         	 }



for(int i = 0; i<6; i++){
	 if(poti[i]!=pots[i]){
		delay[i] = 50;
	 }
	 if (delay[i]>0){
		 delay[i] --;
		 GUI_SetColor(GUI_ORANGE);
	 }
	 else {GUI_SetColor(GUI_LIGHTGRAY);}
	 poti[i] = pots[i];
	 GUI_SetFont(&GUI_FontD36x48);
	 drawFloat(pox[i],poy[i],poti[i], "ms");
}


	  GUI_SetColor(GUI_GRAY);


/*

	  char *A[4];
	  char *B[4];

	  sprintf(A, "%d", adc1);
	  sprintf(B, "%d", adc2);

	  char str[11];

	  strcpy(str, "*");
	  if(adc1<10){strcat(str, "0");}
	  if(adc1<100){strcat(str, "0");}
	  if(adc1<1000){strcat(str, "0");}
	  strcat(str, A);
	  strcat(str, "-");
	  if(adc2<10){strcat(str, "0");}
	  if(adc2<100){strcat(str, "0");}
	  if(adc2<1000){strcat(str, "0");}
	  strcat(str, B);
	  strcat(str, "\r\n");

	  CDC_Transmit_FS(str, 11);

*/









}
WM_MESSAGE mess;

/*

void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len){
Value = &buf;
BSP_LED_Toggle(LED1);
}
*/



void drawFloat (int pos_x, int pos_y, float val, const char * s){

			  GUI_GotoXY(pos_x, pos_y);
	  		  GUI_DispFloatMin(val, 2);


	  		  GUI_SetFont(&GUI_Font32B_1);
	  		  if(val < 10.0 && val >= 0) {GUI_DispStringAt(s, 150+pos_x, 20+pos_y);}
	  		  else if (val >= 10.0 || val<0){GUI_DispStringAt(s, 185+pos_x, 20+pos_y);}


	  	  }

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateWindow
*/
WM_HWIN CreateWindow(void);
WM_HWIN CreateWindow(void) {
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
  WM_Paint(hWin);
  return hWin;
}

// USER START (Optionally insert additional public code)


// USER END

/*************************** End of file ****************************/
