  /**
  ******************************************************************************
  * @file    GUI_App.c
  * @author  MCD Application Team
  * @brief   Simple demo drawing "Hello world"  
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright Â© 2018 STMicroelectronics International N.V. 
  * All rights reserved.</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
#include "GUI_App.h"
#include "GUI.h"
#include "main.h"
#include "DIALOG.h"
#include "usb_device.h"



extern  WM_HWIN CreateWindow(void);



TS_StateTypeDef TS_State;
I2C_HandleTypeDef hi2c2;
UART_HandleTypeDef huart6;

uint8_t level = 0;
uint8_t i2cBuffer[2];
uint16_t Adr[6] = {0,8,16,32,64,128};
uint8_t word;
char array[20];

int start = 0;
int offset = 0;
int intervall = 0;
int counter = 0;

char transmitCDC[4];
uint8_t ReciveCDC;
uint8_t count;

char transmit[10];
//GUI_RECT pRect = {250,100,600,400};
GUI_RECT pRect = {200,0,600,480};
int toggle=0;

void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len){
	 ReciveCDC = &buf;
}

int wait = 0;

void GRAPHICS_MainTask(void) {


	WM_HWIN hWin;
	hWin = CreateWindow();


    while(1)
  {


    	GUI_Delay(10);

    	WM_Invalidate(hWin);

     //WM_InvalidateArea(&pRect);



    	WM_SendMessageNoPara(hWin, WM_PaintWindowAndDescs);
    	HAL_GPIO_TogglePin(GPIOA, LAMP1_Pin);
    	HAL_GPIO_TogglePin(GPIOG, LAMP2_Pin);
    /******************Redraw *************************/
    /****When Interval is reached redraw everything****/

  /**********************************************************/

  /******************** READ TOUCH SCREEN *******************/

         //GUI_Delay(1);
       //GUI_Exec();
    	if (wait >= 10){
      	  BSP_TS_GetState(&TS_State);
      	     if(TS_State.touchDetected == TOUCH_EVENT_PRESS_DOWN)
      		{
      	      X = TS_State.touchX[0];
      		  Y = TS_State.touchY[0];
      		  HAL_GPIO_TogglePin(GPIOG, LAMP4_Pin);
      		}
      	     wait = 0;
    	}
wait++;



   /**********************************************************/

   /******************** READ ENCODER ***********************/


    	     for (int i=0; i<6; i++){
            	 i2cBuffer[0]= 0x0B;
            	 HAL_I2C_Master_Transmit(&hi2c2, Adr[i],i2cBuffer,1,10);
            	 HAL_I2C_Master_Receive(&hi2c2, Adr[i], &i2cBuffer[1],1,10);
            	 pots[i]=i2cBuffer[1];
    	     }
    	     level=pots[0];
   /**********************************************************/

   /************** Panning Action TouchScreen ****************/
    	     left = (X/2) - 200;
    	     if (left <=1){left = 0;}
    	     if (left >= 254){left = 254;}

    	     right = 200 - (X/2);
    	     if (right <=1){right = 0;}
    	     if (right >= 254){right = 254;}
  /**********************************************************/


  /************ Transmit data to AnalogEngine****************/
    		 transmit[0]=0xFF;
    		 transmit[1]=left;
    		 transmit[2]=pots[1];
    		 transmit[3]=pots[2];
    		 transmit[4]=pots[3];
    		 transmit[5]=pots[4];
    		 transmit[6]=right;
    		 transmit[7]=0x01;
    		 transmit[8]=0x02;
    		 transmit[9]=0x03;

    	      HAL_UART_Transmit(&huart6, transmit , 10, 1);

  /**********************************************************/

  /***************** Sort Incoming data ********************/

    	     int start = 0;
    	     int offset = 0;
    	     char incommingData[10];
    	     for(int i = 0; i<10;i++){
    	    	 if (UART_RECIVE[i] == 0xFF){
    	    		   start = i; //found start index @start
    	    		   break;
    	    	 }
    	     }

    	     if (start == 0){
    	    	 for (int i = 0; i< 10;i++){
    	    	      incommingData[i] = UART_RECIVE[i];
    	    	 }
    	     }
    	     else if (start != 0){
        	     for (int i = 0; i< 10;i++){
        	    	 incommingData[i] = UART_RECIVE[i+start];
        	    	 offset = i+1;
        	    	 if (i+start == 9){
        	    		 break;
        	    	 }
        	     }
        	     for (int i = 0; i< 10;i++){
        	    	 incommingData[i+offset] = UART_RECIVE[i];
        	    	 if (i+offset == 9){
        	    		 break;
        	    	 }
        	     }
    	     }
   /**********************************************************/



    	     watchdog = incommingData[1];
    	     adc1 = incommingData[3];
    	     adc2 = incommingData[4];

    	     count++;

    	     transmitCDC[0]=count;
    	     transmitCDC[1]=adc1;
    	     transmitCDC[2]=adc2;
    	     transmitCDC[3]='\r';
    	     transmitCDC[4]='\n';

    	     /*
				adc1 = counter;
				counter ++;
				if (counter >= 100){
					counter = 0;
				}
    	      */
	// CDC_Transmit_FS("HALLO DIES IST EIN STRING TEST\r\n", 32);


    	     //pots[5]=ReciveCDC;

  }
/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
}
}

/*************************** End of file ****************************/


