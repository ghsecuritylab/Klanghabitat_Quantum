  /**
  ******************************************************************************
  * @file    GUI_App.c
  * @author  MCD Application Team
  * @brief   Simple demo drawing "Hello world"  
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright Â© 2018 STMicroelectronics International N.V. 
  * All rights reserved.</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
#include "GUI_App.h"
#include "GUI.h"
#include "usbd_cdc_if.h"

#include "DIALOG.h"

char Value;
#define ID_WINDOW_0  (GUI_ID_USER + 0x00)
#define ID_BUTTON_0  (GUI_ID_USER + 0x04)
#define ID_BUTTON_1  (GUI_ID_USER + 0x05)
#define ID_BUTTON_2  (GUI_ID_USER + 0x06)
#define ID_BUTTON_3  (GUI_ID_USER + 0x07)
#define ID_TEXT_0  (GUI_ID_USER + 0x08)
#define ID_PROG_0  (GUI_ID_USER + 0x09)

#define ID_IMAGE_0_IMAGE_0  0x00
#define ID_IMAGE_1_IMAGE_0  0x01
#define ID_IMAGE_2_IMAGE_0  0x02


char Value;

void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len){
Value = &buf;
BSP_LED_Toggle(LED1);
}



void GRAPHICS_MainTask(void) {
  /* 2- Create a Window using GUIBuilder */
  //CreateWindow();
/* USER CODE BEGIN GRAPHICS_MainTask */
 /* User can implement his graphic application here */
  /* Hello Word example */

  static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
    { WINDOW_CreateIndirect, "Window", ID_WINDOW_0, 0, 0, 800, 480, 0, 0x0, 0 },
    { BUTTON_CreateIndirect, "Push", ID_BUTTON_0, 600, 0, 200, 120, 0, 0x0, 0 },
    { BUTTON_CreateIndirect, "THE", ID_BUTTON_1, 600, 120, 200, 120, 0, 0x0, 0 },
    { BUTTON_CreateIndirect, "BUT", ID_BUTTON_2, 600, 240, 200, 120, 0, 0x0, 0 },
    { BUTTON_CreateIndirect, "TON", ID_BUTTON_3, 600, 360, 200, 120, 0, 0x0, 0 },
    { TEXT_CreateIndirect, "Text", ID_TEXT_0, 300, 20, 340, 32, 0, 0x64, 0 },
    { PROGBAR_CreateIndirect, "Text", ID_PROG_0, 0, 200, 340, 50, 0, 0x00, 0},
    // USER START (Optionally insert additional widgets)
    // USER END
  };



  static void _cbDialog(WM_MESSAGE * pMsg) {
    const void * pData;
    WM_HWIN      hItem;
    U32          FileSize;
    int          NCode;
    int          Id;
    // USER START (Optionally insert additional variables)
    // USER END



    switch (pMsg->MsgId) {

    case WM_PAINT:


    break;


    case WM_INIT_DIALOG:
      //
      // Initialization of 'Image'
      //
      // Initialization of 'Text'
      //



  	hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
  	BUTTON_SetFont(hItem, GUI_FONT_32B_1);
  	hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
  	BUTTON_SetFont(hItem, GUI_FONT_32B_1);
  	hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
  	BUTTON_SetFont(hItem, GUI_FONT_32B_1);
  	hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
  	BUTTON_SetFont(hItem, GUI_FONT_32B_1);

  	hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
      TEXT_SetText(hItem, "DisplayIntegration");
      TEXT_SetFont(hItem, GUI_FONT_32B_1);
      GUI_AA_SetFactor(10);
      GUI_SetColor(GUI_BLACK);


      // USER START (Optionally insert additional code for further widget initialization)
      // USER END
      break;





    case WM_NOTIFY_PARENT:
      Id    = WM_GetId(pMsg->hWinSrc);
      NCode = pMsg->Data.v;
      switch(Id) {



  	case ID_BUTTON_0: // Notifications sent by 'Button'
  	  switch(NCode) {
  	  case WM_NOTIFICATION_CLICKED:
  		// USER START (Optionally insert code for reacting on notification message)
  		  CDC_Transmit_FS("button_0 clicked\r\n", 18);
  			hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_0);
  			BUTTON_SetPressed(hItem, 1);
  			hItem = WM_GetDialogItem(pMsg->hWin, ID_PROG_0);
  			i=i+1;
  			PROGBAR_SetValue(hItem, i);
  		// USER END
  		break;
  	  case WM_NOTIFICATION_RELEASED:
  		// USER START (Optionally insert code for reacting on notification message)
  		// USER END
  		break;
  	  // USER START (Optionally insert additional code for further notification handling)
  	  // USER END
  	  }
  	  break;

    case ID_BUTTON_1: // Notifications sent by 'Button'
  	switch(NCode) {
  	case WM_NOTIFICATION_CLICKED:
  	  // USER START (Optionally insert code for reacting on notification message)
  	  CDC_Transmit_FS("button_1 clicked\r\n", 18);
  		hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_1);
  		BUTTON_SetPressed(hItem, 1);
  	  // USER END
  	  break;
  	case WM_NOTIFICATION_RELEASED:
  	  // USER START (Optionally insert code for reacting on notification message)
  	  // USER END
  	  break;
  	// USER START (Optionally insert additional code for further notification handling)
  	// USER END
  	}
  	break;

      case ID_BUTTON_2: // Notifications sent by 'Button'
        switch(NCode) {
        case WM_NOTIFICATION_CLICKED:
          // USER START (Optionally insert code for reacting on notification message)
      	  	CDC_Transmit_FS("button_2 clicked\r\n", 18);
  			hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_2);
  			BUTTON_SetPressed(hItem, 1);


          // USER END
          break;
        case WM_NOTIFICATION_RELEASED:
          // USER START (Optionally insert code for reacting on notification message)
          // USER END
          break;
        // USER START (Optionally insert additional code for further notification handling)
        // USER END
        }
        break;

        case ID_BUTTON_3: // Notifications sent by 'Button'
          switch(NCode) {
          case WM_NOTIFICATION_CLICKED:
            // USER START (Optionally insert code for reacting on notification message)
        	  CDC_Transmit_FS("button_3 clicked\r\n", 18);
  			hItem = WM_GetDialogItem(pMsg->hWin, ID_BUTTON_3);
  			BUTTON_SetPressed(hItem, 1);
            // USER END
            break;
          case WM_NOTIFICATION_RELEASED:
            // USER START (Optionally insert code for reacting on notification message)
            // USER END
            break;
          // USER START (Optionally insert additional code for further notification handling)
          // USER END
          }
          break;




      // USER START (Optionally insert additional code for further Ids)
      // USER END
      }
      break;
    // USER START (Optionally insert additional message handling)
    // USER END
    default:
      WM_DefaultProc(pMsg);
      break;
    }





  }




    while(1)
  {
        GUI_Delay(100);

  }
/* USER CODE END GRAPHICS_MainTask */
  while(1)
{
      GUI_Delay(100);
}
}

/*************************** End of file ****************************/
